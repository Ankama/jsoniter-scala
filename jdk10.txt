[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 26, 2018 11:16:28 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:986:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.1-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.1-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/ArrayOfYearMonthsBenchmark.scala:4:19: Unused import
[warn] import java.time.{LocalDate, YearMonth}
[warn]                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("geometry");
[info]       private[this] val r1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d7(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d5(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d13(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d15(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.geoJSONCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e7(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e13(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.geoJSONCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 15 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.1-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:56:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300860.086 ops/s
[info] # Warmup Iteration   2: 672668.567 ops/s
[info] # Warmup Iteration   3: 673417.498 ops/s
[info] Iteration   1: 676608.198 ops/s
[info]                  ·gc.alloc.rate:                                  1798.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3934.256 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.297 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 685744.593 ops/s
[info]                  ·gc.alloc.rate:                                  1822.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3906.310 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 691039.428 ops/s
[info]                  ·gc.alloc.rate:                                  1837.108 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4651.781 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 687803.109 ops/s
[info]                  ·gc.alloc.rate:                                  1828.840 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3894.567 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 688161.986 ops/s
[info]                  ·gc.alloc.rate:                                  1829.449 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3892.519 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   685871.463 ±(99.9%) 21223.108 ops/s [Average]
[info]   (min, avg, max) = (676608.198, 685871.463, 691039.428), stdev = 5511.574
[info]   CI (99.9%): [664648.355, 707094.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1823.201 ±(99.9%) 57.379 MB/sec [Average]
[info]   (min, avg, max) = (1798.236, 1823.201, 1837.108), stdev = 14.901
[info]   CI (99.9%): [1765.822, 1880.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4184.001, 4184.001, 4184.001), stdev = 0.001
[info]   CI (99.9%): [4184.000, 4184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.017, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.278 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.041, 0.168), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1767.829 ±(99.9%) 591.537 MB/sec [Average]
[info]   (min, avg, max) = (1690.899, 1767.829, 2042.501), stdev = 153.620
[info]   CI (99.9%): [1176.292, 2359.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4055.887 ±(99.9%) 1284.307 B/op [Average]
[info]   (min, avg, max) = (3892.519, 4055.887, 4651.781), stdev = 333.530
[info]   CI (99.9%): [2771.580, 5340.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.859 ±(99.9%) 16.010 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.859, 9.297), stdev = 4.158
[info]   CI (99.9%): [≈ 0, 17.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:30:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333530.028 ops/s
[info] # Warmup Iteration   2: 1396295.616 ops/s
[info] # Warmup Iteration   3: 1415668.564 ops/s
[info] Iteration   1: 1408020.131 ops/s
[info]                  ·gc.alloc.rate:                   1130.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1125.845 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.745 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 1403207.562 ops/s
[info]                  ·gc.alloc.rate:            1126.733 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1507.780 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 1403750.519 ops/s
[info]                  ·gc.alloc.rate:                                  1127.323 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.157 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.176 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1139.712 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.228 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1406324.419 ops/s
[info]                  ·gc.alloc.rate:                                  1129.244 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1142.864 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1377033.595 ops/s
[info]                  ·gc.alloc.rate:                                  1106.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1556.283 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1399667.245 ±(99.9%) 49296.430 ops/s [Average]
[info]   (min, avg, max) = (1377033.595, 1399667.245, 1408020.131), stdev = 12802.126
[info]   CI (99.9%): [1350370.815, 1448963.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1124.101 ±(99.9%) 39.033 MB/sec [Average]
[info]   (min, avg, max) = (1106.218, 1124.101, 1130.988), stdev = 10.137
[info]   CI (99.9%): [1085.068, 1163.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.261 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.157), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.176), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1150.184 ±(99.9%) 713.692 MB/sec [Average]
[info]   (min, avg, max) = (1007.371, 1150.184, 1362.015), stdev = 185.344
[info]   CI (99.9%): [436.492, 1863.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1294.497 ±(99.9%) 837.938 B/op [Average]
[info]   (min, avg, max) = (1125.845, 1294.497, 1556.283), stdev = 217.610
[info]   CI (99.9%): [456.559, 2132.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.195 ±(99.9%) 8.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.195, 5.228), stdev = 2.278
[info]   CI (99.9%): [≈ 0, 9.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.800, 17.000), stdev = 5.891
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:29:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2381480.042 ops/s
[info] # Warmup Iteration   2: 3246257.144 ops/s
[info] # Warmup Iteration   3: 3342729.846 ops/s
[info] Iteration   1: 3330557.357 ops/s
[info]                  ·gc.alloc.rate:                   220.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        159.282 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.315 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3333057.074 ops/s
[info]                  ·gc.alloc.rate:            220.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159.476 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 3360785.252 ops/s
[info]                  ·gc.alloc.rate:      222.084 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3312757.011 ops/s
[info]                  ·gc.alloc.rate:            218.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 160.137 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3318408.617 ops/s
[info]                  ·gc.alloc.rate:            219.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 159.861 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3331113.062 ±(99.9%) 71596.985 ops/s [Average]
[info]   (min, avg, max) = (3312757.011, 3331113.062, 3360785.252), stdev = 18593.510
[info]   CI (99.9%): [3259516.077, 3402710.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   220.083 ±(99.9%) 4.798 MB/sec [Average]
[info]   (min, avg, max) = (218.863, 220.083, 222.084), stdev = 1.246
[info]   CI (99.9%): [215.285, 224.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.729 ±(99.9%) 580.613 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.729, 337.637), stdev = 150.783
[info]   CI (99.9%): [≈ 0, 850.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   127.751 ±(99.9%) 274.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 127.751, 160.137), stdev = 71.416
[info]   CI (99.9%): [≈ 0, 402.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.063 ±(99.9%) 0.542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.315), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:29:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20009.281 ops/s
[info] # Warmup Iteration   2: 147831.492 ops/s
[info] # Warmup Iteration   3: 151298.324 ops/s
[info] Iteration   1: 152351.605 ops/s
[info]                  ·gc.alloc.rate:                   1275.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.570 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10411.647 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 151487.892 ops/s
[info]                  ·gc.alloc.rate:                   1268.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13965.972 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.445 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 154065.473 ops/s
[info]                  ·gc.alloc.rate:                                  1290.387 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13184.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.447 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13909.334 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 154455.962 ops/s
[info]                  ·gc.alloc.rate:                                  1293.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13184.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13874.668 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 152948.274 ops/s
[info]                  ·gc.alloc.rate:                                  1281.069 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13184.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10508.381 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   153061.841 ±(99.9%) 4694.588 ops/s [Average]
[info]   (min, avg, max) = (151487.892, 153061.841, 154455.962), stdev = 1219.170
[info]   CI (99.9%): [148367.253, 157756.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1281.918 ±(99.9%) 39.478 MB/sec [Average]
[info]   (min, avg, max) = (1268.686, 1281.918, 1293.589), stdev = 10.252
[info]   CI (99.9%): [1242.440, 1321.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13184.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13184.003, 13184.003, 13184.003), stdev = 0.001
[info]   CI (99.9%): [13184.002, 13184.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.142), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.297 ±(99.9%) 2.475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.297, 1.447), stdev = 0.643
[info]   CI (99.9%): [≈ 0, 2.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.064 ±(99.9%) 720.439 MB/sec [Average]
[info]   (min, avg, max) = (1007.570, 1219.064, 1361.379), stdev = 187.096
[info]   CI (99.9%): [498.625, 1939.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12534.000 ±(99.9%) 7292.625 B/op [Average]
[info]   (min, avg, max) = (10411.647, 12534.000, 13965.972), stdev = 1893.872
[info]   CI (99.9%): [5241.376, 19826.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   11.065 ±(99.9%) 81.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.065, 48.445), stdev = 21.107
[info]   CI (99.9%): [≈ 0, 92.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 18.000), stdev = 6.950
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:29:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163913.952 ops/s
[info] # Warmup Iteration   2: 536846.309 ops/s
[info] # Warmup Iteration   3: 538606.510 ops/s
[info] Iteration   1: 545437.941 ops/s
[info]                  ·gc.alloc.rate:                   1641.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              4736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1685.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4863.213 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.611 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 548858.432 ops/s
[info]                  ·gc.alloc.rate:                                  1651.868 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4736.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.208 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3904.557 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 547275.064 ops/s
[info]                  ·gc.alloc.rate:                                  1647.203 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4736.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4894.597 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 553192.260 ops/s
[info]                  ·gc.alloc.rate:            1664.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       4736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4842.331 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 552549.576 ops/s
[info]                  ·gc.alloc.rate:                                  1662.722 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4736.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4847.869 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   549462.654 ±(99.9%) 12884.993 ops/s [Average]
[info]   (min, avg, max) = (545437.941, 549462.654, 553192.260), stdev = 3346.192
[info]   CI (99.9%): [536577.661, 562347.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1653.581 ±(99.9%) 37.887 MB/sec [Average]
[info]   (min, avg, max) = (1641.666, 1653.581, 1664.449), stdev = 9.839
[info]   CI (99.9%): [1615.694, 1691.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4736.001, 4736.001, 4736.001), stdev = 0.001
[info]   CI (99.9%): [4736.001, 4736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.208), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.124 ±(99.9%) 1.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.596), stdev = 0.264
[info]   CI (99.9%): [≈ 0, 1.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1630.762 ±(99.9%) 579.451 MB/sec [Average]
[info]   (min, avg, max) = (1361.869, 1630.762, 1702.364), stdev = 150.482
[info]   CI (99.9%): [1051.311, 2210.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4670.513 ±(99.9%) 1650.634 B/op [Average]
[info]   (min, avg, max) = (3904.557, 4670.513, 4894.597), stdev = 428.664
[info]   CI (99.9%): [3019.880, 6321.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.922 ±(99.9%) 16.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.922, 9.611), stdev = 4.298
[info]   CI (99.9%): [≈ 0, 18.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 18.000), stdev = 6.261
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:28:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_eb209134/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 409700.383 ops/s
[info] # Warmup Iteration   2: 1652572.818 ops/s
[info] # Warmup Iteration   3: 1647880.242 ops/s
[info] Iteration   1: 1669029.535 ops/s
[info]                  ·gc.alloc.rate:            695.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 633.177 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1667724.687 ops/s
[info]                  ·gc.alloc.rate:            695.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 633.687 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1673515.798 ops/s
[info]                  ·gc.alloc.rate:            697.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 631.493 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1629288.680 ops/s
[info]                  ·gc.alloc.rate:            678.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 648.625 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1650906.104 ops/s
[info]                  ·gc.alloc.rate:            688.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 640.129 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1658092.961 ±(99.9%) 70256.585 ops/s [Average]
[info]   (min, avg, max) = (1629288.680, 1658092.961, 1673515.798), stdev = 18245.412
[info]   CI (99.9%): [1587836.376, 1728349.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   691.041 ±(99.9%) 29.384 MB/sec [Average]
[info]   (min, avg, max) = (678.988, 691.041, 697.420), stdev = 7.631
[info]   CI (99.9%): [661.656, 720.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   671.404 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (671.354, 671.404, 671.504), stdev = 0.060
[info]   CI (99.9%): [671.173, 671.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   637.422 ±(99.9%) 27.225 B/op [Average]
[info]   (min, avg, max) = (631.493, 637.422, 648.625), stdev = 7.070
[info]   CI (99.9%): [610.197, 664.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:28:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8013442.848 ops/s
[info] # Warmup Iteration   2: 7100007.845 ops/s
[info] # Warmup Iteration   3: 7277252.429 ops/s
[info] Iteration   1: 7273227.291 ops/s
[info]                  ·gc.alloc.rate:            369.643 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.796 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7138595.272 ops/s
[info]                  ·gc.alloc.rate:            362.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74.168 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7142453.171 ops/s
[info]                  ·gc.alloc.rate:            362.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74.128 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7154829.375 ops/s
[info]                  ·gc.alloc.rate:                   363.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        73.999 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.147 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7132016.855 ops/s
[info]                  ·gc.alloc.rate:            362.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74.378 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   7168224.393 ±(99.9%) 228279.065 ops/s [Average]
[info]   (min, avg, max) = (7132016.855, 7168224.393, 7273227.291), stdev = 59283.348
[info]   CI (99.9%): [6939945.327, 7396503.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   364.322 ±(99.9%) 11.553 MB/sec [Average]
[info]   (min, avg, max) = (362.568, 364.322, 369.643), stdev = 3.000
[info]   CI (99.9%): [352.768, 375.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.495 ±(99.9%) 1.280 MB/sec [Average]
[info]   (min, avg, max) = (336.338, 336.495, 337.089), stdev = 0.332
[info]   CI (99.9%): [335.215, 337.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   73.894 ±(99.9%) 2.421 B/op [Average]
[info]   (min, avg, max) = (72.796, 73.894, 74.378), stdev = 0.629
[info]   CI (99.9%): [71.473, 76.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.029 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.147), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:28:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8463294.328 ops/s
[info] # Warmup Iteration   2: 7469320.610 ops/s
[info] # Warmup Iteration   3: 7362427.725 ops/s
[info] Iteration   1: 7505485.663 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7500171.408 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7151108.221 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7503934.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7515377.435 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   7435215.477 ±(99.9%) 611944.651 ops/s [Average]
[info]   (min, avg, max) = (7151108.221, 7435215.477, 7515377.435), stdev = 158920.082
[info]   CI (99.9%): [6823270.826, 8047160.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:28:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44741.923 ops/s
[info] # Warmup Iteration   2: 288203.249 ops/s
[info] # Warmup Iteration   3: 298840.024 ops/s
[info] Iteration   1: 301037.283 ops/s
[info]                  ·gc.alloc.rate:            974.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5265.778 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 302447.498 ops/s
[info]                  ·gc.alloc.rate:                   979.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3497.599 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 300194.982 ops/s
[info]                  ·gc.alloc.rate:            972.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       5096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5280.581 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 295321.683 ops/s
[info]                  ·gc.alloc.rate:                                  955.968 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.776 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5417.621 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.851 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 291475.362 ops/s
[info]                  ·gc.alloc.rate:                                  943.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5096.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5514.069 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   298095.362 ±(99.9%) 17595.598 ops/s [Average]
[info]   (min, avg, max) = (291475.362, 298095.362, 302447.498), stdev = 4569.521
[info]   CI (99.9%): [280499.763, 315690.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   965.130 ±(99.9%) 56.929 MB/sec [Average]
[info]   (min, avg, max) = (943.797, 965.130, 979.136), stdev = 14.784
[info]   CI (99.9%): [908.201, 1022.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.001, 5096.001, 5096.002), stdev = 0.001
[info]   CI (99.9%): [5096.001, 5096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.191 ±(99.9%) 1.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.191, 0.776), stdev = 0.336
[info]   CI (99.9%): [≈ 0, 1.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   944.796 ±(99.9%) 587.625 MB/sec [Average]
[info]   (min, avg, max) = (672.022, 944.796, 1021.225), stdev = 152.604
[info]   CI (99.9%): [357.170, 1532.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4995.130 ±(99.9%) 3247.539 B/op [Average]
[info]   (min, avg, max) = (3497.599, 4995.130, 5514.069), stdev = 843.376
[info]   CI (99.9%): [1747.591, 8242.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.664 ±(99.9%) 41.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.664, 24.851), stdev = 10.831
[info]   CI (99.9%): [≈ 0, 47.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.600, 13.000), stdev = 4.722
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:27:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 815165.269 ops/s
[info] # Warmup Iteration   2: 1434844.227 ops/s
[info] # Warmup Iteration   3: 1409169.600 ops/s
[info] Iteration   1: 1453535.883 ops/s
[info]                  ·gc.alloc.rate:                                  2245.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.150 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2580.075 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1446694.894 ops/s
[info]                  ·gc.alloc.rate:                                  2235.120 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2592.308 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1444575.360 ops/s
[info]                  ·gc.alloc.rate:                                  2231.867 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2225.194 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 1450265.733 ops/s
[info]                  ·gc.alloc.rate:                                  2241.297 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2585.876 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1427443.360 ops/s
[info]                  ·gc.alloc.rate:            2205.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2251.913 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1444503.046 ±(99.9%) 39015.357 ops/s [Average]
[info]   (min, avg, max) = (1427443.360, 1444503.046, 1453535.883), stdev = 10132.164
[info]   CI (99.9%): [1405487.689, 1483518.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2231.919 ±(99.9%) 59.863 MB/sec [Average]
[info]   (min, avg, max) = (2205.780, 2231.919, 2245.532), stdev = 15.546
[info]   CI (99.9%): [2172.056, 2291.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.033 ±(99.9%) 0.279 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.163), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2246.467 ±(99.9%) 717.811 MB/sec [Average]
[info]   (min, avg, max) = (2042.079, 2246.467, 2383.106), stdev = 186.413
[info]   CI (99.9%): [1528.655, 2964.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2447.073 ±(99.9%) 734.068 B/op [Average]
[info]   (min, avg, max) = (2225.194, 2447.073, 2592.308), stdev = 190.635
[info]   CI (99.9%): [1713.005, 3181.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:27:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.930 ops/s
[info] # Warmup Iteration   2: 8159121.799 ops/s
[info] # Warmup Iteration   3: 9001536.983 ops/s
[info] Iteration   1: 8827653.277 ops/s
[info]                  ·gc.alloc.rate:            1076.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 178.504 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 8834182.057 ops/s
[info]                  ·gc.alloc.rate:            1077.483 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 178.376 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 8788451.529 ops/s
[info]                  ·gc.alloc.rate:                   1072.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1338.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        239.781 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   4: 8648406.680 ops/s
[info]                  ·gc.alloc.rate:                                  1054.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.584 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       185.840 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8800253.004 ops/s
[info]                  ·gc.alloc.rate:            1073.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182.624 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   8779789.309 ±(99.9%) 292019.508 ops/s [Average]
[info]   (min, avg, max) = (8648406.680, 8779789.309, 8834182.057), stdev = 75836.539
[info]   CI (99.9%): [8487769.802, 9071808.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1070.945 ±(99.9%) 35.561 MB/sec [Average]
[info]   (min, avg, max) = (1054.930, 1070.945, 1077.483), stdev = 9.235
[info]   CI (99.9%): [1035.385, 1106.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.117 ±(99.9%) 1.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.584), stdev = 0.261
[info]   CI (99.9%): [≈ 0, 1.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1076.619 ±(99.9%) 565.644 MB/sec [Average]
[info]   (min, avg, max) = (1001.027, 1076.619, 1338.783), stdev = 146.896
[info]   CI (99.9%): [510.975, 1642.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   193.025 ±(99.9%) 101.356 B/op [Average]
[info]   (min, avg, max) = (178.376, 193.025, 239.781), stdev = 26.322
[info]   CI (99.9%): [91.669, 294.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.661), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.239 ±(99.9%) 2.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.239, 1.193), stdev = 0.533
[info]   CI (99.9%): [≈ 0, 2.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 10.400, 18.000), stdev = 7.369
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:27:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 692834.001 ops/s
[info] # Warmup Iteration   2: 2147506.081 ops/s
[info] # Warmup Iteration   3: 2196101.552 ops/s
[info] Iteration   1: 2189940.024 ops/s
[info]                  ·gc.alloc.rate:                   1535.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1208.389 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.351 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 2200886.547 ops/s
[info]                  ·gc.alloc.rate:                                  1543.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       973.719 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2213847.715 ops/s
[info]                  ·gc.alloc.rate:            1553.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1209.998 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2198502.390 ops/s
[info]                  ·gc.alloc.rate:            1542.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 974.731 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2207561.589 ops/s
[info]                  ·gc.alloc.rate:                                  1548.269 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1213.415 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2202147.653 ±(99.9%) 34980.864 ops/s [Average]
[info]   (min, avg, max) = (2189940.024, 2202147.653, 2213847.715), stdev = 9084.419
[info]   CI (99.9%): [2167166.789, 2237128.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1544.638 ±(99.9%) 24.961 MB/sec [Average]
[info]   (min, avg, max) = (1535.876, 1544.638, 1553.068), stdev = 6.482
[info]   CI (99.9%): [1519.676, 1569.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.147), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.021 ±(99.9%) 0.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.105), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1561.643 ±(99.9%) 703.910 MB/sec [Average]
[info]   (min, avg, max) = (1361.519, 1561.643, 1702.181), stdev = 182.803
[info]   CI (99.9%): [857.733, 2265.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1116.050 ±(99.9%) 498.587 B/op [Average]
[info]   (min, avg, max) = (973.719, 1116.050, 1213.415), stdev = 129.482
[info]   CI (99.9%): [617.463, 1614.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.670 ±(99.9%) 5.771 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.670, 3.351), stdev = 1.499
[info]   CI (99.9%): [≈ 0, 6.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 22.000), stdev = 8.173
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:27:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8801484.546 ops/s
[info] # Warmup Iteration   2: 9921635.449 ops/s
[info] # Warmup Iteration   3: 10015310.840 ops/s
[info] Iteration   1: 9926245.007 ops/s
[info]                  ·gc.alloc.rate:            1261.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 213.778 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 9543280.358 ops/s
[info]                  ·gc.alloc.rate:                                  1212.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       223.452 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.549 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 9278996.949 ops/s
[info]                  ·gc.alloc.rate:                                  1179.353 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       173.214 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 8735572.806 ops/s
[info]                  ·gc.alloc.rate:            1110.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 183.988 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 9362898.829 ops/s
[info]                  ·gc.alloc.rate:                                  1189.945 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       228.884 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9369398.790 ±(99.9%) 1667669.641 ops/s [Average]
[info]   (min, avg, max) = (8735572.806, 9369398.790, 9926245.007), stdev = 433088.510
[info]   CI (99.9%): [7701729.149, 11037068.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1190.657 ±(99.9%) 211.249 MB/sec [Average]
[info]   (min, avg, max) = (1110.315, 1190.657, 1261.236), stdev = 54.861
[info]   CI (99.9%): [979.408, 1401.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.021), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.472 ±(99.9%) 703.477 MB/sec [Average]
[info]   (min, avg, max) = (1021.404, 1221.472, 1361.796), stdev = 182.691
[info]   CI (99.9%): [517.995, 1924.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   204.663 ±(99.9%) 95.089 B/op [Average]
[info]   (min, avg, max) = (173.214, 204.663, 228.884), stdev = 24.694
[info]   CI (99.9%): [109.574, 299.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.110 ±(99.9%) 0.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.549), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 10.000), stdev = 3.391
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108368.866 ops/s
[info] # Warmup Iteration   2: 584128.413 ops/s
[info] # Warmup Iteration   3: 607082.447 ops/s
[info] Iteration   1: 603098.260 ops/s
[info]                  ·gc.alloc.rate:                   1550.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3506.263 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.477 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 594498.025 ops/s
[info]                  ·gc.alloc.rate:                                  1528.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.193 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.512 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4495.300 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                10.581 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 611314.146 ops/s
[info]                  ·gc.alloc.rate:                                  1572.228 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3505.412 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 611925.223 ops/s
[info]                  ·gc.alloc.rate:                                  1573.723 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4377.483 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 611457.073 ops/s
[info]                  ·gc.alloc.rate:                                  1572.472 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4380.926 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   606458.545 ±(99.9%) 29375.660 ops/s [Average]
[info]   (min, avg, max) = (594498.025, 606458.545, 611925.223), stdev = 7628.766
[info]   CI (99.9%): [577082.885, 635834.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1559.641 ±(99.9%) 75.591 MB/sec [Average]
[info]   (min, avg, max) = (1528.937, 1559.641, 1573.723), stdev = 19.631
[info]   CI (99.9%): [1484.050, 1635.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.329 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.107 ±(99.9%) 0.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.107, 0.512), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 0.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.256 ±(99.9%) 734.627 MB/sec [Average]
[info]   (min, avg, max) = (1343.298, 1561.256, 1701.814), stdev = 190.780
[info]   CI (99.9%): [826.629, 2295.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4053.077 ±(99.9%) 1932.269 B/op [Average]
[info]   (min, avg, max) = (3505.412, 4053.077, 4495.300), stdev = 501.804
[info]   CI (99.9%): [2120.808, 5985.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.812 ±(99.9%) 17.701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.812, 10.581), stdev = 4.597
[info]   CI (99.9%): [≈ 0, 20.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 19.000), stdev = 6.535
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:27:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 754118.599 ops/s
[info] # Warmup Iteration   2: 1602304.504 ops/s
[info] # Warmup Iteration   3: 1586006.428 ops/s
[info] Iteration   1: 1605455.649 ops/s
[info]                  ·gc.alloc.rate:            1395.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1321.729 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1616824.180 ops/s
[info]                  ·gc.alloc.rate:                                  1405.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1318.920 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.242 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 1605096.320 ops/s
[info]                  ·gc.alloc.rate:                                  1395.570 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1335.120 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1608886.567 ops/s
[info]                  ·gc.alloc.rate:                                  1398.309 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1331.955 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1626949.823 ops/s
[info]                  ·gc.alloc.rate:            1414.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1317.075 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1612642.508 ±(99.9%) 35755.495 ops/s [Average]
[info]   (min, avg, max) = (1605096.320, 1612642.508, 1626949.823), stdev = 9285.589
[info]   CI (99.9%): [1576887.012, 1648398.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1401.842 ±(99.9%) 31.589 MB/sec [Average]
[info]   (min, avg, max) = (1395.448, 1401.842, 1414.700), stdev = 8.204
[info]   CI (99.9%): [1370.253, 1433.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1368.000, 1368.000, 1368.000), stdev = 0.001
[info]   CI (99.9%): [1368.000, 1368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.034), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1357.709 ±(99.9%) 23.551 MB/sec [Average]
[info]   (min, avg, max) = (1348.248, 1357.709, 1362.036), stdev = 6.116
[info]   CI (99.9%): [1334.158, 1381.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1324.960 ±(99.9%) 31.119 B/op [Average]
[info]   (min, avg, max) = (1317.075, 1324.960, 1335.120), stdev = 8.082
[info]   CI (99.9%): [1293.841, 1356.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.648 ±(99.9%) 5.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.648, 3.242), stdev = 1.450
[info]   CI (99.9%): [≈ 0, 6.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 14.000), stdev = 4.980
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:26:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.964 ops/s
[info] # Warmup Iteration   2: 16707268.616 ops/s
[info] # Warmup Iteration   3: 14977172.533 ops/s
[info] Iteration   1: 16655765.905 ops/s
[info]                  ·gc.alloc.rate:            508.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63.073 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 16871173.540 ops/s
[info]                  ·gc.alloc.rate:            514.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62.268 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 17142039.758 ops/s
[info]                  ·gc.alloc.rate:            522.831 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30.642 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 16918326.508 ops/s
[info]                  ·gc.alloc.rate:            516.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62.095 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 17210925.978 ops/s
[info]                  ·gc.alloc.rate:            524.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   16959646.338 ±(99.9%) 857334.649 ops/s [Average]
[info]   (min, avg, max) = (16655765.905, 16959646.338, 17210925.978), stdev = 222647.086
[info]   CI (99.9%): [16102311.689, 17816980.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   517.240 ±(99.9%) 26.128 MB/sec [Average]
[info]   (min, avg, max) = (508.037, 517.240, 524.900), stdev = 6.785
[info]   CI (99.9%): [491.112, 543.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.985 ±(99.9%) 703.880 MB/sec [Average]
[info]   (min, avg, max) = (333.722, 533.985, 667.574), stdev = 182.795
[info]   CI (99.9%): [≈ 0, 1237.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   49.719 ±(99.9%) 67.293 B/op [Average]
[info]   (min, avg, max) = (30.518, 49.719, 63.073), stdev = 17.476
[info]   CI (99.9%): [≈ 0, 117.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 10.000), stdev = 2.302
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:26:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_eb209134/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1230092.115 ops/s
[info] # Warmup Iteration   2: 4670753.430 ops/s
[info] # Warmup Iteration   3: 4685194.095 ops/s
[info] Iteration   1: 4674596.269 ops/s
[info]                  ·gc.alloc.rate:            1283.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 452.131 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4670950.110 ops/s
[info]                  ·gc.alloc.rate:                   1282.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        453.833 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.571 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 4662133.725 ops/s
[info]                  ·gc.alloc.rate:                                  1279.579 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       459.656 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4665524.058 ops/s
[info]                  ·gc.alloc.rate:            1280.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344.495 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 4627683.008 ops/s
[info]                  ·gc.alloc.rate:                                  1269.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       463.071 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4660177.434 ±(99.9%) 72353.552 ops/s [Average]
[info]   (min, avg, max) = (4627683.008, 4660177.434, 4674596.269), stdev = 18789.988
[info]   CI (99.9%): [4587823.882, 4732530.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1279.062 ±(99.9%) 20.467 MB/sec [Average]
[info]   (min, avg, max) = (1269.902, 1279.062, 1283.162), stdev = 5.315
[info]   CI (99.9%): [1258.596, 1299.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1286.761 ±(99.9%) 572.841 MB/sec [Average]
[info]   (min, avg, max) = (1021.057, 1286.761, 1361.496), stdev = 148.765
[info]   CI (99.9%): [713.920, 1859.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   434.637 ±(99.9%) 194.778 B/op [Average]
[info]   (min, avg, max) = (344.495, 434.637, 463.071), stdev = 50.583
[info]   CI (99.9%): [239.860, 629.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.314 ±(99.9%) 2.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.314, 1.571), stdev = 0.703
[info]   CI (99.9%): [≈ 0, 3.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 18.000), stdev = 7.294
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13243391.477 ops/s
[info] # Warmup Iteration   2: 20358774.625 ops/s
[info] # Warmup Iteration   3: 21399394.693 ops/s
[info] Iteration   1: 21477963.428 ops/s
[info]                  ·gc.alloc.rate:            654.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 21034618.692 ops/s
[info]                  ·gc.alloc.rate:            641.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.439 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 21452239.995 ops/s
[info]                  ·gc.alloc.rate:            654.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.362 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 20757019.081 ops/s
[info]                  ·gc.alloc.rate:            633.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51.014 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 20965343.813 ops/s
[info]                  ·gc.alloc.rate:                   639.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        50.506 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21137437.002 ±(99.9%) 1217626.700 ops/s [Average]
[info]   (min, avg, max) = (20757019.081, 21137437.002, 21477963.428), stdev = 316213.787
[info]   CI (99.9%): [19919810.302, 22355063.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   644.674 ±(99.9%) 36.639 MB/sec [Average]
[info]   (min, avg, max) = (633.189, 644.674, 654.866), stdev = 9.515
[info]   CI (99.9%): [608.035, 681.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.954 ±(99.9%) 579.010 MB/sec [Average]
[info]   (min, avg, max) = (336.972, 605.954, 674.162), stdev = 150.367
[info]   CI (99.9%): [26.945, 1184.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   45.204 ±(99.9%) 44.199 B/op [Average]
[info]   (min, avg, max) = (24.699, 45.204, 51.014), stdev = 11.478
[info]   CI (99.9%): [1.005, 89.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.010 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:26:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14607684.760 ops/s
[info] # Warmup Iteration   2: 20877583.406 ops/s
[info] # Warmup Iteration   3: 19717413.818 ops/s
[info] Iteration   1: 20633414.107 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20220162.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20629509.027 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20336422.935 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20628803.835 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   20489662.416 ±(99.9%) 759696.709 ops/s [Average]
[info]   (min, avg, max) = (20220162.177, 20489662.416, 20633414.107), stdev = 197290.823
[info]   CI (99.9%): [19729965.707, 21249359.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:25:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261437.988 ops/s
[info] # Warmup Iteration   2: 1256702.629 ops/s
[info] # Warmup Iteration   3: 1246608.791 ops/s
[info] Iteration   1: 1256597.724 ops/s
[info]                  ·gc.alloc.rate:                                  1845.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2114.956 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.840 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 1290489.798 ops/s
[info]                  ·gc.alloc.rate:                                  1895.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2490.859 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1294251.906 ops/s
[info]                  ·gc.alloc.rate:            1901.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       2312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2069.682 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1279765.803 ops/s
[info]                  ·gc.alloc.rate:                                  1879.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2511.787 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1271461.001 ops/s
[info]                  ·gc.alloc.rate:            1868.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       2312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2106.818 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1278513.246 ±(99.9%) 58484.689 ops/s [Average]
[info]   (min, avg, max) = (1256597.724, 1278513.246, 1294251.906), stdev = 15188.288
[info]   CI (99.9%): [1220028.557, 1336997.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1877.985 ±(99.9%) 85.753 MB/sec [Average]
[info]   (min, avg, max) = (1845.532, 1877.985, 1901.030), stdev = 22.270
[info]   CI (99.9%): [1792.232, 1963.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2312.000, 2312.000, 2312.000), stdev = 0.001
[info]   CI (99.9%): [2312.000, 2312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1835.332 ±(99.9%) 727.146 MB/sec [Average]
[info]   (min, avg, max) = (1688.243, 1835.332, 2042.237), stdev = 188.837
[info]   CI (99.9%): [1108.186, 2562.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2258.820 ±(99.9%) 855.435 B/op [Average]
[info]   (min, avg, max) = (2069.682, 2258.820, 2511.787), stdev = 222.154
[info]   CI (99.9%): [1403.385, 3114.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.168 ±(99.9%) 10.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.168, 5.840), stdev = 2.612
[info]   CI (99.9%): [≈ 0, 11.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 16.000), stdev = 5.320
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:25:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 284409.744 ops/s
[info] # Warmup Iteration   2: 347597.492 ops/s
[info] # Warmup Iteration   3: 350770.948 ops/s
[info] Iteration   1: 353140.428 ops/s
[info]                  ·gc.alloc.rate:                                  1943.818 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.171 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.760 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7585.469 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 354999.824 ops/s
[info]                  ·gc.alloc.rate:                                  1954.323 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9054.698 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 347731.199 ops/s
[info]                  ·gc.alloc.rate:                                  1914.737 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9243.708 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 352442.088 ops/s
[info]                  ·gc.alloc.rate:                                  1939.995 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7600.231 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 351351.469 ops/s
[info]                  ·gc.alloc.rate:                                  1933.817 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9148.409 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   351933.001 ±(99.9%) 10388.851 ops/s [Average]
[info]   (min, avg, max) = (347731.199, 351933.001, 354999.824), stdev = 2697.952
[info]   CI (99.9%): [341544.150, 362321.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1937.338 ±(99.9%) 56.486 MB/sec [Average]
[info]   (min, avg, max) = (1914.737, 1937.338, 1954.323), stdev = 14.669
[info]   CI (99.9%): [1880.853, 1993.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.291 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.036, 0.171), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.158 ±(99.9%) 1.296 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.158, 0.760), stdev = 0.337
[info]   CI (99.9%): [≈ 0, 1.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1906.177 ±(99.9%) 718.337 MB/sec [Average]
[info]   (min, avg, max) = (1701.802, 1906.177, 2042.852), stdev = 186.550
[info]   CI (99.9%): [1187.840, 2624.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8526.503 ±(99.9%) 3292.057 B/op [Average]
[info]   (min, avg, max) = (7585.469, 8526.503, 9243.708), stdev = 854.937
[info]   CI (99.9%): [5234.446, 11818.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 8.000), stdev = 1.342
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:25:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203151.185 ops/s
[info] # Warmup Iteration   2: 410539.684 ops/s
[info] # Warmup Iteration   3: 412300.329 ops/s
[info] Iteration   1: 413656.750 ops/s
[info]                  ·gc.alloc.rate:            551.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1277.379 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 412103.248 ops/s
[info]                  ·gc.alloc.rate:            548.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2564.390 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 409704.559 ops/s
[info]                  ·gc.alloc.rate:                   545.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2582.038 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 404571.239 ops/s
[info]                  ·gc.alloc.rate:            538.950 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1306.091 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 405494.262 ops/s
[info]                  ·gc.alloc.rate:            540.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       2096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2606.205 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   409106.012 ±(99.9%) 15361.583 ops/s [Average]
[info]   (min, avg, max) = (404571.239, 409106.012, 413656.750), stdev = 3989.354
[info]   CI (99.9%): [393744.429, 424467.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   544.904 ±(99.9%) 20.334 MB/sec [Average]
[info]   (min, avg, max) = (538.950, 544.904, 551.014), stdev = 5.281
[info]   CI (99.9%): [524.569, 565.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2096.001, 2096.001, 2096.001), stdev = 0.001
[info]   CI (99.9%): [2096.001, 2096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.368 ±(99.9%) 708.459 MB/sec [Average]
[info]   (min, avg, max) = (335.808, 537.368, 672.128), stdev = 183.985
[info]   CI (99.9%): [≈ 0, 1245.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2067.220 ±(99.9%) 2726.820 B/op [Average]
[info]   (min, avg, max) = (1277.379, 2067.220, 2606.205), stdev = 708.147
[info]   CI (99.9%): [≈ 0, 4794.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.512 ±(99.9%) 4.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 2.559), stdev = 1.144
[info]   CI (99.9%): [≈ 0, 4.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:25:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 926699.900 ops/s
[info] # Warmup Iteration   2: 999001.405 ops/s
[info] # Warmup Iteration   3: 995708.135 ops/s
[info] Iteration   1: 993642.388 ops/s
[info]                  ·gc.alloc.rate:            661.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1067.746 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 998677.083 ops/s
[info]                  ·gc.alloc.rate:            664.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1062.370 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1002813.052 ops/s
[info]                  ·gc.alloc.rate:            667.914 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1058.014 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1002878.538 ops/s
[info]                  ·gc.alloc.rate:            667.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1057.947 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1003212.464 ops/s
[info]                  ·gc.alloc.rate:            668.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1057.591 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1000244.705 ±(99.9%) 15921.971 ops/s [Average]
[info]   (min, avg, max) = (993642.388, 1000244.705, 1003212.464), stdev = 4134.885
[info]   CI (99.9%): [984322.734, 1016166.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   666.072 ±(99.9%) 10.794 MB/sec [Average]
[info]   (min, avg, max) = (661.611, 666.072, 668.027), stdev = 2.803
[info]   CI (99.9%): [655.278, 676.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.155 ±(99.9%) 0.338 MB/sec [Average]
[info]   (min, avg, max) = (674.077, 674.155, 674.296), stdev = 0.088
[info]   CI (99.9%): [673.817, 674.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1060.734 ±(99.9%) 16.882 B/op [Average]
[info]   (min, avg, max) = (1057.591, 1060.734, 1067.746), stdev = 4.384
[info]   CI (99.9%): [1043.851, 1077.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58951.341 ops/s
[info] # Warmup Iteration   2: 93707.917 ops/s
[info] # Warmup Iteration   3: 96819.189 ops/s
[info] Iteration   1: 97281.114 ops/s
[info]                  ·gc.alloc.rate:                                  3367.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55071.929 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 96787.555 ops/s
[info]                  ·gc.alloc.rate:                                  3350.505 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55351.832 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 94936.465 ops/s
[info]                  ·gc.alloc.rate:                                  3287.954 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       50786.173 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 95812.819 ops/s
[info]                  ·gc.alloc.rate:                                  3317.168 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55914.424 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   5: 95900.308 ops/s
[info]                  ·gc.alloc.rate:                                  3320.352 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55863.125 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   96143.652 ±(99.9%) 3515.703 ops/s [Average]
[info]   (min, avg, max) = (94936.465, 96143.652, 97281.114), stdev = 913.017
[info]   CI (99.9%): [92627.950, 99659.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3328.794 ±(99.9%) 119.959 MB/sec [Average]
[info]   (min, avg, max) = (3287.954, 3328.794, 3367.990), stdev = 31.153
[info]   CI (99.9%): [3208.835, 3448.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54496.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54496.004, 54496.004, 54496.005), stdev = 0.001
[info]   CI (99.9%): [54496.004, 54496.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.004, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.059 ±(99.9%) 0.105 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.059, 0.091), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3335.598 ±(99.9%) 584.364 MB/sec [Average]
[info]   (min, avg, max) = (3064.126, 3335.598, 3403.649), stdev = 151.758
[info]   CI (99.9%): [2751.233, 3919.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   54597.497 ±(99.9%) 8316.056 B/op [Average]
[info]   (min, avg, max) = (50786.173, 54597.497, 55914.424), stdev = 2159.653
[info]   CI (99.9%): [46281.440, 62913.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.000, 13.000), stdev = 2.739
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291592.824 ops/s
[info] # Warmup Iteration   2: 392018.760 ops/s
[info] # Warmup Iteration   3: 383707.681 ops/s
[info] Iteration   1: 391777.568 ops/s
[info]                  ·gc.alloc.rate:            607.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2708.213 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 385723.143 ops/s
[info]                  ·gc.alloc.rate:            598.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2750.791 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 385702.909 ops/s
[info]                  ·gc.alloc.rate:                   597.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2748.144 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 390224.073 ops/s
[info]                  ·gc.alloc.rate:            604.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2719.059 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 394273.093 ops/s
[info]                  ·gc.alloc.rate:            611.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       2440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1345.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   389540.157 ±(99.9%) 14557.331 ops/s [Average]
[info]   (min, avg, max) = (385702.909, 389540.157, 394273.093), stdev = 3780.493
[info]   CI (99.9%): [374982.826, 404097.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   603.942 ±(99.9%) 22.659 MB/sec [Average]
[info]   (min, avg, max) = (597.921, 603.942, 611.418), stdev = 5.885
[info]   CI (99.9%): [581.283, 626.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2440.001, 2440.001, 2440.001), stdev = 0.001
[info]   CI (99.9%): [2440.001, 2440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.619 ±(99.9%) 580.023 MB/sec [Average]
[info]   (min, avg, max) = (337.165, 606.619, 674.303), stdev = 150.630
[info]   CI (99.9%): [26.597, 1186.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2454.348 ±(99.9%) 2387.855 B/op [Average]
[info]   (min, avg, max) = (1345.532, 2454.348, 2750.791), stdev = 620.118
[info]   CI (99.9%): [66.492, 4842.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.544 ±(99.9%) 4.681 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.544, 2.718), stdev = 1.216
[info]   CI (99.9%): [≈ 0, 5.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 348760.583 ops/s
[info] # Warmup Iteration   2: 618935.173 ops/s
[info] # Warmup Iteration   3: 620653.745 ops/s
[info] Iteration   1: 624290.797 ops/s
[info]                  ·gc.alloc.rate:            460.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 846.363 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 615192.593 ops/s
[info]                  ·gc.alloc.rate:                   453.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.520 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1717.837 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 621239.560 ops/s
[info]                  ·gc.alloc.rate:            457.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 852.241 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 624036.704 ops/s
[info]                  ·gc.alloc.rate:            459.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 848.417 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 623630.188 ops/s
[info]                  ·gc.alloc.rate:                   459.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1696.271 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   621677.968 ±(99.9%) 14720.086 ops/s [Average]
[info]   (min, avg, max) = (615192.593, 621677.968, 624290.797), stdev = 3822.760
[info]   CI (99.9%): [606957.882, 636398.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   458.219 ±(99.9%) 10.819 MB/sec [Average]
[info]   (min, avg, max) = (453.456, 458.219, 460.142), stdev = 2.810
[info]   CI (99.9%): [447.399, 469.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.458 ±(99.9%) 708.144 MB/sec [Average]
[info]   (min, avg, max) = (335.730, 470.458, 672.306), stdev = 183.903
[info]   CI (99.9%): [≈ 0, 1178.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1192.226 ±(99.9%) 1809.950 B/op [Average]
[info]   (min, avg, max) = (846.363, 1192.226, 1717.837), stdev = 470.038
[info]   CI (99.9%): [≈ 0, 3002.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.267 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.267, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.677 ±(99.9%) 3.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.677, 1.704), stdev = 0.927
[info]   CI (99.9%): [≈ 0, 4.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:24:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2461609.070 ops/s
[info] # Warmup Iteration   2: 2731118.695 ops/s
[info] # Warmup Iteration   3: 2752954.963 ops/s
[info] Iteration   1: 2756622.531 ops/s
[info]                  ·gc.alloc.rate:            1275.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 768.230 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 2732935.519 ops/s
[info]                  ·gc.alloc.rate:                                  1263.946 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       779.535 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.302 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 2689381.635 ops/s
[info]                  ·gc.alloc.rate:                                  1244.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       796.793 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2689892.953 ops/s
[info]                  ·gc.alloc.rate:            1244.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 597.522 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 2696659.907 ops/s
[info]                  ·gc.alloc.rate:                                  1247.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       794.643 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2713098.509 ±(99.9%) 116463.090 ops/s [Average]
[info]   (min, avg, max) = (2689381.635, 2713098.509, 2756622.531), stdev = 30245.095
[info]   CI (99.9%): [2596635.419, 2829561.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1254.951 ±(99.9%) 53.441 MB/sec [Average]
[info]   (min, avg, max) = (1244.212, 1254.951, 1275.003), stdev = 13.878
[info]   CI (99.9%): [1201.510, 1308.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.098), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.056), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1288.690 ±(99.9%) 576.346 MB/sec [Average]
[info]   (min, avg, max) = (1021.214, 1288.690, 1361.877), stdev = 149.675
[info]   CI (99.9%): [712.345, 1865.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   747.345 ±(99.9%) 325.610 B/op [Average]
[info]   (min, avg, max) = (597.522, 747.345, 796.793), stdev = 84.560
[info]   CI (99.9%): [421.734, 1072.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.460 ±(99.9%) 3.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.460, 2.302), stdev = 1.029
[info]   CI (99.9%): [≈ 0, 4.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.438
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:24:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2700791.575 ops/s
[info] # Warmup Iteration   2: 2980901.318 ops/s
[info] # Warmup Iteration   3: 2833541.678 ops/s
[info] Iteration   1: 2997839.355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2996476.166 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2995413.738 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2504352.093 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2997129.808 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2898242.232 ±(99.9%) 847885.187 ops/s [Average]
[info]   (min, avg, max) = (2504352.093, 2898242.232, 2997839.355), stdev = 220193.091
[info]   CI (99.9%): [2050357.045, 3746127.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:24:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310850.925 ops/s
[info] # Warmup Iteration   2: 400891.671 ops/s
[info] # Warmup Iteration   3: 410296.970 ops/s
[info] Iteration   1: 410944.570 ops/s
[info]                  ·gc.alloc.rate:            591.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2576.648 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 409135.912 ops/s
[info]                  ·gc.alloc.rate:            588.452 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2588.108 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 409244.609 ops/s
[info]                  ·gc.alloc.rate:            588.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2587.400 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 412122.384 ops/s
[info]                  ·gc.alloc.rate:            592.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1284.680 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 410296.332 ops/s
[info]                  ·gc.alloc.rate:            590.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2580.837 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   410348.761 ±(99.9%) 4791.549 ops/s [Average]
[info]   (min, avg, max) = (409135.912, 410348.761, 412122.384), stdev = 1244.350
[info]   CI (99.9%): [405557.212, 415140.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   590.244 ±(99.9%) 6.914 MB/sec [Average]
[info]   (min, avg, max) = (588.452, 590.244, 592.814), stdev = 1.796
[info]   CI (99.9%): [583.330, 597.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.469 ±(99.9%) 579.223 MB/sec [Average]
[info]   (min, avg, max) = (336.385, 605.469, 672.798), stdev = 150.422
[info]   CI (99.9%): [26.246, 1184.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2323.535 ±(99.9%) 2236.288 B/op [Average]
[info]   (min, avg, max) = (1284.680, 2323.535, 2588.108), stdev = 580.757
[info]   CI (99.9%): [87.246, 4559.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15653.032 ops/s
[info] # Warmup Iteration   2: 19674.549 ops/s
[info] # Warmup Iteration   3: 19708.150 ops/s
[info] Iteration   1: 19722.903 ops/s
[info]                  ·gc.alloc.rate:            1234.431 MB/sec
[info]                  ·gc.alloc.rate.norm:       98480.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80688.314 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 19687.327 ops/s
[info]                  ·gc.alloc.rate:                                  1232.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.624 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108047.367 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                266.258 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 19733.329 ops/s
[info]                  ·gc.alloc.rate:                                  1235.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.052 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.967 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108586.956 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 20022.897 ops/s
[info]                  ·gc.alloc.rate:                                  1252.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80264.993 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19644.556 ops/s
[info]                  ·gc.alloc.rate:                                  1229.018 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109078.800 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19762.202 ±(99.9%) 576.912 ops/s [Average]
[info]   (min, avg, max) = (19644.556, 19762.202, 20022.897), stdev = 149.822
[info]   CI (99.9%): [19185.291, 20339.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1236.664 ±(99.9%) 35.829 MB/sec [Average]
[info]   (min, avg, max) = (1229.018, 1236.664, 1252.767), stdev = 9.305
[info]   CI (99.9%): [1200.835, 1272.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480.034 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (98480.020, 98480.034, 98480.055), stdev = 0.018
[info]   CI (99.9%): [98479.964, 98480.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.045), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.229 ±(99.9%) 5.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.229, 3.624), stdev = 1.550
[info]   CI (99.9%): [≈ 0, 7.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.461 ±(99.9%) 721.685 MB/sec [Average]
[info]   (min, avg, max) = (1011.414, 1221.461, 1361.746), stdev = 187.419
[info]   CI (99.9%): [499.776, 1943.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   97333.286 ±(99.9%) 59272.889 B/op [Average]
[info]   (min, avg, max) = (80264.993, 97333.286, 109078.800), stdev = 15392.981
[info]   CI (99.9%): [38060.397, 156606.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   53.252 ±(99.9%) 458.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53.252, 266.258), stdev = 119.074
[info]   CI (99.9%): [≈ 0, 511.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 4.123
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18498.303 ops/s
[info] # Warmup Iteration   2: 30317.985 ops/s
[info] # Warmup Iteration   3: 31441.834 ops/s
[info] Iteration   1: 31368.571 ops/s
[info]                  ·gc.alloc.rate:            786.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       39454.974 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50632.435 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 31569.985 ops/s
[info]                  ·gc.alloc.rate:            791.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33540.086 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 31070.444 ops/s
[info]                  ·gc.alloc.rate:            778.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51121.243 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 31551.964 ops/s
[info]                  ·gc.alloc.rate:                   791.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33559.217 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 199.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 31757.910 ops/s
[info]                  ·gc.alloc.rate:                                  796.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33737.712 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31463.775 ±(99.9%) 999.215 ops/s [Average]
[info]   (min, avg, max) = (31070.444, 31463.775, 31757.910), stdev = 259.493
[info]   CI (99.9%): [30464.560, 32462.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   788.790 ±(99.9%) 25.328 MB/sec [Average]
[info]   (min, avg, max) = (778.840, 788.790, 796.218), stdev = 6.577
[info]   CI (99.9%): [763.462, 814.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39455.805 ±(99.9%) 1.790 B/op [Average]
[info]   (min, avg, max) = (39454.974, 39455.805, 39456.014), stdev = 0.465
[info]   CI (99.9%): [39454.016, 39457.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.035 ±(99.9%) 8.910 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.035, 5.174), stdev = 2.314
[info]   CI (99.9%): [≈ 0, 9.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   808.934 ±(99.9%) 703.651 MB/sec [Average]
[info]   (min, avg, max) = (672.832, 808.934, 1009.105), stdev = 182.736
[info]   CI (99.9%): [105.283, 1512.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40518.139 ±(99.9%) 36419.582 B/op [Average]
[info]   (min, avg, max) = (33540.086, 40518.139, 51121.243), stdev = 9458.050
[info]   CI (99.9%): [4098.557, 76937.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   39.872 ±(99.9%) 343.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.872, 199.362), stdev = 89.157
[info]   CI (99.9%): [≈ 0, 383.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 12.000), stdev = 4.087
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:23:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32902.857 ops/s
[info] # Warmup Iteration   2: 36188.652 ops/s
[info] # Warmup Iteration   3: 37400.834 ops/s
[info] Iteration   1: 37466.347 ops/s
[info]                  ·gc.alloc.rate:            503.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14159.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 37423.206 ops/s
[info]                  ·gc.alloc.rate:            502.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28352.007 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 35150.512 ops/s
[info]                  ·gc.alloc.rate:            472.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15092.574 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 37510.485 ops/s
[info]                  ·gc.alloc.rate:            504.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28285.503 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 37599.992 ops/s
[info]                  ·gc.alloc.rate:            505.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14108.904 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   37030.108 ±(99.9%) 4053.816 ops/s [Average]
[info]   (min, avg, max) = (35150.512, 37030.108, 37599.992), stdev = 1052.763
[info]   CI (99.9%): [32976.292, 41083.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   497.470 ±(99.9%) 54.272 MB/sec [Average]
[info]   (min, avg, max) = (472.307, 497.470, 505.069), stdev = 14.094
[info]   CI (99.9%): [443.197, 551.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (21144.011, 21144.011, 21144.012), stdev = 0.001
[info]   CI (99.9%): [21144.010, 21144.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.904 ±(99.9%) 711.089 MB/sec [Average]
[info]   (min, avg, max) = (336.975, 471.904, 674.268), stdev = 184.668
[info]   CI (99.9%): [≈ 0, 1182.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19999.669 ±(99.9%) 29281.767 B/op [Average]
[info]   (min, avg, max) = (14108.904, 19999.669, 28352.007), stdev = 7604.382
[info]   CI (99.9%): [≈ 0, 49281.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:23:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13675.701 ops/s
[info] # Warmup Iteration   2: 24654.491 ops/s
[info] # Warmup Iteration   3: 24822.767 ops/s
[info] Iteration   1: 24904.323 ops/s
[info]                  ·gc.alloc.rate:            1319.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63775.850 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 24888.344 ops/s
[info]                  ·gc.alloc.rate:                                  1318.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.185 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85598.041 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                252.750 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 24958.251 ops/s
[info]                  ·gc.alloc.rate:            1322.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85862.084 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 25206.496 ops/s
[info]                  ·gc.alloc.rate:                                  1335.574 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85010.683 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25239.447 ops/s
[info]                  ·gc.alloc.rate:                                  1337.373 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84899.558 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25039.372 ±(99.9%) 654.578 ops/s [Average]
[info]   (min, avg, max) = (24888.344, 25039.372, 25239.447), stdev = 169.992
[info]   CI (99.9%): [24384.795, 25693.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1326.724 ±(99.9%) 34.758 MB/sec [Average]
[info]   (min, avg, max) = (1318.713, 1326.724, 1337.373), stdev = 9.027
[info]   CI (99.9%): [1291.966, 1361.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.018 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.018, 83400.022), stdev = 0.002
[info]   CI (99.9%): [83400.008, 83400.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.114), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.494 ±(99.9%) 12.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.494, 7.185), stdev = 3.182
[info]   CI (99.9%): [≈ 0, 13.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1289.352 ±(99.9%) 603.484 MB/sec [Average]
[info]   (min, avg, max) = (1009.065, 1289.352, 1361.439), stdev = 156.723
[info]   CI (99.9%): [685.868, 1892.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   81029.243 ±(99.9%) 37171.234 B/op [Average]
[info]   (min, avg, max) = (63775.850, 81029.243, 85862.084), stdev = 9653.251
[info]   CI (99.9%): [43858.009, 118200.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.550 ±(99.9%) 435.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.550, 252.750), stdev = 113.033
[info]   CI (99.9%): [≈ 0, 485.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 4.278
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:23:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17105.679 ops/s
[info] # Warmup Iteration   2: 27397.776 ops/s
[info] # Warmup Iteration   3: 27614.565 ops/s
[info] Iteration   1: 27846.766 ops/s
[info]                  ·gc.alloc.rate:                   1581.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              89408.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76199.836 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 188.241 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 27627.754 ops/s
[info]                  ·gc.alloc.rate:                                  1569.416 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.072 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.565 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.861 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96953.341 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 27873.060 ops/s
[info]                  ·gc.alloc.rate:                                  1583.243 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96097.840 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 28203.088 ops/s
[info]                  ·gc.alloc.rate:                                  1602.028 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75978.920 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 28053.017 ops/s
[info]                  ·gc.alloc.rate:                                  1593.543 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.341 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95484.770 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27920.737 ±(99.9%) 841.003 ops/s [Average]
[info]   (min, avg, max) = (27627.754, 27920.737, 28203.088), stdev = 218.406
[info]   CI (99.9%): [27079.734, 28761.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1585.997 ±(99.9%) 47.724 MB/sec [Average]
[info]   (min, avg, max) = (1569.416, 1585.997, 1602.028), stdev = 12.394
[info]   CI (99.9%): [1538.273, 1633.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89408.026 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (89408.014, 89408.026, 89408.072), stdev = 0.025
[info]   CI (99.9%): [89407.929, 89408.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.429 ±(99.9%) 11.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.429, 6.565), stdev = 2.874
[info]   CI (99.9%): [≈ 0, 12.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1562.981 ±(99.9%) 732.210 MB/sec [Average]
[info]   (min, avg, max) = (1348.084, 1562.981, 1701.861), stdev = 190.153
[info]   CI (99.9%): [830.772, 2295.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   88142.941 ±(99.9%) 42418.614 B/op [Average]
[info]   (min, avg, max) = (75978.920, 88142.941, 96953.341), stdev = 11015.979
[info]   CI (99.9%): [45724.327, 130561.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   37.648 ±(99.9%) 324.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.648, 188.241), stdev = 84.184
[info]   CI (99.9%): [≈ 0, 361.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 14.000), stdev = 4.438
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:23:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10944.855 ops/s
[info] # Warmup Iteration   2: 28027.572 ops/s
[info] # Warmup Iteration   3: 27729.233 ops/s
[info] Iteration   1: 28025.494 ops/s
[info]                  ·gc.alloc.rate:                   1508.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        94301.516 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 261.845 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 28111.816 ops/s
[info]                  ·gc.alloc.rate:                                  1512.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.070 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.322 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76230.237 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 28613.191 ops/s
[info]                  ·gc.alloc.rate:                                  1540.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       93613.043 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 28665.176 ops/s
[info]                  ·gc.alloc.rate:            1542.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       84720.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74757.215 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 28609.979 ops/s
[info]                  ·gc.alloc.rate:                                  1539.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.342 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       93622.857 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28405.131 ±(99.9%) 1191.575 ops/s [Average]
[info]   (min, avg, max) = (28025.494, 28405.131, 28665.176), stdev = 309.448
[info]   CI (99.9%): [27213.556, 29596.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1528.901 ±(99.9%) 63.751 MB/sec [Average]
[info]   (min, avg, max) = (1508.842, 1528.901, 1542.668), stdev = 16.556
[info]   CI (99.9%): [1465.150, 1592.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84720.026 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (84720.014, 84720.026, 84720.070), stdev = 0.025
[info]   CI (99.9%): [84719.930, 84720.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.113), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.368 ±(99.9%) 10.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.368, 6.322), stdev = 2.773
[info]   CI (99.9%): [≈ 0, 12.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1561.125 ±(99.9%) 703.379 MB/sec [Average]
[info]   (min, avg, max) = (1361.255, 1561.125, 1701.805), stdev = 182.665
[info]   CI (99.9%): [857.746, 2264.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   86504.974 ±(99.9%) 38772.899 B/op [Average]
[info]   (min, avg, max) = (74757.215, 86504.974, 94301.516), stdev = 10069.199
[info]   CI (99.9%): [47732.075, 125277.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   52.369 ±(99.9%) 450.912 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.369, 261.845), stdev = 117.101
[info]   CI (99.9%): [≈ 0, 503.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 22.000), stdev = 7.981
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23480.201 ops/s
[info] # Warmup Iteration   2: 30090.908 ops/s
[info] # Warmup Iteration   3: 30161.691 ops/s
[info] Iteration   1: 29947.306 ops/s
[info]                  ·gc.alloc.rate:                                  1545.346 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.408 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88603.674 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                210.044 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 30316.921 ops/s
[info]                  ·gc.alloc.rate:                                  1564.439 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.880 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88355.375 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30443.732 ops/s
[info]                  ·gc.alloc.rate:                                  1571.192 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70389.482 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 30343.870 ops/s
[info]                  ·gc.alloc.rate:                                  1566.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88273.861 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 30346.636 ops/s
[info]                  ·gc.alloc.rate:                                  1565.967 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70614.435 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30279.693 ±(99.9%) 739.122 ops/s [Average]
[info]   (min, avg, max) = (29947.306, 30279.693, 30443.732), stdev = 191.948
[info]   CI (99.9%): [29540.571, 31018.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1562.650 ±(99.9%) 38.505 MB/sec [Average]
[info]   (min, avg, max) = (1545.346, 1562.650, 1571.192), stdev = 10.000
[info]   CI (99.9%): [1524.145, 1601.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.015 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.015, 81224.018), stdev = 0.002
[info]   CI (99.9%): [81224.007, 81224.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.158 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.035, 0.084), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.802 ±(99.9%) 8.282 B/op [Average]
[info]   (min, avg, max) = (0.068, 1.802, 4.408), stdev = 2.151
[info]   CI (99.9%): [≈ 0, 10.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1562.565 ±(99.9%) 707.187 MB/sec [Average]
[info]   (min, avg, max) = (1361.419, 1562.565, 1702.254), stdev = 183.654
[info]   CI (99.9%): [855.379, 2269.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   81247.366 ±(99.9%) 37775.756 B/op [Average]
[info]   (min, avg, max) = (70389.482, 81247.366, 88603.674), stdev = 9810.244
[info]   CI (99.9%): [43471.609, 119023.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   42.009 ±(99.9%) 361.709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.009, 210.044), stdev = 93.935
[info]   CI (99.9%): [≈ 0, 403.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 13.000), stdev = 4.278
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:22:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23157.907 ops/s
[info] # Warmup Iteration   2: 30002.093 ops/s
[info] # Warmup Iteration   3: 30220.852 ops/s
[info] Iteration   1: 30161.512 ops/s
[info]                  ·gc.alloc.rate:                   1497.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70213.263 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 208.554 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 30581.571 ops/s
[info]                  ·gc.alloc.rate:                                  1519.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.186 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.575 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87589.881 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30477.737 ops/s
[info]                  ·gc.alloc.rate:                                  1513.502 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70310.971 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 30718.413 ops/s
[info]                  ·gc.alloc.rate:                                  1526.113 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.403 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87202.151 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 30733.555 ops/s
[info]                  ·gc.alloc.rate:            1526.757 MB/sec
[info]                  ·gc.alloc.rate.norm:       78168.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69727.677 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   30534.558 ±(99.9%) 898.951 ops/s [Average]
[info]   (min, avg, max) = (30161.512, 30534.558, 30733.555), stdev = 233.455
[info]   CI (99.9%): [29635.606, 31433.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1516.669 ±(99.9%) 45.753 MB/sec [Average]
[info]   (min, avg, max) = (1497.767, 1516.669, 1526.757), stdev = 11.882
[info]   CI (99.9%): [1470.916, 1562.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (78168.013, 78168.014, 78168.017), stdev = 0.002
[info]   CI (99.9%): [78168.008, 78168.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.186), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.022 ±(99.9%) 16.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.022, 9.575), stdev = 4.225
[info]   CI (99.9%): [≈ 0, 18.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1494.687 ±(99.9%) 730.612 MB/sec [Average]
[info]   (min, avg, max) = (1345.347, 1494.687, 1702.491), stdev = 189.737
[info]   CI (99.9%): [764.075, 2225.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   77008.789 ±(99.9%) 36526.288 B/op [Average]
[info]   (min, avg, max) = (69727.677, 77008.789, 87589.881), stdev = 9485.761
[info]   CI (99.9%): [40482.501, 113535.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   41.711 ±(99.9%) 359.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.711, 208.554), stdev = 93.268
[info]   CI (99.9%): [≈ 0, 400.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4436.970 ops/s
[info] # Warmup Iteration   2: 7455.229 ops/s
[info] # Warmup Iteration   3: 8024.698 ops/s
[info] Iteration   1: 8005.172 ops/s
[info]                  ·gc.alloc.rate:            1041.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       204656.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 198375.704 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 8025.754 ops/s
[info]                  ·gc.alloc.rate:            1043.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       204656.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197881.495 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 7925.112 ops/s
[info]                  ·gc.alloc.rate:                                  1030.374 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204656.051 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.558 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       267997.348 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                793.674 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        20.000 ms
[info] Iteration   4: 8069.387 ops/s
[info]                  ·gc.alloc.rate:                                  1049.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204656.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       199165.780 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8085.401 ops/s
[info]                  ·gc.alloc.rate:            1051.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       204656.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 198747.157 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8022.165 ±(99.9%) 243.153 ops/s [Average]
[info]   (min, avg, max) = (7925.112, 8022.165, 8085.401), stdev = 63.146
[info]   CI (99.9%): [7779.012, 8265.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1043.138 ±(99.9%) 31.847 MB/sec [Average]
[info]   (min, avg, max) = (1030.374, 1043.138, 1051.393), stdev = 8.271
[info]   CI (99.9%): [1011.291, 1074.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204656.053 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (204656.051, 204656.053, 204656.055), stdev = 0.002
[info]   CI (99.9%): [204656.046, 204656.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.631 ±(99.9%) 14.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.631, 8.596), stdev = 3.875
[info]   CI (99.9%): [≈ 0, 17.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1081.919 ±(99.9%) 575.976 MB/sec [Average]
[info]   (min, avg, max) = (1008.914, 1081.919, 1349.276), stdev = 149.579
[info]   CI (99.9%): [505.943, 1657.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   212433.497 ±(99.9%) 119619.249 B/op [Average]
[info]   (min, avg, max) = (197881.495, 212433.497, 267997.348), stdev = 31064.739
[info]   CI (99.9%): [92814.248, 332052.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   158.735 ±(99.9%) 1366.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 158.735, 793.674), stdev = 354.942
[info]   CI (99.9%): [≈ 0, 1525.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.400, 20.000), stdev = 7.301
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:22:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14059.839 ops/s
[info] # Warmup Iteration   2: 18826.584 ops/s
[info] # Warmup Iteration   3: 18826.156 ops/s
[info] Iteration   1: 18944.803 ops/s
[info]                  ·gc.alloc.rate:                   1471.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              122279.816 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        112001.574 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 276.684 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 19485.321 ops/s
[info]                  ·gc.alloc.rate:                                  1514.069 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122288.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.535 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109974.311 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 19438.864 ops/s
[info]                  ·gc.alloc.rate:                                  1510.413 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122287.999 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       137793.122 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 18920.401 ops/s
[info]                  ·gc.alloc.rate:                                  1469.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122272.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113251.749 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 18908.204 ops/s
[info]                  ·gc.alloc.rate:                                  1468.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             122272.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113329.597 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19139.519 ±(99.9%) 1136.788 ops/s [Average]
[info]   (min, avg, max) = (18908.204, 19139.519, 19485.321), stdev = 295.220
[info]   CI (99.9%): [18002.731, 20276.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1487.004 ±(99.9%) 88.957 MB/sec [Average]
[info]   (min, avg, max) = (1468.781, 1487.004, 1514.069), stdev = 23.102
[info]   CI (99.9%): [1398.047, 1575.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122279.976 ±(99.9%) 30.785 B/op [Average]
[info]   (min, avg, max) = (122272.022, 122279.976, 122288.021), stdev = 7.995
[info]   CI (99.9%): [122249.191, 122310.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.093), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.836 ±(99.9%) 12.400 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.836, 7.535), stdev = 3.220
[info]   CI (99.9%): [≈ 0, 14.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1426.899 ±(99.9%) 592.423 MB/sec [Average]
[info]   (min, avg, max) = (1348.164, 1426.899, 1701.922), stdev = 153.850
[info]   CI (99.9%): [834.476, 2019.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   117270.071 ±(99.9%) 44485.149 B/op [Average]
[info]   (min, avg, max) = (109974.311, 117270.071, 137793.122), stdev = 11552.652
[info]   CI (99.9%): [72784.922, 161755.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   55.337 ±(99.9%) 476.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.337, 276.684), stdev = 123.737
[info]   CI (99.9%): [≈ 0, 531.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.715
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:22:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24976.319 ops/s
[info] # Warmup Iteration   2: 39453.406 ops/s
[info] # Warmup Iteration   3: 39890.823 ops/s
[info] Iteration   1: 39623.102 ops/s
[info]                  ·gc.alloc.rate:            977.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       38823.185 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40085.608 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 39615.505 ops/s
[info]                  ·gc.alloc.rate:            977.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40094.713 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 40139.296 ops/s
[info]                  ·gc.alloc.rate:                                  989.966 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.609 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39727.098 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                156.714 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 40552.195 ops/s
[info]                  ·gc.alloc.rate:                                  1000.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.678 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39632.807 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 40564.642 ops/s
[info]                  ·gc.alloc.rate:            1000.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39621.084 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   40098.948 ±(99.9%) 1810.293 ops/s [Average]
[info]   (min, avg, max) = (39615.505, 40098.948, 40564.642), stdev = 470.127
[info]   CI (99.9%): [38288.655, 41909.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   989.007 ±(99.9%) 44.995 MB/sec [Average]
[info]   (min, avg, max) = (977.040, 989.007, 1000.563), stdev = 11.685
[info]   CI (99.9%): [944.012, 1034.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38823.845 ±(99.9%) 1.421 B/op [Average]
[info]   (min, avg, max) = (38823.185, 38823.845, 38824.011), stdev = 0.369
[info]   CI (99.9%): [38822.424, 38825.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.092), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.057 ±(99.9%) 6.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.057, 3.609), stdev = 1.601
[info]   CI (99.9%): [≈ 0, 7.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.640 ±(99.9%) 23.677 MB/sec [Average]
[info]   (min, avg, max) = (1008.925, 1014.640, 1021.157), stdev = 6.149
[info]   CI (99.9%): [990.962, 1038.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   39832.262 ±(99.9%) 920.342 B/op [Average]
[info]   (min, avg, max) = (39621.084, 39832.262, 40094.713), stdev = 239.010
[info]   CI (99.9%): [38911.921, 40752.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   31.343 ±(99.9%) 269.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.343, 156.714), stdev = 70.085
[info]   CI (99.9%): [≈ 0, 301.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.919
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50747.391 ops/s
[info] # Warmup Iteration   2: 55697.048 ops/s
[info] # Warmup Iteration   3: 55928.820 ops/s
[info] Iteration   1: 56132.431 ops/s
[info]                  ·gc.alloc.rate:            725.152 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18901.001 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 56155.500 ops/s
[info]                  ·gc.alloc.rate:            725.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18893.934 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 56226.790 ops/s
[info]                  ·gc.alloc.rate:            726.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18869.408 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 56065.391 ops/s
[info]                  ·gc.alloc.rate:            724.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18923.922 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 56085.663 ops/s
[info]                  ·gc.alloc.rate:                                  724.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20336.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.774 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28470.749 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                93.469 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   56133.155 ±(99.9%) 244.408 ops/s [Average]
[info]   (min, avg, max) = (56065.391, 56133.155, 56226.790), stdev = 63.472
[info]   CI (99.9%): [55888.747, 56377.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   725.235 ±(99.9%) 3.103 MB/sec [Average]
[info]   (min, avg, max) = (724.481, 725.235, 726.461), stdev = 0.806
[info]   CI (99.9%): [722.132, 728.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.155 ±(99.9%) 1.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.774), stdev = 0.346
[info]   CI (99.9%): [≈ 0, 1.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.140 ±(99.9%) 586.079 MB/sec [Average]
[info]   (min, avg, max) = (673.982, 742.140, 1014.409), stdev = 152.203
[info]   CI (99.9%): [156.060, 1328.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   20811.803 ±(99.9%) 16486.629 B/op [Average]
[info]   (min, avg, max) = (18869.408, 20811.803, 28470.749), stdev = 4281.525
[info]   CI (99.9%): [4325.174, 37298.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.694 ±(99.9%) 160.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.694, 93.469), stdev = 41.801
[info]   CI (99.9%): [≈ 0, 179.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:21:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11354.336 ops/s
[info] # Warmup Iteration   2: 29317.246 ops/s
[info] # Warmup Iteration   3: 29418.517 ops/s
[info] Iteration   1: 29603.982 ops/s
[info]                  ·gc.alloc.rate:                                  1977.110 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.754 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2033.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108119.238 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                247.899 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 29908.225 ops/s
[info]                  ·gc.alloc.rate:                                  1997.487 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.533 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107472.555 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 29963.410 ops/s
[info]                  ·gc.alloc.rate:                                  2001.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107271.739 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 30218.849 ops/s
[info]                  ·gc.alloc.rate:                                  2018.052 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.598 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106370.236 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 30065.839 ops/s
[info]                  ·gc.alloc.rate:                                  2007.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106907.888 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   29952.061 ±(99.9%) 876.668 ops/s [Average]
[info]   (min, avg, max) = (29603.982, 29952.061, 30218.849), stdev = 227.668
[info]   CI (99.9%): [29075.393, 30828.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2000.479 ±(99.9%) 58.442 MB/sec [Average]
[info]   (min, avg, max) = (1977.110, 2000.479, 2018.052), stdev = 15.177
[info]   CI (99.9%): [1942.037, 2058.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105128.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (105128.014, 105128.015, 105128.017), stdev = 0.002
[info]   CI (99.9%): [105128.009, 105128.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.009, 0.014), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.496 ±(99.9%) 0.826 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.496, 0.754), stdev = 0.214
[info]   CI (99.9%): [≈ 0, 1.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2040.372 ±(99.9%) 15.123 MB/sec [Average]
[info]   (min, avg, max) = (2033.365, 2040.372, 2042.617), stdev = 3.927
[info]   CI (99.9%): [2025.249, 2055.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   107228.331 ±(99.9%) 2506.068 B/op [Average]
[info]   (min, avg, max) = (106370.236, 107228.331, 108119.238), stdev = 650.818
[info]   CI (99.9%): [104722.263, 109734.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   49.580 ±(99.9%) 426.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.580, 247.899), stdev = 110.864
[info]   CI (99.9%): [≈ 0, 476.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 13.000), stdev = 3.493
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:21:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16068.487 ops/s
[info] # Warmup Iteration   2: 31507.881 ops/s
[info] # Warmup Iteration   3: 31687.453 ops/s
[info] Iteration   1: 31919.299 ops/s
[info]                  ·gc.alloc.rate:                                  1807.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83524.785 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                197.070 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 31565.896 ops/s
[info]                  ·gc.alloc.rate:                                  1787.871 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101835.097 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 31914.215 ops/s
[info]                  ·gc.alloc.rate:                                  1807.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83929.441 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 31655.056 ops/s
[info]                  ·gc.alloc.rate:            1792.826 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84618.669 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 31757.308 ops/s
[info]                  ·gc.alloc.rate:                                  1798.591 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84346.934 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   31762.355 ±(99.9%) 602.190 ops/s [Average]
[info]   (min, avg, max) = (31565.896, 31762.355, 31919.299), stdev = 156.387
[info]   CI (99.9%): [31160.165, 32364.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1798.888 ±(99.9%) 33.855 MB/sec [Average]
[info]   (min, avg, max) = (1787.871, 1798.888, 1807.668), stdev = 8.792
[info]   CI (99.9%): [1765.033, 1832.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.014 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (89144.013, 89144.014, 89144.016), stdev = 0.001
[info]   CI (99.9%): [89144.008, 89144.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.751 ±(99.9%) 6.101 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.751, 3.585), stdev = 1.584
[info]   CI (99.9%): [≈ 0, 6.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1768.299 ±(99.9%) 590.191 MB/sec [Average]
[info]   (min, avg, max) = (1693.548, 1768.299, 2042.403), stdev = 153.271
[info]   CI (99.9%): [1178.108, 2358.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   87650.985 ±(99.9%) 30574.218 B/op [Average]
[info]   (min, avg, max) = (83524.785, 87650.985, 101835.097), stdev = 7940.027
[info]   CI (99.9%): [57076.767, 118225.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   39.414 ±(99.9%) 339.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.414, 197.070), stdev = 88.132
[info]   CI (99.9%): [≈ 0, 378.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:21:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36114.146 ops/s
[info] # Warmup Iteration   2: 42808.022 ops/s
[info] # Warmup Iteration   3: 42360.340 ops/s
[info] Iteration   1: 43297.385 ops/s
[info]                  ·gc.alloc.rate:                                  1804.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.166 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.875 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61720.823 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                145.282 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 43478.254 ops/s
[info]                  ·gc.alloc.rate:                                  1811.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61608.602 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 43446.129 ops/s
[info]                  ·gc.alloc.rate:                                  1810.982 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73983.063 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 43477.048 ops/s
[info]                  ·gc.alloc.rate:                                  1812.442 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61610.019 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 43511.079 ops/s
[info]                  ·gc.alloc.rate:                                  1814.146 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61560.471 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   43441.979 ±(99.9%) 323.577 ops/s [Average]
[info]   (min, avg, max) = (43297.385, 43441.979, 43511.079), stdev = 84.032
[info]   CI (99.9%): [43118.402, 43765.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1810.828 ±(99.9%) 14.135 MB/sec [Average]
[info]   (min, avg, max) = (1804.588, 1810.828, 1814.146), stdev = 3.671
[info]   CI (99.9%): [1796.692, 1824.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   65600.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (65600.009, 65600.010, 65600.010), stdev = 0.001
[info]   CI (99.9%): [65600.008, 65600.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.284 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.034, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.244 ±(99.9%) 10.337 B/op [Average]
[info]   (min, avg, max) = (0.033, 1.244, 6.046), stdev = 2.684
[info]   CI (99.9%): [≈ 0, 11.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1769.330 ±(99.9%) 587.864 MB/sec [Average]
[info]   (min, avg, max) = (1697.875, 1769.330, 2042.408), stdev = 152.666
[info]   CI (99.9%): [1181.466, 2357.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   64096.596 ±(99.9%) 21282.572 B/op [Average]
[info]   (min, avg, max) = (61560.471, 64096.596, 73983.063), stdev = 5527.016
[info]   CI (99.9%): [42814.023, 85379.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   29.056 ±(99.9%) 250.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.056, 145.282), stdev = 64.972
[info]   CI (99.9%): [≈ 0, 279.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:21:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37576.318 ops/s
[info] # Warmup Iteration   2: 44358.539 ops/s
[info] # Warmup Iteration   3: 44623.535 ops/s
[info] Iteration   1: 44611.754 ops/s
[info]                  ·gc.alloc.rate:                                  1636.952 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59619.841 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                141.001 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 44710.908 ops/s
[info]                  ·gc.alloc.rate:                                  1640.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.319 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59912.599 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 45508.608 ops/s
[info]                  ·gc.alloc.rate:            1669.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58859.584 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 45487.832 ops/s
[info]                  ·gc.alloc.rate:                                  1668.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58886.752 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 45063.249 ops/s
[info]                  ·gc.alloc.rate:                                  1653.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59440.710 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   45076.470 ±(99.9%) 1617.424 ops/s [Average]
[info]   (min, avg, max) = (44611.754, 45076.470, 45508.608), stdev = 420.040
[info]   CI (99.9%): [43459.047, 46693.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1653.781 ±(99.9%) 59.149 MB/sec [Average]
[info]   (min, avg, max) = (1636.952, 1653.781, 1669.788), stdev = 15.361
[info]   CI (99.9%): [1594.631, 1712.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57736.009, 57736.009, 57736.010), stdev = 0.001
[info]   CI (99.9%): [57736.008, 57736.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.894 ±(99.9%) 6.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.894, 4.059), stdev = 1.774
[info]   CI (99.9%): [≈ 0, 7.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1699.743 ±(99.9%) 20.205 MB/sec [Average]
[info]   (min, avg, max) = (1690.363, 1699.743, 1702.283), stdev = 5.247
[info]   CI (99.9%): [1679.539, 1719.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   59343.897 ±(99.9%) 1777.647 B/op [Average]
[info]   (min, avg, max) = (58859.584, 59343.897, 59912.599), stdev = 461.649
[info]   CI (99.9%): [57566.250, 61121.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   28.200 ±(99.9%) 242.812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.200, 141.001), stdev = 63.057
[info]   CI (99.9%): [≈ 0, 271.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:21:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298294.191 ops/s
[info] # Warmup Iteration   2: 366088.048 ops/s
[info] # Warmup Iteration   3: 370190.260 ops/s
[info] Iteration   1: 377284.206 ops/s
[info]                  ·gc.alloc.rate:                                  1907.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.581 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8505.828 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                13.894 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 379549.967 ops/s
[info]                  ·gc.alloc.rate:                                  1919.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7057.537 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 378720.336 ops/s
[info]                  ·gc.alloc.rate:                                  1915.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8487.558 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 379968.396 ops/s
[info]                  ·gc.alloc.rate:                                  1921.574 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8459.507 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 380380.877 ops/s
[info]                  ·gc.alloc.rate:                                  1923.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7041.918 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   379180.756 ±(99.9%) 4718.363 ops/s [Average]
[info]   (min, avg, max) = (377284.206, 379180.756, 380380.877), stdev = 1225.344
[info]   CI (99.9%): [374462.393, 383899.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1917.507 ±(99.9%) 24.044 MB/sec [Average]
[info]   (min, avg, max) = (1907.826, 1917.507, 1923.500), stdev = 6.244
[info]   CI (99.9%): [1893.463, 1941.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.031, 0.139), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.129 ±(99.9%) 0.974 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.129, 0.581), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1905.278 ±(99.9%) 715.372 MB/sec [Average]
[info]   (min, avg, max) = (1701.649, 1905.278, 2042.156), stdev = 185.780
[info]   CI (99.9%): [1189.906, 2620.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7910.469 ±(99.9%) 3026.371 B/op [Average]
[info]   (min, avg, max) = (7041.918, 7910.469, 8505.828), stdev = 785.939
[info]   CI (99.9%): [4884.099, 10936.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.779 ±(99.9%) 23.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.779, 13.894), stdev = 6.214
[info]   CI (99.9%): [≈ 0, 26.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:20:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96819.413 ops/s
[info] # Warmup Iteration   2: 1484848.008 ops/s
[info] # Warmup Iteration   3: 1520658.381 ops/s
[info] Iteration   1: 1511925.984 ops/s
[info]                  ·gc.alloc.rate:            476.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 694.816 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1512336.811 ops/s
[info]                  ·gc.alloc.rate:            476.582 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 347.313 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1491974.446 ops/s
[info]                  ·gc.alloc.rate:            470.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 704.109 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1513703.087 ops/s
[info]                  ·gc.alloc.rate:            477.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 347.000 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1508327.694 ops/s
[info]                  ·gc.alloc.rate:            475.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 696.490 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1507653.604 ±(99.9%) 34606.145 ops/s [Average]
[info]   (min, avg, max) = (1491974.446, 1507653.604, 1513703.087), stdev = 8987.106
[info]   CI (99.9%): [1473047.459, 1542259.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   475.088 ±(99.9%) 11.012 MB/sec [Average]
[info]   (min, avg, max) = (470.108, 475.088, 477.043), stdev = 2.860
[info]   CI (99.9%): [464.077, 486.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.920 ±(99.9%) 703.709 MB/sec [Average]
[info]   (min, avg, max) = (333.716, 533.920, 667.416), stdev = 182.751
[info]   CI (99.9%): [≈ 0, 1237.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   557.946 ±(99.9%) 741.076 B/op [Average]
[info]   (min, avg, max) = (347.000, 557.946, 704.109), stdev = 192.455
[info]   CI (99.9%): [≈ 0, 1299.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:20:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 383917.048 ops/s
[info] # Warmup Iteration   2: 585862.052 ops/s
[info] # Warmup Iteration   3: 591980.188 ops/s
[info] Iteration   1: 589251.039 ops/s
[info]                  ·gc.alloc.rate:            500.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1796.969 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 592403.138 ops/s
[info]                  ·gc.alloc.rate:            502.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 893.725 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 590533.868 ops/s
[info]                  ·gc.alloc.rate:            501.164 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1793.117 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 593579.791 ops/s
[info]                  ·gc.alloc.rate:            503.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 891.957 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 589433.689 ops/s
[info]                  ·gc.alloc.rate:                   500.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1794.685 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   591040.305 ±(99.9%) 7292.236 ops/s [Average]
[info]   (min, avg, max) = (589251.039, 591040.305, 593579.791), stdev = 1893.770
[info]   CI (99.9%): [583748.069, 598332.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   501.635 ±(99.9%) 6.257 MB/sec [Average]
[info]   (min, avg, max) = (500.140, 501.635, 503.861), stdev = 1.625
[info]   CI (99.9%): [495.378, 507.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.013 ±(99.9%) 708.852 MB/sec [Average]
[info]   (min, avg, max) = (336.319, 538.013, 672.707), stdev = 184.087
[info]   CI (99.9%): [≈ 0, 1246.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1434.091 ±(99.9%) 1902.578 B/op [Average]
[info]   (min, avg, max) = (891.957, 1434.091, 1796.969), stdev = 494.093
[info]   CI (99.9%): [≈ 0, 3336.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.356 ±(99.9%) 3.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.356, 1.779), stdev = 0.795
[info]   CI (99.9%): [≈ 0, 3.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:20:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1622623.054 ops/s
[info] # Warmup Iteration   2: 1702313.884 ops/s
[info] # Warmup Iteration   3: 1730802.026 ops/s
[info] Iteration   1: 1734042.987 ops/s
[info]                  ·gc.alloc.rate:            334.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.921 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1733260.120 ops/s
[info]                  ·gc.alloc.rate:            334.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 306.074 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1737801.607 ops/s
[info]                  ·gc.alloc.rate:            335.702 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.266 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1734996.335 ops/s
[info]                  ·gc.alloc.rate:            335.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.762 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1734615.499 ops/s
[info]                  ·gc.alloc.rate:            335.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305.829 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1734943.310 ±(99.9%) 6648.313 ops/s [Average]
[info]   (min, avg, max) = (1733260.120, 1734943.310, 1737801.607), stdev = 1726.546
[info]   CI (99.9%): [1728294.997, 1741591.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   335.101 ±(99.9%) 1.353 MB/sec [Average]
[info]   (min, avg, max) = (334.842, 335.101, 335.702), stdev = 0.351
[info]   CI (99.9%): [333.747, 336.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.051 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (336.979, 337.051, 337.126), stdev = 0.060
[info]   CI (99.9%): [336.820, 337.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   305.770 ±(99.9%) 1.176 B/op [Average]
[info]   (min, avg, max) = (305.266, 305.770, 306.074), stdev = 0.305
[info]   CI (99.9%): [304.594, 306.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52960.300 ops/s
[info] # Warmup Iteration   2: 88231.773 ops/s
[info] # Warmup Iteration   3: 91934.519 ops/s
[info] Iteration   1: 92211.223 ops/s
[info]                  ·gc.alloc.rate:                                  3349.244 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52288.953 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 91970.940 ops/s
[info]                  ·gc.alloc.rate:                                  3340.866 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58250.422 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 91768.654 ops/s
[info]                  ·gc.alloc.rate:                                  3333.282 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58377.349 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 92633.314 ops/s
[info]                  ·gc.alloc.rate:            3364.548 MB/sec
[info]                  ·gc.alloc.rate.norm:       57176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3403.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57833.580 B/op
[info]                  ·gc.count:                 10.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 92066.940 ops/s
[info]                  ·gc.alloc.rate:                                  3344.133 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58187.798 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   92130.214 ±(99.9%) 1247.409 ops/s [Average]
[info]   (min, avg, max) = (91768.654, 92130.214, 92633.314), stdev = 323.948
[info]   CI (99.9%): [90882.805, 93377.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3346.414 ±(99.9%) 44.959 MB/sec [Average]
[info]   (min, avg, max) = (3333.282, 3346.414, 3364.548), stdev = 11.676
[info]   CI (99.9%): [3301.456, 3391.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.005, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.055 ±(99.9%) 0.124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.084), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3335.298 ±(99.9%) 586.204 MB/sec [Average]
[info]   (min, avg, max) = (3062.971, 3335.298, 3403.646), stdev = 152.235
[info]   CI (99.9%): [2749.094, 3921.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   56987.621 ±(99.9%) 10144.010 B/op [Average]
[info]   (min, avg, max) = (52288.953, 56987.621, 58377.349), stdev = 2634.367
[info]   CI (99.9%): [46843.611, 67131.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:20:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244688.554 ops/s
[info] # Warmup Iteration   2: 323779.236 ops/s
[info] # Warmup Iteration   3: 324055.746 ops/s
[info] Iteration   1: 321246.342 ops/s
[info]                  ·gc.alloc.rate:            499.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1651.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 323764.378 ops/s
[info]                  ·gc.alloc.rate:            503.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3277.215 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 325762.311 ops/s
[info]                  ·gc.alloc.rate:            506.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1628.483 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 323385.894 ops/s
[info]                  ·gc.alloc.rate:            502.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3280.883 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 324774.214 ops/s
[info]                  ·gc.alloc.rate:            505.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1633.427 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   323786.628 ±(99.9%) 6527.036 ops/s [Average]
[info]   (min, avg, max) = (321246.342, 323786.628, 325762.311), stdev = 1695.051
[info]   CI (99.9%): [317259.592, 330313.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   503.579 ±(99.9%) 10.326 MB/sec [Average]
[info]   (min, avg, max) = (499.591, 503.579, 506.772), stdev = 2.682
[info]   CI (99.9%): [493.253, 513.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2448.001, 2448.001, 2448.001), stdev = 0.001
[info]   CI (99.9%): [2448.001, 2448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.855 ±(99.9%) 710.759 MB/sec [Average]
[info]   (min, avg, max) = (337.019, 471.855, 674.085), stdev = 184.582
[info]   CI (99.9%): [≈ 0, 1182.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2294.289 ±(99.9%) 3461.728 B/op [Average]
[info]   (min, avg, max) = (1628.483, 2294.289, 3280.883), stdev = 899.000
[info]   CI (99.9%): [≈ 0, 5756.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:19:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94075.138 ops/s
[info] # Warmup Iteration   2: 1208220.513 ops/s
[info] # Warmup Iteration   3: 1167118.260 ops/s
[info] Iteration   1: 1224094.093 ops/s
[info]                  ·gc.alloc.rate:            566.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 858.197 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1238069.712 ops/s
[info]                  ·gc.alloc.rate:            572.673 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 424.252 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1197536.807 ops/s
[info]                  ·gc.alloc.rate:            553.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 877.228 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1208007.980 ops/s
[info]                  ·gc.alloc.rate:            558.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 869.625 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1218904.109 ops/s
[info]                  ·gc.alloc.rate:            563.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 430.924 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1217322.540 ±(99.9%) 59561.779 ops/s [Average]
[info]   (min, avg, max) = (1197536.807, 1217322.540, 1238069.712), stdev = 15468.005
[info]   CI (99.9%): [1157760.761, 1276884.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   563.037 ±(99.9%) 27.673 MB/sec [Average]
[info]   (min, avg, max) = (553.837, 563.037, 572.673), stdev = 7.187
[info]   CI (99.9%): [535.363, 590.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.937 ±(99.9%) 703.825 MB/sec [Average]
[info]   (min, avg, max) = (333.688, 533.937, 667.474), stdev = 182.781
[info]   CI (99.9%): [≈ 0, 1237.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   692.045 ±(99.9%) 930.015 B/op [Average]
[info]   (min, avg, max) = (424.252, 692.045, 877.228), stdev = 241.522
[info]   CI (99.9%): [≈ 0, 1622.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:19:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 656702.591 ops/s
[info] # Warmup Iteration   2: 959823.927 ops/s
[info] # Warmup Iteration   3: 984297.157 ops/s
[info] Iteration   1: 987282.005 ops/s
[info]                  ·gc.alloc.rate:            697.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1072.522 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 989160.600 ops/s
[info]                  ·gc.alloc.rate:            698.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1070.494 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 989203.963 ops/s
[info]                  ·gc.alloc.rate:            698.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1070.446 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 983734.620 ops/s
[info]                  ·gc.alloc.rate:            695.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1076.396 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 983360.703 ops/s
[info]                  ·gc.alloc.rate:                   694.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1076.771 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.397 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   986548.378 ±(99.9%) 10974.765 ops/s [Average]
[info]   (min, avg, max) = (983360.703, 986548.378, 989203.963), stdev = 2850.112
[info]   CI (99.9%): [975573.613, 997523.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   696.982 ±(99.9%) 7.688 MB/sec [Average]
[info]   (min, avg, max) = (694.681, 696.982, 698.864), stdev = 1.996
[info]   CI (99.9%): [689.295, 704.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.737 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (672.646, 672.737, 672.817), stdev = 0.073
[info]   CI (99.9%): [672.455, 673.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1073.326 ±(99.9%) 11.909 B/op [Average]
[info]   (min, avg, max) = (1070.446, 1073.326, 1076.771), stdev = 3.093
[info]   CI (99.9%): [1061.417, 1085.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.279 ±(99.9%) 11.015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.279, 6.397), stdev = 2.861
[info]   CI (99.9%): [≈ 0, 12.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:19:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2177848.123 ops/s
[info] # Warmup Iteration   2: 2430411.317 ops/s
[info] # Warmup Iteration   3: 2468331.853 ops/s
[info] Iteration   1: 2456413.712 ops/s
[info]                  ·gc.alloc.rate:                   1136.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.543 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        862.527 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.333 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.854 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 2461402.198 ops/s
[info]                  ·gc.alloc.rate:                   1138.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        645.722 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.556 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2444274.410 ops/s
[info]                  ·gc.alloc.rate:                                  1130.916 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       657.554 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2448258.882 ops/s
[info]                  ·gc.alloc.rate:                                  1132.310 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       875.284 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2449694.107 ops/s
[info]                  ·gc.alloc.rate:            1133.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 656.089 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2452008.662 ±(99.9%) 26319.907 ops/s [Average]
[info]   (min, avg, max) = (2444274.410, 2452008.662, 2461402.198), stdev = 6835.196
[info]   CI (99.9%): [2425688.755, 2478328.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1134.309 ±(99.9%) 12.210 MB/sec [Average]
[info]   (min, avg, max) = (1130.916, 1134.309, 1138.613), stdev = 3.171
[info]   CI (99.9%): [1122.099, 1146.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.009 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.118 ±(99.9%) 710.042 MB/sec [Average]
[info]   (min, avg, max) = (1009.928, 1152.118, 1361.390), stdev = 184.396
[info]   CI (99.9%): [442.075, 1862.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   739.435 ±(99.9%) 455.775 B/op [Average]
[info]   (min, avg, max) = (645.722, 739.435, 875.284), stdev = 118.363
[info]   CI (99.9%): [283.660, 1195.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.682 ±(99.9%) 4.277 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.682, 2.556), stdev = 1.111
[info]   CI (99.9%): [≈ 0, 4.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.438
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:19:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2283244.755 ops/s
[info] # Warmup Iteration   2: 2525867.864 ops/s
[info] # Warmup Iteration   3: 2536217.786 ops/s
[info] Iteration   1: 2534918.325 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2533778.347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2522056.567 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2536344.687 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2534635.666 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2532346.718 ±(99.9%) 22434.172 ops/s [Average]
[info]   (min, avg, max) = (2522056.567, 2532346.718, 2536344.687), stdev = 5826.083
[info]   CI (99.9%): [2509912.547, 2554780.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:19:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295738.882 ops/s
[info] # Warmup Iteration   2: 406164.978 ops/s
[info] # Warmup Iteration   3: 398988.198 ops/s
[info] Iteration   1: 400266.621 ops/s
[info]                  ·gc.alloc.rate:            467.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2645.386 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 413258.336 ops/s
[info]                  ·gc.alloc.rate:            483.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1281.143 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 410582.907 ops/s
[info]                  ·gc.alloc.rate:            480.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2578.989 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 409844.163 ops/s
[info]                  ·gc.alloc.rate:            479.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1291.848 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 408897.021 ops/s
[info]                  ·gc.alloc.rate:            478.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2589.697 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   408569.810 ±(99.9%) 18933.740 ops/s [Average]
[info]   (min, avg, max) = (400266.621, 408569.810, 413258.336), stdev = 4917.032
[info]   CI (99.9%): [389636.069, 427503.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   477.618 ±(99.9%) 22.253 MB/sec [Average]
[info]   (min, avg, max) = (467.851, 477.618, 483.078), stdev = 5.779
[info]   CI (99.9%): [455.365, 499.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   538.206 ±(99.9%) 709.598 MB/sec [Average]
[info]   (min, avg, max) = (336.321, 538.206, 672.942), stdev = 184.280
[info]   CI (99.9%): [≈ 0, 1247.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2077.412 ±(99.9%) 2781.918 B/op [Average]
[info]   (min, avg, max) = (1281.143, 2077.412, 2645.386), stdev = 722.455
[info]   CI (99.9%): [≈ 0, 4859.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114965.584 ops/s
[info] # Warmup Iteration   2: 138108.018 ops/s
[info] # Warmup Iteration   3: 140327.394 ops/s
[info] Iteration   1: 141143.555 ops/s
[info]                  ·gc.alloc.rate:                                  1697.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.981 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18904.303 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                37.140 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 141171.045 ops/s
[info]                  ·gc.alloc.rate:                                  1697.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18975.088 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 142234.162 ops/s
[info]                  ·gc.alloc.rate:                                  1709.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18832.502 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 142125.699 ops/s
[info]                  ·gc.alloc.rate:                                  1708.210 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.542 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18846.147 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 142770.258 ops/s
[info]                  ·gc.alloc.rate:                                  1716.591 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18762.206 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   141888.944 ±(99.9%) 2738.378 ops/s [Average]
[info]   (min, avg, max) = (141143.555, 141888.944, 142770.258), stdev = 711.148
[info]   CI (99.9%): [139150.566, 144627.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1705.748 ±(99.9%) 32.583 MB/sec [Average]
[info]   (min, avg, max) = (1697.047, 1705.748, 1716.591), stdev = 8.462
[info]   CI (99.9%): [1673.165, 1738.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.003, 18920.003, 18920.003), stdev = 0.001
[info]   CI (99.9%): [18920.002, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.021, 0.088), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.234 ±(99.9%) 1.609 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.234, 0.981), stdev = 0.418
[info]   CI (99.9%): [≈ 0, 1.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1700.676 ±(99.9%) 10.908 MB/sec [Average]
[info]   (min, avg, max) = (1695.639, 1700.676, 1702.274), stdev = 2.833
[info]   CI (99.9%): [1689.768, 1711.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18864.049 ±(99.9%) 308.279 B/op [Average]
[info]   (min, avg, max) = (18762.206, 18864.049, 18975.088), stdev = 80.059
[info]   CI (99.9%): [18555.770, 19172.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.428 ±(99.9%) 63.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.428, 37.140), stdev = 16.610
[info]   CI (99.9%): [≈ 0, 71.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:18:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233182.282 ops/s
[info] # Warmup Iteration   2: 366235.810 ops/s
[info] # Warmup Iteration   3: 369909.357 ops/s
[info] Iteration   1: 361747.096 ops/s
[info]                  ·gc.alloc.rate:            307.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1463.629 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 369910.819 ops/s
[info]                  ·gc.alloc.rate:            313.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1431.284 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 364424.942 ops/s
[info]                  ·gc.alloc.rate:            309.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1452.827 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 369423.002 ops/s
[info]                  ·gc.alloc.rate:            313.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1433.175 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 369300.895 ops/s
[info]                  ·gc.alloc.rate:            313.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1433.679 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   366961.351 ±(99.9%) 14129.079 ops/s [Average]
[info]   (min, avg, max) = (361747.096, 366961.351, 369910.819), stdev = 3669.277
[info]   CI (99.9%): [352832.272, 381090.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   311.510 ±(99.9%) 11.840 MB/sec [Average]
[info]   (min, avg, max) = (307.137, 311.510, 313.923), stdev = 3.075
[info]   CI (99.9%): [299.670, 323.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.413 ±(99.9%) 0.277 MB/sec [Average]
[info]   (min, avg, max) = (336.312, 336.413, 336.478), stdev = 0.072
[info]   CI (99.9%): [336.136, 336.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1442.919 ±(99.9%) 55.893 B/op [Average]
[info]   (min, avg, max) = (1431.284, 1442.919, 1463.629), stdev = 14.515
[info]   CI (99.9%): [1387.026, 1498.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 782534.706 ops/s
[info] # Warmup Iteration   2: 830062.497 ops/s
[info] # Warmup Iteration   3: 811233.250 ops/s
[info] Iteration   1: 833012.878 ops/s
[info]                  ·gc.alloc.rate:      160.908 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 787737.598 ops/s
[info]                  ·gc.alloc.rate:            152.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 674.790 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 831612.433 ops/s
[info]                  ·gc.alloc.rate:      160.604 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 827504.965 ops/s
[info]                  ·gc.alloc.rate:            159.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 641.108 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 831130.380 ops/s
[info]                  ·gc.alloc.rate:      160.561 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   822199.651 ±(99.9%) 74593.834 ops/s [Average]
[info]   (min, avg, max) = (787737.598, 822199.651, 833012.878), stdev = 19371.782
[info]   CI (99.9%): [747605.817, 896793.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   158.812 ±(99.9%) 14.409 MB/sec [Average]
[info]   (min, avg, max) = (152.156, 158.812, 160.908), stdev = 3.742
[info]   CI (99.9%): [144.403, 173.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.001, 304.001), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   134.961 ±(99.9%) 711.610 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.961, 337.740), stdev = 184.803
[info]   CI (99.9%): [≈ 0, 846.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   263.180 ±(99.9%) 1388.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 263.180, 674.790), stdev = 360.570
[info]   CI (99.9%): [≈ 0, 1651.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:18:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40310.382 ops/s
[info] # Warmup Iteration   2: 74162.207 ops/s
[info] # Warmup Iteration   3: 74988.083 ops/s
[info] Iteration   1: 76928.826 ops/s
[info]                  ·gc.alloc.rate:                                  3275.416 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69641.583 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 76587.883 ops/s
[info]                  ·gc.alloc.rate:                                  3260.889 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.320 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69949.783 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 75703.304 ops/s
[info]                  ·gc.alloc.rate:                                  3223.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63692.329 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 77056.640 ops/s
[info]                  ·gc.alloc.rate:                                  3280.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69525.015 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 76243.725 ops/s
[info]                  ·gc.alloc.rate:                                  3246.699 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63239.627 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   76504.076 ±(99.9%) 2110.650 ops/s [Average]
[info]   (min, avg, max) = (75703.304, 76504.076, 77056.640), stdev = 548.129
[info]   CI (99.9%): [74393.426, 78614.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3257.307 ±(99.9%) 89.526 MB/sec [Average]
[info]   (min, avg, max) = (3223.065, 3257.307, 3280.467), stdev = 23.250
[info]   CI (99.9%): [3167.781, 3346.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.006), stdev = 0.001
[info]   CI (99.9%): [67016.005, 67016.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.009, 0.016), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.186 ±(99.9%) 0.390 B/op [Average]
[info]   (min, avg, max) = (0.081, 0.186, 0.320), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3267.526 ±(99.9%) 717.247 MB/sec [Average]
[info]   (min, avg, max) = (3063.216, 3267.526, 3403.742), stdev = 186.267
[info]   CI (99.9%): [2550.279, 3984.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67209.667 ±(99.9%) 13187.565 B/op [Average]
[info]   (min, avg, max) = (63239.627, 67209.667, 69949.783), stdev = 3424.769
[info]   CI (99.9%): [54022.102, 80397.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221807.749 ops/s
[info] # Warmup Iteration   2: 305868.713 ops/s
[info] # Warmup Iteration   3: 308076.875 ops/s
[info] Iteration   1: 312249.288 ops/s
[info]                  ·gc.alloc.rate:            1382.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6795.788 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 308356.078 ops/s
[info]                  ·gc.alloc.rate:                                  1364.952 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6968.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6932.616 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                17.000 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 314971.737 ops/s
[info]                  ·gc.alloc.rate:                                  1394.213 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6968.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6803.575 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 312881.921 ops/s
[info]                  ·gc.alloc.rate:            1385.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       6968.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6848.992 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 317558.428 ops/s
[info]                  ·gc.alloc.rate:                                  1406.290 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6968.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6747.925 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   313203.490 ±(99.9%) 13143.548 ops/s [Average]
[info]   (min, avg, max) = (308356.078, 313203.490, 317558.428), stdev = 3413.338
[info]   CI (99.9%): [300059.943, 326347.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1386.560 ±(99.9%) 58.890 MB/sec [Average]
[info]   (min, avg, max) = (1364.952, 1386.560, 1406.290), stdev = 15.294
[info]   CI (99.9%): [1327.670, 1445.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6968.001, 6968.001, 6968.001), stdev = 0.001
[info]   CI (99.9%): [6968.001, 6968.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.041 ±(99.9%) 0.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.172), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1358.146 ±(99.9%) 22.482 MB/sec [Average]
[info]   (min, avg, max) = (1348.072, 1358.146, 1361.874), stdev = 5.839
[info]   CI (99.9%): [1335.664, 1380.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6825.779 ±(99.9%) 268.213 B/op [Average]
[info]   (min, avg, max) = (6747.925, 6825.779, 6932.616), stdev = 69.654
[info]   CI (99.9%): [6557.566, 7093.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.400 ±(99.9%) 29.275 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.400, 17.000), stdev = 7.603
[info]   CI (99.9%): [≈ 0, 32.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.764
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:17:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1047657.066 ops/s
[info] # Warmup Iteration   2: 1775108.153 ops/s
[info] # Warmup Iteration   3: 1778270.258 ops/s
[info] Iteration   1: 1772639.031 ops/s
[info]                  ·gc.alloc.rate:            909.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.591 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 597.368 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1787669.138 ops/s
[info]                  ·gc.alloc.rate:            917.970 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 888.496 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 1790740.787 ops/s
[info]                  ·gc.alloc.rate:                   919.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        886.972 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.513 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 1814802.045 ops/s
[info]                  ·gc.alloc.rate:                                  931.503 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       590.422 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1777818.591 ops/s
[info]                  ·gc.alloc.rate:                                  912.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       904.034 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1788733.919 ±(99.9%) 62769.580 ops/s [Average]
[info]   (min, avg, max) = (1772639.031, 1788733.919, 1814802.045), stdev = 16301.061
[info]   CI (99.9%): [1725964.339, 1851503.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   918.283 ±(99.9%) 32.068 MB/sec [Average]
[info]   (min, avg, max) = (909.747, 918.283, 931.503), stdev = 8.328
[info]   CI (99.9%): [886.215, 950.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.126), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.109), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   878.646 ±(99.9%) 710.461 MB/sec [Average]
[info]   (min, avg, max) = (672.591, 878.646, 1021.429), stdev = 184.504
[info]   CI (99.9%): [168.185, 1589.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   773.458 ±(99.9%) 631.786 B/op [Average]
[info]   (min, avg, max) = (590.422, 773.458, 904.034), stdev = 164.073
[info]   CI (99.9%): [141.672, 1405.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.703 ±(99.9%) 6.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.703, 3.513), stdev = 1.571
[info]   CI (99.9%): [≈ 0, 6.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 5.030
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:17:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1922771.700 ops/s
[info] # Warmup Iteration   2: 2172695.645 ops/s
[info] # Warmup Iteration   3: 2181557.304 ops/s
[info] Iteration   1: 2183614.612 ops/s
[info]                  ·gc.alloc.rate:            588.137 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242.462 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2178379.113 ops/s
[info]                  ·gc.alloc.rate:            586.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 486.092 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2172170.691 ops/s
[info]                  ·gc.alloc.rate:            585.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 487.494 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2172535.582 ops/s
[info]                  ·gc.alloc.rate:                   585.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        487.897 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2187728.723 ops/s
[info]                  ·gc.alloc.rate:            589.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 242.489 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2178885.744 ±(99.9%) 26274.377 ops/s [Average]
[info]   (min, avg, max) = (2172170.691, 2178885.744, 2187728.723), stdev = 6823.372
[info]   CI (99.9%): [2152611.367, 2205160.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   586.924 ±(99.9%) 7.002 MB/sec [Average]
[info]   (min, avg, max) = (585.116, 586.924, 589.352), stdev = 1.818
[info]   CI (99.9%): [579.922, 593.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.450 ±(99.9%) 709.222 MB/sec [Average]
[info]   (min, avg, max) = (336.323, 538.450, 673.544), stdev = 184.183
[info]   CI (99.9%): [≈ 0, 1247.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   389.287 ±(99.9%) 516.069 B/op [Average]
[info]   (min, avg, max) = (242.462, 389.287, 487.897), stdev = 134.021
[info]   CI (99.9%): [≈ 0, 905.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.097 ±(99.9%) 0.831 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.483), stdev = 0.216
[info]   CI (99.9%): [≈ 0, 0.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:17:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2250671.781 ops/s
[info] # Warmup Iteration   2: 2484095.223 ops/s
[info] # Warmup Iteration   3: 2493077.830 ops/s
[info] Iteration   1: 2492774.480 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2493104.027 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2494433.408 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2488064.199 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2493358.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2492346.861 ±(99.9%) 9524.765 ops/s [Average]
[info]   (min, avg, max) = (2488064.199, 2492346.861, 2494433.408), stdev = 2473.551
[info]   CI (99.9%): [2482822.096, 2501871.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25305.751 ops/s
[info] # Warmup Iteration   2: 38297.866 ops/s
[info] # Warmup Iteration   3: 38629.458 ops/s
[info] Iteration   1: 38521.104 ops/s
[info]                  ·gc.alloc.rate:                                  1623.583 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66323.474 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.410 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68881.774 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                163.291 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 39255.423 ops/s
[info]                  ·gc.alloc.rate:                                  1653.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68236.760 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 39291.823 ops/s
[info]                  ·gc.alloc.rate:            1655.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       66320.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68170.781 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 39437.627 ops/s
[info]                  ·gc.alloc.rate:            1661.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       66320.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67918.463 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 39500.000 ops/s
[info]                  ·gc.alloc.rate:                                  1664.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67811.878 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   39201.195 ±(99.9%) 1514.607 ops/s [Average]
[info]   (min, avg, max) = (38521.104, 39201.195, 39500.000), stdev = 393.339
[info]   CI (99.9%): [37686.588, 40715.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1651.975 ±(99.9%) 63.486 MB/sec [Average]
[info]   (min, avg, max) = (1623.583, 1651.975, 1664.907), stdev = 16.487
[info]   CI (99.9%): [1588.489, 1715.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66320.703 ±(99.9%) 5.964 B/op [Average]
[info]   (min, avg, max) = (66320.010, 66320.703, 66323.474), stdev = 1.549
[info]   CI (99.9%): [66314.739, 66326.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.108), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.719 ±(99.9%) 8.980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.719, 4.410), stdev = 2.332
[info]   CI (99.9%): [≈ 0, 10.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.802 ±(99.9%) 27.123 MB/sec [Average]
[info]   (min, avg, max) = (1686.209, 1698.802, 1702.360), stdev = 7.044
[info]   CI (99.9%): [1671.679, 1725.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68203.931 ±(99.9%) 1607.206 B/op [Average]
[info]   (min, avg, max) = (67811.878, 68203.931, 68881.774), stdev = 417.386
[info]   CI (99.9%): [66596.725, 69811.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   32.658 ±(99.9%) 281.198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.658, 163.291), stdev = 73.026
[info]   CI (99.9%): [≈ 0, 313.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 16.000), stdev = 5.367
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177996.213 ops/s
[info] # Warmup Iteration   2: 207313.263 ops/s
[info] # Warmup Iteration   3: 210174.062 ops/s
[info] Iteration   1: 212384.444 ops/s
[info]                  ·gc.alloc.rate:                                  2185.888 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15134.870 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 213851.203 ops/s
[info]                  ·gc.alloc.rate:                                  2200.821 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17536.159 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 214065.038 ops/s
[info]                  ·gc.alloc.rate:                                  2203.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15016.109 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 212835.480 ops/s
[info]                  ·gc.alloc.rate:                                  2191.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17619.939 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 213792.653 ops/s
[info]                  ·gc.alloc.rate:                                  2200.312 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15035.211 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   213385.764 ±(99.9%) 2822.458 ops/s [Average]
[info]   (min, avg, max) = (212384.444, 213385.764, 214065.038), stdev = 732.983
[info]   CI (99.9%): [210563.306, 216208.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2196.286 ±(99.9%) 28.665 MB/sec [Average]
[info]   (min, avg, max) = (2185.888, 2196.286, 2203.332), stdev = 7.444
[info]   CI (99.9%): [2167.621, 2224.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16200.002, 16200.002, 16200.002), stdev = 0.001
[info]   CI (99.9%): [16200.002, 16200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.010, 0.016), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.070 ±(99.9%) 0.167 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.070, 0.120), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.411 ±(99.9%) 718.225 MB/sec [Average]
[info]   (min, avg, max) = (2042.108, 2178.411, 2383.127), stdev = 186.521
[info]   CI (99.9%): [1460.187, 2896.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16068.458 ±(99.9%) 5310.491 B/op [Average]
[info]   (min, avg, max) = (15016.109, 16068.458, 17619.939), stdev = 1379.118
[info]   CI (99.9%): [10757.967, 21378.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:16:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191511.523 ops/s
[info] # Warmup Iteration   2: 294386.217 ops/s
[info] # Warmup Iteration   3: 301840.595 ops/s
[info] Iteration   1: 301556.211 ops/s
[info]                  ·gc.alloc.rate:                   1459.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7022.979 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.860 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 305238.247 ops/s
[info]                  ·gc.alloc.rate:                                  1477.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.189 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.976 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8775.571 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 306360.352 ops/s
[info]                  ·gc.alloc.rate:                                  1482.496 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6994.864 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 305890.133 ops/s
[info]                  ·gc.alloc.rate:            1480.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7005.747 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 305381.676 ops/s
[info]                  ·gc.alloc.rate:                                  1477.886 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8771.549 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   304885.324 ±(99.9%) 7366.529 ops/s [Average]
[info]   (min, avg, max) = (301556.211, 304885.324, 306360.352), stdev = 1913.064
[info]   CI (99.9%): [297518.795, 312251.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1475.314 ±(99.9%) 35.944 MB/sec [Average]
[info]   (min, avg, max) = (1459.055, 1475.314, 1482.496), stdev = 9.335
[info]   CI (99.9%): [1439.370, 1511.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.001), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.189), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.197 ±(99.9%) 1.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.976), stdev = 0.436
[info]   CI (99.9%): [≈ 0, 1.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.514 ±(99.9%) 729.814 MB/sec [Average]
[info]   (min, avg, max) = (1345.445, 1494.514, 1702.120), stdev = 189.530
[info]   CI (99.9%): [764.700, 2224.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7714.142 ±(99.9%) 3724.207 B/op [Average]
[info]   (min, avg, max) = (6994.864, 7714.142, 8775.571), stdev = 967.165
[info]   CI (99.9%): [3989.935, 11438.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.172 ±(99.9%) 35.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.172, 20.860), stdev = 9.329
[info]   CI (99.9%): [≈ 0, 40.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 17.000), stdev = 5.983
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:16:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1132149.887 ops/s
[info] # Warmup Iteration   2: 1231954.938 ops/s
[info] # Warmup Iteration   3: 1217724.911 ops/s
[info] Iteration   1: 1232421.549 ops/s
[info]                  ·gc.alloc.rate:            425.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 430.445 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1238488.266 ops/s
[info]                  ·gc.alloc.rate:            428.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 856.689 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1245428.336 ops/s
[info]                  ·gc.alloc.rate:            430.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 425.955 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 1245985.882 ops/s
[info]                  ·gc.alloc.rate:            430.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 425.764 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1237158.972 ops/s
[info]                  ·gc.alloc.rate:            427.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 857.591 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1239896.601 ±(99.9%) 22206.722 ops/s [Average]
[info]   (min, avg, max) = (1232421.549, 1239896.601, 1245985.882), stdev = 5767.015
[info]   CI (99.9%): [1217689.879, 1262103.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   428.540 ±(99.9%) 7.768 MB/sec [Average]
[info]   (min, avg, max) = (425.892, 428.540, 430.617), stdev = 2.017
[info]   CI (99.9%): [420.772, 436.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.871 ±(99.9%) 710.971 MB/sec [Average]
[info]   (min, avg, max) = (336.990, 471.871, 674.254), stdev = 184.637
[info]   CI (99.9%): [≈ 0, 1182.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   599.289 ±(99.9%) 906.412 B/op [Average]
[info]   (min, avg, max) = (425.764, 599.289, 857.591), stdev = 235.392
[info]   CI (99.9%): [≈ 0, 1505.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:16:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28919.439 ops/s
[info] # Warmup Iteration   2: 67911.848 ops/s
[info] # Warmup Iteration   3: 69178.313 ops/s
[info] Iteration   1: 70692.581 ops/s
[info]                  ·gc.alloc.rate:                                  2970.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68204.526 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 70328.685 ops/s
[info]                  ·gc.alloc.rate:                                  2955.971 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68558.445 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 71012.710 ops/s
[info]                  ·gc.alloc.rate:                                  2984.540 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.174 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60352.247 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 68978.451 ops/s
[info]                  ·gc.alloc.rate:                                  2898.607 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69900.000 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 70483.625 ops/s
[info]                  ·gc.alloc.rate:                                  2962.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.198 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68406.733 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   70299.210 ±(99.9%) 3009.361 ops/s [Average]
[info]   (min, avg, max) = (68978.451, 70299.210, 71012.710), stdev = 781.522
[info]   CI (99.9%): [67289.849, 73308.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2954.465 ±(99.9%) 126.984 MB/sec [Average]
[info]   (min, avg, max) = (2898.607, 2954.465, 2984.540), stdev = 32.977
[info]   CI (99.9%): [2827.481, 3081.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66144.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66144.006, 66144.006, 66144.006), stdev = 0.001
[info]   CI (99.9%): [66144.005, 66144.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.006, 0.009), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.129 ±(99.9%) 0.248 B/op [Average]
[info]   (min, avg, max) = (0.052, 0.129, 0.198), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2995.475 ±(99.9%) 586.086 MB/sec [Average]
[info]   (min, avg, max) = (2723.205, 2995.475, 3064.190), stdev = 152.205
[info]   CI (99.9%): [2409.390, 3581.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67084.390 ±(99.9%) 14716.507 B/op [Average]
[info]   (min, avg, max) = (60352.247, 67084.390, 69900.000), stdev = 3821.830
[info]   CI (99.9%): [52367.883, 81800.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146729.811 ops/s
[info] # Warmup Iteration   2: 209713.821 ops/s
[info] # Warmup Iteration   3: 210924.517 ops/s
[info] Iteration   1: 214518.748 ops/s
[info]                  ·gc.alloc.rate:                                  1817.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.624 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.577 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12438.073 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.436 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 208656.503 ops/s
[info]                  ·gc.alloc.rate:                                  1767.587 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12837.696 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 215250.406 ops/s
[info]                  ·gc.alloc.rate:                                  1823.832 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14932.970 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 215479.419 ops/s
[info]                  ·gc.alloc.rate:                                  1826.303 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12431.265 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 212624.989 ops/s
[info]                  ·gc.alloc.rate:                                  1802.068 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12597.566 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   213306.013 ±(99.9%) 10900.932 ops/s [Average]
[info]   (min, avg, max) = (208656.503, 213306.013, 215479.419), stdev = 2830.937
[info]   CI (99.9%): [202405.081, 224206.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1807.555 ±(99.9%) 93.388 MB/sec [Average]
[info]   (min, avg, max) = (1767.587, 1807.555, 1826.303), stdev = 24.253
[info]   CI (99.9%): [1714.167, 1900.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.002, 13336.002, 13336.002), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.018, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.136 ±(99.9%) 1.051 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.136, 0.624), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1768.808 ±(99.9%) 588.670 MB/sec [Average]
[info]   (min, avg, max) = (1695.577, 1768.808, 2042.233), stdev = 152.876
[info]   CI (99.9%): [1180.138, 2357.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13047.514 ±(99.9%) 4108.026 B/op [Average]
[info]   (min, avg, max) = (12431.265, 13047.514, 14932.970), stdev = 1066.841
[info]   CI (99.9%): [8939.488, 17155.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.887 ±(99.9%) 42.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.887, 24.436), stdev = 10.928
[info]   CI (99.9%): [≈ 0, 46.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:15:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704163.981 ops/s
[info] # Warmup Iteration   2: 1126382.172 ops/s
[info] # Warmup Iteration   3: 1132059.782 ops/s
[info] Iteration   1: 1126828.783 ops/s
[info]                  ·gc.alloc.rate:            658.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 939.690 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1126238.658 ops/s
[info]                  ·gc.alloc.rate:            658.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 940.187 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1134987.226 ops/s
[info]                  ·gc.alloc.rate:            663.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 932.955 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1132692.452 ops/s
[info]                  ·gc.alloc.rate:            661.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 934.839 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1131320.831 ops/s
[info]                  ·gc.alloc.rate:                   661.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        935.981 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.560 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1130413.590 ±(99.9%) 14563.294 ops/s [Average]
[info]   (min, avg, max) = (1126238.658, 1130413.590, 1134987.226), stdev = 3782.041
[info]   CI (99.9%): [1115850.296, 1144976.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   660.802 ±(99.9%) 8.670 MB/sec [Average]
[info]   (min, avg, max) = (658.435, 660.802, 663.611), stdev = 2.252
[info]   CI (99.9%): [652.132, 669.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.813 ±(99.9%) 0.529 MB/sec [Average]
[info]   (min, avg, max) = (672.660, 672.813, 672.955), stdev = 0.137
[info]   CI (99.9%): [672.284, 673.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   936.731 ±(99.9%) 12.039 B/op [Average]
[info]   (min, avg, max) = (932.955, 936.731, 940.187), stdev = 3.126
[info]   CI (99.9%): [924.692, 948.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.112 ±(99.9%) 9.575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.112, 5.560), stdev = 2.487
[info]   CI (99.9%): [≈ 0, 10.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:15:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2635402.373 ops/s
[info] # Warmup Iteration   2: 3005390.935 ops/s
[info] # Warmup Iteration   3: 3060471.278 ops/s
[info] Iteration   1: 3062351.554 ops/s
[info]                  ·gc.alloc.rate:            1042.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 518.651 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 3050543.323 ops/s
[info]                  ·gc.alloc.rate:                   1038.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        694.591 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.687 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 2986083.604 ops/s
[info]                  ·gc.alloc.rate:                                  1016.881 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       536.479 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.755 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 2966286.686 ops/s
[info]                  ·gc.alloc.rate:                                  1010.036 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       541.828 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 3020063.075 ops/s
[info]                  ·gc.alloc.rate:            1028.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 532.161 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   3017065.649 ±(99.9%) 157817.017 ops/s [Average]
[info]   (min, avg, max) = (2966286.686, 3017065.649, 3062351.554), stdev = 40984.578
[info]   CI (99.9%): [2859248.632, 3174882.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1027.348 ±(99.9%) 53.669 MB/sec [Average]
[info]   (min, avg, max) = (1010.036, 1027.348, 1042.746), stdev = 13.938
[info]   CI (99.9%): [973.679, 1081.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.010 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1082.970 ±(99.9%) 566.665 MB/sec [Average]
[info]   (min, avg, max) = (1008.995, 1082.970, 1346.073), stdev = 147.161
[info]   CI (99.9%): [516.304, 1649.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   564.742 ±(99.9%) 281.456 B/op [Average]
[info]   (min, avg, max) = (518.651, 564.742, 694.591), stdev = 73.093
[info]   CI (99.9%): [283.286, 846.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.619 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.330), stdev = 1.459
[info]   CI (99.9%): [≈ 0, 6.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.489 ±(99.9%) 2.958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.489, 1.755), stdev = 0.768
[info]   CI (99.9%): [≈ 0, 3.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 4.416
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:15:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2903154.457 ops/s
[info] # Warmup Iteration   2: 2862226.471 ops/s
[info] # Warmup Iteration   3: 3199820.454 ops/s
[info] Iteration   1: 3205015.017 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3126711.258 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3203500.550 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3202663.525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3201394.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3187856.923 ±(99.9%) 131718.066 ops/s [Average]
[info]   (min, avg, max) = (3126711.258, 3187856.923, 3205015.017), stdev = 34206.763
[info]   CI (99.9%): [3056138.857, 3319574.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139617.702 ops/s
[info] # Warmup Iteration   2: 248898.082 ops/s
[info] # Warmup Iteration   3: 250102.572 ops/s
[info] Iteration   1: 255174.503 ops/s
[info]                  ·gc.alloc.rate:                                  2085.296 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.250 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.543 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12597.506 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 254539.884 ops/s
[info]                  ·gc.alloc.rate:                                  2080.386 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12628.880 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 255781.483 ops/s
[info]                  ·gc.alloc.rate:                                  2090.434 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12567.614 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 255900.730 ops/s
[info]                  ·gc.alloc.rate:                                  2091.083 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14655.285 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 252760.639 ops/s
[info]                  ·gc.alloc.rate:                                  2065.716 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12717.755 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   254831.448 ±(99.9%) 4922.531 ops/s [Average]
[info]   (min, avg, max) = (252760.639, 254831.448, 255900.730), stdev = 1278.366
[info]   CI (99.9%): [249908.916, 259753.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2082.583 ±(99.9%) 39.951 MB/sec [Average]
[info]   (min, avg, max) = (2065.716, 2082.583, 2091.083), stdev = 10.375
[info]   CI (99.9%): [2042.632, 2122.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12864.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12864.002, 12864.002, 12864.002), stdev = 0.001
[info]   CI (99.9%): [12864.001, 12864.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.052 ±(99.9%) 0.426 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.052, 0.250), stdev = 0.111
[info]   CI (99.9%): [≈ 0, 0.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.322 ±(99.9%) 2.628 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.322, 1.543), stdev = 0.683
[info]   CI (99.9%): [≈ 0, 2.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2110.244 ±(99.9%) 585.538 MB/sec [Average]
[info]   (min, avg, max) = (2042.096, 2110.244, 2382.262), stdev = 152.062
[info]   CI (99.9%): [1524.707, 2695.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   13033.408 ±(99.9%) 3497.912 B/op [Average]
[info]   (min, avg, max) = (12567.614, 13033.408, 14655.285), stdev = 908.397
[info]   CI (99.9%): [9535.496, 16531.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:15:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18015.331 ops/s
[info] # Warmup Iteration   2: 25613.790 ops/s
[info] # Warmup Iteration   3: 25450.296 ops/s
[info] Iteration   1: 25644.786 ops/s
[info]                  ·gc.alloc.rate:                   1501.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82741.436 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 204.401 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 25836.032 ops/s
[info]                  ·gc.alloc.rate:                                  1513.342 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.229 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103676.780 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 25899.038 ops/s
[info]                  ·gc.alloc.rate:                                  1516.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.449 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82739.706 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25884.736 ops/s
[info]                  ·gc.alloc.rate:                                  1516.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.827 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82784.447 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25917.736 ops/s
[info]                  ·gc.alloc.rate:                                  1518.024 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92192.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103352.815 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   25836.466 ±(99.9%) 428.752 ops/s [Average]
[info]   (min, avg, max) = (25644.786, 25836.466, 25917.736), stdev = 111.346
[info]   CI (99.9%): [25407.714, 26265.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1513.266 ±(99.9%) 25.412 MB/sec [Average]
[info]   (min, avg, max) = (1501.875, 1513.266, 1518.024), stdev = 6.600
[info]   CI (99.9%): [1487.854, 1538.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192.017 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (92192.016, 92192.017, 92192.022), stdev = 0.003
[info]   CI (99.9%): [92192.006, 92192.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.119), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.904 ±(99.9%) 11.559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.904, 7.229), stdev = 3.002
[info]   CI (99.9%): [≈ 0, 13.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.886 ±(99.9%) 727.753 MB/sec [Average]
[info]   (min, avg, max) = (1347.918, 1494.886, 1701.866), stdev = 188.995
[info]   CI (99.9%): [767.133, 2222.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   91059.037 ±(99.9%) 43786.030 B/op [Average]
[info]   (min, avg, max) = (82739.706, 91059.037, 103676.780), stdev = 11371.093
[info]   CI (99.9%): [47273.007, 134845.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   40.880 ±(99.9%) 351.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.880, 204.401), stdev = 91.411
[info]   CI (99.9%): [≈ 0, 392.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.647
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:14:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261.878 ops/s
[info] # Warmup Iteration   2: 87077.307 ops/s
[info] # Warmup Iteration   3: 92312.518 ops/s
[info] Iteration   1: 92806.749 ops/s
[info]                  ·gc.alloc.rate:            835.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16979.021 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 93245.773 ops/s
[info]                  ·gc.alloc.rate:            839.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11265.943 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 92706.121 ops/s
[info]                  ·gc.alloc.rate:            834.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16997.150 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 93250.788 ops/s
[info]                  ·gc.alloc.rate:            840.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11265.339 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 93033.727 ops/s
[info]                  ·gc.alloc.rate:                                  837.921 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.486 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17106.269 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                123.958 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   93008.632 ±(99.9%) 958.368 ops/s [Average]
[info]   (min, avg, max) = (92706.121, 93008.632, 93250.788), stdev = 248.885
[info]   CI (99.9%): [92050.264, 93966.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   837.692 ±(99.9%) 8.905 MB/sec [Average]
[info]   (min, avg, max) = (834.886, 837.692, 840.068), stdev = 2.313
[info]   CI (99.9%): [828.787, 846.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.005, 14176.005), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.097 ±(99.9%) 0.837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.486), stdev = 0.217
[info]   CI (99.9%): [≈ 0, 0.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.645 ±(99.9%) 14.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.645, 8.224), stdev = 3.678
[info]   CI (99.9%): [≈ 0, 15.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   869.641 ±(99.9%) 710.797 MB/sec [Average]
[info]   (min, avg, max) = (667.381, 869.641, 1011.124), stdev = 184.592
[info]   CI (99.9%): [158.845, 1580.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   14722.745 ±(99.9%) 12153.650 B/op [Average]
[info]   (min, avg, max) = (11265.339, 14722.745, 17106.269), stdev = 3156.264
[info]   CI (99.9%): [2569.095, 26876.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 12.618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 7.327), stdev = 3.277
[info]   CI (99.9%): [≈ 0, 14.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   24.792 ±(99.9%) 213.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.792, 123.958), stdev = 55.436
[info]   CI (99.9%): [≈ 0, 238.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.400, 14.000), stdev = 2.408
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:14:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36972.012 ops/s
[info] # Warmup Iteration   2: 59476.961 ops/s
[info] # Warmup Iteration   3: 59544.472 ops/s
[info] Iteration   1: 59303.957 ops/s
[info]                  ·gc.alloc.rate:                   979.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26730.176 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 59783.606 ops/s
[info]                  ·gc.alloc.rate:            987.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26567.316 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 59634.290 ops/s
[info]                  ·gc.alloc.rate:                                  985.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.796 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26739.611 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                105.482 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 60321.120 ops/s
[info]                  ·gc.alloc.rate:                                  996.655 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26643.688 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 60292.710 ops/s
[info]                  ·gc.alloc.rate:            996.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26655.617 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   59867.137 ±(99.9%) 1684.607 ops/s [Average]
[info]   (min, avg, max) = (59303.957, 59867.137, 60321.120), stdev = 437.487
[info]   CI (99.9%): [58182.530, 61551.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   989.225 ±(99.9%) 27.843 MB/sec [Average]
[info]   (min, avg, max) = (979.800, 989.225, 996.655), stdev = 7.231
[info]   CI (99.9%): [961.382, 1017.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.007), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.106), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.783 ±(99.9%) 4.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 2.796), stdev = 1.225
[info]   CI (99.9%): [≈ 0, 5.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.293 ±(99.9%) 25.328 MB/sec [Average]
[info]   (min, avg, max) = (1007.006, 1014.293, 1021.092), stdev = 6.578
[info]   CI (99.9%): [988.965, 1039.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   26667.282 ±(99.9%) 271.416 B/op [Average]
[info]   (min, avg, max) = (26567.316, 26667.282, 26739.611), stdev = 70.486
[info]   CI (99.9%): [26395.865, 26938.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   24.632 ±(99.9%) 176.514 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.632, 105.482), stdev = 45.840
[info]   CI (99.9%): [≈ 0, 201.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 4.722
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:14:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118532.674 ops/s
[info] # Warmup Iteration   2: 130529.098 ops/s
[info] # Warmup Iteration   3: 130375.304 ops/s
[info] Iteration   1: 130508.329 ops/s
[info]                  ·gc.alloc.rate:            840.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8129.804 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 130184.327 ops/s
[info]                  ·gc.alloc.rate:            838.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12225.051 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 130503.430 ops/s
[info]                  ·gc.alloc.rate:            841.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8130.115 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 130434.774 ops/s
[info]                  ·gc.alloc.rate:                                  840.605 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10144.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.771 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12241.813 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                40.190 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 129926.298 ops/s
[info]                  ·gc.alloc.rate:                                  837.217 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10144.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.368 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8246.973 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   130311.432 ±(99.9%) 972.867 ops/s [Average]
[info]   (min, avg, max) = (129926.298, 130311.432, 130508.329), stdev = 252.650
[info]   CI (99.9%): [129338.565, 131284.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   839.795 ±(99.9%) 6.670 MB/sec [Average]
[info]   (min, avg, max) = (837.217, 839.795, 841.349), stdev = 1.732
[info]   CI (99.9%): [833.125, 846.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10144.003, 10144.003), stdev = 0.001
[info]   CI (99.9%): [10144.003, 10144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.228 ±(99.9%) 1.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.228, 0.771), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 1.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.864 ±(99.9%) 709.522 MB/sec [Average]
[info]   (min, avg, max) = (673.983, 810.864, 1014.444), stdev = 184.261
[info]   CI (99.9%): [101.342, 1520.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9794.751 ±(99.9%) 8574.311 B/op [Average]
[info]   (min, avg, max) = (8129.804, 9794.751, 12241.813), stdev = 2226.721
[info]   CI (99.9%): [1220.441, 18369.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.038 ±(99.9%) 69.209 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.038, 40.190), stdev = 17.973
[info]   CI (99.9%): [≈ 0, 77.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.608
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15416.409 ops/s
[info] # Warmup Iteration   2: 31478.466 ops/s
[info] # Warmup Iteration   3: 32417.901 ops/s
[info] Iteration   1: 31871.785 ops/s
[info]                  ·gc.alloc.rate:                                  1665.620 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1690.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83453.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                197.367 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 33157.947 ops/s
[info]                  ·gc.alloc.rate:                                  1732.389 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.548 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.496 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80781.296 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 32846.059 ops/s
[info]                  ·gc.alloc.rate:                                  1716.485 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.503 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81550.946 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 33076.231 ops/s
[info]                  ·gc.alloc.rate:            1728.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       82248.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80983.970 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 33133.837 ops/s
[info]                  ·gc.alloc.rate:                                  1732.163 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82248.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.311 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.506 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80839.796 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   32817.172 ±(99.9%) 2089.757 ops/s [Average]
[info]   (min, avg, max) = (31871.785, 32817.172, 33157.947), stdev = 542.703
[info]   CI (99.9%): [30727.415, 34906.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1714.983 ±(99.9%) 109.139 MB/sec [Average]
[info]   (min, avg, max) = (1665.620, 1714.983, 1732.389), stdev = 28.343
[info]   CI (99.9%): [1605.844, 1824.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82248.013 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (82248.012, 82248.013, 82248.016), stdev = 0.002
[info]   CI (99.9%): [82248.008, 82248.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.066), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.925 ±(99.9%) 5.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.925, 3.265), stdev = 1.325
[info]   CI (99.9%): [≈ 0, 6.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.532 ±(99.9%) 20.515 MB/sec [Average]
[info]   (min, avg, max) = (1690.026, 1699.532, 1702.506), stdev = 5.328
[info]   CI (99.9%): [1679.017, 1720.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   81521.839 ±(99.9%) 4319.700 B/op [Average]
[info]   (min, avg, max) = (80781.296, 81521.839, 83453.189), stdev = 1121.812
[info]   CI (99.9%): [77202.140, 85841.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   39.473 ±(99.9%) 339.877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.473, 197.367), stdev = 88.265
[info]   CI (99.9%): [≈ 0, 379.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 15.000), stdev = 4.827
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:14:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25447.145 ops/s
[info] # Warmup Iteration   2: 38735.469 ops/s
[info] # Warmup Iteration   3: 39423.571 ops/s
[info] Iteration   1: 39582.127 ops/s
[info]                  ·gc.alloc.rate:                   443.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              17630.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13376.045 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.487 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 39606.208 ops/s
[info]                  ·gc.alloc.rate:            443.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26789.501 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 39566.270 ops/s
[info]                  ·gc.alloc.rate:            443.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13408.290 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 39740.714 ops/s
[info]                  ·gc.alloc.rate:            445.197 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13349.254 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 39316.913 ops/s
[info]                  ·gc.alloc.rate:            440.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26986.392 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39562.446 ±(99.9%) 591.494 ops/s [Average]
[info]   (min, avg, max) = (39316.913, 39562.446, 39740.714), stdev = 153.609
[info]   CI (99.9%): [38970.952, 40153.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   443.163 ±(99.9%) 6.593 MB/sec [Average]
[info]   (min, avg, max) = (440.455, 443.163, 445.197), stdev = 1.712
[info]   CI (99.9%): [436.570, 449.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   17631.804 ±(99.9%) 1.779 B/op [Average]
[info]   (min, avg, max) = (17630.977, 17631.804, 17632.011), stdev = 0.462
[info]   CI (99.9%): [17630.025, 17633.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.720 ±(99.9%) 711.330 MB/sec [Average]
[info]   (min, avg, max) = (336.360, 471.720, 674.131), stdev = 184.730
[info]   CI (99.9%): [≈ 0, 1183.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18781.897 ±(99.9%) 28495.282 B/op [Average]
[info]   (min, avg, max) = (13349.254, 18781.897, 26986.392), stdev = 7400.134
[info]   CI (99.9%): [≈ 0, 47277.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   5.297 ±(99.9%) 45.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.297, 26.487), stdev = 11.845
[info]   CI (99.9%): [≈ 0, 50.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:13:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22936.453 ops/s
[info] # Warmup Iteration   2: 39881.212 ops/s
[info] # Warmup Iteration   3: 41085.998 ops/s
[info] Iteration   1: 41345.374 ops/s
[info]                  ·gc.alloc.rate:            373.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12805.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 41029.583 ops/s
[info]                  ·gc.alloc.rate:            370.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25806.856 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 41348.742 ops/s
[info]                  ·gc.alloc.rate:            373.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12804.209 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 41371.810 ops/s
[info]                  ·gc.alloc.rate:            373.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12796.783 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 41435.534 ops/s
[info]                  ·gc.alloc.rate:            374.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12777.330 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41306.209 ±(99.9%) 611.553 ops/s [Average]
[info]   (min, avg, max) = (41029.583, 41306.209, 41435.534), stdev = 158.818
[info]   CI (99.9%): [40694.655, 41917.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   373.068 ±(99.9%) 5.528 MB/sec [Average]
[info]   (min, avg, max) = (370.560, 373.068, 374.211), stdev = 1.436
[info]   CI (99.9%): [367.540, 378.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.629 ±(99.9%) 579.175 MB/sec [Average]
[info]   (min, avg, max) = (336.332, 403.629, 672.691), stdev = 150.410
[info]   CI (99.9%): [≈ 0, 982.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15398.063 ±(99.9%) 22405.753 B/op [Average]
[info]   (min, avg, max) = (12777.330, 15398.063, 25806.856), stdev = 5818.703
[info]   CI (99.9%): [≈ 0, 37803.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35256.318 ops/s
[info] # Warmup Iteration   2: 43618.435 ops/s
[info] # Warmup Iteration   3: 44276.952 ops/s
[info] Iteration   1: 44719.951 ops/s
[info]                  ·gc.alloc.rate:            392.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11839.177 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44735.809 ops/s
[info]                  ·gc.alloc.rate:            393.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11834.679 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44806.074 ops/s
[info]                  ·gc.alloc.rate:            393.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11816.457 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 44753.140 ops/s
[info]                  ·gc.alloc.rate:            393.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11830.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44677.773 ops/s
[info]                  ·gc.alloc.rate:                   392.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23724.076 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.466 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44738.549 ±(99.9%) 180.813 ops/s [Average]
[info]   (min, avg, max) = (44677.773, 44738.549, 44806.074), stdev = 46.957
[info]   CI (99.9%): [44557.736, 44919.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   393.134 ±(99.9%) 1.619 MB/sec [Average]
[info]   (min, avg, max) = (392.581, 393.134, 393.724), stdev = 0.421
[info]   CI (99.9%): [391.515, 394.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.753 ±(99.9%) 580.303 MB/sec [Average]
[info]   (min, avg, max) = (336.330, 403.753, 673.338), stdev = 150.703
[info]   CI (99.9%): [≈ 0, 984.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14208.968 ±(99.9%) 20482.015 B/op [Average]
[info]   (min, avg, max) = (11816.457, 14208.968, 23724.076), stdev = 5319.114
[info]   CI (99.9%): [≈ 0, 34690.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.693 ±(99.9%) 40.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.693, 23.466), stdev = 10.494
[info]   CI (99.9%): [≈ 0, 45.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:13:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35480.373 ops/s
[info] # Warmup Iteration   2: 44285.864 ops/s
[info] # Warmup Iteration   3: 44394.950 ops/s
[info] Iteration   1: 44219.534 ops/s
[info]                  ·gc.alloc.rate:            338.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11973.294 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 44700.706 ops/s
[info]                  ·gc.alloc.rate:            341.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11845.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 42608.726 ops/s
[info]                  ·gc.alloc.rate:            325.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12426.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 44668.912 ops/s
[info]                  ·gc.alloc.rate:            341.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11853.223 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 44670.446 ops/s
[info]                  ·gc.alloc.rate:                   341.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11852.692 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.471 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44173.665 ±(99.9%) 3455.388 ops/s [Average]
[info]   (min, avg, max) = (42608.726, 44173.665, 44700.706), stdev = 897.353
[info]   CI (99.9%): [40718.277, 47629.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   337.711 ±(99.9%) 26.556 MB/sec [Average]
[info]   (min, avg, max) = (325.685, 337.711, 341.716), stdev = 6.896
[info]   CI (99.9%): [311.156, 364.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.010), stdev = 0.001
[info]   CI (99.9%): [12032.008, 12032.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   336.420 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (336.356, 336.420, 336.505), stdev = 0.054
[info]   CI (99.9%): [336.211, 336.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   11990.086 ±(99.9%) 961.025 B/op [Average]
[info]   (min, avg, max) = (11845.003, 11990.086, 12426.219), stdev = 249.575
[info]   CI (99.9%): [11029.061, 12951.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   4.694 ±(99.9%) 40.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.694, 23.471), stdev = 10.496
[info]   CI (99.9%): [≈ 0, 45.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14211.830 ops/s
[info] # Warmup Iteration   2: 19621.851 ops/s
[info] # Warmup Iteration   3: 19578.384 ops/s
[info] Iteration   1: 19590.789 ops/s
[info]                  ·gc.alloc.rate:                   734.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54154.576 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 19522.613 ops/s
[info]                  ·gc.alloc.rate:            732.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54399.646 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 19383.191 ops/s
[info]                  ·gc.alloc.rate:                   726.986 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54735.591 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 19744.479 ops/s
[info]                  ·gc.alloc.rate:            740.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53788.105 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 19712.328 ops/s
[info]                  ·gc.alloc.rate:                   739.327 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53822.221 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 265.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19590.680 ±(99.9%) 565.065 ops/s [Average]
[info]   (min, avg, max) = (19383.191, 19590.680, 19744.479), stdev = 146.746
[info]   CI (99.9%): [19025.616, 20155.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   734.864 ±(99.9%) 21.095 MB/sec [Average]
[info]   (min, avg, max) = (726.986, 734.864, 740.583), stdev = 5.478
[info]   CI (99.9%): [713.769, 755.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040.026 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (59040.021, 59040.026, 59040.039), stdev = 0.008
[info]   CI (99.9%): [59039.995, 59040.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   674.342 ±(99.9%) 1.786 MB/sec [Average]
[info]   (min, avg, max) = (673.984, 674.342, 674.973), stdev = 0.464
[info]   CI (99.9%): [672.557, 676.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54180.028 ±(99.9%) 1539.247 B/op [Average]
[info]   (min, avg, max) = (53788.105, 54180.028, 54735.591), stdev = 399.738
[info]   CI (99.9%): [52640.781, 55719.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   74.704 ±(99.9%) 424.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.704, 265.920), stdev = 110.226
[info]   CI (99.9%): [≈ 0, 499.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:12:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11452.243 ops/s
[info] # Warmup Iteration   2: 18371.826 ops/s
[info] # Warmup Iteration   3: 18734.704 ops/s
[info] Iteration   1: 18842.211 ops/s
[info]                  ·gc.alloc.rate:            534.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       44658.248 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28097.786 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18761.077 ops/s
[info]                  ·gc.alloc.rate:            532.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56438.143 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 18822.800 ops/s
[info]                  ·gc.alloc.rate:            534.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28127.636 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 18748.263 ops/s
[info]                  ·gc.alloc.rate:            532.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       44678.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56477.270 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 18731.758 ops/s
[info]                  ·gc.alloc.rate:            531.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56528.517 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18781.222 ±(99.9%) 186.540 ops/s [Average]
[info]   (min, avg, max) = (18731.758, 18781.222, 18842.211), stdev = 48.444
[info]   CI (99.9%): [18594.682, 18967.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   533.093 ±(99.9%) 4.911 MB/sec [Average]
[info]   (min, avg, max) = (531.825, 533.093, 534.639), stdev = 1.275
[info]   CI (99.9%): [528.182, 538.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44675.320 ±(99.9%) 36.864 B/op [Average]
[info]   (min, avg, max) = (44658.248, 44675.320, 44680.029), stdev = 9.573
[info]   CI (99.9%): [44638.456, 44712.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.200 ±(99.9%) 709.486 MB/sec [Average]
[info]   (min, avg, max) = (336.345, 538.200, 672.857), stdev = 184.251
[info]   CI (99.9%): [≈ 0, 1247.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   45133.870 ±(99.9%) 59831.914 B/op [Average]
[info]   (min, avg, max) = (28097.786, 45133.870, 56528.517), stdev = 15538.158
[info]   CI (99.9%): [≈ 0, 104965.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:12:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61886.358 ops/s
[info] # Warmup Iteration   2: 69123.923 ops/s
[info] # Warmup Iteration   3: 80677.710 ops/s
[info] Iteration   1: 80286.493 ops/s
[info]                  ·gc.alloc.rate:            208.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      338.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6633.499 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 80765.882 ops/s
[info]                  ·gc.alloc.rate:      210.189 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 80214.644 ops/s
[info]                  ·gc.alloc.rate:            208.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6626.382 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 80439.215 ops/s
[info]                  ·gc.alloc.rate:            209.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6608.015 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 80565.330 ops/s
[info]                  ·gc.alloc.rate:      209.647 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   80454.313 ±(99.9%) 850.706 ops/s [Average]
[info]   (min, avg, max) = (80214.644, 80454.313, 80765.882), stdev = 220.926
[info]   CI (99.9%): [79603.607, 81305.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   209.357 ±(99.9%) 2.261 MB/sec [Average]
[info]   (min, avg, max) = (208.724, 209.357, 210.189), stdev = 0.587
[info]   CI (99.9%): [207.096, 211.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.736 ±(99.9%) 712.646 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.736, 338.333), stdev = 185.072
[info]   CI (99.9%): [≈ 0, 915.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3973.579 ±(99.9%) 13967.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3973.579, 6633.499), stdev = 3627.377
[info]   CI (99.9%): [≈ 0, 17941.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7882.258 ops/s
[info] # Warmup Iteration   2: 15292.950 ops/s
[info] # Warmup Iteration   3: 15779.267 ops/s
[info] Iteration   1: 15699.033 ops/s
[info]                  ·gc.alloc.rate:            1017.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101171.357 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 15725.663 ops/s
[info]                  ·gc.alloc.rate:            1019.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       102048.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101004.110 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 15809.050 ops/s
[info]                  ·gc.alloc.rate:                                  1025.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100865.425 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                397.891 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 15942.889 ops/s
[info]                  ·gc.alloc.rate:                                  1033.522 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.034 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100806.911 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 15900.853 ops/s
[info]                  ·gc.alloc.rate:                                  1030.838 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102048.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.694 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101073.127 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   15815.498 ±(99.9%) 409.284 ops/s [Average]
[info]   (min, avg, max) = (15699.033, 15815.498, 15942.889), stdev = 106.290
[info]   CI (99.9%): [15406.214, 16224.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1025.356 ±(99.9%) 26.381 MB/sec [Average]
[info]   (min, avg, max) = (1017.777, 1025.356, 1033.522), stdev = 6.851
[info]   CI (99.9%): [998.975, 1051.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102048.029 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (102048.026, 102048.029, 102048.034), stdev = 0.003
[info]   CI (99.9%): [102048.017, 102048.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.091), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.583 ±(99.9%) 14.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.583, 9.050), stdev = 3.843
[info]   CI (99.9%): [≈ 0, 17.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.662 ±(99.9%) 23.100 MB/sec [Average]
[info]   (min, avg, max) = (1009.034, 1014.662, 1020.990), stdev = 5.999
[info]   CI (99.9%): [991.562, 1037.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   100984.186 ±(99.9%) 573.962 B/op [Average]
[info]   (min, avg, max) = (100806.911, 100984.186, 101171.357), stdev = 149.056
[info]   CI (99.9%): [100410.224, 101558.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   79.578 ±(99.9%) 685.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.578, 397.891), stdev = 177.942
[info]   CI (99.9%): [≈ 0, 764.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.070
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:12:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41408.930 ops/s
[info] # Warmup Iteration   2: 55917.612 ops/s
[info] # Warmup Iteration   3: 58510.457 ops/s
[info] Iteration   1: 58862.223 ops/s
[info]                  ·gc.alloc.rate:            891.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18024.237 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 58676.881 ops/s
[info]                  ·gc.alloc.rate:            888.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27122.041 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 58791.616 ops/s
[info]                  ·gc.alloc.rate:            891.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27068.999 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 58787.169 ops/s
[info]                  ·gc.alloc.rate:                                  890.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.893 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18136.702 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.168 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 58931.067 ops/s
[info]                  ·gc.alloc.rate:                                  892.876 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23848.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.316 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27272.013 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   58809.791 ±(99.9%) 365.122 ops/s [Average]
[info]   (min, avg, max) = (58676.881, 58809.791, 58931.067), stdev = 94.821
[info]   CI (99.9%): [58444.670, 59174.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   891.048 ±(99.9%) 5.772 MB/sec [Average]
[info]   (min, avg, max) = (888.797, 891.048, 892.876), stdev = 1.499
[info]   CI (99.9%): [885.276, 896.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.007), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.087), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.642 ±(99.9%) 3.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.642, 2.316), stdev = 1.013
[info]   CI (99.9%): [≈ 0, 4.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.940 ±(99.9%) 714.556 MB/sec [Average]
[info]   (min, avg, max) = (673.986, 878.940, 1021.071), stdev = 185.568
[info]   CI (99.9%): [164.385, 1593.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   23524.799 ±(99.9%) 19140.344 B/op [Average]
[info]   (min, avg, max) = (18024.237, 23524.799, 27272.013), stdev = 4970.687
[info]   CI (99.9%): [4384.454, 42665.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.834 ±(99.9%) 153.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.834, 89.168), stdev = 39.877
[info]   CI (99.9%): [≈ 0, 171.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 11.000), stdev = 3.536
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51963.415 ops/s
[info] # Warmup Iteration   2: 86661.258 ops/s
[info] # Warmup Iteration   3: 86691.843 ops/s
[info] Iteration   1: 87503.410 ops/s
[info]                  ·gc.alloc.rate:            1037.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24201.871 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 88028.610 ops/s
[info]                  ·gc.alloc.rate:            1043.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18043.168 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 87390.352 ops/s
[info]                  ·gc.alloc.rate:                                  1036.307 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18318.829 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                71.980 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 88771.441 ops/s
[info]                  ·gc.alloc.rate:                                  1052.536 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.515 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18104.756 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 88586.226 ops/s
[info]                  ·gc.alloc.rate:            1050.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18142.149 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   88056.008 ±(99.9%) 2390.960 ops/s [Average]
[info]   (min, avg, max) = (87390.352, 88056.008, 88771.441), stdev = 620.925
[info]   CI (99.9%): [85665.048, 90446.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1044.175 ±(99.9%) 28.458 MB/sec [Average]
[info]   (min, avg, max) = (1036.307, 1044.175, 1052.536), stdev = 7.390
[info]   CI (99.9%): [1015.718, 1072.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.005, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.113), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.510 ±(99.9%) 3.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.510, 2.038), stdev = 0.882
[info]   CI (99.9%): [≈ 0, 3.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.787 ±(99.9%) 565.655 MB/sec [Average]
[info]   (min, avg, max) = (1009.043, 1082.787, 1345.418), stdev = 146.899
[info]   CI (99.9%): [517.131, 1648.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19362.155 ±(99.9%) 10425.324 B/op [Average]
[info]   (min, avg, max) = (18043.168, 19362.155, 24201.871), stdev = 2707.424
[info]   CI (99.9%): [8936.830, 29787.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.396 ±(99.9%) 123.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.396, 71.980), stdev = 32.190
[info]   CI (99.9%): [≈ 0, 138.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 15.000), stdev = 5.683
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:11:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188848.344 ops/s
[info] # Warmup Iteration   2: 204102.980 ops/s
[info] # Warmup Iteration   3: 209084.281 ops/s
[info] Iteration   1: 209835.743 ops/s
[info]                  ·gc.alloc.rate:            332.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2528.086 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 209451.624 ops/s
[info]                  ·gc.alloc.rate:                   332.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2527.787 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 209029.705 ops/s
[info]                  ·gc.alloc.rate:            331.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2537.832 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 209360.354 ops/s
[info]                  ·gc.alloc.rate:            331.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2533.893 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 209522.719 ops/s
[info]                  ·gc.alloc.rate:            332.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2531.922 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   209440.029 ±(99.9%) 1119.795 ops/s [Average]
[info]   (min, avg, max) = (209029.705, 209440.029, 209835.743), stdev = 290.807
[info]   CI (99.9%): [208320.234, 210559.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   332.105 ±(99.9%) 1.855 MB/sec [Average]
[info]   (min, avg, max) = (331.424, 332.105, 332.759), stdev = 0.482
[info]   CI (99.9%): [330.250, 333.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.881 ±(99.9%) 1.125 MB/sec [Average]
[info]   (min, avg, max) = (336.360, 336.881, 337.037), stdev = 0.292
[info]   CI (99.9%): [335.757, 338.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2531.904 ±(99.9%) 16.181 B/op [Average]
[info]   (min, avg, max) = (2527.787, 2531.904, 2537.832), stdev = 4.202
[info]   CI (99.9%): [2515.723, 2548.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.001 ±(99.9%) 8.620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.001, 5.006), stdev = 2.239
[info]   CI (99.9%): [≈ 0, 9.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:11:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 211791.980 ops/s
[info] # Warmup Iteration   2: 239493.811 ops/s
[info] # Warmup Iteration   3: 237648.594 ops/s
[info] Iteration   1: 239082.870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 237942.659 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 238820.849 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 239009.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 239121.993 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   238795.550 ±(99.9%) 1889.273 ops/s [Average]
[info]   (min, avg, max) = (237942.659, 238795.550, 239121.993), stdev = 490.638
[info]   CI (99.9%): [236906.277, 240684.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48303.657 ops/s
[info] # Warmup Iteration   2: 68367.112 ops/s
[info] # Warmup Iteration   3: 68324.927 ops/s
[info] Iteration   1: 68727.557 ops/s
[info]                  ·gc.alloc.rate:            1071.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       24544.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23111.508 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 68142.049 ops/s
[info]                  ·gc.alloc.rate:            1062.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       24544.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31080.316 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 68016.808 ops/s
[info]                  ·gc.alloc.rate:                                  1060.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24544.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.627 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23536.316 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                92.481 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 69363.172 ops/s
[info]                  ·gc.alloc.rate:                                  1081.492 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24544.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.492 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23170.696 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 69341.650 ops/s
[info]                  ·gc.alloc.rate:            1081.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       24544.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23177.712 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   68718.247 ±(99.9%) 2457.081 ops/s [Average]
[info]   (min, avg, max) = (68016.808, 68718.247, 69363.172), stdev = 638.096
[info]   CI (99.9%): [66261.166, 71175.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1071.479 ±(99.9%) 38.233 MB/sec [Average]
[info]   (min, avg, max) = (1060.623, 1071.479, 1081.492), stdev = 9.929
[info]   CI (99.9%): [1033.246, 1109.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24544.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24544.006, 24544.006, 24544.006), stdev = 0.001
[info]   CI (99.9%): [24544.005, 24544.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.114), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.624 ±(99.9%) 4.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.624, 2.627), stdev = 1.140
[info]   CI (99.9%): [≈ 0, 5.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.708 ±(99.9%) 565.727 MB/sec [Average]
[info]   (min, avg, max) = (1009.094, 1082.708, 1345.379), stdev = 146.917
[info]   CI (99.9%): [516.982, 1648.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   24815.309 ±(99.9%) 13501.374 B/op [Average]
[info]   (min, avg, max) = (23111.508, 24815.309, 31080.316), stdev = 3506.264
[info]   CI (99.9%): [11313.935, 38316.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   18.496 ±(99.9%) 159.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.496, 92.481), stdev = 41.359
[info]   CI (99.9%): [≈ 0, 177.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 16.000), stdev = 6.017
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:11:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18377.631 ops/s
[info] # Warmup Iteration   2: 25378.557 ops/s
[info] # Warmup Iteration   3: 26998.348 ops/s
[info] Iteration   1: 27187.510 ops/s
[info]                  ·gc.alloc.rate:            565.383 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39024.673 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 27355.096 ops/s
[info]                  ·gc.alloc.rate:            568.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       32712.992 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19393.233 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 26913.641 ops/s
[info]                  ·gc.alloc.rate:            559.132 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39421.908 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 26771.956 ops/s
[info]                  ·gc.alloc.rate:            556.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39629.492 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 27435.867 ops/s
[info]                  ·gc.alloc.rate:            569.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       32696.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19335.281 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27132.814 ±(99.9%) 1093.368 ops/s [Average]
[info]   (min, avg, max) = (26771.956, 27132.814, 27435.867), stdev = 283.944
[info]   CI (99.9%): [26039.446, 28226.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   563.801 ±(99.9%) 22.754 MB/sec [Average]
[info]   (min, avg, max) = (556.222, 563.801, 569.865), stdev = 5.909
[info]   CI (99.9%): [541.046, 586.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32707.411 ±(99.9%) 67.769 B/op [Average]
[info]   (min, avg, max) = (32696.015, 32707.411, 32736.016), stdev = 17.599
[info]   CI (99.9%): [32639.642, 32775.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   539.256 ±(99.9%) 711.025 MB/sec [Average]
[info]   (min, avg, max) = (336.965, 539.256, 674.173), stdev = 184.651
[info]   CI (99.9%): [≈ 0, 1250.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   31360.917 ±(99.9%) 42178.327 B/op [Average]
[info]   (min, avg, max) = (19335.281, 31360.917, 39629.492), stdev = 10953.578
[info]   CI (99.9%): [≈ 0, 73539.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:11:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18523.997 ops/s
[info] # Warmup Iteration   2: 28128.413 ops/s
[info] # Warmup Iteration   3: 28162.163 ops/s
[info] Iteration   1: 28084.071 ops/s
[info]                  ·gc.alloc.rate:            369.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37703.790 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 28153.113 ops/s
[info]                  ·gc.alloc.rate:            370.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       20686.852 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18805.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 28360.621 ops/s
[info]                  ·gc.alloc.rate:            372.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18667.144 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 28375.272 ops/s
[info]                  ·gc.alloc.rate:            372.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18657.936 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 28235.162 ops/s
[info]                  ·gc.alloc.rate:            371.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18751.093 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28241.648 ±(99.9%) 489.808 ops/s [Average]
[info]   (min, avg, max) = (28084.071, 28241.648, 28375.272), stdev = 127.201
[info]   CI (99.9%): [27751.840, 28731.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   371.205 ±(99.9%) 6.449 MB/sec [Average]
[info]   (min, avg, max) = (369.093, 371.205, 372.974), stdev = 1.675
[info]   CI (99.9%): [364.756, 377.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20687.783 ±(99.9%) 2.004 B/op [Average]
[info]   (min, avg, max) = (20686.852, 20687.783, 20688.018), stdev = 0.520
[info]   CI (99.9%): [20685.779, 20689.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.638 ±(99.9%) 579.110 MB/sec [Average]
[info]   (min, avg, max) = (336.342, 403.638, 672.670), stdev = 150.393
[info]   CI (99.9%): [≈ 0, 982.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22517.133 ±(99.9%) 32691.273 B/op [Average]
[info]   (min, avg, max) = (18657.936, 22517.133, 37703.790), stdev = 8489.820
[info]   CI (99.9%): [≈ 0, 55208.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97284.707 ops/s
[info] # Warmup Iteration   2: 116999.403 ops/s
[info] # Warmup Iteration   3: 116665.492 ops/s
[info] Iteration   1: 118724.391 ops/s
[info]                  ·gc.alloc.rate:            463.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8936.527 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 119338.222 ops/s
[info]                  ·gc.alloc.rate:            465.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4445.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 116532.650 ops/s
[info]                  ·gc.alloc.rate:            455.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9104.674 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 118848.677 ops/s
[info]                  ·gc.alloc.rate:            463.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4463.489 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 119449.672 ops/s
[info]                  ·gc.alloc.rate:            466.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4441.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   118578.722 ±(99.9%) 4562.606 ops/s [Average]
[info]   (min, avg, max) = (116532.650, 118578.722, 119449.672), stdev = 1184.894
[info]   CI (99.9%): [114016.116, 123141.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   462.912 ±(99.9%) 17.668 MB/sec [Average]
[info]   (min, avg, max) = (455.003, 462.912, 466.314), stdev = 4.588
[info]   CI (99.9%): [445.244, 480.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.004, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.896 ±(99.9%) 710.921 MB/sec [Average]
[info]   (min, avg, max) = (337.059, 471.896, 674.260), stdev = 184.624
[info]   CI (99.9%): [≈ 0, 1182.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6278.216 ±(99.9%) 9642.641 B/op [Average]
[info]   (min, avg, max) = (4441.110, 6278.216, 9104.674), stdev = 2504.163
[info]   CI (99.9%): [≈ 0, 15920.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:10:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17042.618 ops/s
[info] # Warmup Iteration   2: 39030.292 ops/s
[info] # Warmup Iteration   3: 39548.629 ops/s
[info] Iteration   1: 40575.239 ops/s
[info]                  ·gc.alloc.rate:                                  2187.587 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84872.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79218.737 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 40747.006 ops/s
[info]                  ·gc.alloc.rate:                                  2197.059 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84872.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92031.808 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 40582.887 ops/s
[info]                  ·gc.alloc.rate:                                  2188.190 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84872.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79203.124 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 40674.735 ops/s
[info]                  ·gc.alloc.rate:                                  2193.775 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84872.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.355 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92194.685 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 40687.782 ops/s
[info]                  ·gc.alloc.rate:                                  2193.975 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84872.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79000.713 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   40653.530 ±(99.9%) 282.181 ops/s [Average]
[info]   (min, avg, max) = (40575.239, 40653.530, 40747.006), stdev = 73.281
[info]   CI (99.9%): [40371.349, 40935.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2192.117 ±(99.9%) 15.709 MB/sec [Average]
[info]   (min, avg, max) = (2187.587, 2192.117, 2197.059), stdev = 4.080
[info]   CI (99.9%): [2176.408, 2207.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84872.011 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (84872.010, 84872.011, 84872.013), stdev = 0.001
[info]   CI (99.9%): [84872.005, 84872.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.009, 0.030), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.336 ±(99.9%) 1.824 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.336, 1.148), stdev = 0.474
[info]   CI (99.9%): [≈ 0, 2.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2178.312 ±(99.9%) 718.548 MB/sec [Average]
[info]   (min, avg, max) = (2041.873, 2178.312, 2383.051), stdev = 186.605
[info]   CI (99.9%): [1459.763, 2896.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84329.814 ±(99.9%) 27362.766 B/op [Average]
[info]   (min, avg, max) = (79000.713, 84329.814, 92194.685), stdev = 7106.023
[info]   CI (99.9%): [56967.047, 111692.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133838.957 ops/s
[info] # Warmup Iteration   2: 176921.747 ops/s
[info] # Warmup Iteration   3: 179741.805 ops/s
[info] Iteration   1: 179235.467 ops/s
[info]                  ·gc.alloc.rate:            625.784 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5919.829 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 179551.766 ops/s
[info]                  ·gc.alloc.rate:            626.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2954.673 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 179547.213 ops/s
[info]                  ·gc.alloc.rate:            626.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5909.378 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 178465.150 ops/s
[info]                  ·gc.alloc.rate:            623.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5944.868 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 178383.176 ops/s
[info]                  ·gc.alloc.rate:            622.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5947.600 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   179036.555 ±(99.9%) 2211.346 ops/s [Average]
[info]   (min, avg, max) = (178383.176, 179036.555, 179551.766), stdev = 574.280
[info]   CI (99.9%): [176825.208, 181247.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   625.123 ±(99.9%) 7.645 MB/sec [Average]
[info]   (min, avg, max) = (622.872, 625.123, 626.963), stdev = 1.985
[info]   CI (99.9%): [617.478, 632.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.638 ±(99.9%) 580.291 MB/sec [Average]
[info]   (min, avg, max) = (337.058, 606.638, 674.052), stdev = 150.700
[info]   CI (99.9%): [26.346, 1186.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5335.270 ±(99.9%) 5124.797 B/op [Average]
[info]   (min, avg, max) = (2954.673, 5335.270, 5947.600), stdev = 1330.894
[info]   CI (99.9%): [210.473, 10460.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 1.924
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:10:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188927.022 ops/s
[info] # Warmup Iteration   2: 274582.622 ops/s
[info] # Warmup Iteration   3: 281241.252 ops/s
[info] Iteration   1: 277966.086 ops/s
[info]                  ·gc.alloc.rate:            281.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1904.664 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 283255.381 ops/s
[info]                  ·gc.alloc.rate:      286.510 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 263975.398 ops/s
[info]                  ·gc.alloc.rate:            266.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2005.647 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 273683.538 ops/s
[info]                  ·gc.alloc.rate:            276.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1934.508 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 279835.295 ops/s
[info]                  ·gc.alloc.rate:            283.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1891.979 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   275743.140 ±(99.9%) 28611.780 ops/s [Average]
[info]   (min, avg, max) = (263975.398, 275743.140, 283255.381), stdev = 7430.388
[info]   CI (99.9%): [247131.360, 304354.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   278.879 ±(99.9%) 28.941 MB/sec [Average]
[info]   (min, avg, max) = (266.988, 278.879, 286.510), stdev = 7.516
[info]   CI (99.9%): [249.938, 307.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.002, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.068 ±(99.9%) 579.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.068, 336.358), stdev = 150.413
[info]   CI (99.9%): [≈ 0, 848.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1547.360 ±(99.9%) 3335.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1547.360, 2005.647), stdev = 866.121
[info]   CI (99.9%): [≈ 0, 4882.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 440577.232 ops/s
[info] # Warmup Iteration   2: 491265.365 ops/s
[info] # Warmup Iteration   3: 498064.299 ops/s
[info] Iteration   1: 499191.040 ops/s
[info]                  ·gc.alloc.rate:            383.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1060.600 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 491657.321 ops/s
[info]                  ·gc.alloc.rate:            377.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1076.856 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 499657.956 ops/s
[info]                  ·gc.alloc.rate:            383.521 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1059.628 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 499647.744 ops/s
[info]                  ·gc.alloc.rate:                   383.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1059.623 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.098 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 498226.661 ops/s
[info]                  ·gc.alloc.rate:            382.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2127.445 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   497676.145 ±(99.9%) 13148.552 ops/s [Average]
[info]   (min, avg, max) = (491657.321, 497676.145, 499657.956), stdev = 3414.637
[info]   CI (99.9%): [484527.592, 510824.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   381.973 ±(99.9%) 9.928 MB/sec [Average]
[info]   (min, avg, max) = (377.435, 381.973, 383.521), stdev = 2.578
[info]   CI (99.9%): [372.045, 391.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.790 ±(99.9%) 580.259 MB/sec [Average]
[info]   (min, avg, max) = (336.317, 403.790, 673.355), stdev = 150.691
[info]   CI (99.9%): [≈ 0, 984.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1276.830 ±(99.9%) 1831.231 B/op [Average]
[info]   (min, avg, max) = (1059.623, 1276.830, 2127.445), stdev = 475.565
[info]   CI (99.9%): [≈ 0, 3108.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.420 ±(99.9%) 3.613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.420, 2.098), stdev = 0.938
[info]   CI (99.9%): [≈ 0, 4.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:09:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 476412.573 ops/s
[info] # Warmup Iteration   2: 525022.180 ops/s
[info] # Warmup Iteration   3: 531517.513 ops/s
[info] Iteration   1: 531441.676 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 530378.711 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 528683.454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 531697.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 531410.724 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   530722.465 ±(99.9%) 4800.930 ops/s [Average]
[info]   (min, avg, max) = (528683.454, 530722.465, 531697.762), stdev = 1246.786
[info]   CI (99.9%): [525921.535, 535523.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157830.375 ops/s
[info] # Warmup Iteration   2: 272539.246 ops/s
[info] # Warmup Iteration   3: 276244.084 ops/s
[info] Iteration   1: 274734.323 ops/s
[info]                  ·gc.alloc.rate:            756.749 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5781.347 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 271405.101 ops/s
[info]                  ·gc.alloc.rate:                   747.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3897.851 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.863 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 259081.863 ops/s
[info]                  ·gc.alloc.rate:            713.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4087.243 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 272417.007 ops/s
[info]                  ·gc.alloc.rate:            750.403 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3887.207 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 276418.782 ops/s
[info]                  ·gc.alloc.rate:                   761.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3853.469 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.757 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   270811.415 ±(99.9%) 26352.626 ops/s [Average]
[info]   (min, avg, max) = (259081.863, 270811.415, 276418.782), stdev = 6843.693
[info]   CI (99.9%): [244458.789, 297164.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   745.997 ±(99.9%) 72.666 MB/sec [Average]
[info]   (min, avg, max) = (713.657, 745.997, 761.516), stdev = 18.871
[info]   CI (99.9%): [673.330, 818.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.002, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   740.665 ±(99.9%) 577.656 MB/sec [Average]
[info]   (min, avg, max) = (672.108, 740.665, 1009.000), stdev = 150.015
[info]   CI (99.9%): [163.009, 1318.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4301.423 ±(99.9%) 3205.042 B/op [Average]
[info]   (min, avg, max) = (3853.469, 4301.423, 5781.347), stdev = 832.339
[info]   CI (99.9%): [1096.381, 7506.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.324 ±(99.9%) 38.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.324, 22.757), stdev = 9.888
[info]   CI (99.9%): [≈ 0, 43.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.800, 13.000), stdev = 2.588
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28180.673 ops/s
[info] # Warmup Iteration   2: 35419.015 ops/s
[info] # Warmup Iteration   3: 36114.651 ops/s
[info] Iteration   1: 36201.785 ops/s
[info]                  ·gc.alloc.rate:                                  1615.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70199.576 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.141 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73555.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                144.795 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 36689.537 ops/s
[info]                  ·gc.alloc.rate:                                  1636.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.394 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58408.212 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 36678.993 ops/s
[info]                  ·gc.alloc.rate:                                  1635.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.844 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73030.167 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 36537.266 ops/s
[info]                  ·gc.alloc.rate:                                  1629.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73311.944 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36724.512 ops/s
[info]                  ·gc.alloc.rate:                                  1638.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72938.708 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   36566.418 ±(99.9%) 831.756 ops/s [Average]
[info]   (min, avg, max) = (36201.785, 36566.418, 36724.512), stdev = 216.004
[info]   CI (99.9%): [35734.662, 37398.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1630.976 ±(99.9%) 36.401 MB/sec [Average]
[info]   (min, avg, max) = (1615.109, 1630.976, 1638.109), stdev = 9.453
[info]   CI (99.9%): [1594.575, 1667.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70199.924 ±(99.9%) 0.750 B/op [Average]
[info]   (min, avg, max) = (70199.576, 70199.924, 70200.012), stdev = 0.195
[info]   CI (99.9%): [70199.174, 70200.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.228 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.036, 0.141), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.539 ±(99.9%) 9.936 B/op [Average]
[info]   (min, avg, max) = (0.056, 1.539, 6.126), stdev = 2.580
[info]   CI (99.9%): [≈ 0, 11.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.863 ±(99.9%) 582.144 MB/sec [Average]
[info]   (min, avg, max) = (1361.523, 1631.863, 1702.016), stdev = 151.181
[info]   CI (99.9%): [1049.719, 2214.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70248.972 ±(99.9%) 25505.279 B/op [Average]
[info]   (min, avg, max) = (58408.212, 70248.972, 73555.830), stdev = 6623.640
[info]   CI (99.9%): [44743.693, 95754.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.959 ±(99.9%) 249.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.959, 144.795), stdev = 64.754
[info]   CI (99.9%): [≈ 0, 278.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19309.524 ops/s
[info] # Warmup Iteration   2: 304400.749 ops/s
[info] # Warmup Iteration   3: 303461.705 ops/s
[info] Iteration   1: 306941.650 ops/s
[info]                  ·gc.alloc.rate:      318.246 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 290464.603 ops/s
[info]                  ·gc.alloc.rate:            301.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1808.412 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 304600.760 ops/s
[info]                  ·gc.alloc.rate:            315.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1724.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 305660.621 ops/s
[info]                  ·gc.alloc.rate:            316.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1718.471 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 306773.248 ops/s
[info]                  ·gc.alloc.rate:            318.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1712.120 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   302888.176 ±(99.9%) 26988.110 ops/s [Average]
[info]   (min, avg, max) = (290464.603, 302888.176, 306941.650), stdev = 7008.727
[info]   CI (99.9%): [275900.066, 329876.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   314.104 ±(99.9%) 27.940 MB/sec [Average]
[info]   (min, avg, max) = (301.248, 314.104, 318.246), stdev = 7.256
[info]   CI (99.9%): [286.164, 342.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.002), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   267.031 ±(99.9%) 574.805 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 267.031, 333.846), stdev = 149.275
[info]   CI (99.9%): [≈ 0, 841.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1392.700 ±(99.9%) 3001.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1392.700, 1808.412), stdev = 779.531
[info]   CI (99.9%): [≈ 0, 4394.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:08:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63974.265 ops/s
[info] # Warmup Iteration   2: 98787.702 ops/s
[info] # Warmup Iteration   3: 98169.987 ops/s
[info] Iteration   1: 98121.228 ops/s
[info]                  ·gc.alloc.rate:            1084.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16187.335 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 98212.001 ops/s
[info]                  ·gc.alloc.rate:                   1085.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21552.224 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 74.723 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 96882.082 ops/s
[info]                  ·gc.alloc.rate:                                  1070.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.229 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.725 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16589.440 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 99487.180 ops/s
[info]                  ·gc.alloc.rate:                                  1099.237 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16154.636 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 100313.649 ops/s
[info]                  ·gc.alloc.rate:            1108.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16021.319 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   98603.228 ±(99.9%) 5113.764 ops/s [Average]
[info]   (min, avg, max) = (96882.082, 98603.228, 100313.649), stdev = 1328.028
[info]   CI (99.9%): [93489.464, 103716.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1089.469 ±(99.9%) 56.536 MB/sec [Average]
[info]   (min, avg, max) = (1070.401, 1089.469, 1108.359), stdev = 14.682
[info]   CI (99.9%): [1032.933, 1146.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.005), stdev = 0.001
[info]   CI (99.9%): [17392.003, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.229), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.749 ±(99.9%) 6.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.749, 3.725), stdev = 1.664
[info]   CI (99.9%): [≈ 0, 7.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.372 ±(99.9%) 562.867 MB/sec [Average]
[info]   (min, avg, max) = (1009.119, 1083.372, 1344.695), stdev = 146.175
[info]   CI (99.9%): [520.505, 1646.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17300.991 ±(99.9%) 9187.480 B/op [Average]
[info]   (min, avg, max) = (16021.319, 17300.991, 21552.224), stdev = 2385.959
[info]   CI (99.9%): [8113.511, 26488.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.945 ±(99.9%) 128.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.945, 74.723), stdev = 33.417
[info]   CI (99.9%): [≈ 0, 143.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 17.000), stdev = 6.907
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:08:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380305.605 ops/s
[info] # Warmup Iteration   2: 385074.811 ops/s
[info] # Warmup Iteration   3: 401371.789 ops/s
[info] Iteration   1: 400450.211 ops/s
[info]                  ·gc.alloc.rate:            260.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1324.713 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 402813.543 ops/s
[info]                  ·gc.alloc.rate:      262.072 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 401141.034 ops/s
[info]                  ·gc.alloc.rate:            260.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1322.488 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 401373.026 ops/s
[info]                  ·gc.alloc.rate:            261.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1321.700 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 400764.952 ops/s
[info]                  ·gc.alloc.rate:            260.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1323.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   401308.553 ±(99.9%) 3513.101 ops/s [Average]
[info]   (min, avg, max) = (400450.211, 401308.553, 402813.543), stdev = 912.341
[info]   CI (99.9%): [397795.452, 404821.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   261.068 ±(99.9%) 2.345 MB/sec [Average]
[info]   (min, avg, max) = (260.495, 261.068, 262.072), stdev = 0.609
[info]   CI (99.9%): [258.722, 263.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.609 ±(99.9%) 580.354 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.609, 337.034), stdev = 150.716
[info]   CI (99.9%): [≈ 0, 849.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1058.521 ±(99.9%) 2278.551 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1058.521, 1324.713), stdev = 591.733
[info]   CI (99.9%): [≈ 0, 3337.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:08:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18946.352 ops/s
[info] # Warmup Iteration   2: 35399.081 ops/s
[info] # Warmup Iteration   3: 35779.104 ops/s
[info] Iteration   1: 35507.633 ops/s
[info]                  ·gc.alloc.rate:                                  1896.008 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84047.554 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75263.149 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                177.159 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 36686.885 ops/s
[info]                  ·gc.alloc.rate:                                  1958.965 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87614.706 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 36741.310 ops/s
[info]                  ·gc.alloc.rate:                                  1961.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87483.578 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 36739.978 ops/s
[info]                  ·gc.alloc.rate:                                  1961.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.225 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87488.340 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 36511.619 ops/s
[info]                  ·gc.alloc.rate:                                  1949.689 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73362.131 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   36437.485 ±(99.9%) 2034.048 ops/s [Average]
[info]   (min, avg, max) = (35507.633, 36437.485, 36741.310), stdev = 528.236
[info]   CI (99.9%): [34403.437, 38471.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1945.666 ±(99.9%) 108.603 MB/sec [Average]
[info]   (min, avg, max) = (1896.008, 1945.666, 1961.902), stdev = 28.204
[info]   CI (99.9%): [1837.063, 2054.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84047.920 ±(99.9%) 0.787 B/op [Average]
[info]   (min, avg, max) = (84047.554, 84047.920, 84048.012), stdev = 0.204
[info]   CI (99.9%): [84047.133, 84048.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.026, 0.116), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.158 ±(99.9%) 8.544 B/op [Average]
[info]   (min, avg, max) = (0.061, 1.158, 5.126), stdev = 2.219
[info]   CI (99.9%): [≈ 0, 9.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1905.182 ±(99.9%) 721.882 MB/sec [Average]
[info]   (min, avg, max) = (1697.843, 1905.182, 2042.097), stdev = 187.470
[info]   CI (99.9%): [1183.300, 2627.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82242.381 ±(99.9%) 27994.778 B/op [Average]
[info]   (min, avg, max) = (73362.131, 82242.381, 87614.706), stdev = 7270.155
[info]   CI (99.9%): [54247.603, 110237.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   35.432 ±(99.9%) 305.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.432, 177.159), stdev = 79.228
[info]   CI (99.9%): [≈ 0, 340.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65755.721 ops/s
[info] # Warmup Iteration   2: 88276.001 ops/s
[info] # Warmup Iteration   3: 90016.614 ops/s
[info] Iteration   1: 89939.326 ops/s
[info]                  ·gc.alloc.rate:            434.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5898.211 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 89754.857 ops/s
[info]                  ·gc.alloc.rate:            433.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11820.995 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 89967.163 ops/s
[info]                  ·gc.alloc.rate:            434.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5896.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 90213.111 ops/s
[info]                  ·gc.alloc.rate:            435.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5880.430 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 79947.195 ops/s
[info]                  ·gc.alloc.rate:            386.023 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6635.644 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   87964.330 ±(99.9%) 17268.904 ops/s [Average]
[info]   (min, avg, max) = (79947.195, 87964.330, 90213.111), stdev = 4484.680
[info]   CI (99.9%): [70695.426, 105233.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   424.737 ±(99.9%) 83.387 MB/sec [Average]
[info]   (min, avg, max) = (386.023, 424.737, 435.563), stdev = 21.655
[info]   CI (99.9%): [341.350, 508.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600.005 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (7600.005, 7600.005, 7600.006), stdev = 0.001
[info]   CI (99.9%): [7600.003, 7600.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   404.446 ±(99.9%) 580.404 MB/sec [Average]
[info]   (min, avg, max) = (337.013, 404.446, 674.078), stdev = 150.729
[info]   CI (99.9%): [≈ 0, 984.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7226.357 ±(99.9%) 9967.821 B/op [Average]
[info]   (min, avg, max) = (5880.430, 7226.357, 11820.995), stdev = 2588.611
[info]   CI (99.9%): [≈ 0, 17194.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2607.955 ops/s
[info] # Warmup Iteration   2: 111139.824 ops/s
[info] # Warmup Iteration   3: 111540.934 ops/s
[info] Iteration   1: 112884.040 ops/s
[info]                  ·gc.alloc.rate:            345.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4653.032 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 113141.359 ops/s
[info]                  ·gc.alloc.rate:            346.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4642.423 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 112932.922 ops/s
[info]                  ·gc.alloc.rate:            345.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4651.137 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 113048.957 ops/s
[info]                  ·gc.alloc.rate:            345.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4646.488 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 113007.106 ops/s
[info]                  ·gc.alloc.rate:            345.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4648.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   113002.877 ±(99.9%) 386.671 ops/s [Average]
[info]   (min, avg, max) = (112884.040, 113002.877, 113141.359), stdev = 100.417
[info]   CI (99.9%): [112616.206, 113389.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   345.766 ±(99.9%) 1.054 MB/sec [Average]
[info]   (min, avg, max) = (345.469, 345.766, 346.154), stdev = 0.274
[info]   CI (99.9%): [344.712, 346.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.722 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (333.678, 333.722, 333.779), stdev = 0.037
[info]   CI (99.9%): [333.578, 333.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   4648.251 ±(99.9%) 15.907 B/op [Average]
[info]   (min, avg, max) = (4642.423, 4648.251, 4653.032), stdev = 4.131
[info]   CI (99.9%): [4632.343, 4664.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:07:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65543.926 ops/s
[info] # Warmup Iteration   2: 98751.389 ops/s
[info] # Warmup Iteration   3: 95780.271 ops/s
[info] Iteration   1: 96347.063 ops/s
[info]                  ·gc.alloc.rate:            318.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5495.168 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 99278.351 ops/s
[info]                  ·gc.alloc.rate:            328.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5332.906 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 99038.042 ops/s
[info]                  ·gc.alloc.rate:            327.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5345.989 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 99274.040 ops/s
[info]                  ·gc.alloc.rate:            328.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5333.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 99133.798 ops/s
[info]                  ·gc.alloc.rate:            327.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5340.597 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   98614.259 ±(99.9%) 4895.780 ops/s [Average]
[info]   (min, avg, max) = (96347.063, 98614.259, 99278.351), stdev = 1271.419
[info]   CI (99.9%): [93718.479, 103510.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   325.827 ±(99.9%) 16.113 MB/sec [Average]
[info]   (min, avg, max) = (318.370, 325.827, 328.049), stdev = 4.185
[info]   CI (99.9%): [309.714, 341.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.407 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (336.346, 336.407, 336.450), stdev = 0.042
[info]   CI (99.9%): [336.245, 336.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5369.567 ±(99.9%) 271.185 B/op [Average]
[info]   (min, avg, max) = (5332.906, 5369.567, 5495.168), stdev = 70.426
[info]   CI (99.9%): [5098.381, 5640.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:07:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102206.681 ops/s
[info] # Warmup Iteration   2: 106950.476 ops/s
[info] # Warmup Iteration   3: 113323.409 ops/s
[info] Iteration   1: 114958.794 ops/s
[info]                  ·gc.alloc.rate:            351.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9211.315 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 114859.551 ops/s
[info]                  ·gc.alloc.rate:            351.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4609.506 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 115141.194 ops/s
[info]                  ·gc.alloc.rate:            352.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4598.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 115418.487 ops/s
[info]                  ·gc.alloc.rate:            353.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4587.304 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 115195.622 ops/s
[info]                  ·gc.alloc.rate:            352.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4596.064 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   115114.730 ±(99.9%) 836.893 ops/s [Average]
[info]   (min, avg, max) = (114859.551, 115114.730, 115418.487), stdev = 217.339
[info]   CI (99.9%): [114277.836, 115951.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   352.233 ±(99.9%) 2.682 MB/sec [Average]
[info]   (min, avg, max) = (351.386, 352.233, 353.175), stdev = 0.697
[info]   CI (99.9%): [349.551, 354.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.668 ±(99.9%) 579.361 MB/sec [Average]
[info]   (min, avg, max) = (336.319, 403.668, 672.816), stdev = 150.458
[info]   CI (99.9%): [≈ 0, 983.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5520.490 ±(99.9%) 7944.839 B/op [Average]
[info]   (min, avg, max) = (4587.304, 5520.490, 9211.315), stdev = 2063.249
[info]   CI (99.9%): [≈ 0, 13465.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:07:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101973.302 ops/s
[info] # Warmup Iteration   2: 111232.953 ops/s
[info] # Warmup Iteration   3: 114005.775 ops/s
[info] Iteration   1: 114160.888 ops/s
[info]                  ·gc.alloc.rate:            259.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4637.685 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 114779.943 ops/s
[info]                  ·gc.alloc.rate:      260.765 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 114500.202 ops/s
[info]                  ·gc.alloc.rate:            260.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4623.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 111523.864 ops/s
[info]                  ·gc.alloc.rate:            253.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4747.325 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 113649.822 ops/s
[info]                  ·gc.alloc.rate:            258.180 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4658.575 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   113722.944 ±(99.9%) 5003.790 ops/s [Average]
[info]   (min, avg, max) = (111523.864, 113722.944, 114779.943), stdev = 1299.468
[info]   CI (99.9%): [108719.153, 118726.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   258.379 ±(99.9%) 11.234 MB/sec [Average]
[info]   (min, avg, max) = (253.457, 258.379, 260.765), stdev = 2.917
[info]   CI (99.9%): [247.145, 269.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.109 ±(99.9%) 579.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.109, 336.477), stdev = 150.436
[info]   CI (99.9%): [≈ 0, 848.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3733.516 ±(99.9%) 8038.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3733.516, 4747.325), stdev = 2087.652
[info]   CI (99.9%): [≈ 0, 11772.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5898.101 ops/s
[info] # Warmup Iteration   2: 8271.062 ops/s
[info] # Warmup Iteration   3: 8650.483 ops/s
[info] Iteration   1: 8589.146 ops/s
[info]                  ·gc.alloc.rate:            1413.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247039.672 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 8730.975 ops/s
[info]                  ·gc.alloc.rate:                                  1436.169 MB/sec
[info]                  ·gc.alloc.rate.norm:                             258856.054 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.947 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       244823.825 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                600.353 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 8764.608 ops/s
[info]                  ·gc.alloc.rate:            1441.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244472.379 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 8756.599 ops/s
[info]                  ·gc.alloc.rate:            1440.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305869.583 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 8718.083 ops/s
[info]                  ·gc.alloc.rate:            1433.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245761.879 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8711.882 ±(99.9%) 273.957 ops/s [Average]
[info]   (min, avg, max) = (8589.146, 8711.882, 8764.608), stdev = 71.146
[info]   CI (99.9%): [8437.925, 8985.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1432.910 ±(99.9%) 44.039 MB/sec [Average]
[info]   (min, avg, max) = (1413.169, 1432.910, 1441.293), stdev = 11.437
[info]   CI (99.9%): [1388.871, 1476.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258856.049 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (258856.047, 258856.049, 258856.054), stdev = 0.003
[info]   CI (99.9%): [258856.036, 258856.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.589 ±(99.9%) 13.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.589, 7.947), stdev = 3.554
[info]   CI (99.9%): [≈ 0, 15.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1426.225 ±(99.9%) 593.226 MB/sec [Average]
[info]   (min, avg, max) = (1348.660, 1426.225, 1701.659), stdev = 154.059
[info]   CI (99.9%): [832.999, 2019.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   257593.468 ±(99.9%) 103988.405 B/op [Average]
[info]   (min, avg, max) = (244472.379, 257593.468, 305869.583), stdev = 27005.459
[info]   CI (99.9%): [153605.062, 361581.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   120.071 ±(99.9%) 1033.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 120.071, 600.353), stdev = 268.486
[info]   CI (99.9%): [≈ 0, 1153.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.062
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:07:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4246.001 ops/s
[info] # Warmup Iteration   2: 8514.860 ops/s
[info] # Warmup Iteration   3: 8661.622 ops/s
[info] Iteration   1: 8635.892 ops/s
[info]                  ·gc.alloc.rate:            1348.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       245560.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1679.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 305945.736 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 8645.197 ops/s
[info]                  ·gc.alloc.rate:                                  1349.196 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.892 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       185171.221 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                727.588 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 8793.856 ops/s
[info]                  ·gc.alloc.rate:            1372.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       245560.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 304582.956 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 8786.427 ops/s
[info]                  ·gc.alloc.rate:                                  1370.684 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.046 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.317 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       243888.182 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8784.972 ops/s
[info]                  ·gc.alloc.rate:                                  1370.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.050 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       243915.938 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8729.269 ±(99.9%) 312.404 ops/s [Average]
[info]   (min, avg, max) = (8635.892, 8729.269, 8793.856), stdev = 81.130
[info]   CI (99.9%): [8416.864, 9041.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1362.102 ±(99.9%) 47.426 MB/sec [Average]
[info]   (min, avg, max) = (1348.074, 1362.102, 1372.116), stdev = 12.316
[info]   CI (99.9%): [1314.675, 1409.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245560.048 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (245560.046, 245560.048, 245560.051), stdev = 0.002
[info]   CI (99.9%): [245560.040, 245560.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.258 ±(99.9%) 9.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.258, 5.892), stdev = 2.593
[info]   CI (99.9%): [≈ 0, 11.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1424.302 ±(99.9%) 1081.861 MB/sec [Average]
[info]   (min, avg, max) = (1017.398, 1424.302, 1701.919), stdev = 280.956
[info]   CI (99.9%): [342.441, 2506.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   256700.807 ±(99.9%) 194084.115 B/op [Average]
[info]   (min, avg, max) = (185171.221, 256700.807, 305945.736), stdev = 50403.028
[info]   CI (99.9%): [62616.691, 450784.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   145.518 ±(99.9%) 1252.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.518, 727.588), stdev = 325.387
[info]   CI (99.9%): [≈ 0, 1398.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 20.000), stdev = 7.092
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:06:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154788.565 ops/s
[info] # Warmup Iteration   2: 170063.171 ops/s
[info] # Warmup Iteration   3: 168427.535 ops/s
[info] Iteration   1: 174047.959 ops/s
[info]                  ·gc.alloc.rate:            452.889 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6107.683 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 174424.285 ops/s
[info]                  ·gc.alloc.rate:            453.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3047.400 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 174219.539 ops/s
[info]                  ·gc.alloc.rate:            453.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3050.880 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 173824.964 ops/s
[info]                  ·gc.alloc.rate:            452.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6115.834 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 174651.220 ops/s
[info]                  ·gc.alloc.rate:            454.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3043.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   174233.594 ±(99.9%) 1236.427 ops/s [Average]
[info]   (min, avg, max) = (173824.964, 174233.594, 174651.220), stdev = 321.096
[info]   CI (99.9%): [172997.167, 175470.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   453.383 ±(99.9%) 3.221 MB/sec [Average]
[info]   (min, avg, max) = (452.330, 453.383, 454.498), stdev = 0.837
[info]   CI (99.9%): [450.162, 456.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   472.748 ±(99.9%) 712.177 MB/sec [Average]
[info]   (min, avg, max) = (337.651, 472.748, 675.385), stdev = 184.950
[info]   CI (99.9%): [≈ 0, 1184.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4273.047 ±(99.9%) 6463.347 B/op [Average]
[info]   (min, avg, max) = (3043.440, 4273.047, 6115.834), stdev = 1678.511
[info]   CI (99.9%): [≈ 0, 10736.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:06:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1518.153 ops/s
[info] # Warmup Iteration   2: 4573.695 ops/s
[info] # Warmup Iteration   3: 4613.431 ops/s
[info] Iteration   1: 4767.389 ops/s
[info]                  ·gc.alloc.rate:            1266.141 MB/sec
[info]                  ·gc.alloc.rate.norm:       418040.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 444144.164 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 4780.158 ops/s
[info]                  ·gc.alloc.rate:                                  1269.399 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418040.092 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 34.804 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       444345.320 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1315.929 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 4847.797 ops/s
[info]                  ·gc.alloc.rate:                                  1287.571 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418040.084 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       331504.848 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4832.901 ops/s
[info]                  ·gc.alloc.rate:            1283.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       418040.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 443378.019 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 4841.375 ops/s
[info]                  ·gc.alloc.rate:            1285.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       418040.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 442554.066 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4813.924 ±(99.9%) 143.649 ops/s [Average]
[info]   (min, avg, max) = (4767.389, 4813.924, 4847.797), stdev = 37.305
[info]   CI (99.9%): [4670.275, 4957.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1278.507 ±(99.9%) 38.397 MB/sec [Average]
[info]   (min, avg, max) = (1266.141, 1278.507, 1287.571), stdev = 9.972
[info]   CI (99.9%): [1240.109, 1316.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418040.089 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (418040.084, 418040.089, 418040.092), stdev = 0.004
[info]   CI (99.9%): [418040.073, 418040.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.106), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   7.864 ±(99.9%) 58.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.864, 34.804), stdev = 15.187
[info]   CI (99.9%): [≈ 0, 66.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.629 ±(99.9%) 574.516 MB/sec [Average]
[info]   (min, avg, max) = (1021.041, 1287.629, 1361.338), stdev = 149.200
[info]   CI (99.9%): [713.113, 1862.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   421185.284 ±(99.9%) 193063.050 B/op [Average]
[info]   (min, avg, max) = (331504.848, 421185.284, 444345.320), stdev = 50137.861
[info]   CI (99.9%): [228122.234, 614248.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   263.186 ±(99.9%) 2266.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 263.186, 1315.929), stdev = 588.501
[info]   CI (99.9%): [≈ 0, 2529.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 16.000), stdev = 6.442
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15100.524 ops/s
[info] # Warmup Iteration   2: 25243.022 ops/s
[info] # Warmup Iteration   3: 25309.492 ops/s
[info] Iteration   1: 25176.482 ops/s
[info]                  ·gc.alloc.rate:            1305.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       81592.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 84282.508 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 25322.540 ops/s
[info]                  ·gc.alloc.rate:                                  1312.860 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81584.154 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.904 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84213.993 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                207.016 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 25159.106 ops/s
[info]                  ·gc.alloc.rate:                                  1304.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81568.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63874.553 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25574.737 ops/s
[info]                  ·gc.alloc.rate:                                  1325.637 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81568.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83790.975 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25619.653 ops/s
[info]                  ·gc.alloc.rate:                                  1327.716 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81568.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83643.824 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25370.504 ±(99.9%) 835.733 ops/s [Average]
[info]   (min, avg, max) = (25159.106, 25370.504, 25619.653), stdev = 217.037
[info]   CI (99.9%): [24534.771, 26206.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1315.139 ±(99.9%) 42.657 MB/sec [Average]
[info]   (min, avg, max) = (1304.004, 1315.139, 1327.716), stdev = 11.078
[info]   CI (99.9%): [1272.482, 1357.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81576.044 ±(99.9%) 43.661 B/op [Average]
[info]   (min, avg, max) = (81568.016, 81576.044, 81592.017), stdev = 11.339
[info]   CI (99.9%): [81532.383, 81619.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.047), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.114 ±(99.9%) 5.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.114, 2.904), stdev = 1.344
[info]   CI (99.9%): [≈ 0, 6.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1289.624 ±(99.9%) 578.301 MB/sec [Average]
[info]   (min, avg, max) = (1021.144, 1289.624, 1361.764), stdev = 150.183
[info]   CI (99.9%): [711.323, 1867.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   79961.170 ±(99.9%) 34643.441 B/op [Average]
[info]   (min, avg, max) = (63874.553, 79961.170, 84282.508), stdev = 8996.792
[info]   CI (99.9%): [45317.729, 114604.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.403 ±(99.9%) 356.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.403, 207.016), stdev = 92.580
[info]   CI (99.9%): [≈ 0, 397.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 20.000), stdev = 7.403
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13056.065 ops/s
[info] # Warmup Iteration   2: 25536.485 ops/s
[info] # Warmup Iteration   3: 25430.069 ops/s
[info] Iteration   1: 25395.006 ops/s
[info]                  ·gc.alloc.rate:            1290.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       80016.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83390.690 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 25395.019 ops/s
[info]                  ·gc.alloc.rate:                                  1291.288 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.689 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83844.797 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                288.978 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 25838.165 ops/s
[info]                  ·gc.alloc.rate:                                  1313.498 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82938.215 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25765.410 ops/s
[info]                  ·gc.alloc.rate:                                  1309.754 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83169.940 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25937.972 ops/s
[info]                  ·gc.alloc.rate:                                  1319.024 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82615.324 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   25666.314 ±(99.9%) 982.405 ops/s [Average]
[info]   (min, avg, max) = (25395.006, 25666.314, 25937.972), stdev = 255.127
[info]   CI (99.9%): [24683.909, 26648.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1304.858 ±(99.9%) 50.321 MB/sec [Average]
[info]   (min, avg, max) = (1290.727, 1304.858, 1319.024), stdev = 13.068
[info]   CI (99.9%): [1254.537, 1355.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   80016.017 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (80016.016, 80016.017, 80016.021), stdev = 0.002
[info]   CI (99.9%): [80016.008, 80016.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.092), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.220 ±(99.9%) 9.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.220, 5.689), stdev = 2.499
[info]   CI (99.9%): [≈ 0, 10.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.592 ±(99.9%) 28.397 MB/sec [Average]
[info]   (min, avg, max) = (1345.163, 1356.592, 1361.872), stdev = 7.375
[info]   CI (99.9%): [1328.195, 1384.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   83191.793 ±(99.9%) 1788.655 B/op [Average]
[info]   (min, avg, max) = (82615.324, 83191.793, 83844.797), stdev = 464.508
[info]   CI (99.9%): [81403.138, 84980.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   57.796 ±(99.9%) 497.637 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.796, 288.978), stdev = 129.235
[info]   CI (99.9%): [≈ 0, 555.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 6.107
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:05:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304464.018 ops/s
[info] # Warmup Iteration   2: 342908.366 ops/s
[info] # Warmup Iteration   3: 358261.165 ops/s
[info] Iteration   1: 364457.082 ops/s
[info]                  ·gc.alloc.rate:            805.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4358.111 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 365118.370 ops/s
[info]                  ·gc.alloc.rate:            807.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2900.133 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 356101.116 ops/s
[info]                  ·gc.alloc.rate:                   787.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2976.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 363986.689 ops/s
[info]                  ·gc.alloc.rate:                   804.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4363.726 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.282 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 361135.212 ops/s
[info]                  ·gc.alloc.rate:                                  798.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3480.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.462 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2966.950 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   362159.694 ±(99.9%) 14294.863 ops/s [Average]
[info]   (min, avg, max) = (356101.116, 362159.694, 365118.370), stdev = 3712.331
[info]   CI (99.9%): [347864.831, 376454.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   800.756 ±(99.9%) 31.187 MB/sec [Average]
[info]   (min, avg, max) = (787.591, 800.756, 807.351), stdev = 8.099
[info]   CI (99.9%): [769.569, 831.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.092 ±(99.9%) 0.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.462), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 0.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.050 ±(99.9%) 703.084 MB/sec [Average]
[info]   (min, avg, max) = (672.823, 809.050, 1009.082), stdev = 182.589
[info]   CI (99.9%): [105.965, 1512.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3513.084 ±(99.9%) 2982.420 B/op [Average]
[info]   (min, avg, max) = (2900.133, 3513.084, 4363.726), stdev = 774.525
[info]   CI (99.9%): [530.664, 6495.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.045 ±(99.9%) 28.913 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.045, 17.282), stdev = 7.509
[info]   CI (99.9%): [≈ 0, 32.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362592.638 ops/s
[info] # Warmup Iteration   2: 394426.468 ops/s
[info] # Warmup Iteration   3: 394589.807 ops/s
[info] Iteration   1: 379631.788 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 384876.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 394613.337 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 394539.963 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 395897.288 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   389911.846 ±(99.9%) 27925.782 ops/s [Average]
[info]   (min, avg, max) = (379631.788, 389911.846, 395897.288), stdev = 7252.237
[info]   CI (99.9%): [361986.064, 417837.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:05:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17236.983 ops/s
[info] # Warmup Iteration   2: 26349.923 ops/s
[info] # Warmup Iteration   3: 26865.699 ops/s
[info] Iteration   1: 26900.459 ops/s
[info]                  ·gc.alloc.rate:            1415.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78723.092 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 27142.347 ops/s
[info]                  ·gc.alloc.rate:                                  1428.329 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.163 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.455 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.545 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78719.486 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                231.755 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 27336.372 ops/s
[info]                  ·gc.alloc.rate:                                  1438.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78391.037 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 27274.005 ops/s
[info]                  ·gc.alloc.rate:                                  1434.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.336 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98211.506 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 27178.578 ops/s
[info]                  ·gc.alloc.rate:            1430.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78840.881 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   27166.352 ±(99.9%) 644.108 ops/s [Average]
[info]   (min, avg, max) = (26900.459, 27166.352, 27336.372), stdev = 167.273
[info]   CI (99.9%): [26522.244, 27810.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1429.475 ±(99.9%) 33.748 MB/sec [Average]
[info]   (min, avg, max) = (1415.477, 1429.475, 1438.367), stdev = 8.764
[info]   CI (99.9%): [1395.727, 1463.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824.016 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (82824.015, 82824.016, 82824.020), stdev = 0.002
[info]   CI (99.9%): [82824.008, 82824.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.278 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.163), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.974 ±(99.9%) 16.114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.974, 9.455), stdev = 4.185
[info]   CI (99.9%): [≈ 0, 18.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.467 ±(99.9%) 594.908 MB/sec [Average]
[info]   (min, avg, max) = (1345.392, 1425.467, 1701.588), stdev = 154.496
[info]   CI (99.9%): [830.560, 2020.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82577.200 ±(99.9%) 33660.205 B/op [Average]
[info]   (min, avg, max) = (78391.037, 82577.200, 98211.506), stdev = 8741.448
[info]   CI (99.9%): [48916.995, 116237.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   46.351 ±(99.9%) 399.096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.351, 231.755), stdev = 103.644
[info]   CI (99.9%): [≈ 0, 445.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.404
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79137.573 ops/s
[info] # Warmup Iteration   2: 94608.508 ops/s
[info] # Warmup Iteration   3: 94766.594 ops/s
[info] Iteration   1: 93778.625 ops/s
[info]                  ·gc.alloc.rate:                                  1527.620 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.803 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22683.818 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                55.899 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 95809.510 ops/s
[info]                  ·gc.alloc.rate:                                  1560.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27959.254 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 95679.789 ops/s
[info]                  ·gc.alloc.rate:                                  1558.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22397.088 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 96335.406 ops/s
[info]                  ·gc.alloc.rate:                                  1569.196 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27805.749 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 96183.684 ops/s
[info]                  ·gc.alloc.rate:                                  1566.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27849.104 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   95557.403 ±(99.9%) 3964.529 ops/s [Average]
[info]   (min, avg, max) = (93778.625, 95557.403, 96335.406), stdev = 1029.576
[info]   CI (99.9%): [91592.873, 99521.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1556.506 ±(99.9%) 64.454 MB/sec [Average]
[info]   (min, avg, max) = (1527.620, 1556.506, 1569.196), stdev = 16.739
[info]   CI (99.9%): [1492.052, 1620.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.004, 25640.004, 25640.005), stdev = 0.001
[info]   CI (99.9%): [25640.004, 25640.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.025, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.417 ±(99.9%) 1.765 B/op [Average]
[info]   (min, avg, max) = (0.029, 0.417, 1.018), stdev = 0.458
[info]   CI (99.9%): [≈ 0, 2.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1563.598 ±(99.9%) 728.442 MB/sec [Average]
[info]   (min, avg, max) = (1351.492, 1563.598, 1701.769), stdev = 189.174
[info]   CI (99.9%): [835.156, 2292.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25739.003 ±(99.9%) 11252.190 B/op [Average]
[info]   (min, avg, max) = (22397.088, 25739.003, 27959.254), stdev = 2922.158
[info]   CI (99.9%): [14486.813, 36991.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   11.180 ±(99.9%) 96.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.180, 55.899), stdev = 24.999
[info]   CI (99.9%): [≈ 0, 107.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39291.705 ops/s
[info] # Warmup Iteration   2: 467517.802 ops/s
[info] # Warmup Iteration   3: 455644.600 ops/s
[info] Iteration   1: 462607.915 ops/s
[info]                  ·gc.alloc.rate:            479.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1135.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 468774.720 ops/s
[info]                  ·gc.alloc.rate:            486.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1120.515 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 461681.257 ops/s
[info]                  ·gc.alloc.rate:            478.668 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2275.460 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 461993.848 ops/s
[info]                  ·gc.alloc.rate:            479.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1136.927 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 466465.355 ops/s
[info]                  ·gc.alloc.rate:            483.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2252.059 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   464304.619 ±(99.9%) 12138.858 ops/s [Average]
[info]   (min, avg, max) = (461681.257, 464304.619, 468774.720), stdev = 3152.423
[info]   CI (99.9%): [452165.761, 476443.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   481.453 ±(99.9%) 12.604 MB/sec [Average]
[info]   (min, avg, max) = (478.668, 481.453, 486.008), stdev = 3.273
[info]   CI (99.9%): [468.850, 494.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.243 ±(99.9%) 703.975 MB/sec [Average]
[info]   (min, avg, max) = (333.688, 467.243, 667.629), stdev = 182.820
[info]   CI (99.9%): [≈ 0, 1171.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1584.086 ±(99.9%) 2389.487 B/op [Average]
[info]   (min, avg, max) = (1120.515, 1584.086, 2275.460), stdev = 620.542
[info]   CI (99.9%): [≈ 0, 3973.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:04:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169434.119 ops/s
[info] # Warmup Iteration   2: 260286.496 ops/s
[info] # Warmup Iteration   3: 258311.353 ops/s
[info] Iteration   1: 263528.879 ops/s
[info]                  ·gc.alloc.rate:            377.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4018.127 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 263929.576 ops/s
[info]                  ·gc.alloc.rate:            378.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2006.103 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 261396.890 ops/s
[info]                  ·gc.alloc.rate:            374.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2025.455 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 262073.689 ops/s
[info]                  ·gc.alloc.rate:                   375.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2016.231 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.000 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 263935.942 ops/s
[info]                  ·gc.alloc.rate:            378.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2005.936 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   262972.995 ±(99.9%) 4492.308 ops/s [Average]
[info]   (min, avg, max) = (261396.890, 262972.995, 263935.942), stdev = 1166.638
[info]   CI (99.9%): [258480.687, 267465.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   376.958 ±(99.9%) 6.551 MB/sec [Average]
[info]   (min, avg, max) = (374.711, 376.958, 378.434), stdev = 1.701
[info]   CI (99.9%): [370.408, 383.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.002, 2256.002, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.560 ±(99.9%) 579.642 MB/sec [Average]
[info]   (min, avg, max) = (335.664, 403.560, 672.838), stdev = 150.531
[info]   CI (99.9%): [≈ 0, 983.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2414.370 ±(99.9%) 3452.348 B/op [Average]
[info]   (min, avg, max) = (2005.936, 2414.370, 4018.127), stdev = 896.564
[info]   CI (99.9%): [≈ 0, 5866.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.800 ±(99.9%) 6.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [≈ 0, 7.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 555881.893 ops/s
[info] # Warmup Iteration   2: 587360.336 ops/s
[info] # Warmup Iteration   3: 609869.824 ops/s
[info] Iteration   1: 611648.312 ops/s
[info]                  ·gc.alloc.rate:            397.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.299 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 611791.095 ops/s
[info]                  ·gc.alloc.rate:            398.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.117 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 610869.995 ops/s
[info]                  ·gc.alloc.rate:            397.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 868.404 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 608260.029 ops/s
[info]                  ·gc.alloc.rate:            395.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1744.271 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 611687.226 ops/s
[info]                  ·gc.alloc.rate:            397.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 867.260 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   610851.331 ±(99.9%) 5754.185 ops/s [Average]
[info]   (min, avg, max) = (608260.029, 610851.331, 611791.095), stdev = 1494.344
[info]   CI (99.9%): [605097.147, 616605.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   397.405 ±(99.9%) 3.713 MB/sec [Average]
[info]   (min, avg, max) = (395.723, 397.405, 398.033), stdev = 0.964
[info]   CI (99.9%): [393.693, 401.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.440 ±(99.9%) 580.399 MB/sec [Average]
[info]   (min, avg, max) = (337.000, 404.440, 674.070), stdev = 150.728
[info]   CI (99.9%): [≈ 0, 984.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1042.870 ±(99.9%) 1509.820 B/op [Average]
[info]   (min, avg, max) = (867.117, 1042.870, 1744.271), stdev = 392.095
[info]   CI (99.9%): [≈ 0, 2552.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34853.671 ops/s
[info] # Warmup Iteration   2: 65332.871 ops/s
[info] # Warmup Iteration   3: 67015.996 ops/s
[info] Iteration   1: 67865.969 ops/s
[info]                  ·gc.alloc.rate:                                  2972.344 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71047.219 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 67203.881 ops/s
[info]                  ·gc.alloc.rate:                                  2944.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.123 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71748.040 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 67624.111 ops/s
[info]                  ·gc.alloc.rate:                                  2963.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.179 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63379.050 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 67704.930 ops/s
[info]                  ·gc.alloc.rate:                                  2965.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.244 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71216.142 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 67123.795 ops/s
[info]                  ·gc.alloc.rate:                                  2940.311 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71833.540 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   67504.537 ±(99.9%) 1248.415 ops/s [Average]
[info]   (min, avg, max) = (67123.795, 67504.537, 67865.969), stdev = 324.209
[info]   CI (99.9%): [66256.122, 68752.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2957.361 ±(99.9%) 53.637 MB/sec [Average]
[info]   (min, avg, max) = (2940.311, 2957.361, 2972.344), stdev = 13.929
[info]   CI (99.9%): [2903.724, 3010.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68952.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68952.006, 68952.006, 68952.007), stdev = 0.001
[info]   CI (99.9%): [68952.005, 68952.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.006, 0.010), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.147 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (0.058, 0.147, 0.244), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2995.464 ±(99.9%) 585.051 MB/sec [Average]
[info]   (min, avg, max) = (2723.676, 2995.464, 3064.419), stdev = 151.936
[info]   CI (99.9%): [2410.414, 3580.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69844.798 ±(99.9%) 13978.118 B/op [Average]
[info]   (min, avg, max) = (63379.050, 69844.798, 71833.540), stdev = 3630.073
[info]   CI (99.9%): [55866.680, 83822.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154179.406 ops/s
[info] # Warmup Iteration   2: 201314.504 ops/s
[info] # Warmup Iteration   3: 204789.475 ops/s
[info] Iteration   1: 204920.453 ops/s
[info]                  ·gc.alloc.rate:            1217.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10354.588 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 204334.924 ops/s
[info]                  ·gc.alloc.rate:                                  1213.748 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.181 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10410.236 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                25.654 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 206969.649 ops/s
[info]                  ·gc.alloc.rate:                                  1229.653 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7765.766 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 207721.616 ops/s
[info]                  ·gc.alloc.rate:                                  1234.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10316.924 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 207713.643 ops/s
[info]                  ·gc.alloc.rate:                                  1234.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10317.321 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   206332.057 ±(99.9%) 6157.221 ops/s [Average]
[info]   (min, avg, max) = (204334.924, 206332.057, 207721.616), stdev = 1599.011
[info]   CI (99.9%): [200174.836, 212489.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1225.849 ±(99.9%) 37.133 MB/sec [Average]
[info]   (min, avg, max) = (1213.748, 1225.849, 1234.219), stdev = 9.643
[info]   CI (99.9%): [1188.717, 1262.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.002, 9352.002, 9352.002), stdev = 0.001
[info]   CI (99.9%): [9352.002, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.028), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.084 ±(99.9%) 0.398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.211), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1288.655 ±(99.9%) 576.448 MB/sec [Average]
[info]   (min, avg, max) = (1021.086, 1288.655, 1361.615), stdev = 149.702
[info]   CI (99.9%): [712.207, 1865.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9832.967 ±(99.9%) 4452.225 B/op [Average]
[info]   (min, avg, max) = (7765.766, 9832.967, 10410.236), stdev = 1156.229
[info]   CI (99.9%): [5380.742, 14285.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.329), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   5.131 ±(99.9%) 44.177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.131, 25.654), stdev = 11.473
[info]   CI (99.9%): [≈ 0, 49.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 13.000), stdev = 5.263
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71695.943 ops/s
[info] # Warmup Iteration   2: 912009.236 ops/s
[info] # Warmup Iteration   3: 937282.201 ops/s
[info] Iteration   1: 971781.251 ops/s
[info]                  ·gc.alloc.rate:            528.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 540.512 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 959958.873 ops/s
[info]                  ·gc.alloc.rate:            521.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1094.329 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 974719.428 ops/s
[info]                  ·gc.alloc.rate:            530.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 538.880 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 952097.147 ops/s
[info]                  ·gc.alloc.rate:            517.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1103.369 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 970225.183 ops/s
[info]                  ·gc.alloc.rate:            527.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1082.709 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   965756.376 ±(99.9%) 36367.251 ops/s [Average]
[info]   (min, avg, max) = (952097.147, 965756.376, 974719.428), stdev = 9444.459
[info]   CI (99.9%): [929389.126, 1002123.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   525.200 ±(99.9%) 19.810 MB/sec [Average]
[info]   (min, avg, max) = (517.789, 525.200, 530.061), stdev = 5.145
[info]   CI (99.9%): [505.390, 545.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.907 ±(99.9%) 703.713 MB/sec [Average]
[info]   (min, avg, max) = (333.690, 533.907, 667.420), stdev = 182.752
[info]   CI (99.9%): [≈ 0, 1237.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   871.960 ±(99.9%) 1168.297 B/op [Average]
[info]   (min, avg, max) = (538.880, 871.960, 1103.369), stdev = 303.403
[info]   CI (99.9%): [≈ 0, 2040.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:03:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 536505.736 ops/s
[info] # Warmup Iteration   2: 799432.180 ops/s
[info] # Warmup Iteration   3: 802520.122 ops/s
[info] Iteration   1: 808639.763 ops/s
[info]                  ·gc.alloc.rate:            636.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 654.709 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 802284.665 ops/s
[info]                  ·gc.alloc.rate:            632.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1319.848 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 804092.793 ops/s
[info]                  ·gc.alloc.rate:            633.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1316.879 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 800219.057 ops/s
[info]                  ·gc.alloc.rate:            630.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1323.247 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 795340.875 ops/s
[info]                  ·gc.alloc.rate:            626.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1331.326 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   802115.431 ±(99.9%) 18863.867 ops/s [Average]
[info]   (min, avg, max) = (795340.875, 802115.431, 808639.763), stdev = 4898.886
[info]   CI (99.9%): [783251.563, 820979.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   631.937 ±(99.9%) 14.810 MB/sec [Average]
[info]   (min, avg, max) = (626.516, 631.937, 636.999), stdev = 3.846
[info]   CI (99.9%): [617.127, 646.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.001, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.494 ±(99.9%) 579.397 MB/sec [Average]
[info]   (min, avg, max) = (336.330, 605.494, 672.918), stdev = 150.468
[info]   CI (99.9%): [26.097, 1184.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1189.202 ±(99.9%) 1150.725 B/op [Average]
[info]   (min, avg, max) = (654.709, 1189.202, 1331.326), stdev = 298.840
[info]   CI (99.9%): [38.477, 2339.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 918124.445 ops/s
[info] # Warmup Iteration   2: 1018340.353 ops/s
[info] # Warmup Iteration   3: 1027633.980 ops/s
[info] Iteration   1: 1027917.737 ops/s
[info]                  ·gc.alloc.rate:            559.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1030.119 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1026703.517 ops/s
[info]                  ·gc.alloc.rate:            558.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.593 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1031.350 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1035773.970 ops/s
[info]                  ·gc.alloc.rate:            563.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 511.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1030351.293 ops/s
[info]                  ·gc.alloc.rate:                   560.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1028.720 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1006442.845 ops/s
[info]                  ·gc.alloc.rate:                   547.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1053.154 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.042 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1025437.872 ±(99.9%) 43031.668 ops/s [Average]
[info]   (min, avg, max) = (1006442.845, 1025437.872, 1035773.970), stdev = 11175.188
[info]   CI (99.9%): [982406.204, 1068469.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   557.643 ±(99.9%) 23.359 MB/sec [Average]
[info]   (min, avg, max) = (547.330, 557.643, 563.217), stdev = 6.066
[info]   CI (99.9%): [534.283, 581.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.706 ±(99.9%) 579.849 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 605.706, 673.432), stdev = 150.585
[info]   CI (99.9%): [25.857, 1185.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   930.903 ±(99.9%) 904.330 B/op [Average]
[info]   (min, avg, max) = (511.172, 930.903, 1053.154), stdev = 234.852
[info]   CI (99.9%): [26.574, 1835.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.412 ±(99.9%) 2.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.412, 1.042), stdev = 0.564
[info]   CI (99.9%): [≈ 0, 2.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002999.286 ops/s
[info] # Warmup Iteration   2: 1100098.987 ops/s
[info] # Warmup Iteration   3: 1098081.923 ops/s
[info] Iteration   1: 1100615.023 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1099624.795 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1100344.473 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1099618.582 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1099910.449 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1100022.665 ±(99.9%) 1709.774 ops/s [Average]
[info]   (min, avg, max) = (1099618.582, 1100022.665, 1100615.023), stdev = 444.023
[info]   CI (99.9%): [1098312.891, 1101732.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17618.979 ops/s
[info] # Warmup Iteration   2: 28803.975 ops/s
[info] # Warmup Iteration   3: 29472.807 ops/s
[info] Iteration   1: 29377.482 ops/s
[info]                  ·gc.alloc.rate:                   1534.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              82216.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.593 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90108.376 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 214.119 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 29468.972 ops/s
[info]                  ·gc.alloc.rate:                                  1539.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82202.890 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.364 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90894.374 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 29809.377 ops/s
[info]                  ·gc.alloc.rate:            1556.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71888.688 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 29652.843 ops/s
[info]                  ·gc.alloc.rate:            1548.667 MB/sec
[info]                  ·gc.alloc.rate.norm:       82200.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90333.525 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 29986.217 ops/s
[info]                  ·gc.alloc.rate:                                  1566.027 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82200.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71462.035 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   29658.978 ±(99.9%) 953.152 ops/s [Average]
[info]   (min, avg, max) = (29377.482, 29658.978, 29986.217), stdev = 247.530
[info]   CI (99.9%): [28705.826, 30612.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1548.943 ±(99.9%) 49.640 MB/sec [Average]
[info]   (min, avg, max) = (1534.306, 1548.943, 1566.027), stdev = 12.891
[info]   CI (99.9%): [1499.303, 1598.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82203.790 ±(99.9%) 26.755 B/op [Average]
[info]   (min, avg, max) = (82200.014, 82203.790, 82216.019), stdev = 6.948
[info]   CI (99.9%): [82177.035, 82230.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.237 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.138), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.487 ±(99.9%) 12.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.487, 7.364), stdev = 3.286
[info]   CI (99.9%): [≈ 0, 14.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.623 ±(99.9%) 704.399 MB/sec [Average]
[info]   (min, avg, max) = (1361.421, 1561.623, 1701.904), stdev = 182.930
[info]   CI (99.9%): [857.224, 2266.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82937.399 ±(99.9%) 39607.249 B/op [Average]
[info]   (min, avg, max) = (71462.035, 82937.399, 90894.374), stdev = 10285.877
[info]   CI (99.9%): [43330.151, 122544.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.824 ±(99.9%) 368.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.824, 214.119), stdev = 95.757
[info]   CI (99.9%): [≈ 0, 411.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 20.000), stdev = 7.396
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89042.400 ops/s
[info] # Warmup Iteration   2: 128403.308 ops/s
[info] # Warmup Iteration   3: 130661.266 ops/s
[info] Iteration   1: 129928.252 ops/s
[info]                  ·gc.alloc.rate:                                  1603.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.603 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20455.099 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                40.345 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 130780.315 ops/s
[info]                  ·gc.alloc.rate:                                  1614.005 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20482.505 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 131245.322 ops/s
[info]                  ·gc.alloc.rate:                                  1619.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20409.636 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 131527.269 ops/s
[info]                  ·gc.alloc.rate:                                  1623.166 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16290.973 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 132377.498 ops/s
[info]                  ·gc.alloc.rate:                                  1633.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20234.524 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   131171.731 ±(99.9%) 3489.639 ops/s [Average]
[info]   (min, avg, max) = (129928.252, 131171.731, 132377.498), stdev = 906.248
[info]   CI (99.9%): [127682.092, 134661.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1618.873 ±(99.9%) 43.009 MB/sec [Average]
[info]   (min, avg, max) = (1603.705, 1618.873, 1633.918), stdev = 11.169
[info]   CI (99.9%): [1575.863, 1661.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19424.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19424.003, 19424.003, 19424.003), stdev = 0.001
[info]   CI (99.9%): [19424.003, 19424.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.017, 0.050), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.209 ±(99.9%) 0.877 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.209, 0.603), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 1.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.200 ±(99.9%) 581.274 MB/sec [Average]
[info]   (min, avg, max) = (1361.354, 1631.200, 1702.098), stdev = 150.955
[info]   CI (99.9%): [1049.926, 2212.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19574.548 ±(99.9%) 7077.898 B/op [Average]
[info]   (min, avg, max) = (16290.973, 19574.548, 20482.505), stdev = 1838.108
[info]   CI (99.9%): [12496.650, 26652.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.069 ±(99.9%) 69.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.069, 40.345), stdev = 18.043
[info]   CI (99.9%): [≈ 0, 77.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97331.744 ops/s
[info] # Warmup Iteration   2: 165500.480 ops/s
[info] # Warmup Iteration   3: 168252.024 ops/s
[info] Iteration   1: 167844.129 ops/s
[info]                  ·gc.alloc.rate:            895.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9462.893 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 167548.567 ops/s
[info]                  ·gc.alloc.rate:                   894.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9473.803 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.257 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 169082.315 ops/s
[info]                  ·gc.alloc.rate:            902.300 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6262.858 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 167647.673 ops/s
[info]                  ·gc.alloc.rate:                                  894.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.632 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9549.565 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                37.523 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 170200.863 ops/s
[info]                  ·gc.alloc.rate:                                  908.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9443.024 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   168464.709 ±(99.9%) 4427.258 ops/s [Average]
[info]   (min, avg, max) = (167548.567, 168464.709, 170200.863), stdev = 1149.745
[info]   CI (99.9%): [164037.452, 172891.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   899.032 ±(99.9%) 23.738 MB/sec [Average]
[info]   (min, avg, max) = (894.077, 899.032, 908.368), stdev = 6.165
[info]   CI (99.9%): [875.293, 922.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.002, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.182 ±(99.9%) 1.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.182, 0.632), stdev = 0.279
[info]   CI (99.9%): [≈ 0, 1.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.692 ±(99.9%) 587.935 MB/sec [Average]
[info]   (min, avg, max) = (672.735, 945.692, 1021.159), stdev = 152.685
[info]   CI (99.9%): [357.757, 1533.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8838.428 ±(99.9%) 5546.288 B/op [Average]
[info]   (min, avg, max) = (6262.858, 8838.428, 9549.565), stdev = 1440.353
[info]   CI (99.9%): [3292.140, 14384.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.756 ±(99.9%) 62.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.756, 37.523), stdev = 16.308
[info]   CI (99.9%): [≈ 0, 71.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 13.000), stdev = 4.037
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 184815.574 ops/s
[info] # Warmup Iteration   2: 217246.322 ops/s
[info] # Warmup Iteration   3: 218162.866 ops/s
[info] Iteration   1: 216750.692 ops/s
[info]                  ·gc.alloc.rate:            987.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       7168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7342.576 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 215916.224 ops/s
[info]                  ·gc.alloc.rate:            983.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       7168.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7370.831 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 219337.465 ops/s
[info]                  ·gc.alloc.rate:                                  998.795 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7168.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.422 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7279.786 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.899 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 220765.207 ops/s
[info]                  ·gc.alloc.rate:                                  1005.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7168.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7280.162 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 220788.455 ops/s
[info]                  ·gc.alloc.rate:                                  1005.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7168.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7278.942 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   218711.609 ±(99.9%) 8734.602 ops/s [Average]
[info]   (min, avg, max) = (215916.224, 218711.609, 220788.455), stdev = 2268.348
[info]   CI (99.9%): [209977.006, 227446.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   996.046 ±(99.9%) 40.056 MB/sec [Average]
[info]   (min, avg, max) = (983.181, 996.046, 1005.618), stdev = 10.403
[info]   CI (99.9%): [955.990, 1036.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   7168.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7168.002, 7168.002, 7168.002), stdev = 0.001
[info]   CI (99.9%): [7168.002, 7168.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.130 ±(99.9%) 0.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.422), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 0.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1015.794 ±(99.9%) 19.694 MB/sec [Average]
[info]   (min, avg, max) = (1011.001, 1015.794, 1021.354), stdev = 5.115
[info]   CI (99.9%): [996.099, 1035.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   7310.459 ±(99.9%) 167.053 B/op [Average]
[info]   (min, avg, max) = (7278.942, 7310.459, 7370.831), stdev = 43.383
[info]   CI (99.9%): [7143.407, 7477.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.780 ±(99.9%) 41.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.780, 23.899), stdev = 10.688
[info]   CI (99.9%): [≈ 0, 45.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.317
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26384.592 ops/s
[info] # Warmup Iteration   2: 62861.557 ops/s
[info] # Warmup Iteration   3: 62380.653 ops/s
[info] Iteration   1: 64480.027 ops/s
[info]                  ·gc.alloc.rate:                                  2636.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64368.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66467.859 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 64209.918 ops/s
[info]                  ·gc.alloc.rate:                                  2626.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64368.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.225 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58403.892 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 63954.328 ops/s
[info]                  ·gc.alloc.rate:                                  2615.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64368.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67010.250 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 63087.262 ops/s
[info]                  ·gc.alloc.rate:                                  2580.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64368.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67935.254 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 64169.924 ops/s
[info]                  ·gc.alloc.rate:                                  2624.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             64368.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66788.905 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   63980.292 ±(99.9%) 2052.614 ops/s [Average]
[info]   (min, avg, max) = (63087.262, 63980.292, 64480.027), stdev = 533.057
[info]   CI (99.9%): [61927.678, 66032.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2616.622 ±(99.9%) 83.916 MB/sec [Average]
[info]   (min, avg, max) = (2580.029, 2616.622, 2636.615), stdev = 21.793
[info]   CI (99.9%): [2532.706, 2700.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64368.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64368.006, 64368.007, 64368.007), stdev = 0.001
[info]   CI (99.9%): [64368.006, 64368.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.008, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.199 ±(99.9%) 0.268 B/op [Average]
[info]   (min, avg, max) = (0.098, 0.199, 0.290), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2654.962 ±(99.9%) 585.010 MB/sec [Average]
[info]   (min, avg, max) = (2383.190, 2654.962, 2723.131), stdev = 151.925
[info]   CI (99.9%): [2069.951, 3239.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65321.232 ±(99.9%) 15037.776 B/op [Average]
[info]   (min, avg, max) = (58403.892, 65321.232, 67935.254), stdev = 3905.263
[info]   CI (99.9%): [50283.456, 80359.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126608.365 ops/s
[info] # Warmup Iteration   2: 170969.459 ops/s
[info] # Warmup Iteration   3: 179531.577 ops/s
[info] Iteration   1: 176638.763 ops/s
[info]                  ·gc.alloc.rate:            616.863 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3003.189 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 179793.797 ops/s
[info]                  ·gc.alloc.rate:            627.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5901.130 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 179319.023 ops/s
[info]                  ·gc.alloc.rate:            626.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5916.495 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 174218.346 ops/s
[info]                  ·gc.alloc.rate:            608.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6090.144 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 179311.817 ops/s
[info]                  ·gc.alloc.rate:            626.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5917.023 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   177856.349 ±(99.9%) 9178.979 ops/s [Average]
[info]   (min, avg, max) = (174218.346, 177856.349, 179793.797), stdev = 2383.752
[info]   CI (99.9%): [168677.370, 187035.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   621.068 ±(99.9%) 32.087 MB/sec [Average]
[info]   (min, avg, max) = (608.334, 621.068, 627.937), stdev = 8.333
[info]   CI (99.9%): [588.981, 653.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.003), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.693 ±(99.9%) 580.377 MB/sec [Average]
[info]   (min, avg, max) = (337.074, 606.693, 674.225), stdev = 150.722
[info]   CI (99.9%): [26.316, 1187.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5365.596 ±(99.9%) 5094.030 B/op [Average]
[info]   (min, avg, max) = (3003.189, 5365.596, 6090.144), stdev = 1322.903
[info]   CI (99.9%): [271.566, 10459.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 332385.845 ops/s
[info] # Warmup Iteration   2: 534909.360 ops/s
[info] # Warmup Iteration   3: 532062.916 ops/s
[info] Iteration   1: 542434.563 ops/s
[info]                  ·gc.alloc.rate:                   548.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        974.084 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.933 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 540594.629 ops/s
[info]                  ·gc.alloc.rate:            546.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1958.647 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 541168.781 ops/s
[info]                  ·gc.alloc.rate:            547.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1956.664 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 545531.520 ops/s
[info]                  ·gc.alloc.rate:            551.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 970.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 531950.425 ops/s
[info]                  ·gc.alloc.rate:            537.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1990.482 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   540335.984 ±(99.9%) 19490.085 ops/s [Average]
[info]   (min, avg, max) = (531950.425, 540335.984, 545531.520), stdev = 5061.513
[info]   CI (99.9%): [520845.898, 559826.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   546.516 ±(99.9%) 19.873 MB/sec [Average]
[info]   (min, avg, max) = (537.974, 546.516, 551.781), stdev = 5.161
[info]   CI (99.9%): [526.643, 566.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.019 ±(99.9%) 709.862 MB/sec [Average]
[info]   (min, avg, max) = (335.784, 538.019, 672.681), stdev = 184.349
[info]   CI (99.9%): [≈ 0, 1247.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1570.072 ±(99.9%) 2101.949 B/op [Average]
[info]   (min, avg, max) = (970.486, 1570.072, 1990.482), stdev = 545.869
[info]   CI (99.9%): [≈ 0, 3672.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.387 ±(99.9%) 3.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.387, 1.933), stdev = 0.864
[info]   CI (99.9%): [≈ 0, 3.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:01:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422298.202 ops/s
[info] # Warmup Iteration   2: 475881.131 ops/s
[info] # Warmup Iteration   3: 478231.514 ops/s
[info] Iteration   1: 480516.209 ops/s
[info]                  ·gc.alloc.rate:            368.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1101.769 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 479497.610 ops/s
[info]                  ·gc.alloc.rate:            367.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1104.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 479244.556 ops/s
[info]                  ·gc.alloc.rate:            367.784 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1104.759 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 480803.856 ops/s
[info]                  ·gc.alloc.rate:            369.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1101.150 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 465128.710 ops/s
[info]                  ·gc.alloc.rate:            356.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1138.287 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   477038.188 ±(99.9%) 25761.166 ops/s [Average]
[info]   (min, avg, max) = (465128.710, 477038.188, 480803.856), stdev = 6690.093
[info]   CI (99.9%): [451277.022, 502799.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   366.100 ±(99.9%) 19.850 MB/sec [Average]
[info]   (min, avg, max) = (356.931, 366.100, 369.107), stdev = 5.155
[info]   CI (99.9%): [346.250, 385.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.353 ±(99.9%) 0.235 MB/sec [Average]
[info]   (min, avg, max) = (336.308, 336.353, 336.458), stdev = 0.061
[info]   CI (99.9%): [336.118, 336.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1110.026 ±(99.9%) 61.118 B/op [Average]
[info]   (min, avg, max) = (1101.150, 1110.026, 1138.287), stdev = 15.872
[info]   CI (99.9%): [1048.908, 1171.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 401801.922 ops/s
[info] # Warmup Iteration   2: 496234.077 ops/s
[info] # Warmup Iteration   3: 497707.548 ops/s
[info] Iteration   1: 497450.365 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 497559.364 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 497598.553 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 497478.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 497630.397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   497543.445 ±(99.9%) 296.566 ops/s [Average]
[info]   (min, avg, max) = (497450.365, 497543.445, 497630.397), stdev = 77.017
[info]   CI (99.9%): [497246.880, 497840.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149976.433 ops/s
[info] # Warmup Iteration   2: 293786.680 ops/s
[info] # Warmup Iteration   3: 292531.028 ops/s
[info] Iteration   1: 293897.901 ops/s
[info]                  ·gc.alloc.rate:                   806.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3599.333 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 293374.317 ops/s
[info]                  ·gc.alloc.rate:                   805.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3605.577 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 291255.084 ops/s
[info]                  ·gc.alloc.rate:            799.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5453.141 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 293113.792 ops/s
[info]                  ·gc.alloc.rate:                   804.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3612.536 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 295094.194 ops/s
[info]                  ·gc.alloc.rate:                                  810.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.487 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5446.382 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   293347.058 ±(99.9%) 5372.796 ops/s [Average]
[info]   (min, avg, max) = (291255.084, 293347.058, 295094.194), stdev = 1395.298
[info]   CI (99.9%): [287974.262, 298719.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   805.193 ±(99.9%) 15.098 MB/sec [Average]
[info]   (min, avg, max) = (799.409, 805.193, 810.255), stdev = 3.921
[info]   CI (99.9%): [790.095, 820.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.001, 4320.002), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.097 ±(99.9%) 0.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.487), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   809.489 ±(99.9%) 723.674 MB/sec [Average]
[info]   (min, avg, max) = (672.019, 809.489, 1021.518), stdev = 187.936
[info]   CI (99.9%): [85.815, 1533.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4343.394 ±(99.9%) 3889.091 B/op [Average]
[info]   (min, avg, max) = (3599.333, 4343.394, 5453.141), stdev = 1009.985
[info]   CI (99.9%): [454.302, 8232.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.720 ±(99.9%) 34.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.720, 21.461), stdev = 8.978
[info]   CI (99.9%): [≈ 0, 40.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 12.000), stdev = 2.864
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5684.640 ops/s
[info] # Warmup Iteration   2: 8309.523 ops/s
[info] # Warmup Iteration   3: 8614.280 ops/s
[info] Iteration   1: 8642.510 ops/s
[info]                  ·gc.alloc.rate:                   1105.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        184265.033 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 121.307 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 8589.790 ops/s
[info]                  ·gc.alloc.rate:            1098.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 247039.672 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 8665.837 ops/s
[info]                  ·gc.alloc.rate:                                  1108.451 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201280.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.517 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       184843.577 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                604.855 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 8726.695 ops/s
[info]                  ·gc.alloc.rate:                                  1116.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201280.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.691 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       184152.481 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8707.482 ops/s
[info]                  ·gc.alloc.rate:            1113.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246100.510 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   8666.463 ±(99.9%) 208.818 ops/s [Average]
[info]   (min, avg, max) = (8589.790, 8666.463, 8726.695), stdev = 54.229
[info]   CI (99.9%): [8457.645, 8875.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1108.370 ±(99.9%) 26.975 MB/sec [Average]
[info]   (min, avg, max) = (1098.472, 1108.370, 1116.141), stdev = 7.005
[info]   CI (99.9%): [1081.396, 1135.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201280.062 ±(99.9%) 0.117 B/op [Average]
[info]   (min, avg, max) = (201280.047, 201280.062, 201280.116), stdev = 0.030
[info]   CI (99.9%): [201279.945, 201280.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.052), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.842 ±(99.9%) 16.361 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.842, 9.517), stdev = 4.249
[info]   CI (99.9%): [≈ 0, 19.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1152.129 ±(99.9%) 713.136 MB/sec [Average]
[info]   (min, avg, max) = (1011.737, 1152.129, 1361.606), stdev = 185.199
[info]   CI (99.9%): [438.993, 1865.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   209280.255 ±(99.9%) 131089.153 B/op [Average]
[info]   (min, avg, max) = (184152.481, 209280.255, 247039.672), stdev = 34043.437
[info]   CI (99.9%): [78191.101, 340369.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   145.232 ±(99.9%) 1009.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 145.232, 604.855), stdev = 262.251
[info]   CI (99.9%): [≈ 0, 1155.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.336
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4735.981 ops/s
[info] # Warmup Iteration   2: 8519.562 ops/s
[info] # Warmup Iteration   3: 8697.670 ops/s
[info] Iteration   1: 8769.085 ops/s
[info]                  ·gc.alloc.rate:                   982.471 MB/sec
[info]                  ·gc.alloc.rate.norm:              176336.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        180978.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 119.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 8703.295 ops/s
[info]                  ·gc.alloc.rate:            974.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       176336.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182491.975 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 8745.696 ops/s
[info]                  ·gc.alloc.rate:                                  979.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176336.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.769 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       182314.140 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                719.188 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 8857.472 ops/s
[info]                  ·gc.alloc.rate:                                  992.414 MB/sec
[info]                  ·gc.alloc.rate.norm:                             176336.046 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       181450.165 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 8856.019 ops/s
[info]                  ·gc.alloc.rate:            992.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       176336.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 120966.776 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   8786.313 ±(99.9%) 263.713 ops/s [Average]
[info]   (min, avg, max) = (8703.295, 8786.313, 8857.472), stdev = 68.485
[info]   CI (99.9%): [8522.600, 9050.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   984.395 ±(99.9%) 29.899 MB/sec [Average]
[info]   (min, avg, max) = (974.972, 984.395, 992.414), stdev = 7.765
[info]   CI (99.9%): [954.497, 1014.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   176336.048 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (176336.046, 176336.048, 176336.050), stdev = 0.002
[info]   CI (99.9%): [176336.041, 176336.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.060), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.988 ±(99.9%) 18.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.988, 10.769), stdev = 4.710
[info]   CI (99.9%): [≈ 0, 21.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.457 ±(99.9%) 572.306 MB/sec [Average]
[info]   (min, avg, max) = (680.744, 946.457, 1021.196), stdev = 148.626
[info]   CI (99.9%): [374.151, 1518.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   169640.326 ±(99.9%) 104800.724 B/op [Average]
[info]   (min, avg, max) = (120966.776, 169640.326, 182491.975), stdev = 27216.415
[info]   CI (99.9%): [64839.602, 274441.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   167.745 ±(99.9%) 1203.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 167.745, 719.188), stdev = 312.581
[info]   CI (99.9%): [≈ 0, 1371.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 5.404
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:00:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174700.638 ops/s
[info] # Warmup Iteration   2: 193469.140 ops/s
[info] # Warmup Iteration   3: 194684.305 ops/s
[info] Iteration   1: 194196.116 ops/s
[info]                  ·gc.alloc.rate:            1263.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1350.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10948.254 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 194344.581 ops/s
[info]                  ·gc.alloc.rate:                                  1264.233 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.810 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10983.073 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.578 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 196337.233 ops/s
[info]                  ·gc.alloc.rate:                                  1277.414 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.076 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10914.657 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 196655.586 ops/s
[info]                  ·gc.alloc.rate:            1279.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8172.716 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 196474.078 ops/s
[info]                  ·gc.alloc.rate:            1278.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10906.714 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   195601.519 ±(99.9%) 4703.757 ops/s [Average]
[info]   (min, avg, max) = (194196.116, 195601.519, 196655.586), stdev = 1221.551
[info]   CI (99.9%): [190897.762, 200305.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1272.547 ±(99.9%) 31.354 MB/sec [Average]
[info]   (min, avg, max) = (1263.145, 1272.547, 1279.820), stdev = 8.142
[info]   CI (99.9%): [1241.194, 1303.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.002, 10240.002, 10240.002), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.177 ±(99.9%) 1.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.177, 0.810), stdev = 0.355
[info]   CI (99.9%): [≈ 0, 1.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1290.169 ±(99.9%) 578.712 MB/sec [Average]
[info]   (min, avg, max) = (1021.445, 1290.169, 1361.575), stdev = 150.290
[info]   CI (99.9%): [711.457, 1868.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10385.083 ±(99.9%) 4763.710 B/op [Average]
[info]   (min, avg, max) = (8172.716, 10385.083, 10983.073), stdev = 1237.120
[info]   CI (99.9%): [5621.372, 15148.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.316 ±(99.9%) 37.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.316, 21.578), stdev = 9.650
[info]   CI (99.9%): [≈ 0, 41.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:00:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3576.193 ops/s
[info] # Warmup Iteration   2: 6840.093 ops/s
[info] # Warmup Iteration   3: 6994.456 ops/s
[info] Iteration   1: 6944.798 ops/s
[info]                  ·gc.alloc.rate:            1293.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       293112.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 304941.480 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 7036.142 ops/s
[info]                  ·gc.alloc.rate:                                  1310.525 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.682 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       302743.170 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                893.927 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 7110.270 ops/s
[info]                  ·gc.alloc.rate:                                  1324.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       301362.394 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7101.447 ops/s
[info]                  ·gc.alloc.rate:                                  1322.504 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.743 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       301744.241 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 7115.301 ops/s
[info]                  ·gc.alloc.rate:                                  1325.264 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.800 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       301150.674 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7061.592 ±(99.9%) 279.876 ops/s [Average]
[info]   (min, avg, max) = (6944.798, 7061.592, 7115.301), stdev = 72.683
[info]   CI (99.9%): [6781.716, 7341.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1315.106 ±(99.9%) 52.284 MB/sec [Average]
[info]   (min, avg, max) = (1293.218, 1315.106, 1325.264), stdev = 13.578
[info]   CI (99.9%): [1262.822, 1367.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293112.060 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (293112.057, 293112.060, 293112.063), stdev = 0.002
[info]   CI (99.9%): [293112.050, 293112.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.671 ±(99.9%) 43.157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.671, 25.682), stdev = 11.208
[info]   CI (99.9%): [≈ 0, 48.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.669 ±(99.9%) 27.559 MB/sec [Average]
[info]   (min, avg, max) = (1345.409, 1356.669, 1361.609), stdev = 7.157
[info]   CI (99.9%): [1329.110, 1384.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   302388.392 ±(99.9%) 5978.946 B/op [Average]
[info]   (min, avg, max) = (301150.674, 302388.392, 304941.480), stdev = 1552.713
[info]   CI (99.9%): [296409.445, 308367.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   178.785 ±(99.9%) 1539.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 178.785, 893.927), stdev = 399.776
[info]   CI (99.9%): [≈ 0, 1718.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 16.000), stdev = 5.550
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15499.484 ops/s
[info] # Warmup Iteration   2: 22386.005 ops/s
[info] # Warmup Iteration   3: 22354.904 ops/s
[info] Iteration   1: 22251.479 ops/s
[info]                  ·gc.alloc.rate:            934.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       66100.602 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71519.517 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 22160.725 ops/s
[info]                  ·gc.alloc.rate:            931.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       66104.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71813.145 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 22442.269 ops/s
[info]                  ·gc.alloc.rate:            942.631 MB/sec
[info]                  ·gc.alloc.rate.norm:       66083.430 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47276.081 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 22201.859 ops/s
[info]                  ·gc.alloc.rate:                                  932.376 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66080.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.424 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72152.757 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                236.102 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 22098.023 ops/s
[info]                  ·gc.alloc.rate:                                  927.724 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66080.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.937 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72729.482 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22230.871 ±(99.9%) 503.995 ops/s [Average]
[info]   (min, avg, max) = (22098.023, 22230.871, 22442.269), stdev = 130.886
[info]   CI (99.9%): [21726.875, 22734.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   933.674 ±(99.9%) 21.540 MB/sec [Average]
[info]   (min, avg, max) = (927.724, 933.674, 942.631), stdev = 5.594
[info]   CI (99.9%): [912.134, 955.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66089.618 ±(99.9%) 45.183 B/op [Average]
[info]   (min, avg, max) = (66080.018, 66089.618, 66104.023), stdev = 11.734
[info]   CI (99.9%): [66044.435, 66134.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.872 ±(99.9%) 5.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.872, 3.424), stdev = 1.483
[info]   CI (99.9%): [≈ 0, 6.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   947.233 ±(99.9%) 587.612 MB/sec [Average]
[info]   (min, avg, max) = (674.358, 947.233, 1021.079), stdev = 152.601
[info]   CI (99.9%): [359.621, 1534.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   67098.196 ±(99.9%) 42703.756 B/op [Average]
[info]   (min, avg, max) = (47276.081, 67098.196, 72729.482), stdev = 11090.030
[info]   CI (99.9%): [24394.441, 109801.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   47.220 ±(99.9%) 406.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.220, 236.102), stdev = 105.588
[info]   CI (99.9%): [≈ 0, 453.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 11.000), stdev = 3.606
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 00:59:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15126.492 ops/s
[info] # Warmup Iteration   2: 24605.591 ops/s
[info] # Warmup Iteration   3: 25474.610 ops/s
[info] Iteration   1: 25553.665 ops/s
[info]                  ·gc.alloc.rate:            982.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62151.512 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 25469.769 ops/s
[info]                  ·gc.alloc.rate:            980.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62358.887 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 25640.189 ops/s
[info]                  ·gc.alloc.rate:                                  986.821 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.889 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62190.840 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                245.329 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 25479.145 ops/s
[info]                  ·gc.alloc.rate:                                  980.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.959 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63075.025 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 25800.998 ops/s
[info]                  ·gc.alloc.rate:                                  992.578 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62290.437 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25588.753 ±(99.9%) 527.608 ops/s [Average]
[info]   (min, avg, max) = (25469.769, 25588.753, 25800.998), stdev = 137.018
[info]   CI (99.9%): [25061.145, 26116.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   984.511 ±(99.9%) 20.327 MB/sec [Average]
[info]   (min, avg, max) = (980.093, 984.511, 992.578), stdev = 5.279
[info]   CI (99.9%): [964.184, 1004.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.017 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.017, 60552.020), stdev = 0.002
[info]   CI (99.9%): [60552.011, 60552.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.591 ±(99.9%) 8.612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.591, 4.889), stdev = 2.237
[info]   CI (99.9%): [≈ 0, 10.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.762 ±(99.9%) 23.008 MB/sec [Average]
[info]   (min, avg, max) = (1008.877, 1014.762, 1021.074), stdev = 5.975
[info]   CI (99.9%): [991.755, 1037.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   62413.340 ±(99.9%) 1458.624 B/op [Average]
[info]   (min, avg, max) = (62151.512, 62413.340, 63075.025), stdev = 378.800
[info]   CI (99.9%): [60954.717, 63871.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   49.066 ±(99.9%) 422.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.066, 245.329), stdev = 109.714
[info]   CI (99.9%): [≈ 0, 471.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.919
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 00:59:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 749553.982 ops/s
[info] # Warmup Iteration   2: 874513.204 ops/s
[info] # Warmup Iteration   3: 879101.736 ops/s
[info] Iteration   1: 881243.015 ops/s
[info]                  ·gc.alloc.rate:                                  1589.890 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.237 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3020.633 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.138 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 877351.646 ops/s
[info]                  ·gc.alloc.rate:                                  1582.938 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2442.523 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 874622.448 ops/s
[info]                  ·gc.alloc.rate:                                  1578.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3062.664 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 871366.694 ops/s
[info]                  ·gc.alloc.rate:                                  1572.523 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3074.117 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 876774.581 ops/s
[info]                  ·gc.alloc.rate:                                  1582.299 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2444.116 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   876271.677 ±(99.9%) 14004.949 ops/s [Average]
[info]   (min, avg, max) = (871366.694, 876271.677, 881243.015), stdev = 3637.041
[info]   CI (99.9%): [862266.728, 890276.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1581.256 ±(99.9%) 24.478 MB/sec [Average]
[info]   (min, avg, max) = (1572.523, 1581.256, 1589.890), stdev = 6.357
[info]   CI (99.9%): [1556.778, 1605.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.000, 2840.000, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.029, 0.133), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.400 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.052, 0.237), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.739 ±(99.9%) 710.892 MB/sec [Average]
[info]   (min, avg, max) = (1361.395, 1563.739, 1702.397), stdev = 184.616
[info]   CI (99.9%): [852.846, 2274.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2808.811 ±(99.9%) 1287.041 B/op [Average]
[info]   (min, avg, max) = (2442.523, 2808.811, 3074.117), stdev = 334.241
[info]   CI (99.9%): [1521.769, 4095.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.428 ±(99.9%) 12.292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.428, 7.138), stdev = 3.192
[info]   CI (99.9%): [≈ 0, 13.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 12.000), stdev = 3.937
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 00:59:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 556100.148 ops/s
[info] # Warmup Iteration   2: 615470.159 ops/s
[info] # Warmup Iteration   3: 617418.399 ops/s
[info] Iteration   1: 617367.052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 617550.917 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 617414.288 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 617374.655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 617452.809 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   617431.944 ±(99.9%) 288.121 ops/s [Average]
[info]   (min, avg, max) = (617367.052, 617431.944, 617550.917), stdev = 74.824
[info]   CI (99.9%): [617143.822, 617720.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 00:59:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16018.806 ops/s
[info] # Warmup Iteration   2: 23776.658 ops/s
[info] # Warmup Iteration   3: 23783.542 ops/s
[info] Iteration   1: 23909.750 ops/s
[info]                  ·gc.alloc.rate:            1040.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       68480.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66429.399 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 23521.325 ops/s
[info]                  ·gc.alloc.rate:            1023.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       68478.960 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67522.108 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 24015.791 ops/s
[info]                  ·gc.alloc.rate:                                  1044.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68464.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.949 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66398.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                261.926 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 24240.377 ops/s
[info]                  ·gc.alloc.rate:                                  1054.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68464.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66298.235 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 24240.546 ops/s
[info]                  ·gc.alloc.rate:            1054.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       68464.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66298.235 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   23985.558 ±(99.9%) 1142.488 ops/s [Average]
[info]   (min, avg, max) = (23521.325, 23985.558, 24240.546), stdev = 296.701
[info]   CI (99.9%): [22843.070, 25128.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1043.368 ±(99.9%) 49.517 MB/sec [Average]
[info]   (min, avg, max) = (1023.200, 1043.368, 1054.473), stdev = 12.859
[info]   CI (99.9%): [993.851, 1092.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68470.206 ±(99.9%) 32.660 B/op [Average]
[info]   (min, avg, max) = (68464.017, 68470.206, 68480.017), stdev = 8.482
[info]   CI (99.9%): [68437.546, 68502.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.039 ±(99.9%) 11.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.039, 6.949), stdev = 3.084
[info]   CI (99.9%): [≈ 0, 13.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.633 ±(99.9%) 23.438 MB/sec [Average]
[info]   (min, avg, max) = (1008.903, 1014.633, 1021.115), stdev = 6.087
[info]   CI (99.9%): [991.195, 1038.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66589.230 ±(99.9%) 2020.824 B/op [Average]
[info]   (min, avg, max) = (66298.235, 66589.230, 67522.108), stdev = 524.802
[info]   CI (99.9%): [64568.406, 68610.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   52.385 ±(99.9%) 451.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.385, 261.926), stdev = 117.137
[info]   CI (99.9%): [≈ 0, 503.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 12.000), stdev = 4.336
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 00:59:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17670.341 ops/s
[info] # Warmup Iteration   2: 25369.245 ops/s
[info] # Warmup Iteration   3: 25387.474 ops/s
[info] Iteration   1: 25374.435 ops/s
[info]                  ·gc.alloc.rate:            1295.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       80320.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83624.959 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 25800.268 ops/s
[info]                  ·gc.alloc.rate:                                  1316.400 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80320.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.332 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82650.788 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                203.173 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 26059.868 ops/s
[info]                  ·gc.alloc.rate:                                  1329.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80320.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.787 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82228.634 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 25989.735 ops/s
[info]                  ·gc.alloc.rate:                                  1326.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80320.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.263 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       82453.233 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 26185.012 ops/s
[info]                  ·gc.alloc.rate:            1336.281 MB/sec
[info]                  ·gc.alloc.rate.norm:       80320.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61374.786 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   25881.864 ±(99.9%) 1216.710 ops/s [Average]
[info]   (min, avg, max) = (25374.435, 25881.864, 26185.012), stdev = 315.976
[info]   CI (99.9%): [24665.153, 27098.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1320.830 ±(99.9%) 62.029 MB/sec [Average]
[info]   (min, avg, max) = (1295.034, 1320.830, 1336.281), stdev = 16.109
[info]   CI (99.9%): [1258.802, 1382.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80320.021 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (80320.016, 80320.021, 80320.039), stdev = 0.010
[info]   CI (99.9%): [80319.981, 80320.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.022), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.476 ±(99.9%) 2.218 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.476, 1.332), stdev = 0.576
[info]   CI (99.9%): [≈ 0, 2.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1289.456 ±(99.9%) 578.075 MB/sec [Average]
[info]   (min, avg, max) = (1021.090, 1289.456, 1361.874), stdev = 150.124
[info]   CI (99.9%): [711.382, 1867.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   78466.480 ±(99.9%) 36848.286 B/op [Average]
[info]   (min, avg, max) = (61374.786, 78466.480, 83624.959), stdev = 9569.383
[info]   CI (99.9%): [41618.194, 115314.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   40.635 ±(99.9%) 349.876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.635, 203.173), stdev = 90.862
[info]   CI (99.9%): [≈ 0, 390.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 00:58:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14944.055 ops/s
[info] # Warmup Iteration   2: 26479.720 ops/s
[info] # Warmup Iteration   3: 26460.603 ops/s
[info] Iteration   1: 26518.167 ops/s
[info]                  ·gc.alloc.rate:            1210.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59897.166 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 26305.131 ops/s
[info]                  ·gc.alloc.rate:                                  1201.272 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71889.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.510 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80745.533 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                239.128 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 26820.925 ops/s
[info]                  ·gc.alloc.rate:                                  1224.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.211 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79898.950 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 26827.870 ops/s
[info]                  ·gc.alloc.rate:            1225.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59906.347 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 26847.601 ops/s
[info]                  ·gc.alloc.rate:            1226.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79815.639 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   26663.939 ±(99.9%) 933.816 ops/s [Average]
[info]   (min, avg, max) = (26305.131, 26663.939, 26847.601), stdev = 242.509
[info]   CI (99.9%): [25730.123, 27597.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1217.672 ±(99.9%) 42.729 MB/sec [Average]
[info]   (min, avg, max) = (1201.272, 1217.672, 1226.172), stdev = 11.097
[info]   CI (99.9%): [1174.943, 1260.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.224 ±(99.9%) 1.798 B/op [Average]
[info]   (min, avg, max) = (71888.015, 71888.224, 71889.059), stdev = 0.467
[info]   CI (99.9%): [71886.426, 71890.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.744 ±(99.9%) 4.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.744, 2.510), stdev = 1.118
[info]   CI (99.9%): [≈ 0, 5.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.382 ±(99.9%) 722.698 MB/sec [Average]
[info]   (min, avg, max) = (1008.988, 1220.382, 1361.437), stdev = 187.682
[info]   CI (99.9%): [497.684, 1943.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   72052.727 ±(99.9%) 42735.344 B/op [Average]
[info]   (min, avg, max) = (59897.166, 72052.727, 80745.533), stdev = 11098.233
[info]   CI (99.9%): [29317.383, 114788.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   47.826 ±(99.9%) 411.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.826, 239.128), stdev = 106.941
[info]   CI (99.9%): [≈ 0, 459.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 14.000), stdev = 5.523
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 00:58:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313622.283 ops/s
[info] # Warmup Iteration   2: 348050.012 ops/s
[info] # Warmup Iteration   3: 351575.188 ops/s
[info] Iteration   1: 343183.843 ops/s
[info]                  ·gc.alloc.rate:            893.176 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4646.462 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 348161.501 ops/s
[info]                  ·gc.alloc.rate:            906.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4580.105 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 350531.277 ops/s
[info]                  ·gc.alloc.rate:            912.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.564 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3032.857 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 348428.082 ops/s
[info]                  ·gc.alloc.rate:                                  907.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4600.588 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.036 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 349599.723 ops/s
[info]                  ·gc.alloc.rate:                                  909.724 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4597.018 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   347980.885 ±(99.9%) 10953.941 ops/s [Average]
[info]   (min, avg, max) = (343183.843, 347980.885, 350531.277), stdev = 2844.704
[info]   CI (99.9%): [337026.945, 358934.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   905.661 ±(99.9%) 28.522 MB/sec [Average]
[info]   (min, avg, max) = (893.176, 905.661, 912.378), stdev = 7.407
[info]   CI (99.9%): [877.139, 934.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.324 ±(99.9%) 587.286 MB/sec [Average]
[info]   (min, avg, max) = (675.564, 948.324, 1021.000), stdev = 152.516
[info]   CI (99.9%): [361.038, 1535.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4291.406 ±(99.9%) 2710.775 B/op [Average]
[info]   (min, avg, max) = (3032.857, 4291.406, 4646.462), stdev = 703.980
[info]   CI (99.9%): [1580.631, 7002.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.407 ±(99.9%) 20.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.407, 12.036), stdev = 5.382
[info]   CI (99.9%): [≈ 0, 23.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.449
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 00:58:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7892.530 ops/s
[info] # Warmup Iteration   2: 15041.165 ops/s
[info] # Warmup Iteration   3: 15435.007 ops/s
[info] Iteration   1: 15356.938 ops/s
[info]                  ·gc.alloc.rate:                                  1580.633 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.592 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1684.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       172714.667 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                477.867 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   2: 15503.111 ops/s
[info]                  ·gc.alloc.rate:                                  1595.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.979 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       172779.033 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 15755.392 ops/s
[info]                  ·gc.alloc.rate:                                  1621.987 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.393 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       136012.777 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 15707.942 ops/s
[info]                  ·gc.alloc.rate:            1617.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       162024.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.905 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 170524.580 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 15486.914 ops/s
[info]                  ·gc.alloc.rate:                                  1594.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       172946.335 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15562.059 ±(99.9%) 638.138 ops/s [Average]
[info]   (min, avg, max) = (15356.938, 15562.059, 15755.392), stdev = 165.722
[info]   CI (99.9%): [14923.921, 16200.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1601.988 ±(99.9%) 66.084 MB/sec [Average]
[info]   (min, avg, max) = (1580.633, 1601.988, 1621.987), stdev = 17.162
[info]   CI (99.9%): [1535.904, 1668.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162024.028 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (162024.026, 162024.028, 162024.033), stdev = 0.003
[info]   CI (99.9%): [162024.017, 162024.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.064), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.846 ±(99.9%) 10.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.846, 6.592), stdev = 2.764
[info]   CI (99.9%): [≈ 0, 12.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.419 ±(99.9%) 579.354 MB/sec [Average]
[info]   (min, avg, max) = (1361.594, 1630.419, 1702.038), stdev = 150.456
[info]   CI (99.9%): [1051.064, 2209.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   164995.478 ±(99.9%) 62504.908 B/op [Average]
[info]   (min, avg, max) = (136012.777, 164995.478, 172946.335), stdev = 16232.326
[info]   CI (99.9%): [102490.570, 227500.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   95.573 ±(99.9%) 822.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.573, 477.867), stdev = 213.708
[info]   CI (99.9%): [≈ 0, 918.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 18.000), stdev = 6.301
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 00:58:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35022.342 ops/s
[info] # Warmup Iteration   2: 52736.496 ops/s
[info] # Warmup Iteration   3: 52538.378 ops/s
[info] Iteration   1: 53705.405 ops/s
[info]                  ·gc.alloc.rate:            1302.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39510.711 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 53928.965 ops/s
[info]                  ·gc.alloc.rate:                                  1307.920 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.824 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29607.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                97.200 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 53580.901 ops/s
[info]                  ·gc.alloc.rate:                                  1299.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.978 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39994.203 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 54404.064 ops/s
[info]                  ·gc.alloc.rate:            1319.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39389.288 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 53527.658 ops/s
[info]                  ·gc.alloc.rate:                                  1298.315 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40033.048 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   53829.399 ±(99.9%) 1372.698 ops/s [Average]
[info]   (min, avg, max) = (53527.658, 53829.399, 54404.064), stdev = 356.485
[info]   CI (99.9%): [52456.701, 55202.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1305.717 ±(99.9%) 33.666 MB/sec [Average]
[info]   (min, avg, max) = (1298.315, 1305.717, 1319.866), stdev = 8.743
[info]   CI (99.9%): [1272.051, 1339.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38176.007, 38176.008, 38176.008), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.564 ±(99.9%) 3.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.564, 1.824), stdev = 0.820
[info]   CI (99.9%): [≈ 0, 3.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1289.512 ±(99.9%) 592.709 MB/sec [Average]
[info]   (min, avg, max) = (1014.350, 1289.512, 1361.813), stdev = 153.925
[info]   CI (99.9%): [696.803, 1882.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   37706.884 ±(99.9%) 17469.841 B/op [Average]
[info]   (min, avg, max) = (29607.172, 37706.884, 40033.048), stdev = 4536.862
[info]   CI (99.9%): [20237.043, 55176.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.440 ±(99.9%) 167.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.440, 97.200), stdev = 43.469
[info]   CI (99.9%): [≈ 0, 186.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.604
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 00:58:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64974.357 ops/s
[info] # Warmup Iteration   2: 99045.854 ops/s
[info] # Warmup Iteration   3: 99078.511 ops/s
[info] Iteration   1: 99185.861 ops/s
[info]                  ·gc.alloc.rate:                   1033.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16002.984 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.570 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 96185.688 ops/s
[info]                  ·gc.alloc.rate:            1002.796 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16512.922 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 98815.185 ops/s
[info]                  ·gc.alloc.rate:                                  1030.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16408.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.176 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.808 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16200.983 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                63.658 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 99886.635 ops/s
[info]                  ·gc.alloc.rate:                                  1041.134 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16408.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16090.278 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 99819.313 ops/s
[info]                  ·gc.alloc.rate:            1040.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16101.076 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   98778.536 ±(99.9%) 5840.177 ops/s [Average]
[info]   (min, avg, max) = (96185.688, 98778.536, 99886.635), stdev = 1516.675
[info]   CI (99.9%): [92938.359, 104618.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1029.840 ±(99.9%) 60.811 MB/sec [Average]
[info]   (min, avg, max) = (1002.796, 1029.840, 1041.134), stdev = 15.792
[info]   CI (99.9%): [969.030, 1090.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16408.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16408.004, 16408.004, 16408.004), stdev = 0.001
[info]   CI (99.9%): [16408.004, 16408.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.176), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.566 ±(99.9%) 4.827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.566, 2.808), stdev = 1.254
[info]   CI (99.9%): [≈ 0, 5.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1015.492 ±(99.9%) 24.370 MB/sec [Average]
[info]   (min, avg, max) = (1008.325, 1015.492, 1021.420), stdev = 6.329
[info]   CI (99.9%): [991.122, 1039.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16181.649 ±(99.9%) 762.577 B/op [Average]
[info]   (min, avg, max) = (16002.984, 16181.649, 16512.922), stdev = 198.039
[info]   CI (99.9%): [15419.072, 16944.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.846 ±(99.9%) 106.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.846, 63.658), stdev = 27.668
[info]   CI (99.9%): [≈ 0, 121.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 13.000), stdev = 5.070
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 00:57:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1203303.493 ops/s
[info] # Warmup Iteration   2: 1424155.546 ops/s
[info] # Warmup Iteration   3: 1459204.363 ops/s
[info] Iteration   1: 1476931.150 ops/s
[info]                  ·gc.alloc.rate:                                  1583.757 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1438.198 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.259 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1471451.395 ops/s
[info]                  ·gc.alloc.rate:                                  1578.040 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1820.484 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1444014.443 ops/s
[info]                  ·gc.alloc.rate:                                  1549.310 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1483.965 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1442051.397 ops/s
[info]                  ·gc.alloc.rate:                                  1546.535 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1857.562 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1469239.110 ops/s
[info]                  ·gc.alloc.rate:                                  1575.548 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1823.185 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1460737.499 ±(99.9%) 63217.744 ops/s [Average]
[info]   (min, avg, max) = (1442051.397, 1460737.499, 1476931.150), stdev = 16417.447
[info]   CI (99.9%): [1397519.755, 1523955.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1566.638 ±(99.9%) 66.886 MB/sec [Average]
[info]   (min, avg, max) = (1546.535, 1566.638, 1583.757), stdev = 17.370
[info]   CI (99.9%): [1499.752, 1633.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.015, 0.061), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.017, 0.065), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.385 ±(99.9%) 730.212 MB/sec [Average]
[info]   (min, avg, max) = (1349.381, 1563.385, 1701.894), stdev = 189.634
[info]   CI (99.9%): [833.173, 2293.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1684.679 ±(99.9%) 790.449 B/op [Average]
[info]   (min, avg, max) = (1438.198, 1684.679, 1857.562), stdev = 205.277
[info]   CI (99.9%): [894.230, 2475.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.852 ±(99.9%) 7.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.852, 4.259), stdev = 1.905
[info]   CI (99.9%): [≈ 0, 8.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 00:57:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 737305.182 ops/s
[info] # Warmup Iteration   2: 812977.072 ops/s
[info] # Warmup Iteration   3: 829461.636 ops/s
[info] Iteration   1: 829505.541 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 829411.386 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 829637.647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 829439.521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 829557.348 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   829510.288 ±(99.9%) 351.059 ops/s [Average]
[info]   (min, avg, max) = (829411.386, 829510.288, 829637.647), stdev = 91.169
[info]   CI (99.9%): [829159.230, 829861.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 00:57:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43567.370 ops/s
[info] # Warmup Iteration   2: 57826.275 ops/s
[info] # Warmup Iteration   3: 58737.622 ops/s
[info] Iteration   1: 59273.380 ops/s
[info]                  ·gc.alloc.rate:            1378.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35726.610 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 58875.862 ops/s
[info]                  ·gc.alloc.rate:                                  1369.113 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.202 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36291.656 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                106.845 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 59946.099 ops/s
[info]                  ·gc.alloc.rate:                                  1394.232 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35746.512 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 60058.324 ops/s
[info]                  ·gc.alloc.rate:                                  1396.905 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35680.457 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 59581.767 ops/s
[info]                  ·gc.alloc.rate:                                  1386.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35964.248 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   59547.086 ±(99.9%) 1873.838 ops/s [Average]
[info]   (min, avg, max) = (58875.862, 59547.086, 60058.324), stdev = 486.630
[info]   CI (99.9%): [57673.248, 61420.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1384.980 ±(99.9%) 44.042 MB/sec [Average]
[info]   (min, avg, max) = (1369.113, 1384.980, 1396.905), stdev = 11.438
[info]   CI (99.9%): [1340.938, 1429.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36608.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36608.007, 36608.007, 36608.007), stdev = 0.001
[info]   CI (99.9%): [36608.006, 36608.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.202), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.113 ±(99.9%) 9.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.113, 5.413), stdev = 2.404
[info]   CI (99.9%): [≈ 0, 10.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.460 ±(99.9%) 27.167 MB/sec [Average]
[info]   (min, avg, max) = (1345.288, 1357.460, 1361.797), stdev = 7.055
[info]   CI (99.9%): [1330.293, 1384.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   35881.896 ±(99.9%) 977.385 B/op [Average]
[info]   (min, avg, max) = (35680.457, 35881.896, 36291.656), stdev = 253.824
[info]   CI (99.9%): [34904.512, 36859.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   21.369 ±(99.9%) 183.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.369, 106.845), stdev = 47.782
[info]   CI (99.9%): [≈ 0, 205.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 15.000), stdev = 5.079
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 00:57:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9651.905 ops/s
[info] # Warmup Iteration   2: 13774.311 ops/s
[info] # Warmup Iteration   3: 13755.371 ops/s
[info] Iteration   1: 13745.683 ops/s
[info]                  ·gc.alloc.rate:            1227.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 154437.879 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 13741.364 ops/s
[info]                  ·gc.alloc.rate:                                  1226.273 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       154864.262 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                457.727 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 13892.051 ops/s
[info]                  ·gc.alloc.rate:                                  1239.714 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.886 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       115686.722 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 13936.077 ops/s
[info]                  ·gc.alloc.rate:                                  1243.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.681 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       153762.059 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 13935.923 ops/s
[info]                  ·gc.alloc.rate:            1243.824 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153773.091 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   13850.219 ±(99.9%) 381.407 ops/s [Average]
[info]   (min, avg, max) = (13741.364, 13850.219, 13936.077), stdev = 99.050
[info]   CI (99.9%): [13468.812, 14231.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1236.172 ±(99.9%) 34.084 MB/sec [Average]
[info]   (min, avg, max) = (1226.273, 1236.172, 1243.993), stdev = 8.851
[info]   CI (99.9%): [1202.088, 1270.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140480.037 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (140480.029, 140480.037, 140480.055), stdev = 0.011
[info]   CI (99.9%): [140479.995, 140480.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.469 ±(99.9%) 7.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.469, 4.777), stdev = 2.003
[info]   CI (99.9%): [≈ 0, 9.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1288.971 ±(99.9%) 577.421 MB/sec [Average]
[info]   (min, avg, max) = (1020.917, 1288.971, 1361.610), stdev = 149.954
[info]   CI (99.9%): [711.551, 1866.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   146504.803 ±(99.9%) 66362.587 B/op [Average]
[info]   (min, avg, max) = (115686.722, 146504.803, 154864.262), stdev = 17234.153
[info]   CI (99.9%): [80142.216, 212867.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   91.545 ±(99.9%) 788.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.545, 457.727), stdev = 204.702
[info]   CI (99.9%): [≈ 0, 879.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 5.030
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 00:56:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7336.279 ops/s
[info] # Warmup Iteration   2: 13548.527 ops/s
[info] # Warmup Iteration   3: 13688.827 ops/s
[info] Iteration   1: 13609.076 ops/s
[info]                  ·gc.alloc.rate:            1099.622 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116713.881 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 13714.910 ops/s
[info]                  ·gc.alloc.rate:            1108.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115803.517 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 13746.915 ops/s
[info]                  ·gc.alloc.rate:                                  1110.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             127184.033 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       155429.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                457.594 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 13762.132 ops/s
[info]                  ·gc.alloc.rate:            1112.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116787.780 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 13737.604 ops/s
[info]                  ·gc.alloc.rate:            1110.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116983.262 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   13714.127 ±(99.9%) 235.545 ops/s [Average]
[info]   (min, avg, max) = (13609.076, 13714.127, 13762.132), stdev = 61.170
[info]   CI (99.9%): [13478.583, 13949.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1108.216 ±(99.9%) 19.342 MB/sec [Average]
[info]   (min, avg, max) = (1099.622, 1108.216, 1112.376), stdev = 5.023
[info]   CI (99.9%): [1088.874, 1127.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127184.032 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (127184.030, 127184.032, 127184.037), stdev = 0.003
[info]   CI (99.9%): [127184.021, 127184.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.428 ±(99.9%) 20.908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.428, 12.141), stdev = 5.430
[info]   CI (99.9%): [≈ 0, 23.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.619 ±(99.9%) 589.772 MB/sec [Average]
[info]   (min, avg, max) = (1009.098, 1083.619, 1357.387), stdev = 153.162
[info]   CI (99.9%): [493.847, 1673.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   124343.555 ±(99.9%) 66937.366 B/op [Average]
[info]   (min, avg, max) = (115803.517, 124343.555, 155429.332), stdev = 17383.421
[info]   CI (99.9%): [57406.189, 191280.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   91.519 ±(99.9%) 788.004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 91.519, 457.594), stdev = 204.642
[info]   CI (99.9%): [≈ 0, 879.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 12.000), stdev = 4.764
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 00:56:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 378324.659 ops/s
[info] # Warmup Iteration   2: 392768.593 ops/s
[info] # Warmup Iteration   3: 404504.191 ops/s
[info] Iteration   1: 402732.101 ops/s
[info]                  ·gc.alloc.rate:            1047.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3959.435 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 404911.995 ops/s
[info]                  ·gc.alloc.rate:            1053.811 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3938.102 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 398288.624 ops/s
[info]                  ·gc.alloc.rate:                                  1036.771 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4024.653 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                10.529 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 407654.950 ops/s
[info]                  ·gc.alloc.rate:                                  1060.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.183 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3942.595 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 404769.075 ops/s
[info]                  ·gc.alloc.rate:                                  1053.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3970.790 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   403671.349 ±(99.9%) 13404.058 ops/s [Average]
[info]   (min, avg, max) = (398288.624, 403671.349, 407654.950), stdev = 3480.991
[info]   CI (99.9%): [390267.291, 417075.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1050.552 ±(99.9%) 34.565 MB/sec [Average]
[info]   (min, avg, max) = (1036.771, 1050.552, 1060.917), stdev = 8.977
[info]   CI (99.9%): [1015.986, 1085.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.066), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1017.441 ±(99.9%) 15.731 MB/sec [Average]
[info]   (min, avg, max) = (1013.013, 1017.441, 1021.183), stdev = 4.085
[info]   CI (99.9%): [1001.710, 1033.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3967.115 ±(99.9%) 133.752 B/op [Average]
[info]   (min, avg, max) = (3938.102, 3967.115, 4024.653), stdev = 34.735
[info]   CI (99.9%): [3833.363, 4100.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.106 ±(99.9%) 18.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.106, 10.529), stdev = 4.709
[info]   CI (99.9%): [≈ 0, 20.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 8.000), stdev = 3.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 00:56:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5547.837 ops/s
[info] # Warmup Iteration   2: 10182.867 ops/s
[info] # Warmup Iteration   3: 10514.112 ops/s
[info] Iteration   1: 10442.058 ops/s
[info]                  ·gc.alloc.rate:                   1441.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        253485.342 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 602.341 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         21.000 ms
[info] Iteration   2: 10652.053 ops/s
[info]                  ·gc.alloc.rate:                                  1470.597 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.699 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       201153.388 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 10663.080 ops/s
[info]                  ·gc.alloc.rate:            1472.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       217320.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 200964.777 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 10519.243 ops/s
[info]                  ·gc.alloc.rate:                                  1452.293 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217322.809 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.196 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       254620.004 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10556.931 ops/s
[info]                  ·gc.alloc.rate:                                  1458.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       202963.006 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   10566.673 ±(99.9%) 357.393 ops/s [Average]
[info]   (min, avg, max) = (10442.058, 10566.673, 10663.080), stdev = 92.814
[info]   CI (99.9%): [10209.281, 10924.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1458.991 ±(99.9%) 49.827 MB/sec [Average]
[info]   (min, avg, max) = (1441.435, 1458.991, 1472.457), stdev = 12.940
[info]   CI (99.9%): [1409.163, 1508.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320.593 ±(99.9%) 4.769 B/op [Average]
[info]   (min, avg, max) = (217320.038, 217320.593, 217322.809), stdev = 1.238
[info]   CI (99.9%): [217315.824, 217325.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.093), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.975 ±(99.9%) 23.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.975, 13.699), stdev = 6.009
[info]   CI (99.9%): [≈ 0, 26.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.505 ±(99.9%) 696.260 MB/sec [Average]
[info]   (min, avg, max) = (1361.198, 1493.505, 1701.537), stdev = 180.816
[info]   CI (99.9%): [797.246, 2189.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   222637.303 ±(99.9%) 110481.102 B/op [Average]
[info]   (min, avg, max) = (200964.777, 222637.303, 254620.004), stdev = 28691.591
[info]   CI (99.9%): [112156.201, 333118.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   120.468 ±(99.9%) 1037.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 120.468, 602.341), stdev = 269.375
[info]   CI (99.9%): [≈ 0, 1157.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 21.000), stdev = 7.727
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 00:56:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24940.661 ops/s
[info] # Warmup Iteration   2: 36743.669 ops/s
[info] # Warmup Iteration   3: 35621.802 ops/s
[info] Iteration   1: 36651.641 ops/s
[info]                  ·gc.alloc.rate:            1139.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       48936.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43421.310 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 36971.867 ops/s
[info]                  ·gc.alloc.rate:            1149.375 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43042.059 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 36087.153 ops/s
[info]                  ·gc.alloc.rate:                                  1121.893 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48928.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.385 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59237.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                145.260 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 35700.827 ops/s
[info]                  ·gc.alloc.rate:            1109.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45018.260 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 36838.541 ops/s
[info]                  ·gc.alloc.rate:            1145.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43626.635 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   36450.006 ±(99.9%) 2070.850 ops/s [Average]
[info]   (min, avg, max) = (35700.827, 36450.006, 36971.867), stdev = 537.793
[info]   CI (99.9%): [34379.156, 38520.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1133.212 ±(99.9%) 64.289 MB/sec [Average]
[info]   (min, avg, max) = (1109.958, 1133.212, 1149.375), stdev = 16.696
[info]   CI (99.9%): [1068.924, 1197.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48929.616 ±(99.9%) 13.816 B/op [Average]
[info]   (min, avg, max) = (48928.011, 48929.616, 48936.035), stdev = 3.588
[info]   CI (99.9%): [48915.800, 48943.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.277 ±(99.9%) 2.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.277, 1.385), stdev = 0.619
[info]   CI (99.9%): [≈ 0, 2.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1084.594 ±(99.9%) 589.436 MB/sec [Average]
[info]   (min, avg, max) = (1011.108, 1084.594, 1358.275), stdev = 153.075
[info]   CI (99.9%): [495.158, 1674.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   46869.083 ±(99.9%) 26777.993 B/op [Average]
[info]   (min, avg, max) = (43042.059, 46869.083, 59237.150), stdev = 6954.160
[info]   CI (99.9%): [20091.089, 73647.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   29.052 ±(99.9%) 250.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.052, 145.260), stdev = 64.962
[info]   CI (99.9%): [≈ 0, 279.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 10.000), stdev = 4.025
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 00:56:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27848.534 ops/s
[info] # Warmup Iteration   2: 44604.935 ops/s
[info] # Warmup Iteration   3: 44242.312 ops/s
[info] Iteration   1: 44562.766 ops/s
[info]                  ·gc.alloc.rate:                   1182.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35619.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.526 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 44465.891 ops/s
[info]                  ·gc.alloc.rate:                                  1179.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.828 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47768.646 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                141.467 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 45203.684 ops/s
[info]                  ·gc.alloc.rate:                                  1199.518 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35554.777 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 44722.912 ops/s
[info]                  ·gc.alloc.rate:            1186.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47916.149 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 44171.919 ops/s
[info]                  ·gc.alloc.rate:            1171.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36385.319 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   44625.434 ±(99.9%) 1464.931 ops/s [Average]
[info]   (min, avg, max) = (44171.919, 44625.434, 45203.684), stdev = 380.438
[info]   CI (99.9%): [43160.503, 46090.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1183.884 ±(99.9%) 39.322 MB/sec [Average]
[info]   (min, avg, max) = (1171.899, 1183.884, 1199.518), stdev = 10.212
[info]   CI (99.9%): [1144.562, 1223.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.117), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.378 ±(99.9%) 7.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.378, 4.064), stdev = 1.937
[info]   CI (99.9%): [≈ 0, 8.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1152.436 ±(99.9%) 713.955 MB/sec [Average]
[info]   (min, avg, max) = (1008.620, 1152.436, 1361.501), stdev = 185.412
[info]   CI (99.9%): [438.481, 1866.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40648.802 ±(99.9%) 25318.578 B/op [Average]
[info]   (min, avg, max) = (35554.777, 40648.802, 47916.149), stdev = 6575.154
[info]   CI (99.9%): [15330.224, 65967.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   32.999 ±(99.9%) 236.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.999, 141.467), stdev = 61.485
[info]   CI (99.9%): [≈ 0, 269.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 14.000), stdev = 5.762
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 00:55:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1519027.101 ops/s
[info] # Warmup Iteration   2: 1688863.312 ops/s
[info] # Warmup Iteration   3: 1648022.288 ops/s
[info] Iteration   1: 1695566.282 ops/s
[info]                  ·gc.alloc.rate:                                  1542.443 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1253.305 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.328 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1707620.244 ops/s
[info]                  ·gc.alloc.rate:                                  1553.954 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.261 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1568.669 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1707589.296 ops/s
[info]                  ·gc.alloc.rate:                                  1553.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1254.958 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1702622.727 ops/s
[info]                  ·gc.alloc.rate:            1548.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1573.269 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1708326.831 ops/s
[info]                  ·gc.alloc.rate:                                  1554.133 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1567.980 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1704345.076 ±(99.9%) 20837.977 ops/s [Average]
[info]   (min, avg, max) = (1695566.282, 1704345.076, 1708326.831), stdev = 5411.556
[info]   CI (99.9%): [1683507.099, 1725183.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1550.569 ±(99.9%) 19.382 MB/sec [Average]
[info]   (min, avg, max) = (1542.443, 1550.569, 1554.133), stdev = 5.034
[info]   CI (99.9%): [1531.187, 1569.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.120), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.111), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.399 ±(99.9%) 730.339 MB/sec [Average]
[info]   (min, avg, max) = (1349.965, 1563.399, 1702.261), stdev = 189.667
[info]   CI (99.9%): [833.060, 2293.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1443.636 ±(99.9%) 666.185 B/op [Average]
[info]   (min, avg, max) = (1253.305, 1443.636, 1573.269), stdev = 173.006
[info]   CI (99.9%): [777.451, 2109.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.866 ±(99.9%) 7.453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 4.328), stdev = 1.936
[info]   CI (99.9%): [≈ 0, 8.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 00:55:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1657001.006 ops/s
[info] # Warmup Iteration   2: 1830981.971 ops/s
[info] # Warmup Iteration   3: 1827762.755 ops/s
[info] Iteration   1: 1828533.730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1825829.012 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1827583.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1826098.432 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1828041.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1827217.186 ±(99.9%) 4606.740 ops/s [Average]
[info]   (min, avg, max) = (1825829.012, 1827217.186, 1828533.730), stdev = 1196.356
[info]   CI (99.9%): [1822610.446, 1831823.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 00:55:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23199.688 ops/s
[info] # Warmup Iteration   2: 33846.057 ops/s
[info] # Warmup Iteration   3: 34066.827 ops/s
[info] Iteration   1: 34033.733 ops/s
[info]                  ·gc.alloc.rate:            1029.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       47624.610 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46668.409 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 33546.732 ops/s
[info]                  ·gc.alloc.rate:            1014.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47345.771 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 34184.751 ops/s
[info]                  ·gc.alloc.rate:                                  1034.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.810 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46646.313 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                184.009 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 34742.971 ops/s
[info]                  ·gc.alloc.rate:                                  1051.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.796 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46260.706 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 34772.664 ops/s
[info]                  ·gc.alloc.rate:                                  1052.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46218.143 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   34256.170 ±(99.9%) 1983.757 ops/s [Average]
[info]   (min, avg, max) = (33546.732, 34256.170, 34772.664), stdev = 515.175
[info]   CI (99.9%): [32272.413, 36239.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1036.352 ±(99.9%) 60.270 MB/sec [Average]
[info]   (min, avg, max) = (1014.731, 1036.352, 1052.029), stdev = 15.652
[info]   CI (99.9%): [976.082, 1096.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47617.732 ±(99.9%) 14.805 B/op [Average]
[info]   (min, avg, max) = (47616.012, 47617.732, 47624.610), stdev = 3.845
[info]   CI (99.9%): [47602.926, 47632.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.061), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.954 ±(99.9%) 4.945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.954, 2.810), stdev = 1.284
[info]   CI (99.9%): [≈ 0, 5.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.693 ±(99.9%) 23.721 MB/sec [Average]
[info]   (min, avg, max) = (1008.870, 1014.693, 1021.148), stdev = 6.160
[info]   CI (99.9%): [990.972, 1038.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   46627.868 ±(99.9%) 1743.507 B/op [Average]
[info]   (min, avg, max) = (46218.143, 46627.868, 47345.771), stdev = 452.783
[info]   CI (99.9%): [44884.361, 48371.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.802 ±(99.9%) 316.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.802, 184.009), stdev = 82.291
[info]   CI (99.9%): [≈ 0, 353.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 12.000), stdev = 4.615
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 00:55:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63270.084 ops/s
[info] # Warmup Iteration   2: 74610.318 ops/s
[info] # Warmup Iteration   3: 76037.679 ops/s
[info] Iteration   1: 75774.812 ops/s
[info]                  ·gc.alloc.rate:            1299.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.207 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28002.241 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 75977.027 ops/s
[info]                  ·gc.alloc.rate:                                  1303.142 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.544 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28068.006 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                68.997 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 76613.070 ops/s
[info]                  ·gc.alloc.rate:                                  1314.134 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.179 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27971.150 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 76625.759 ops/s
[info]                  ·gc.alloc.rate:                                  1314.410 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27966.040 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 76439.007 ops/s
[info]                  ·gc.alloc.rate:                                  1311.184 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28034.444 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   76285.935 ±(99.9%) 1494.575 ops/s [Average]
[info]   (min, avg, max) = (75774.812, 76285.935, 76625.759), stdev = 388.136
[info]   CI (99.9%): [74791.360, 77780.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1308.565 ±(99.9%) 25.513 MB/sec [Average]
[info]   (min, avg, max) = (1299.953, 1308.565, 1314.410), stdev = 6.626
[info]   CI (99.9%): [1283.052, 1334.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.005, 27000.005, 27000.006), stdev = 0.001
[info]   CI (99.9%): [27000.005, 27000.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.075), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.368 ±(99.9%) 2.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.544), stdev = 0.662
[info]   CI (99.9%): [≈ 0, 2.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1357.431 ±(99.9%) 22.806 MB/sec [Average]
[info]   (min, avg, max) = (1348.207, 1357.431, 1361.438), stdev = 5.923
[info]   CI (99.9%): [1334.625, 1380.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   28008.376 ±(99.9%) 166.193 B/op [Average]
[info]   (min, avg, max) = (27966.040, 28008.376, 28068.006), stdev = 43.160
[info]   CI (99.9%): [27842.183, 28174.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   13.799 ±(99.9%) 118.817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.799, 68.997), stdev = 30.856
[info]   CI (99.9%): [≈ 0, 132.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 00:55:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7652.534 ops/s
[info] # Warmup Iteration   2: 314625.602 ops/s
[info] # Warmup Iteration   3: 335597.723 ops/s
[info] Iteration   1: 336928.199 ops/s
[info]                  ·gc.alloc.rate:            674.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3117.863 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 336432.197 ops/s
[info]                  ·gc.alloc.rate:            673.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3122.441 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 336835.341 ops/s
[info]                  ·gc.alloc.rate:                   674.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3115.713 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.113 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 336955.635 ops/s
[info]                  ·gc.alloc.rate:            674.765 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3117.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 336563.089 ops/s
[info]                  ·gc.alloc.rate:            673.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3121.263 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   336742.892 ±(99.9%) 896.889 ops/s [Average]
[info]   (min, avg, max) = (336432.197, 336742.892, 336955.635), stdev = 232.919
[info]   CI (99.9%): [335846.003, 337639.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   674.352 ±(99.9%) 1.750 MB/sec [Average]
[info]   (min, avg, max) = (673.758, 674.352, 674.765), stdev = 0.454
[info]   CI (99.9%): [672.602, 676.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.287 ±(99.9%) 1.023 MB/sec [Average]
[info]   (min, avg, max) = (666.814, 667.287, 667.439), stdev = 0.266
[info]   CI (99.9%): [666.265, 668.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3118.982 ±(99.9%) 10.706 B/op [Average]
[info]   (min, avg, max) = (3115.713, 3118.982, 3122.441), stdev = 2.780
[info]   CI (99.9%): [3108.276, 3129.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.623 ±(99.9%) 5.360 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.623, 3.113), stdev = 1.392
[info]   CI (99.9%): [≈ 0, 5.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 00:54:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143858.982 ops/s
[info] # Warmup Iteration   2: 222251.360 ops/s
[info] # Warmup Iteration   3: 226992.823 ops/s
[info] Iteration   1: 226055.227 ops/s
[info]                  ·gc.alloc.rate:            500.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4684.269 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 220340.268 ops/s
[info]                  ·gc.alloc.rate:            488.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2398.192 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 222659.156 ops/s
[info]                  ·gc.alloc.rate:                   493.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4751.144 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.709 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 227378.669 ops/s
[info]                  ·gc.alloc.rate:            503.846 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2328.509 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 225936.623 ops/s
[info]                  ·gc.alloc.rate:            500.603 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4686.570 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   224473.989 ±(99.9%) 11136.626 ops/s [Average]
[info]   (min, avg, max) = (220340.268, 224473.989, 227378.669), stdev = 2892.147
[info]   CI (99.9%): [213337.362, 235610.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   497.415 ±(99.9%) 24.582 MB/sec [Average]
[info]   (min, avg, max) = (488.314, 497.415, 503.846), stdev = 6.384
[info]   CI (99.9%): [472.834, 521.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.002, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.902 ±(99.9%) 709.544 MB/sec [Average]
[info]   (min, avg, max) = (335.742, 537.902, 672.738), stdev = 184.266
[info]   CI (99.9%): [≈ 0, 1247.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3769.737 ±(99.9%) 4945.637 B/op [Average]
[info]   (min, avg, max) = (2328.509, 3769.737, 4751.144), stdev = 1284.366
[info]   CI (99.9%): [≈ 0, 8715.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.942 ±(99.9%) 8.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.942, 4.709), stdev = 2.106
[info]   CI (99.9%): [≈ 0, 9.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 00:54:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 423619.872 ops/s
[info] # Warmup Iteration   2: 445447.846 ops/s
[info] # Warmup Iteration   3: 455180.607 ops/s
[info] Iteration   1: 455314.889 ops/s
[info]                  ·gc.alloc.rate:            573.919 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1165.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 453185.284 ops/s
[info]                  ·gc.alloc.rate:            571.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2341.124 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 452283.115 ops/s
[info]                  ·gc.alloc.rate:            570.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2345.834 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 454811.890 ops/s
[info]                  ·gc.alloc.rate:            573.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1166.401 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 454295.589 ops/s
[info]                  ·gc.alloc.rate:            572.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2335.456 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   453978.153 ±(99.9%) 4749.165 ops/s [Average]
[info]   (min, avg, max) = (452283.115, 453978.153, 455314.889), stdev = 1233.343
[info]   CI (99.9%): [449228.989, 458727.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   572.263 ±(99.9%) 6.098 MB/sec [Average]
[info]   (min, avg, max) = (570.037, 572.263, 573.919), stdev = 1.584
[info]   CI (99.9%): [566.165, 578.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.289 ±(99.9%) 710.960 MB/sec [Average]
[info]   (min, avg, max) = (337.032, 539.289, 674.287), stdev = 184.634
[info]   CI (99.9%): [≈ 0, 1250.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1870.782 ±(99.9%) 2478.332 B/op [Average]
[info]   (min, avg, max) = (1165.097, 1870.782, 2345.834), stdev = 643.615
[info]   CI (99.9%): [≈ 0, 4349.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 00:54:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33753.675 ops/s
[info] # Warmup Iteration   2: 62530.223 ops/s
[info] # Warmup Iteration   3: 63643.563 ops/s
[info] Iteration   1: 64941.764 ops/s
[info]                  ·gc.alloc.rate:                                  2897.173 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.271 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65995.084 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 64188.573 ops/s
[info]                  ·gc.alloc.rate:                                  2863.678 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75116.451 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 64715.939 ops/s
[info]                  ·gc.alloc.rate:                                  2887.805 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.283 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66223.465 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 64310.548 ops/s
[info]                  ·gc.alloc.rate:                                  2869.999 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74973.975 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 64643.726 ops/s
[info]                  ·gc.alloc.rate:                                  2885.323 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.316 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66298.235 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   64560.110 ±(99.9%) 1182.553 ops/s [Average]
[info]   (min, avg, max) = (64188.573, 64560.110, 64941.764), stdev = 307.105
[info]   CI (99.9%): [63377.557, 65742.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2880.796 ±(99.9%) 52.636 MB/sec [Average]
[info]   (min, avg, max) = (2863.678, 2880.796, 2897.173), stdev = 13.669
[info]   CI (99.9%): [2828.160, 2933.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.007), stdev = 0.001
[info]   CI (99.9%): [70232.006, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.010, 0.013), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.252 ±(99.9%) 0.264 B/op [Average]
[info]   (min, avg, max) = (0.136, 0.252, 0.316), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2859.141 ±(99.9%) 717.681 MB/sec [Average]
[info]   (min, avg, max) = (2722.394, 2859.141, 3063.778), stdev = 186.379
[info]   CI (99.9%): [2141.460, 3576.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69721.442 ±(99.9%) 18719.749 B/op [Average]
[info]   (min, avg, max) = (65995.084, 69721.442, 75116.451), stdev = 4861.459
[info]   CI (99.9%): [51001.693, 88441.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 00:54:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150189.529 ops/s
[info] # Warmup Iteration   2: 218223.074 ops/s
[info] # Warmup Iteration   3: 218975.841 ops/s
[info] Iteration   1: 218081.826 ops/s
[info]                  ·gc.alloc.rate:                   1538.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              11104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9730.136 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.037 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 222402.106 ops/s
[info]                  ·gc.alloc.rate:                                  1569.061 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12044.362 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 222259.444 ops/s
[info]                  ·gc.alloc.rate:                                  1568.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12052.435 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 222377.883 ops/s
[info]                  ·gc.alloc.rate:                                  1568.876 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9636.962 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 222194.714 ops/s
[info]                  ·gc.alloc.rate:                                  1567.526 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12055.906 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   221463.195 ±(99.9%) 7286.013 ops/s [Average]
[info]   (min, avg, max) = (218081.826, 221463.195, 222402.106), stdev = 1892.155
[info]   CI (99.9%): [214177.181, 228749.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1562.372 ±(99.9%) 51.662 MB/sec [Average]
[info]   (min, avg, max) = (1538.399, 1562.372, 1569.061), stdev = 13.416
[info]   CI (99.9%): [1510.711, 1614.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11104.002, 11104.002, 11104.002), stdev = 0.001
[info]   CI (99.9%): [11104.002, 11104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.079), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.127 ±(99.9%) 0.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.559), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.086 ±(99.9%) 732.286 MB/sec [Average]
[info]   (min, avg, max) = (1348.057, 1563.086, 1701.940), stdev = 190.172
[info]   CI (99.9%): [830.799, 2295.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11103.960 ±(99.9%) 4994.582 B/op [Average]
[info]   (min, avg, max) = (9636.962, 11103.960, 12055.906), stdev = 1297.077
[info]   CI (99.9%): [6109.378, 16098.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.807 ±(99.9%) 41.393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.807, 24.037), stdev = 10.750
[info]   CI (99.9%): [≈ 0, 46.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 00:54:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40587.333 ops/s
[info] # Warmup Iteration   2: 723637.975 ops/s
[info] # Warmup Iteration   3: 709429.287 ops/s
[info] Iteration   1: 680681.641 ops/s
[info]                  ·gc.alloc.rate:            532.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1543.324 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 684464.417 ops/s
[info]                  ·gc.alloc.rate:            535.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 767.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 680531.958 ops/s
[info]                  ·gc.alloc.rate:            532.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1543.662 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 685834.745 ops/s
[info]                  ·gc.alloc.rate:            536.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 765.858 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 659708.939 ops/s
[info]                  ·gc.alloc.rate:            516.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1592.378 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   678244.340 ±(99.9%) 40889.339 ops/s [Average]
[info]   (min, avg, max) = (659708.939, 678244.340, 685834.745), stdev = 10618.831
[info]   CI (99.9%): [637355.002, 719133.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   530.976 ±(99.9%) 31.847 MB/sec [Average]
[info]   (min, avg, max) = (516.560, 530.976, 536.926), stdev = 8.271
[info]   CI (99.9%): [499.129, 562.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   534.028 ±(99.9%) 703.891 MB/sec [Average]
[info]   (min, avg, max) = (333.773, 534.028, 667.661), stdev = 182.798
[info]   CI (99.9%): [≈ 0, 1237.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1242.523 ±(99.9%) 1674.610 B/op [Average]
[info]   (min, avg, max) = (765.858, 1242.523, 1592.378), stdev = 434.891
[info]   CI (99.9%): [≈ 0, 2917.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 3.286
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 00:53:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299897.143 ops/s
[info] # Warmup Iteration   2: 451427.627 ops/s
[info] # Warmup Iteration   3: 451489.350 ops/s
[info] Iteration   1: 452882.800 ops/s
[info]                  ·gc.alloc.rate:            464.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2338.096 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 455936.387 ops/s
[info]                  ·gc.alloc.rate:            468.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1161.277 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 454895.057 ops/s
[info]                  ·gc.alloc.rate:            467.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1163.937 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 453268.499 ops/s
[info]                  ·gc.alloc.rate:            465.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2336.224 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 454014.779 ops/s
[info]                  ·gc.alloc.rate:            466.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1166.165 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   454199.504 ±(99.9%) 4768.879 ops/s [Average]
[info]   (min, avg, max) = (452882.800, 454199.504, 455936.387), stdev = 1238.463
[info]   CI (99.9%): [449430.625, 458968.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   466.346 ±(99.9%) 5.038 MB/sec [Average]
[info]   (min, avg, max) = (464.931, 466.346, 468.101), stdev = 1.308
[info]   CI (99.9%): [461.308, 471.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.945 ±(99.9%) 709.313 MB/sec [Average]
[info]   (min, avg, max) = (336.357, 470.945, 672.784), stdev = 184.206
[info]   CI (99.9%): [≈ 0, 1180.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1633.140 ±(99.9%) 2474.741 B/op [Average]
[info]   (min, avg, max) = (1161.277, 1633.140, 2338.096), stdev = 642.682
[info]   CI (99.9%): [≈ 0, 4107.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 00:53:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 563620.971 ops/s
[info] # Warmup Iteration   2: 634483.671 ops/s
[info] # Warmup Iteration   3: 647710.724 ops/s
[info] Iteration   1: 642772.237 ops/s
[info]                  ·gc.alloc.rate:            503.109 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 823.669 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 645939.212 ops/s
[info]                  ·gc.alloc.rate:            505.624 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1639.318 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 647333.559 ops/s
[info]                  ·gc.alloc.rate:            506.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 817.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 648063.426 ops/s
[info]                  ·gc.alloc.rate:                   507.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1633.941 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 646591.841 ops/s
[info]                  ·gc.alloc.rate:            506.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 820.450 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   646140.055 ±(99.9%) 7870.414 ops/s [Average]
[info]   (min, avg, max) = (642772.237, 646140.055, 648063.426), stdev = 2043.921
[info]   CI (99.9%): [638269.641, 654010.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   505.779 ±(99.9%) 6.217 MB/sec [Average]
[info]   (min, avg, max) = (503.109, 505.779, 507.274), stdev = 1.614
[info]   CI (99.9%): [499.562, 511.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.080 ±(99.9%) 709.009 MB/sec [Average]
[info]   (min, avg, max) = (336.359, 471.080, 672.791), stdev = 184.127
[info]   CI (99.9%): [≈ 0, 1180.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1147.053 ±(99.9%) 1720.963 B/op [Average]
[info]   (min, avg, max) = (817.888, 1147.053, 1639.318), stdev = 446.929
[info]   CI (99.9%): [≈ 0, 2868.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.324 ±(99.9%) 2.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.324, 1.618), stdev = 0.723
[info]   CI (99.9%): [≈ 0, 3.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 00:53:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 623866.674 ops/s
[info] # Warmup Iteration   2: 688213.597 ops/s
[info] # Warmup Iteration   3: 691248.954 ops/s
[info] Iteration   1: 689733.158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 689597.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 689007.364 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 689263.730 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 689435.159 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   689407.468 ±(99.9%) 1095.676 ops/s [Average]
[info]   (min, avg, max) = (689007.364, 689407.468, 689733.158), stdev = 284.544
[info]   CI (99.9%): [688311.792, 690503.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 00:53:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17934.046 ops/s
[info] # Warmup Iteration   2: 27043.455 ops/s
[info] # Warmup Iteration   3: 26931.068 ops/s
[info] Iteration   1: 26471.247 ops/s
[info]                  ·gc.alloc.rate:            1357.492 MB/sec
[info]                  ·gc.alloc.rate.norm:       80704.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80001.644 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 27143.363 ops/s
[info]                  ·gc.alloc.rate:                                  1391.704 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80695.207 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.742 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78716.586 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                231.747 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 27373.698 ops/s
[info]                  ·gc.alloc.rate:                                  1403.224 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.327 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78285.095 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 27321.062 ops/s
[info]                  ·gc.alloc.rate:                                  1400.438 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.453 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78431.198 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 27373.311 ops/s
[info]                  ·gc.alloc.rate:                                  1403.400 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78282.236 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27136.536 ±(99.9%) 1477.631 ops/s [Average]
[info]   (min, avg, max) = (26471.247, 27136.536, 27373.698), stdev = 383.736
[info]   CI (99.9%): [25658.905, 28614.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1391.252 ±(99.9%) 74.944 MB/sec [Average]
[info]   (min, avg, max) = (1357.492, 1391.252, 1403.400), stdev = 19.463
[info]   CI (99.9%): [1316.307, 1466.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80692.653 ±(99.9%) 27.239 B/op [Average]
[info]   (min, avg, max) = (80688.015, 80692.653, 80704.015), stdev = 7.074
[info]   CI (99.9%): [80665.414, 80719.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.134), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.712 ±(99.9%) 13.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.712, 7.742), stdev = 3.376
[info]   CI (99.9%): [≈ 0, 14.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.504 ±(99.9%) 26.251 MB/sec [Average]
[info]   (min, avg, max) = (1345.678, 1357.504, 1361.556), stdev = 6.817
[info]   CI (99.9%): [1331.252, 1383.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   78743.352 ±(99.9%) 2792.767 B/op [Average]
[info]   (min, avg, max) = (78282.236, 78743.352, 80001.644), stdev = 725.273
[info]   CI (99.9%): [75950.585, 81536.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   46.349 ±(99.9%) 399.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.349, 231.747), stdev = 103.640
[info]   CI (99.9%): [≈ 0, 445.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 17.000), stdev = 5.933
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 00:52:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4202.600 ops/s
[info] # Warmup Iteration   2: 6377.279 ops/s
[info] # Warmup Iteration   3: 6632.249 ops/s
[info] Iteration   1: 6622.336 ops/s
[info]                  ·gc.alloc.rate:                   1019.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        240420.671 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 158.276 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 6611.291 ops/s
[info]                  ·gc.alloc.rate:                   1017.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        240856.940 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 158.563 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 6595.865 ops/s
[info]                  ·gc.alloc.rate:                                  1015.248 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242280.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.253 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       322406.532 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                794.496 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 6695.322 ops/s
[info]                  ·gc.alloc.rate:                                  1030.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242280.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.837 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       240027.924 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 6689.024 ops/s
[info]                  ·gc.alloc.rate:                                  1029.951 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242280.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.292 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       240243.164 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6642.768 ±(99.9%) 177.608 ops/s [Average]
[info]   (min, avg, max) = (6595.865, 6642.768, 6695.322), stdev = 46.124
[info]   CI (99.9%): [6465.160, 6820.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1022.516 ±(99.9%) 27.823 MB/sec [Average]
[info]   (min, avg, max) = (1015.248, 1022.516, 1030.588), stdev = 7.226
[info]   CI (99.9%): [994.693, 1050.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242280.062 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (242280.061, 242280.062, 242280.066), stdev = 0.002
[info]   CI (99.9%): [242280.054, 242280.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.061 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.065 ±(99.9%) 14.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.065, 8.253), stdev = 3.766
[info]   CI (99.9%): [≈ 0, 17.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1083.261 ±(99.9%) 576.648 MB/sec [Average]
[info]   (min, avg, max) = (1011.480, 1083.261, 1351.009), stdev = 149.754
[info]   CI (99.9%): [506.613, 1659.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   256791.046 ±(99.9%) 141247.157 B/op [Average]
[info]   (min, avg, max) = (240027.924, 256791.046, 322406.532), stdev = 36681.438
[info]   CI (99.9%): [115543.890, 398038.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.317 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.329), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   222.267 ±(99.9%) 1268.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 222.267, 794.496), stdev = 329.547
[info]   CI (99.9%): [≈ 0, 1491.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 11.000), stdev = 4.183
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 00:52:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2699.321 ops/s
[info] # Warmup Iteration   2: 6318.866 ops/s
[info] # Warmup Iteration   3: 6420.633 ops/s
[info] Iteration   1: 6519.486 ops/s
[info]                  ·gc.alloc.rate:            939.487 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 243611.814 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 6496.392 ops/s
[info]                  ·gc.alloc.rate:            936.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244474.090 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 6494.201 ops/s
[info]                  ·gc.alloc.rate:                   936.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244387.941 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1129.931 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 6576.346 ops/s
[info]                  ·gc.alloc.rate:                                  947.691 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 23.814 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       162913.450 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 6574.328 ops/s
[info]                  ·gc.alloc.rate:            947.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 244407.330 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6532.151 ±(99.9%) 156.550 ops/s [Average]
[info]   (min, avg, max) = (6494.201, 6532.151, 6576.346), stdev = 40.655
[info]   CI (99.9%): [6375.601, 6688.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   941.441 ±(99.9%) 22.306 MB/sec [Average]
[info]   (min, avg, max) = (936.009, 941.441, 947.691), stdev = 5.793
[info]   CI (99.9%): [919.135, 963.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.064 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (226864.062, 226864.064, 226864.068), stdev = 0.003
[info]   CI (99.9%): [226864.054, 226864.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.763 ±(99.9%) 41.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.763, 23.814), stdev = 10.650
[info]   CI (99.9%): [≈ 0, 45.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.537 ±(99.9%) 570.766 MB/sec [Average]
[info]   (min, avg, max) = (680.547, 945.537, 1020.814), stdev = 148.226
[info]   CI (99.9%): [374.771, 1516.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   227958.925 ±(99.9%) 140021.878 B/op [Average]
[info]   (min, avg, max) = (162913.450, 227958.925, 244474.090), stdev = 36363.237
[info]   CI (99.9%): [87937.047, 367980.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   225.986 ±(99.9%) 1945.809 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 225.986, 1129.931), stdev = 505.321
[info]   CI (99.9%): [≈ 0, 2171.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 13.000), stdev = 5.595
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 00:52:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132230.630 ops/s
[info] # Warmup Iteration   2: 146308.800 ops/s
[info] # Warmup Iteration   3: 147734.756 ops/s
[info] Iteration   1: 147527.633 ops/s
[info]                  ·gc.alloc.rate:                   1429.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14411.853 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.426 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 148395.216 ops/s
[info]                  ·gc.alloc.rate:                                  1437.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14440.704 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 148747.561 ops/s
[info]                  ·gc.alloc.rate:                                  1440.933 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18009.140 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 148996.116 ops/s
[info]                  ·gc.alloc.rate:                                  1443.344 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14382.948 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 148126.516 ops/s
[info]                  ·gc.alloc.rate:                                  1434.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14467.315 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   148358.608 ±(99.9%) 2198.097 ops/s [Average]
[info]   (min, avg, max) = (147527.633, 148358.608, 148996.116), stdev = 570.839
[info]   CI (99.9%): [146160.512, 150556.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1437.148 ±(99.9%) 21.451 MB/sec [Average]
[info]   (min, avg, max) = (1429.030, 1437.148, 1443.344), stdev = 5.571
[info]   CI (99.9%): [1415.696, 1458.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.003, 15248.003, 15248.003), stdev = 0.001
[info]   CI (99.9%): [15248.002, 15248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.169 ±(99.9%) 1.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.169, 0.749), stdev = 0.325
[info]   CI (99.9%): [≈ 0, 1.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1427.368 ±(99.9%) 591.137 MB/sec [Average]
[info]   (min, avg, max) = (1350.667, 1427.368, 1701.860), stdev = 153.516
[info]   CI (99.9%): [836.232, 2018.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15142.392 ±(99.9%) 6172.085 B/op [Average]
[info]   (min, avg, max) = (14382.948, 15142.392, 18009.140), stdev = 1602.871
[info]   CI (99.9%): [8970.307, 21314.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.685 ±(99.9%) 48.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.685, 28.426), stdev = 12.712
[info]   CI (99.9%): [≈ 0, 54.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 11.000), stdev = 3.391
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 00:52:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2752.576 ops/s
[info] # Warmup Iteration   2: 5917.728 ops/s
[info] # Warmup Iteration   3: 6098.846 ops/s
[info] Iteration   1: 6138.771 ops/s
[info]                  ·gc.alloc.rate:            1116.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 258686.312 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 6139.772 ops/s
[info]                  ·gc.alloc.rate:            1116.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 258686.312 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 6155.500 ops/s
[info]                  ·gc.alloc.rate:                                  1119.818 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.071 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.945 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.246 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       260057.748 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1021.838 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 5946.822 ops/s
[info]                  ·gc.alloc.rate:            1081.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       286280.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 360337.818 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 6197.069 ops/s
[info]                  ·gc.alloc.rate:                                  1127.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286280.066 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.910 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       259310.697 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6115.587 ±(99.9%) 374.506 ops/s [Average]
[info]   (min, avg, max) = (5946.822, 6115.587, 6197.069), stdev = 97.258
[info]   CI (99.9%): [5741.080, 6490.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1112.296 ±(99.9%) 68.288 MB/sec [Average]
[info]   (min, avg, max) = (1081.525, 1112.296, 1127.089), stdev = 17.734
[info]   CI (99.9%): [1044.008, 1180.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286280.069 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (286280.066, 286280.069, 286280.072), stdev = 0.003
[info]   CI (99.9%): [286280.058, 286280.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.041 ±(99.9%) 34.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.041, 19.945), stdev = 8.891
[info]   CI (99.9%): [≈ 0, 38.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.454 ±(99.9%) 598.436 MB/sec [Average]
[info]   (min, avg, max) = (1008.848, 1083.454, 1361.305), stdev = 155.412
[info]   CI (99.9%): [485.018, 1681.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   279415.777 ±(99.9%) 174204.359 B/op [Average]
[info]   (min, avg, max) = (258686.312, 279415.777, 360337.818), stdev = 45240.319
[info]   CI (99.9%): [105211.418, 453620.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   204.368 ±(99.9%) 1759.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 204.368, 1021.838), stdev = 456.980
[info]   CI (99.9%): [≈ 0, 1964.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 5.128
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 00:52:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12042.897 ops/s
[info] # Warmup Iteration   2: 16559.162 ops/s
[info] # Warmup Iteration   3: 17815.964 ops/s
[info] Iteration   1: 17927.051 ops/s
[info]                  ·gc.alloc.rate:            812.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       71378.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59183.431 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 17834.894 ops/s
[info]                  ·gc.alloc.rate:            809.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89233.006 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 17943.116 ops/s
[info]                  ·gc.alloc.rate:            814.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59127.370 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 17902.030 ops/s
[info]                  ·gc.alloc.rate:            812.453 MB/sec
[info]                  ·gc.alloc.rate.norm:       71418.378 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59266.066 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 17809.239 ops/s
[info]                  ·gc.alloc.rate:                                  808.220 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71408.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.136 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89946.900 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                294.329 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   17883.266 ±(99.9%) 225.115 ops/s [Average]
[info]   (min, avg, max) = (17809.239, 17883.266, 17943.116), stdev = 58.462
[info]   CI (99.9%): [17658.151, 18108.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   811.432 ±(99.9%) 9.882 MB/sec [Average]
[info]   (min, avg, max) = (808.220, 811.432, 814.297), stdev = 2.566
[info]   CI (99.9%): [801.550, 821.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71413.777 ±(99.9%) 85.439 B/op [Average]
[info]   (min, avg, max) = (71378.435, 71413.777, 71432.026), stdev = 22.188
[info]   CI (99.9%): [71328.338, 71499.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.235 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.136), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.412 ±(99.9%) 20.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.412, 12.059), stdev = 5.393
[info]   CI (99.9%): [≈ 0, 23.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.253 ±(99.9%) 718.038 MB/sec [Average]
[info]   (min, avg, max) = (674.019, 810.253, 1018.049), stdev = 186.472
[info]   CI (99.9%): [92.216, 1528.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   71351.355 ±(99.9%) 64118.891 B/op [Average]
[info]   (min, avg, max) = (59127.370, 71351.355, 89946.900), stdev = 16651.472
[info]   CI (99.9%): [7232.463, 135470.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   58.866 ±(99.9%) 506.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58.866, 294.329), stdev = 131.628
[info]   CI (99.9%): [≈ 0, 565.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.400, 11.000), stdev = 2.074
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 00:51:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12350.567 ops/s
[info] # Warmup Iteration   2: 20478.155 ops/s
[info] # Warmup Iteration   3: 20414.459 ops/s
[info] Iteration   1: 20461.577 ops/s
[info]                  ·gc.alloc.rate:            867.077 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77621.061 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 20607.778 ops/s
[info]                  ·gc.alloc.rate:                   873.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        51332.453 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.875 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 20193.844 ops/s
[info]                  ·gc.alloc.rate:                   855.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        78602.964 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.917 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 20134.002 ops/s
[info]                  ·gc.alloc.rate:                                  853.341 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.721 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.895 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52905.260 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                312.433 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 20534.068 ops/s
[info]                  ·gc.alloc.rate:                                  870.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78267.943 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   20386.254 ±(99.9%) 810.576 ops/s [Average]
[info]   (min, avg, max) = (20134.002, 20386.254, 20607.778), stdev = 210.504
[info]   CI (99.9%): [19575.677, 21196.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   863.939 ±(99.9%) 34.349 MB/sec [Average]
[info]   (min, avg, max) = (853.341, 863.939, 873.362), stdev = 8.920
[info]   CI (99.9%): [829.590, 898.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.022 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.022, 66696.025), stdev = 0.002
[info]   CI (99.9%): [66696.013, 66696.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.128 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.772 ±(99.9%) 9.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.772, 5.721), stdev = 2.593
[info]   CI (99.9%): [≈ 0, 11.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.570 ±(99.9%) 713.980 MB/sec [Average]
[info]   (min, avg, max) = (672.181, 877.570, 1021.203), stdev = 185.418
[info]   CI (99.9%): [163.589, 1591.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   67745.936 ±(99.9%) 54989.901 B/op [Average]
[info]   (min, avg, max) = (51332.453, 67745.936, 78602.964), stdev = 14280.703
[info]   CI (99.9%): [12756.035, 122735.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   83.045 ±(99.9%) 503.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 83.045, 312.433), stdev = 130.782
[info]   CI (99.9%): [≈ 0, 586.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 12.000), stdev = 4.062
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 00:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 506642.866 ops/s
[info] # Warmup Iteration   2: 604384.735 ops/s
[info] # Warmup Iteration   3: 614731.164 ops/s
[info] Iteration   1: 615768.846 ops/s
[info]                  ·gc.alloc.rate:                   1395.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3442.694 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 604370.694 ops/s
[info]                  ·gc.alloc.rate:                                  1370.419 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.216 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3536.937 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.673 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 603898.051 ops/s
[info]                  ·gc.alloc.rate:                                  1369.406 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4435.637 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 604515.630 ops/s
[info]                  ·gc.alloc.rate:            1370.750 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3544.918 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 596765.489 ops/s
[info]                  ·gc.alloc.rate:            1352.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3590.954 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   605063.742 ±(99.9%) 26229.629 ops/s [Average]
[info]   (min, avg, max) = (596765.489, 605063.742, 615768.846), stdev = 6811.751
[info]   CI (99.9%): [578834.113, 631293.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1371.840 ±(99.9%) 59.377 MB/sec [Average]
[info]   (min, avg, max) = (1352.752, 1371.840, 1395.874), stdev = 15.420
[info]   CI (99.9%): [1312.463, 1431.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.142 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.045 ±(99.9%) 0.370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.216), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1426.217 ±(99.9%) 594.984 MB/sec [Average]
[info]   (min, avg, max) = (1346.852, 1426.217, 1702.407), stdev = 154.516
[info]   CI (99.9%): [831.232, 2021.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3710.228 ±(99.9%) 1575.211 B/op [Average]
[info]   (min, avg, max) = (3442.694, 3710.228, 4435.637), stdev = 409.077
[info]   CI (99.9%): [2135.017, 5285.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.075 ±(99.9%) 14.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.075, 8.673), stdev = 3.761
[info]   CI (99.9%): [≈ 0, 16.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 3.701
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 00:51:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 437716.685 ops/s
[info] # Warmup Iteration   2: 480204.113 ops/s
[info] # Warmup Iteration   3: 487228.770 ops/s
[info] Iteration   1: 486951.437 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 483336.683 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 477362.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 487024.231 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 487103.109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   484355.654 ±(99.9%) 16262.545 ops/s [Average]
[info]   (min, avg, max) = (477362.807, 484355.654, 487103.109), stdev = 4223.331
[info]   CI (99.9%): [468093.109, 500618.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 00:51:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12165.425 ops/s
[info] # Warmup Iteration   2: 18229.188 ops/s
[info] # Warmup Iteration   3: 18765.857 ops/s
[info] Iteration   1: 18659.495 ops/s
[info]                  ·gc.alloc.rate:            860.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       72565.501 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85124.458 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 18760.802 ops/s
[info]                  ·gc.alloc.rate:            865.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       72576.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56441.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 18451.809 ops/s
[info]                  ·gc.alloc.rate:            850.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       72576.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86079.254 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 18695.126 ops/s
[info]                  ·gc.alloc.rate:                                  861.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72563.891 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.988 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85292.481 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                336.459 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 18861.352 ops/s
[info]                  ·gc.alloc.rate:                                  869.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72560.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56805.973 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18685.717 ±(99.9%) 583.899 ops/s [Average]
[info]   (min, avg, max) = (18451.809, 18685.717, 18861.352), stdev = 151.637
[info]   CI (99.9%): [18101.818, 19269.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   861.564 ±(99.9%) 27.198 MB/sec [Average]
[info]   (min, avg, max) = (850.775, 861.564, 869.761), stdev = 7.063
[info]   CI (99.9%): [834.366, 888.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72568.293 ±(99.9%) 28.242 B/op [Average]
[info]   (min, avg, max) = (72560.022, 72568.293, 72576.029), stdev = 7.334
[info]   CI (99.9%): [72540.051, 72596.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.226 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.117), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.554 ±(99.9%) 18.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.554, 9.780), stdev = 4.907
[info]   CI (99.9%): [≈ 0, 22.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   876.989 ±(99.9%) 703.377 MB/sec [Average]
[info]   (min, avg, max) = (672.923, 876.989, 1013.009), stdev = 182.665
[info]   CI (99.9%): [173.612, 1580.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   73948.663 ±(99.9%) 60918.010 B/op [Average]
[info]   (min, avg, max) = (56441.151, 73948.663, 86079.254), stdev = 15820.214
[info]   CI (99.9%): [13030.653, 134866.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   67.292 ±(99.9%) 579.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 67.292, 336.459), stdev = 150.469
[info]   CI (99.9%): [≈ 0, 646.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 00:51:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7269.032 ops/s
[info] # Warmup Iteration   2: 10650.647 ops/s
[info] # Warmup Iteration   3: 10637.224 ops/s
[info] Iteration   1: 10722.541 ops/s
[info]                  ·gc.alloc.rate:            1076.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 148399.997 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 10666.170 ops/s
[info]                  ·gc.alloc.rate:            1071.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 149192.836 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 10659.250 ops/s
[info]                  ·gc.alloc.rate:                                  1070.711 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158112.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.483 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       200037.853 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                491.735 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 10813.640 ops/s
[info]                  ·gc.alloc.rate:                                  1086.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158112.070 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.814 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       148619.361 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 10794.404 ops/s
[info]                  ·gc.alloc.rate:                                  1084.641 MB/sec
[info]                  ·gc.alloc.rate.norm:                             158112.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       148880.894 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   10731.201 ±(99.9%) 274.125 ops/s [Average]
[info]   (min, avg, max) = (10659.250, 10731.201, 10813.640), stdev = 71.189
[info]   CI (99.9%): [10457.076, 11005.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1078.010 ±(99.9%) 28.073 MB/sec [Average]
[info]   (min, avg, max) = (1070.711, 1078.010, 1086.372), stdev = 7.291
[info]   CI (99.9%): [1049.937, 1106.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158112.046 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (158112.038, 158112.046, 158112.070), stdev = 0.014
[info]   CI (99.9%): [158111.993, 158112.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.284 ±(99.9%) 14.123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.284, 8.483), stdev = 3.668
[info]   CI (99.9%): [≈ 0, 16.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1083.766 ±(99.9%) 583.388 MB/sec [Average]
[info]   (min, avg, max) = (1010.824, 1083.766, 1354.626), stdev = 151.504
[info]   CI (99.9%): [500.378, 1667.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   159026.188 ±(99.9%) 88288.061 B/op [Average]
[info]   (min, avg, max) = (148399.997, 159026.188, 200037.853), stdev = 22928.129
[info]   CI (99.9%): [70738.127, 247314.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   98.347 ±(99.9%) 846.798 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 98.347, 491.735), stdev = 219.911
[info]   CI (99.9%): [≈ 0, 945.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.647
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 00:50:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6140.952 ops/s
[info] # Warmup Iteration   2: 11152.987 ops/s
[info] # Warmup Iteration   3: 11252.825 ops/s
[info] Iteration   1: 10707.126 ops/s
[info]                  ·gc.alloc.rate:            979.800 MB/sec
[info]                  ·gc.alloc.rate.norm:       144056.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 148341.828 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 11203.187 ops/s
[info]                  ·gc.alloc.rate:            1025.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       144056.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 141762.684 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 11294.309 ops/s
[info]                  ·gc.alloc.rate:                                  1034.019 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144057.426 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.617 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       141177.666 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                556.914 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 11354.685 ops/s
[info]                  ·gc.alloc.rate:                                  1039.385 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144089.314 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       141539.756 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 11339.046 ops/s
[info]                  ·gc.alloc.rate:            1038.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 141726.945 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11179.671 ±(99.9%) 1042.210 ops/s [Average]
[info]   (min, avg, max) = (10707.126, 11179.671, 11354.685), stdev = 270.659
[info]   CI (99.9%): [10137.460, 12221.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1023.292 ±(99.9%) 96.001 MB/sec [Average]
[info]   (min, avg, max) = (979.800, 1023.292, 1039.385), stdev = 24.931
[info]   CI (99.9%): [927.291, 1119.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144069.370 ±(99.9%) 67.918 B/op [Average]
[info]   (min, avg, max) = (144056.036, 144069.370, 144089.314), stdev = 17.638
[info]   CI (99.9%): [144001.452, 144137.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.488 ±(99.9%) 8.216 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.488, 4.617), stdev = 2.134
[info]   CI (99.9%): [≈ 0, 9.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.643 ±(99.9%) 23.403 MB/sec [Average]
[info]   (min, avg, max) = (1008.915, 1014.643, 1021.008), stdev = 6.078
[info]   CI (99.9%): [991.240, 1038.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   142909.776 ±(99.9%) 11726.975 B/op [Average]
[info]   (min, avg, max) = (141177.666, 142909.776, 148341.828), stdev = 3045.458
[info]   CI (99.9%): [131182.801, 154636.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   111.383 ±(99.9%) 959.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 111.383, 556.914), stdev = 249.059
[info]   CI (99.9%): [≈ 0, 1070.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 5.292
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 00:50:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 234587.284 ops/s
[info] # Warmup Iteration   2: 250306.809 ops/s
[info] # Warmup Iteration   3: 251458.097 ops/s
[info] Iteration   1: 250630.260 ops/s
[info]                  ·gc.alloc.rate:                                  1449.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.171 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10604.395 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.916 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 252098.026 ops/s
[info]                  ·gc.alloc.rate:                                  1458.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.511 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8500.259 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 253949.514 ops/s
[info]                  ·gc.alloc.rate:                                  1468.772 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8438.479 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 252079.727 ops/s
[info]                  ·gc.alloc.rate:                                  1457.977 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8501.068 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 250151.280 ops/s
[info]                  ·gc.alloc.rate:            1446.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10708.308 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   251781.761 ±(99.9%) 5734.869 ops/s [Average]
[info]   (min, avg, max) = (250151.280, 251781.761, 253949.514), stdev = 1489.327
[info]   CI (99.9%): [246046.893, 257516.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1456.256 ±(99.9%) 33.224 MB/sec [Average]
[info]   (min, avg, max) = (1446.766, 1456.256, 1468.772), stdev = 8.628
[info]   CI (99.9%): [1423.032, 1489.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.002), stdev = 0.001
[info]   CI (99.9%): [9104.001, 9104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.082), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.145 ±(99.9%) 0.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.145, 0.511), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.900 ±(99.9%) 703.972 MB/sec [Average]
[info]   (min, avg, max) = (1361.401, 1494.900, 1701.715), stdev = 182.819
[info]   CI (99.9%): [790.928, 2198.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9350.502 ±(99.9%) 4593.466 B/op [Average]
[info]   (min, avg, max) = (8438.479, 9350.502, 10708.308), stdev = 1192.909
[info]   CI (99.9%): [4757.036, 13943.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.183 ±(99.9%) 36.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.183, 20.916), stdev = 9.354
[info]   CI (99.9%): [≈ 0, 40.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 13.000), stdev = 4.382
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 00:50:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3761.168 ops/s
[info] # Warmup Iteration   2: 10229.307 ops/s
[info] # Warmup Iteration   3: 10537.321 ops/s
[info] Iteration   1: 10521.252 ops/s
[info]                  ·gc.alloc.rate:                   1316.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              197000.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        201166.376 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 99.637 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 10569.962 ops/s
[info]                  ·gc.alloc.rate:                                  1322.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.391 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       201443.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                694.290 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 10697.193 ops/s
[info]                  ·gc.alloc.rate:                                  1338.814 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150244.603 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 10508.053 ops/s
[info]                  ·gc.alloc.rate:                                  1315.513 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.409 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       203928.577 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 10703.790 ops/s
[info]                  ·gc.alloc.rate:                                  1339.708 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.038 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       200195.156 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10600.050 ±(99.9%) 364.169 ops/s [Average]
[info]   (min, avg, max) = (10508.053, 10600.050, 10703.790), stdev = 94.574
[info]   CI (99.9%): [10235.881, 10964.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1326.707 ±(99.9%) 45.453 MB/sec [Average]
[info]   (min, avg, max) = (1315.513, 1326.707, 1339.708), stdev = 11.804
[info]   CI (99.9%): [1281.253, 1372.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197000.114 ±(99.9%) 0.635 B/op [Average]
[info]   (min, avg, max) = (197000.038, 197000.114, 197000.409), stdev = 0.165
[info]   CI (99.9%): [196999.478, 197000.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.577 ±(99.9%) 3.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.577, 2.391), stdev = 1.020
[info]   CI (99.9%): [≈ 0, 4.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.292 ±(99.9%) 575.885 MB/sec [Average]
[info]   (min, avg, max) = (1021.063, 1288.292, 1361.778), stdev = 149.556
[info]   CI (99.9%): [712.407, 1864.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   191395.589 ±(99.9%) 88739.074 B/op [Average]
[info]   (min, avg, max) = (150244.603, 191395.589, 203928.577), stdev = 23045.256
[info]   CI (99.9%): [102656.515, 280134.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   158.785 ±(99.9%) 1164.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 158.785, 694.290), stdev = 302.449
[info]   CI (99.9%): [≈ 0, 1323.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 18.000), stdev = 6.943
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 00:50:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20096.860 ops/s
[info] # Warmup Iteration   2: 28939.086 ops/s
[info] # Warmup Iteration   3: 29061.119 ops/s
[info] Iteration   1: 28916.784 ops/s
[info]                  ·gc.alloc.rate:            998.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       54336.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55035.557 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 29073.413 ops/s
[info]                  ·gc.alloc.rate:                   1003.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.695 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54702.355 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.060 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 29215.955 ops/s
[info]                  ·gc.alloc.rate:                                  1008.250 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54312.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.576 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54649.964 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                179.416 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 29395.255 ops/s
[info]                  ·gc.alloc.rate:                                  1014.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54312.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.579 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54675.749 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 29371.185 ops/s
[info]                  ·gc.alloc.rate:            1013.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36480.279 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   29194.518 ±(99.9%) 779.145 ops/s [Average]
[info]   (min, avg, max) = (28916.784, 29194.518, 29395.255), stdev = 202.341
[info]   CI (99.9%): [28415.374, 29973.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1007.481 ±(99.9%) 26.299 MB/sec [Average]
[info]   (min, avg, max) = (998.251, 1007.481, 1014.262), stdev = 6.830
[info]   CI (99.9%): [981.182, 1033.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54316.951 ±(99.9%) 41.060 B/op [Average]
[info]   (min, avg, max) = (54312.014, 54316.951, 54336.019), stdev = 10.663
[info]   CI (99.9%): [54275.891, 54358.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.048), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.831 ±(99.9%) 4.586 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.831, 2.576), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   947.554 ±(99.9%) 574.570 MB/sec [Average]
[info]   (min, avg, max) = (680.739, 947.554, 1021.055), stdev = 149.214
[info]   CI (99.9%): [372.985, 1522.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   51108.781 ±(99.9%) 31494.740 B/op [Average]
[info]   (min, avg, max) = (36480.279, 51108.781, 55035.557), stdev = 8179.084
[info]   CI (99.9%): [19614.041, 82603.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   43.095 ±(99.9%) 299.537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.095, 179.416), stdev = 77.789
[info]   CI (99.9%): [≈ 0, 342.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 3.847
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 00:49:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48889.686 ops/s
[info] # Warmup Iteration   2: 77816.945 ops/s
[info] # Warmup Iteration   3: 78341.215 ops/s
[info] Iteration   1: 76727.020 ops/s
[info]                  ·gc.alloc.rate:            1221.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27601.297 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 78313.877 ops/s
[info]                  ·gc.alloc.rate:                                  1246.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.184 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.696 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27202.707 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                80.323 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 79327.876 ops/s
[info]                  ·gc.alloc.rate:                                  1262.970 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20259.976 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 79064.417 ops/s
[info]                  ·gc.alloc.rate:            1258.476 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27103.484 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 79049.394 ops/s
[info]                  ·gc.alloc.rate:                                  1258.312 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27108.969 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   78496.517 ±(99.9%) 4076.875 ops/s [Average]
[info]   (min, avg, max) = (76727.020, 78496.517, 79327.876), stdev = 1058.752
[info]   CI (99.9%): [74419.641, 82573.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1249.531 ±(99.9%) 65.262 MB/sec [Average]
[info]   (min, avg, max) = (1221.189, 1249.531, 1262.970), stdev = 16.948
[info]   CI (99.9%): [1184.270, 1314.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.006), stdev = 0.001
[info]   CI (99.9%): [25056.004, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.184), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.744 ±(99.9%) 6.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.744, 3.696), stdev = 1.650
[info]   CI (99.9%): [≈ 0, 7.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1288.543 ±(99.9%) 576.000 MB/sec [Average]
[info]   (min, avg, max) = (1021.222, 1288.543, 1361.412), stdev = 149.585
[info]   CI (99.9%): [712.542, 1864.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25855.287 ±(99.9%) 12069.990 B/op [Average]
[info]   (min, avg, max) = (20259.976, 25855.287, 27601.297), stdev = 3134.538
[info]   CI (99.9%): [13785.297, 37925.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   16.065 ±(99.9%) 138.321 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.065, 80.323), stdev = 35.922
[info]   CI (99.9%): [≈ 0, 154.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.718
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 00:49:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 858511.913 ops/s
[info] # Warmup Iteration   2: 961553.224 ops/s
[info] # Warmup Iteration   3: 967565.261 ops/s
[info] Iteration   1: 966018.774 ops/s
[info]                  ·gc.alloc.rate:                   1325.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2193.229 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 969704.856 ops/s
[info]                  ·gc.alloc.rate:                                  1330.583 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2203.322 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.487 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 972690.166 ops/s
[info]                  ·gc.alloc.rate:                                  1335.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2203.169 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 969248.234 ops/s
[info]                  ·gc.alloc.rate:            1330.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2211.056 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 977044.355 ops/s
[info]                  ·gc.alloc.rate:                                  1340.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2193.415 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   970941.277 ±(99.9%) 15985.082 ops/s [Average]
[info]   (min, avg, max) = (966018.774, 970941.277, 977044.355), stdev = 4151.275
[info]   CI (99.9%): [954956.195, 986926.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1332.475 ±(99.9%) 22.170 MB/sec [Average]
[info]   (min, avg, max) = (1325.620, 1332.475, 1340.797), stdev = 5.758
[info]   CI (99.9%): [1310.305, 1354.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.664 ±(99.9%) 26.141 MB/sec [Average]
[info]   (min, avg, max) = (1346.012, 1357.664, 1361.890), stdev = 6.789
[info]   CI (99.9%): [1331.523, 1383.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2200.838 ±(99.9%) 29.136 B/op [Average]
[info]   (min, avg, max) = (2193.229, 2200.838, 2211.056), stdev = 7.567
[info]   CI (99.9%): [2171.702, 2229.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.514 ±(99.9%) 10.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.514, 6.487), stdev = 2.819
[info]   CI (99.9%): [≈ 0, 12.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 00:49:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1026163.845 ops/s
[info] # Warmup Iteration   2: 1111493.348 ops/s
[info] # Warmup Iteration   3: 1114618.121 ops/s
[info] Iteration   1: 1115659.821 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1115107.499 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1086946.428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1115471.118 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1115724.772 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1109781.928 ±(99.9%) 49163.830 ops/s [Average]
[info]   (min, avg, max) = (1086946.428, 1109781.928, 1115724.772), stdev = 12767.691
[info]   CI (99.9%): [1060618.097, 1158945.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 00:49:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34591.664 ops/s
[info] # Warmup Iteration   2: 63881.515 ops/s
[info] # Warmup Iteration   3: 63954.204 ops/s
[info] Iteration   1: 64006.509 ops/s
[info]                  ·gc.alloc.rate:                   1379.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              33928.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33070.512 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.380 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 63845.965 ops/s
[info]                  ·gc.alloc.rate:                                  1376.108 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.180 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.438 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33465.366 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                98.524 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 64718.260 ops/s
[info]                  ·gc.alloc.rate:                                  1394.916 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33110.710 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 63839.448 ops/s
[info]                  ·gc.alloc.rate:                                  1375.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33567.570 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 64648.067 ops/s
[info]                  ·gc.alloc.rate:                                  1393.517 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33145.529 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   64211.650 ±(99.9%) 1680.064 ops/s [Average]
[info]   (min, avg, max) = (63839.448, 64211.650, 64718.260), stdev = 436.307
[info]   CI (99.9%): [62531.586, 65891.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1383.993 ±(99.9%) 36.383 MB/sec [Average]
[info]   (min, avg, max) = (1375.974, 1383.993, 1394.916), stdev = 9.449
[info]   CI (99.9%): [1347.610, 1420.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33928.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (33928.006, 33928.007, 33928.007), stdev = 0.001
[info]   CI (99.9%): [33928.005, 33928.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.180), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.945 ±(99.9%) 7.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.945, 4.438), stdev = 1.954
[info]   CI (99.9%): [≈ 0, 8.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.196 ±(99.9%) 27.950 MB/sec [Average]
[info]   (min, avg, max) = (1344.587, 1357.196, 1361.378), stdev = 7.258
[info]   CI (99.9%): [1329.246, 1385.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   33271.937 ±(99.9%) 876.728 B/op [Average]
[info]   (min, avg, max) = (33070.512, 33271.937, 33567.570), stdev = 227.684
[info]   CI (99.9%): [32395.209, 34148.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.981 ±(99.9%) 164.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.981, 98.524), stdev = 42.821
[info]   CI (99.9%): [≈ 0, 187.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.958
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 00:49:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7354.914 ops/s
[info] # Warmup Iteration   2: 18304.573 ops/s
[info] # Warmup Iteration   3: 18790.532 ops/s
[info] Iteration   1: 18791.773 ops/s
[info]                  ·gc.alloc.rate:            703.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       58953.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56453.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 19374.291 ops/s
[info]                  ·gc.alloc.rate:                   725.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54817.954 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.114 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 19366.999 ops/s
[info]                  ·gc.alloc.rate:            725.538 MB/sec
[info]                  ·gc.alloc.rate.norm:       58968.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54783.630 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 17747.540 ops/s
[info]                  ·gc.alloc.rate:            664.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       58958.825 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59780.233 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 16569.941 ops/s
[info]                  ·gc.alloc.rate:            620.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       58952.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64029.380 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18370.109 ±(99.9%) 4640.054 ops/s [Average]
[info]   (min, avg, max) = (16569.941, 18370.109, 19374.291), stdev = 1205.007
[info]   CI (99.9%): [13730.055, 23010.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   688.111 ±(99.9%) 174.195 MB/sec [Average]
[info]   (min, avg, max) = (620.541, 688.111, 725.888), stdev = 45.238
[info]   CI (99.9%): [513.917, 862.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   58960.097 ±(99.9%) 29.507 B/op [Average]
[info]   (min, avg, max) = (58952.025, 58960.097, 58968.028), stdev = 7.663
[info]   CI (99.9%): [58930.590, 58989.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   674.169 ±(99.9%) 1.365 MB/sec [Average]
[info]   (min, avg, max) = (673.981, 674.169, 674.801), stdev = 0.355
[info]   CI (99.9%): [672.804, 675.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   57972.966 ±(99.9%) 15206.473 B/op [Average]
[info]   (min, avg, max) = (54783.630, 57972.966, 64029.380), stdev = 3949.073
[info]   CI (99.9%): [42766.492, 73179.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.823 ±(99.9%) 93.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.823, 54.114), stdev = 24.201
[info]   CI (99.9%): [≈ 0, 104.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 00:48:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5334.001 ops/s
[info] # Warmup Iteration   2: 14742.479 ops/s
[info] # Warmup Iteration   3: 14473.056 ops/s
[info] Iteration   1: 14959.611 ops/s
[info]                  ·gc.alloc.rate:            418.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70783.435 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 15063.343 ops/s
[info]                  ·gc.alloc.rate:            421.971 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35147.410 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 15033.407 ops/s
[info]                  ·gc.alloc.rate:            421.098 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35217.537 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 14922.121 ops/s
[info]                  ·gc.alloc.rate:            418.093 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35479.456 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 14902.875 ops/s
[info]                  ·gc.alloc.rate:            417.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71049.360 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   14976.272 ±(99.9%) 268.462 ops/s [Average]
[info]   (min, avg, max) = (14902.875, 14976.272, 15063.343), stdev = 69.719
[info]   CI (99.9%): [14707.810, 15244.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   419.518 ±(99.9%) 7.490 MB/sec [Average]
[info]   (min, avg, max) = (417.443, 419.518, 421.971), stdev = 1.945
[info]   CI (99.9%): [412.028, 427.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088.029 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (44088.027, 44088.029, 44088.034), stdev = 0.003
[info]   CI (99.9%): [44088.018, 44088.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.927 ±(99.9%) 709.271 MB/sec [Average]
[info]   (min, avg, max) = (336.373, 470.927, 672.723), stdev = 184.195
[info]   CI (99.9%): [≈ 0, 1180.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   49535.440 ±(99.9%) 75159.463 B/op [Average]
[info]   (min, avg, max) = (35147.410, 49535.440, 71049.360), stdev = 19518.674
[info]   CI (99.9%): [≈ 0, 124694.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 00:48:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96254.337 ops/s
[info] # Warmup Iteration   2: 98993.642 ops/s
[info] # Warmup Iteration   3: 97521.521 ops/s
[info] Iteration   1: 102048.167 ops/s
[info]                  ·gc.alloc.rate:      256.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 97549.166 ops/s
[info]                  ·gc.alloc.rate:            244.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5449.074 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 101778.392 ops/s
[info]                  ·gc.alloc.rate:            255.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5222.536 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 101703.739 ops/s
[info]                  ·gc.alloc.rate:            255.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5226.284 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 102124.166 ops/s
[info]                  ·gc.alloc.rate:      256.402 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   101040.726 ±(99.9%) 7546.551 ops/s [Average]
[info]   (min, avg, max) = (97549.166, 101040.726, 102124.166), stdev = 1959.815
[info]   CI (99.9%): [93494.175, 108587.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   253.698 ±(99.9%) 18.942 MB/sec [Average]
[info]   (min, avg, max) = (244.935, 253.698, 256.402), stdev = 4.919
[info]   CI (99.9%): [234.756, 272.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.005), stdev = 0.001
[info]   CI (99.9%): [3952.003, 3952.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.619 ±(99.9%) 712.236 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.619, 337.720), stdev = 184.965
[info]   CI (99.9%): [≈ 0, 914.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3179.579 ±(99.9%) 11182.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3179.579, 5449.074), stdev = 2903.994
[info]   CI (99.9%): [≈ 0, 14361.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 00:48:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3187.072 ops/s
[info] # Warmup Iteration   2: 13039.739 ops/s
[info] # Warmup Iteration   3: 13350.136 ops/s
[info] Iteration   1: 13824.344 ops/s
[info]                  ·gc.alloc.rate:            872.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 114890.623 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 13856.612 ops/s
[info]                  ·gc.alloc.rate:            874.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76411.382 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 13668.841 ops/s
[info]                  ·gc.alloc.rate:            863.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       99393.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116193.142 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 13833.414 ops/s
[info]                  ·gc.alloc.rate:                   873.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              99392.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76538.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 454.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 13912.730 ops/s
[info]                  ·gc.alloc.rate:                                  878.556 MB/sec
[info]                  ·gc.alloc.rate.norm:                             99392.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.473 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       115512.145 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   13819.188 ±(99.9%) 349.666 ops/s [Average]
[info]   (min, avg, max) = (13668.841, 13819.188, 13912.730), stdev = 90.807
[info]   CI (99.9%): [13469.522, 14168.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   872.602 ±(99.9%) 22.012 MB/sec [Average]
[info]   (min, avg, max) = (863.162, 872.602, 878.556), stdev = 5.716
[info]   CI (99.9%): [850.590, 894.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99392.244 ±(99.9%) 1.838 B/op [Average]
[info]   (min, avg, max) = (99392.029, 99392.244, 99393.098), stdev = 0.477
[info]   CI (99.9%): [99390.406, 99394.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.066), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.495 ±(99.9%) 12.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.495, 7.473), stdev = 3.342
[info]   CI (99.9%): [≈ 0, 14.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   876.876 ±(99.9%) 718.205 MB/sec [Average]
[info]   (min, avg, max) = (672.611, 876.876, 1021.047), stdev = 186.516
[info]   CI (99.9%): [158.671, 1595.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   99909.137 ±(99.9%) 82393.966 B/op [Average]
[info]   (min, avg, max) = (76411.382, 99909.137, 116193.142), stdev = 21397.451
[info]   CI (99.9%): [17515.171, 182303.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   90.937 ±(99.9%) 782.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 90.937, 454.684), stdev = 203.341
[info]   CI (99.9%): [≈ 0, 873.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 13.000), stdev = 3.962
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 00:48:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36792.852 ops/s
[info] # Warmup Iteration   2: 56287.914 ops/s
[info] # Warmup Iteration   3: 56060.736 ops/s
[info] Iteration   1: 56746.800 ops/s
[info]                  ·gc.alloc.rate:            1012.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28045.288 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 56690.056 ops/s
[info]                  ·gc.alloc.rate:            1011.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28072.492 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 56476.934 ops/s
[info]                  ·gc.alloc.rate:                   1007.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28179.343 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 92.817 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 57200.894 ops/s
[info]                  ·gc.alloc.rate:                                  1020.283 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28072.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28097.658 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 57136.283 ops/s
[info]                  ·gc.alloc.rate:                                  1019.251 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28072.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28129.618 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   56850.193 ±(99.9%) 1187.620 ops/s [Average]
[info]   (min, avg, max) = (56476.934, 56850.193, 57200.894), stdev = 308.421
[info]   CI (99.9%): [55662.574, 58037.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1013.960 ±(99.9%) 21.655 MB/sec [Average]
[info]   (min, avg, max) = (1007.132, 1013.960, 1020.283), stdev = 5.624
[info]   CI (99.9%): [992.304, 1035.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28072.007, 28072.007, 28072.008), stdev = 0.001
[info]   CI (99.9%): [28072.006, 28072.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.424 ±(99.9%) 3.445 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.424, 2.022), stdev = 0.895
[info]   CI (99.9%): [≈ 0, 3.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.146 ±(99.9%) 21.563 MB/sec [Average]
[info]   (min, avg, max) = (1010.982, 1015.146, 1021.343), stdev = 5.600
[info]   CI (99.9%): [993.583, 1036.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   28104.880 ±(99.9%) 200.169 B/op [Average]
[info]   (min, avg, max) = (28045.288, 28104.880, 28179.343), stdev = 51.983
[info]   CI (99.9%): [27904.711, 28305.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.563 ±(99.9%) 159.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.563, 92.817), stdev = 41.509
[info]   CI (99.9%): [≈ 0, 178.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 11.000), stdev = 4.506
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 00:48:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48735.898 ops/s
[info] # Warmup Iteration   2: 78116.833 ops/s
[info] # Warmup Iteration   3: 78498.473 ops/s
[info] Iteration   1: 78514.236 ops/s
[info]                  ·gc.alloc.rate:            1269.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       25440.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26972.844 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 78947.713 ops/s
[info]                  ·gc.alloc.rate:                                  1275.950 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.187 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.726 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26984.289 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                79.678 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 79453.562 ops/s
[info]                  ·gc.alloc.rate:                                  1284.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26970.131 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 79631.210 ops/s
[info]                  ·gc.alloc.rate:                                  1286.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26910.532 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 79715.431 ops/s
[info]                  ·gc.alloc.rate:            1288.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       25440.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20161.635 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   79252.430 ±(99.9%) 1959.747 ops/s [Average]
[info]   (min, avg, max) = (78514.236, 79252.430, 79715.431), stdev = 508.940
[info]   CI (99.9%): [77292.684, 81212.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1280.905 ±(99.9%) 31.475 MB/sec [Average]
[info]   (min, avg, max) = (1269.085, 1280.905, 1288.359), stdev = 8.174
[info]   CI (99.9%): [1249.430, 1312.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25440.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25440.005, 25440.005, 25440.006), stdev = 0.001
[info]   CI (99.9%): [25440.004, 25440.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.187), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.759 ±(99.9%) 6.387 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.759, 3.726), stdev = 1.659
[info]   CI (99.9%): [≈ 0, 7.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1288.552 ±(99.9%) 576.382 MB/sec [Average]
[info]   (min, avg, max) = (1021.046, 1288.552, 1361.388), stdev = 149.685
[info]   CI (99.9%): [712.170, 1864.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25599.886 ±(99.9%) 11706.769 B/op [Average]
[info]   (min, avg, max) = (20161.635, 25599.886, 26984.289), stdev = 3040.211
[info]   CI (99.9%): [13893.118, 37306.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.936 ±(99.9%) 137.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.936, 79.678), stdev = 35.633
[info]   CI (99.9%): [≈ 0, 153.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.657
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:47:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226635.408 ops/s
[info] # Warmup Iteration   2: 249371.296 ops/s
[info] # Warmup Iteration   3: 243546.561 ops/s
[info] Iteration   1: 252820.185 ops/s
[info]                  ·gc.alloc.rate:            484.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2094.017 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 252297.149 ops/s
[info]                  ·gc.alloc.rate:            483.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4197.213 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 253146.770 ops/s
[info]                  ·gc.alloc.rate:            485.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2091.561 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 253211.147 ops/s
[info]                  ·gc.alloc.rate:            485.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2091.007 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 252039.886 ops/s
[info]                  ·gc.alloc.rate:            482.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4201.476 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   252703.028 ±(99.9%) 1994.649 ops/s [Average]
[info]   (min, avg, max) = (252039.886, 252703.028, 253211.147), stdev = 518.004
[info]   CI (99.9%): [250708.378, 254697.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   484.213 ±(99.9%) 3.946 MB/sec [Average]
[info]   (min, avg, max) = (482.894, 484.213, 485.202), stdev = 1.025
[info]   CI (99.9%): [480.266, 488.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.001, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.916 ±(99.9%) 709.286 MB/sec [Average]
[info]   (min, avg, max) = (336.361, 470.916, 672.701), stdev = 184.199
[info]   CI (99.9%): [≈ 0, 1180.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2935.055 ±(99.9%) 4444.162 B/op [Average]
[info]   (min, avg, max) = (2091.007, 2935.055, 4201.476), stdev = 1154.135
[info]   CI (99.9%): [≈ 0, 7379.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:47:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281595.136 ops/s
[info] # Warmup Iteration   2: 311881.452 ops/s
[info] # Warmup Iteration   3: 313692.365 ops/s
[info] Iteration   1: 312801.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 312260.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 312613.750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 312809.861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 312888.489 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   312674.779 ±(99.9%) 973.008 ops/s [Average]
[info]   (min, avg, max) = (312260.384, 312674.779, 312888.489), stdev = 252.687
[info]   CI (99.9%): [311701.771, 313647.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:47:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47634.285 ops/s
[info] # Warmup Iteration   2: 63908.302 ops/s
[info] # Warmup Iteration   3: 65365.745 ops/s
[info] Iteration   1: 65095.655 ops/s
[info]                  ·gc.alloc.rate:            1168.267 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32532.462 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 65757.927 ops/s
[info]                  ·gc.alloc.rate:                   1180.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24153.758 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 95.658 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 66189.740 ops/s
[info]                  ·gc.alloc.rate:                                  1188.106 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28248.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.769 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32375.483 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 66226.752 ops/s
[info]                  ·gc.alloc.rate:            1188.881 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24268.415 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 66201.848 ops/s
[info]                  ·gc.alloc.rate:                                  1188.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28248.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32369.127 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   65894.384 ±(99.9%) 1875.412 ops/s [Average]
[info]   (min, avg, max) = (65095.655, 65894.384, 66226.752), stdev = 487.039
[info]   CI (99.9%): [64018.972, 67769.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1182.687 ±(99.9%) 33.934 MB/sec [Average]
[info]   (min, avg, max) = (1168.267, 1182.687, 1188.881), stdev = 8.813
[info]   CI (99.9%): [1148.753, 1216.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28248.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28248.006, 28248.006, 28248.007), stdev = 0.001
[info]   CI (99.9%): [28248.006, 28248.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.159), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.756 ±(99.9%) 6.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.756, 3.769), stdev = 1.684
[info]   CI (99.9%): [≈ 0, 7.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.803 ±(99.9%) 719.682 MB/sec [Average]
[info]   (min, avg, max) = (1009.101, 1219.803, 1361.707), stdev = 186.899
[info]   CI (99.9%): [500.120, 1939.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   29139.849 ±(99.9%) 17327.829 B/op [Average]
[info]   (min, avg, max) = (24153.758, 29139.849, 32532.462), stdev = 4499.982
[info]   CI (99.9%): [11812.020, 46467.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   19.132 ±(99.9%) 164.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.132, 95.658), stdev = 42.780
[info]   CI (99.9%): [≈ 0, 183.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 15.000), stdev = 5.683
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:47:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100750.086 ops/s
[info] # Warmup Iteration   2: 123423.491 ops/s
[info] # Warmup Iteration   3: 123376.662 ops/s
[info] Iteration   1: 124788.813 ops/s
[info]                  ·gc.alloc.rate:                                  1807.689 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.840 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21423.686 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                42.007 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 125468.142 ops/s
[info]                  ·gc.alloc.rate:                                  1817.138 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.552 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21349.715 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 125417.412 ops/s
[info]                  ·gc.alloc.rate:                                  1816.635 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25630.892 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 125380.882 ops/s
[info]                  ·gc.alloc.rate:                                  1816.264 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21365.549 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 125597.209 ops/s
[info]                  ·gc.alloc.rate:                                  1819.204 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21328.469 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   125330.492 ±(99.9%) 1207.893 ops/s [Average]
[info]   (min, avg, max) = (124788.813, 125330.492, 125597.209), stdev = 313.686
[info]   CI (99.9%): [124122.598, 126538.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1815.386 ±(99.9%) 17.136 MB/sec [Average]
[info]   (min, avg, max) = (1807.689, 1815.386, 1819.204), stdev = 4.450
[info]   CI (99.9%): [1798.250, 1832.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22800.003, 22800.003, 22800.004), stdev = 0.001
[info]   CI (99.9%): [22800.003, 22800.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.240 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.034, 0.146), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.434 ±(99.9%) 3.027 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.434, 1.840), stdev = 0.786
[info]   CI (99.9%): [≈ 0, 3.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1769.219 ±(99.9%) 587.618 MB/sec [Average]
[info]   (min, avg, max) = (1698.569, 1769.219, 2042.191), stdev = 152.602
[info]   CI (99.9%): [1181.602, 2356.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   22219.662 ±(99.9%) 7344.190 B/op [Average]
[info]   (min, avg, max) = (21328.469, 22219.662, 25630.892), stdev = 1907.263
[info]   CI (99.9%): [14875.472, 29563.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.401 ±(99.9%) 72.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.401, 42.007), stdev = 18.786
[info]   CI (99.9%): [≈ 0, 80.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:46:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34004.198 ops/s
[info] # Warmup Iteration   2: 628919.933 ops/s
[info] # Warmup Iteration   3: 623001.087 ops/s
[info] Iteration   1: 632263.851 ops/s
[info]                  ·gc.alloc.rate:            350.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 830.746 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 632719.237 ops/s
[info]                  ·gc.alloc.rate:            350.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 830.158 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 632580.037 ops/s
[info]                  ·gc.alloc.rate:            350.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 830.339 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 632448.101 ops/s
[info]                  ·gc.alloc.rate:            350.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 830.515 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 632764.330 ops/s
[info]                  ·gc.alloc.rate:            350.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.791 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 830.102 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   632555.111 ±(99.9%) 788.242 ops/s [Average]
[info]   (min, avg, max) = (632263.851, 632555.111, 632764.330), stdev = 204.704
[info]   CI (99.9%): [631766.869, 633343.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   350.441 ±(99.9%) 0.564 MB/sec [Average]
[info]   (min, avg, max) = (350.253, 350.441, 350.639), stdev = 0.146
[info]   CI (99.9%): [349.877, 351.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.711 ±(99.9%) 0.210 MB/sec [Average]
[info]   (min, avg, max) = (333.657, 333.711, 333.791), stdev = 0.055
[info]   CI (99.9%): [333.501, 333.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   830.372 ±(99.9%) 1.020 B/op [Average]
[info]   (min, avg, max) = (830.102, 830.372, 830.746), stdev = 0.265
[info]   CI (99.9%): [829.353, 831.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:46:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212919.115 ops/s
[info] # Warmup Iteration   2: 334951.646 ops/s
[info] # Warmup Iteration   3: 331566.149 ops/s
[info] Iteration   1: 326214.273 ops/s
[info]                  ·gc.alloc.rate:            339.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1623.014 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 336027.263 ops/s
[info]                  ·gc.alloc.rate:            350.156 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1575.605 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 339493.164 ops/s
[info]                  ·gc.alloc.rate:            353.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1559.540 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 339604.475 ops/s
[info]                  ·gc.alloc.rate:            353.823 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1559.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 339364.654 ops/s
[info]                  ·gc.alloc.rate:                   353.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1557.030 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   336140.766 ±(99.9%) 22135.130 ops/s [Average]
[info]   (min, avg, max) = (326214.273, 336140.766, 339604.475), stdev = 5748.423
[info]   CI (99.9%): [314005.636, 358275.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   350.232 ±(99.9%) 23.103 MB/sec [Average]
[info]   (min, avg, max) = (339.860, 350.232, 353.823), stdev = 6.000
[info]   CI (99.9%): [327.129, 373.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.234 ±(99.9%) 1.213 MB/sec [Average]
[info]   (min, avg, max) = (335.674, 336.234, 336.407), stdev = 0.315
[info]   CI (99.9%): [335.021, 337.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1574.838 ±(99.9%) 107.601 B/op [Average]
[info]   (min, avg, max) = (1557.030, 1574.838, 1623.014), stdev = 27.944
[info]   CI (99.9%): [1467.237, 1682.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.618 ±(99.9%) 5.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.618, 3.089), stdev = 1.382
[info]   CI (99.9%): [≈ 0, 5.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:46:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 736366.634 ops/s
[info] # Warmup Iteration   2: 764341.600 ops/s
[info] # Warmup Iteration   3: 771803.031 ops/s
[info] Iteration   1: 765571.157 ops/s
[info]                  ·gc.alloc.rate:            264.565 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 692.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 773395.177 ops/s
[info]                  ·gc.alloc.rate:      267.305 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 770915.417 ops/s
[info]                  ·gc.alloc.rate:            266.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 688.137 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 771107.450 ops/s
[info]                  ·gc.alloc.rate:            266.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 687.962 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 755873.237 ops/s
[info]                  ·gc.alloc.rate:            261.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 701.832 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   767372.488 ±(99.9%) 27108.960 ops/s [Average]
[info]   (min, avg, max) = (755873.237, 767372.488, 773395.177), stdev = 7040.111
[info]   CI (99.9%): [740263.528, 794481.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   265.215 ±(99.9%) 9.382 MB/sec [Average]
[info]   (min, avg, max) = (261.246, 265.215, 267.305), stdev = 2.437
[info]   CI (99.9%): [255.833, 274.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.626 ±(99.9%) 580.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.626, 337.053), stdev = 150.726
[info]   CI (99.9%): [≈ 0, 850.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   554.177 ±(99.9%) 1193.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 554.177, 701.832), stdev = 309.845
[info]   CI (99.9%): [≈ 0, 1747.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:46:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39999.026 ops/s
[info] # Warmup Iteration   2: 69904.171 ops/s
[info] # Warmup Iteration   3: 73336.375 ops/s
[info] Iteration   1: 73312.265 ops/s
[info]                  ·gc.alloc.rate:                                  3142.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65769.281 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 74024.502 ops/s
[info]                  ·gc.alloc.rate:                                  3174.095 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.357 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65135.894 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 72835.772 ops/s
[info]                  ·gc.alloc.rate:                                  3121.999 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.227 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73553.472 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 73841.364 ops/s
[info]                  ·gc.alloc.rate:                                  3165.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.188 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65296.409 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 73938.327 ops/s
[info]                  ·gc.alloc.rate:                                  3169.440 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65210.762 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   73590.446 ±(99.9%) 1943.816 ops/s [Average]
[info]   (min, avg, max) = (72835.772, 73590.446, 74024.502), stdev = 504.803
[info]   CI (99.9%): [71646.630, 75534.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3154.665 ±(99.9%) 84.891 MB/sec [Average]
[info]   (min, avg, max) = (3121.999, 3154.665, 3174.095), stdev = 22.046
[info]   CI (99.9%): [3069.774, 3239.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67472.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67472.006, 67472.006, 67472.006), stdev = 0.001
[info]   CI (99.9%): [67472.005, 67472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (0.007, 0.011, 0.017), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.243 ±(99.9%) 0.308 B/op [Average]
[info]   (min, avg, max) = (0.157, 0.243, 0.357), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3131.446 ±(99.9%) 585.393 MB/sec [Average]
[info]   (min, avg, max) = (3062.770, 3131.446, 3403.395), stdev = 152.025
[info]   CI (99.9%): [2546.054, 3716.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66993.164 ±(99.9%) 14153.529 B/op [Average]
[info]   (min, avg, max) = (65135.894, 66993.164, 73553.472), stdev = 3675.627
[info]   CI (99.9%): [52839.635, 81146.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:46:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174254.410 ops/s
[info] # Warmup Iteration   2: 231528.755 ops/s
[info] # Warmup Iteration   3: 233950.629 ops/s
[info] Iteration   1: 230333.256 ops/s
[info]                  ·gc.alloc.rate:            1200.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       8200.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9212.568 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 232149.880 ops/s
[info]                  ·gc.alloc.rate:                                  1209.200 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.486 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9163.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                22.581 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 235150.338 ops/s
[info]                  ·gc.alloc.rate:                                  1225.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6834.701 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 234907.132 ops/s
[info]                  ·gc.alloc.rate:                                  1224.223 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9122.515 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 235193.216 ops/s
[info]                  ·gc.alloc.rate:                                  1225.182 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6833.597 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   233546.764 ±(99.9%) 8482.518 ops/s [Average]
[info]   (min, avg, max) = (230333.256, 233546.764, 235193.216), stdev = 2202.883
[info]   CI (99.9%): [225064.246, 242029.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1216.825 ±(99.9%) 44.247 MB/sec [Average]
[info]   (min, avg, max) = (1200.261, 1216.825, 1225.257), stdev = 11.491
[info]   CI (99.9%): [1172.577, 1261.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8200.002, 8200.002, 8200.002), stdev = 0.001
[info]   CI (99.9%): [8200.001, 8200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.140 ±(99.9%) 0.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.140, 0.486), stdev = 0.209
[info]   CI (99.9%): [≈ 0, 0.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.791 ±(99.9%) 702.077 MB/sec [Average]
[info]   (min, avg, max) = (1021.025, 1220.791, 1361.950), stdev = 182.327
[info]   CI (99.9%): [518.714, 1922.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8233.343 ±(99.9%) 4919.895 B/op [Average]
[info]   (min, avg, max) = (6833.597, 8233.343, 9212.568), stdev = 1277.681
[info]   CI (99.9%): [3313.447, 13153.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.516 ±(99.9%) 38.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.516, 22.581), stdev = 10.098
[info]   CI (99.9%): [≈ 0, 43.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 5.413
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:45:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118087.518 ops/s
[info] # Warmup Iteration   2: 1503996.140 ops/s
[info] # Warmup Iteration   3: 1507609.649 ops/s
[info] Iteration   1: 1510411.402 ops/s
[info]                  ·gc.alloc.rate:            514.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 347.765 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1499653.286 ops/s
[info]                  ·gc.alloc.rate:            510.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 700.482 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1508699.391 ops/s
[info]                  ·gc.alloc.rate:            513.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 348.153 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1505008.140 ops/s
[info]                  ·gc.alloc.rate:            512.521 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 697.990 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 1513962.553 ops/s
[info]                  ·gc.alloc.rate:            515.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 346.929 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1507546.954 ±(99.9%) 21042.338 ops/s [Average]
[info]   (min, avg, max) = (1499653.286, 1507546.954, 1513962.553), stdev = 5464.628
[info]   CI (99.9%): [1486504.616, 1528589.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   513.428 ±(99.9%) 7.360 MB/sec [Average]
[info]   (min, avg, max) = (510.713, 513.428, 515.775), stdev = 1.911
[info]   CI (99.9%): [506.069, 520.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.225 ±(99.9%) 703.729 MB/sec [Average]
[info]   (min, avg, max) = (333.674, 467.225, 667.435), stdev = 182.756
[info]   CI (99.9%): [≈ 0, 1170.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   488.264 ±(99.9%) 741.606 B/op [Average]
[info]   (min, avg, max) = (346.929, 488.264, 700.482), stdev = 192.593
[info]   CI (99.9%): [≈ 0, 1229.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:45:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 953094.565 ops/s
[info] # Warmup Iteration   2: 1491066.531 ops/s
[info] # Warmup Iteration   3: 1494891.174 ops/s
[info] Iteration   1: 1494638.316 ops/s
[info]                  ·gc.alloc.rate:            873.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1062.661 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1467997.607 ops/s
[info]                  ·gc.alloc.rate:            857.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1082.000 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 1501293.917 ops/s
[info]                  ·gc.alloc.rate:            877.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 705.316 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1499477.880 ops/s
[info]                  ·gc.alloc.rate:                                  876.701 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1067.654 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.195 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1508150.815 ops/s
[info]                  ·gc.alloc.rate:                                  881.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       710.468 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1494311.707 ±(99.9%) 59638.384 ops/s [Average]
[info]   (min, avg, max) = (1467997.607, 1494311.707, 1508150.815), stdev = 15487.899
[info]   CI (99.9%): [1434673.323, 1553950.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   873.399 ±(99.9%) 34.968 MB/sec [Average]
[info]   (min, avg, max) = (857.979, 873.399, 881.494), stdev = 9.081
[info]   CI (99.9%): [838.432, 908.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.127), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.033 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.133), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.746 ±(99.9%) 706.998 MB/sec [Average]
[info]   (min, avg, max) = (672.622, 877.746, 1017.406), stdev = 183.605
[info]   CI (99.9%): [170.748, 1584.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   925.620 ±(99.9%) 765.864 B/op [Average]
[info]   (min, avg, max) = (705.316, 925.620, 1082.000), stdev = 198.892
[info]   CI (99.9%): [159.756, 1691.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.839 ±(99.9%) 7.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.839, 4.195), stdev = 1.876
[info]   CI (99.9%): [≈ 0, 8.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.025
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:45:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1426003.340 ops/s
[info] # Warmup Iteration   2: 1543968.330 ops/s
[info] # Warmup Iteration   3: 1619808.508 ops/s
[info] Iteration   1: 1615396.265 ops/s
[info]                  ·gc.alloc.rate:                   550.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        656.134 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1620661.983 ops/s
[info]                  ·gc.alloc.rate:            551.799 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 327.325 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1618542.853 ops/s
[info]                  ·gc.alloc.rate:            551.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 654.225 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1610975.269 ops/s
[info]                  ·gc.alloc.rate:                   548.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        657.953 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1618048.071 ops/s
[info]                  ·gc.alloc.rate:            551.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 327.202 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1616724.888 ±(99.9%) 14327.797 ops/s [Average]
[info]   (min, avg, max) = (1610975.269, 1616724.888, 1620661.983), stdev = 3720.883
[info]   CI (99.9%): [1602397.091, 1631052.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   550.521 ±(99.9%) 4.855 MB/sec [Average]
[info]   (min, avg, max) = (548.571, 550.521, 551.799), stdev = 1.261
[info]   CI (99.9%): [545.666, 555.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.549 ±(99.9%) 709.537 MB/sec [Average]
[info]   (min, avg, max) = (336.422, 538.549, 673.384), stdev = 184.264
[info]   CI (99.9%): [≈ 0, 1248.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   524.568 ±(99.9%) 693.572 B/op [Average]
[info]   (min, avg, max) = (327.202, 524.568, 657.953), stdev = 180.118
[info]   CI (99.9%): [≈ 0, 1218.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 1.371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 0.651), stdev = 0.356
[info]   CI (99.9%): [≈ 0, 1.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:45:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1652516.163 ops/s
[info] # Warmup Iteration   2: 1799858.141 ops/s
[info] # Warmup Iteration   3: 1812896.776 ops/s
[info] Iteration   1: 1806213.197 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1811564.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1812628.405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1813562.421 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1810605.258 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1810914.813 ±(99.9%) 10987.787 ops/s [Average]
[info]   (min, avg, max) = (1806213.197, 1810914.813, 1813562.421), stdev = 2853.493
[info]   CI (99.9%): [1799927.025, 1821902.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:45:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22440.642 ops/s
[info] # Warmup Iteration   2: 33645.392 ops/s
[info] # Warmup Iteration   3: 33882.329 ops/s
[info] Iteration   1: 33749.943 ops/s
[info]                  ·gc.alloc.rate:                                  1565.075 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72985.784 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.617 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78621.456 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                186.380 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 34659.979 ops/s
[info]                  ·gc.alloc.rate:                                  1606.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61826.843 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 34485.427 ops/s
[info]                  ·gc.alloc.rate:                                  1599.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.585 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77673.422 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 34006.053 ops/s
[info]                  ·gc.alloc.rate:            1576.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       72976.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.630 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78769.601 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 34670.553 ops/s
[info]                  ·gc.alloc.rate:                                  1607.373 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61807.231 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   34314.391 ±(99.9%) 1598.375 ops/s [Average]
[info]   (min, avg, max) = (33749.943, 34314.391, 34670.553), stdev = 415.093
[info]   CI (99.9%): [32716.016, 35912.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1591.091 ±(99.9%) 74.038 MB/sec [Average]
[info]   (min, avg, max) = (1565.075, 1591.091, 1607.373), stdev = 19.227
[info]   CI (99.9%): [1517.053, 1665.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72977.966 ±(99.9%) 16.827 B/op [Average]
[info]   (min, avg, max) = (72976.012, 72977.966, 72985.784), stdev = 4.370
[info]   CI (99.9%): [72961.139, 72994.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.097), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.629 ±(99.9%) 8.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.629, 4.409), stdev = 2.195
[info]   CI (99.9%): [≈ 0, 10.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1562.585 ±(99.9%) 707.679 MB/sec [Average]
[info]   (min, avg, max) = (1361.369, 1562.585, 1702.585), stdev = 183.782
[info]   CI (99.9%): [854.905, 2270.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71739.711 ±(99.9%) 34917.178 B/op [Average]
[info]   (min, avg, max) = (61807.231, 71739.711, 78769.601), stdev = 9067.880
[info]   CI (99.9%): [36822.533, 106656.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   37.276 ±(99.9%) 320.958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.276, 186.380), stdev = 83.352
[info]   CI (99.9%): [≈ 0, 358.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 17.000), stdev = 6.058
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:44:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33599.102 ops/s
[info] # Warmup Iteration   2: 45862.925 ops/s
[info] # Warmup Iteration   3: 45190.165 ops/s
[info] Iteration   1: 45876.052 ops/s
[info]                  ·gc.alloc.rate:            915.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34690.488 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 46191.026 ops/s
[info]                  ·gc.alloc.rate:            922.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22968.310 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 45874.563 ops/s
[info]                  ·gc.alloc.rate:            915.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34692.001 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 46124.623 ops/s
[info]                  ·gc.alloc.rate:                                  921.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31424.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34730.543 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                113.647 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 46318.106 ops/s
[info]                  ·gc.alloc.rate:                                  924.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31424.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34699.024 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   46076.874 ±(99.9%) 757.420 ops/s [Average]
[info]   (min, avg, max) = (45874.563, 46076.874, 46318.106), stdev = 196.700
[info]   CI (99.9%): [45319.454, 46834.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   919.909 ±(99.9%) 15.185 MB/sec [Average]
[info]   (min, avg, max) = (915.721, 919.909, 924.674), stdev = 3.944
[info]   CI (99.9%): [904.724, 935.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31424.009, 31424.009, 31424.010), stdev = 0.001
[info]   CI (99.9%): [31424.008, 31424.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.059), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.413 ±(99.9%) 3.433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.413, 2.007), stdev = 0.891
[info]   CI (99.9%): [≈ 0, 3.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   947.036 ±(99.9%) 588.111 MB/sec [Average]
[info]   (min, avg, max) = (673.936, 947.036, 1021.043), stdev = 152.731
[info]   CI (99.9%): [358.924, 1535.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32356.073 ±(99.9%) 20207.964 B/op [Average]
[info]   (min, avg, max) = (22968.310, 32356.073, 34730.543), stdev = 5247.944
[info]   CI (99.9%): [12148.110, 52564.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   22.729 ±(99.9%) 195.707 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.729, 113.647), stdev = 50.825
[info]   CI (99.9%): [≈ 0, 218.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:44:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50440.928 ops/s
[info] # Warmup Iteration   2: 79286.983 ops/s
[info] # Warmup Iteration   3: 81111.954 ops/s
[info] Iteration   1: 81387.985 ops/s
[info]                  ·gc.alloc.rate:            857.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19515.161 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 81693.830 ops/s
[info]                  ·gc.alloc.rate:            861.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12961.860 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 80909.148 ops/s
[info]                  ·gc.alloc.rate:            852.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19632.129 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 81459.900 ops/s
[info]                  ·gc.alloc.rate:                                  858.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13076.311 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                77.222 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 82075.635 ops/s
[info]                  ·gc.alloc.rate:                                  865.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19582.003 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   81505.299 ±(99.9%) 1647.300 ops/s [Average]
[info]   (min, avg, max) = (80909.148, 81505.299, 82075.635), stdev = 427.799
[info]   CI (99.9%): [79857.999, 83152.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   859.127 ±(99.9%) 17.309 MB/sec [Average]
[info]   (min, avg, max) = (852.838, 859.127, 865.066), stdev = 4.495
[info]   CI (99.9%): [841.818, 876.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.005), stdev = 0.001
[info]   CI (99.9%): [16592.004, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.058), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.444 ±(99.9%) 2.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.444, 1.130), stdev = 0.608
[info]   CI (99.9%): [≈ 0, 2.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.707 ±(99.9%) 713.590 MB/sec [Average]
[info]   (min, avg, max) = (672.741, 877.707, 1020.957), stdev = 185.317
[info]   CI (99.9%): [164.117, 1591.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16953.493 ±(99.9%) 13831.796 B/op [Average]
[info]   (min, avg, max) = (12961.860, 16953.493, 19632.129), stdev = 3592.074
[info]   CI (99.9%): [3121.697, 30785.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.444 ±(99.9%) 132.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.444, 77.222), stdev = 34.535
[info]   CI (99.9%): [≈ 0, 148.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 4.159
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:44:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244325.986 ops/s
[info] # Warmup Iteration   2: 259549.330 ops/s
[info] # Warmup Iteration   3: 260812.435 ops/s
[info] Iteration   1: 261234.228 ops/s
[info]                  ·gc.alloc.rate:            849.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4061.448 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 260527.524 ops/s
[info]                  ·gc.alloc.rate:            847.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6108.608 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 261301.675 ops/s
[info]                  ·gc.alloc.rate:            849.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6090.470 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 257585.335 ops/s
[info]                  ·gc.alloc.rate:                                  837.928 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4139.341 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.351 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 262003.394 ops/s
[info]                  ·gc.alloc.rate:                                  852.263 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6134.434 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   260530.431 ±(99.9%) 6650.968 ops/s [Average]
[info]   (min, avg, max) = (257585.335, 260530.431, 262003.394), stdev = 1727.235
[info]   CI (99.9%): [253879.463, 267181.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   847.497 ±(99.9%) 21.536 MB/sec [Average]
[info]   (min, avg, max) = (837.928, 847.497, 852.263), stdev = 5.593
[info]   CI (99.9%): [825.961, 869.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.055), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.106 ±(99.9%) 0.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.337), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.982 ±(99.9%) 714.515 MB/sec [Average]
[info]   (min, avg, max) = (674.101, 878.982, 1021.123), stdev = 185.557
[info]   CI (99.9%): [164.468, 1593.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5306.860 ±(99.9%) 4242.650 B/op [Average]
[info]   (min, avg, max) = (4061.448, 5306.860, 6134.434), stdev = 1101.803
[info]   CI (99.9%): [1064.211, 9549.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.070 ±(99.9%) 35.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.070, 20.351), stdev = 9.101
[info]   CI (99.9%): [≈ 0, 39.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.280
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:44:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12134.714 ops/s
[info] # Warmup Iteration   2: 22942.154 ops/s
[info] # Warmup Iteration   3: 23699.114 ops/s
[info] Iteration   1: 23611.806 ops/s
[info]                  ·gc.alloc.rate:            1109.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       73976.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67264.794 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 23709.780 ops/s
[info]                  ·gc.alloc.rate:            1114.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       73976.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66989.653 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 23842.742 ops/s
[info]                  ·gc.alloc.rate:                                  1120.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73976.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89609.103 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                263.815 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 24079.542 ops/s
[info]                  ·gc.alloc.rate:                                  1131.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73976.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66744.187 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 24061.073 ops/s
[info]                  ·gc.alloc.rate:            1130.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       73976.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66796.884 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23860.989 ±(99.9%) 801.008 ops/s [Average]
[info]   (min, avg, max) = (23611.806, 23860.989, 24079.542), stdev = 208.019
[info]   CI (99.9%): [23059.981, 24661.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1121.463 ±(99.9%) 37.798 MB/sec [Average]
[info]   (min, avg, max) = (1109.611, 1121.463, 1131.742), stdev = 9.816
[info]   CI (99.9%): [1083.666, 1159.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73976.171 ±(99.9%) 1.313 B/op [Average]
[info]   (min, avg, max) = (73976.017, 73976.171, 73976.780), stdev = 0.341
[info]   CI (99.9%): [73974.858, 73977.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.123), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.667 ±(99.9%) 13.844 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.667, 8.095), stdev = 3.595
[info]   CI (99.9%): [≈ 0, 15.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.587 ±(99.9%) 590.909 MB/sec [Average]
[info]   (min, avg, max) = (1008.935, 1083.587, 1357.885), stdev = 153.457
[info]   CI (99.9%): [492.678, 1674.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71480.924 ±(99.9%) 39030.177 B/op [Average]
[info]   (min, avg, max) = (66744.187, 71480.924, 89609.103), stdev = 10136.013
[info]   CI (99.9%): [32450.747, 110511.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   52.763 ±(99.9%) 454.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.763, 263.815), stdev = 117.982
[info]   CI (99.9%): [≈ 0, 507.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 12.000), stdev = 4.775
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:43:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42110.855 ops/s
[info] # Warmup Iteration   2: 57089.970 ops/s
[info] # Warmup Iteration   3: 57707.900 ops/s
[info] Iteration   1: 55788.128 ops/s
[info]                  ·gc.alloc.rate:            827.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19018.889 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 58354.748 ops/s
[info]                  ·gc.alloc.rate:            865.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27272.606 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 58452.739 ops/s
[info]                  ·gc.alloc.rate:            867.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18150.949 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 58305.028 ops/s
[info]                  ·gc.alloc.rate:                                  865.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.227 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27385.428 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.906 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 58657.751 ops/s
[info]                  ·gc.alloc.rate:                                  870.135 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23352.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18266.878 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   57911.679 ±(99.9%) 4600.621 ops/s [Average]
[info]   (min, avg, max) = (55788.128, 57911.679, 58657.751), stdev = 1194.767
[info]   CI (99.9%): [53311.058, 62512.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   859.193 ±(99.9%) 67.669 MB/sec [Average]
[info]   (min, avg, max) = (827.957, 859.193, 870.135), stdev = 17.573
[info]   CI (99.9%): [791.524, 926.862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.008), stdev = 0.001
[info]   CI (99.9%): [23352.006, 23352.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.117), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.074 ±(99.9%) 5.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.074, 3.141), stdev = 1.505
[info]   CI (99.9%): [≈ 0, 6.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.889 ±(99.9%) 709.479 MB/sec [Average]
[info]   (min, avg, max) = (674.067, 810.889, 1014.424), stdev = 184.249
[info]   CI (99.9%): [101.410, 1520.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   22018.950 ±(99.9%) 18710.309 B/op [Average]
[info]   (min, avg, max) = (18150.949, 22018.950, 27385.428), stdev = 4859.008
[info]   CI (99.9%): [3308.641, 40729.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.981 ±(99.9%) 154.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.981, 89.906), stdev = 40.207
[info]   CI (99.9%): [≈ 0, 172.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:43:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54624.119 ops/s
[info] # Warmup Iteration   2: 95030.262 ops/s
[info] # Warmup Iteration   3: 94476.068 ops/s
[info] Iteration   1: 95318.201 ops/s
[info]                  ·gc.alloc.rate:                   1305.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22205.993 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.999 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 95547.627 ops/s
[info]                  ·gc.alloc.rate:                                  1309.061 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.167 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.758 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22296.120 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                65.835 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 96420.104 ops/s
[info]                  ·gc.alloc.rate:                                  1320.661 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21559.983 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22224.762 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 96286.373 ops/s
[info]                  ·gc.alloc.rate:            1318.796 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22255.686 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 94667.449 ops/s
[info]                  ·gc.alloc.rate:            1297.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       21559.983 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22635.519 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   95647.951 ±(99.9%) 2779.398 ops/s [Average]
[info]   (min, avg, max) = (94667.449, 95647.951, 96420.104), stdev = 721.801
[info]   CI (99.9%): [92868.552, 98427.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1310.205 ±(99.9%) 37.456 MB/sec [Average]
[info]   (min, avg, max) = (1297.143, 1310.205, 1320.661), stdev = 9.727
[info]   CI (99.9%): [1272.750, 1347.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.000 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (21559.983, 21560.000, 21560.025), stdev = 0.017
[info]   CI (99.9%): [21559.933, 21560.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.167), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.565 ±(99.9%) 4.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.565, 2.758), stdev = 1.226
[info]   CI (99.9%): [≈ 0, 5.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.563 ±(99.9%) 29.075 MB/sec [Average]
[info]   (min, avg, max) = (1344.477, 1356.563, 1361.852), stdev = 7.551
[info]   CI (99.9%): [1327.488, 1385.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22323.616 ±(99.9%) 684.129 B/op [Average]
[info]   (min, avg, max) = (22205.993, 22323.616, 22635.519), stdev = 177.666
[info]   CI (99.9%): [21639.487, 23007.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.367 ±(99.9%) 110.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.367, 65.835), stdev = 28.612
[info]   CI (99.9%): [≈ 0, 125.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 16.000), stdev = 5.718
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:43:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256168.574 ops/s
[info] # Warmup Iteration   2: 282602.750 ops/s
[info] # Warmup Iteration   3: 289448.054 ops/s
[info] Iteration   1: 288802.996 ops/s
[info]                  ·gc.alloc.rate:                   920.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5506.689 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.630 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 287419.009 ops/s
[info]                  ·gc.alloc.rate:            916.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5526.193 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 286289.872 ops/s
[info]                  ·gc.alloc.rate:                   912.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5551.819 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.973 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 289784.271 ops/s
[info]                  ·gc.alloc.rate:                                  923.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.103 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3697.201 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 289655.632 ops/s
[info]                  ·gc.alloc.rate:                                  923.015 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5548.711 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   288390.356 ±(99.9%) 5798.302 ops/s [Average]
[info]   (min, avg, max) = (286289.872, 288390.356, 289784.271), stdev = 1505.801
[info]   CI (99.9%): [282592.054, 294188.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   919.062 ±(99.9%) 18.494 MB/sec [Average]
[info]   (min, avg, max) = (912.304, 919.062, 923.528), stdev = 4.803
[info]   CI (99.9%): [900.568, 937.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.103), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.133 ±(99.9%) 0.934 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.559), stdev = 0.243
[info]   CI (99.9%): [≈ 0, 1.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.238 ±(99.9%) 571.868 MB/sec [Average]
[info]   (min, avg, max) = (680.715, 946.238, 1021.041), stdev = 148.512
[info]   CI (99.9%): [374.371, 1518.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5166.123 ±(99.9%) 3162.750 B/op [Average]
[info]   (min, avg, max) = (3697.201, 5166.123, 5551.819), stdev = 821.356
[info]   CI (99.9%): [2003.372, 8328.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.121 ±(99.9%) 36.777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.121, 21.973), stdev = 9.551
[info]   CI (99.9%): [≈ 0, 41.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 9.000), stdev = 3.578
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:43:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292434.643 ops/s
[info] # Warmup Iteration   2: 322566.934 ops/s
[info] # Warmup Iteration   3: 322742.560 ops/s
[info] Iteration   1: 322736.701 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 322725.158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 322801.086 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 322735.409 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 322803.268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   322760.324 ±(99.9%) 148.152 ops/s [Average]
[info]   (min, avg, max) = (322725.158, 322760.324, 322803.268), stdev = 38.475
[info]   CI (99.9%): [322612.172, 322908.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:43:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54375.764 ops/s
[info] # Warmup Iteration   2: 76860.684 ops/s
[info] # Warmup Iteration   3: 78126.551 ops/s
[info] Iteration   1: 77848.815 ops/s
[info]                  ·gc.alloc.rate:            1153.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.910 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20402.145 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 78135.128 ops/s
[info]                  ·gc.alloc.rate:                   1157.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.224 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27102.961 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.504 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 79847.151 ops/s
[info]                  ·gc.alloc.rate:                                  1183.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.411 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20128.059 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 79626.390 ops/s
[info]                  ·gc.alloc.rate:                                  1180.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.030 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26911.884 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 79746.490 ops/s
[info]                  ·gc.alloc.rate:                                  1182.170 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23327.980 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20153.041 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   79040.795 ±(99.9%) 3719.504 ops/s [Average]
[info]   (min, avg, max) = (77848.815, 79040.795, 79847.151), stdev = 965.943
[info]   CI (99.9%): [75321.291, 82760.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1171.483 ±(99.9%) 55.915 MB/sec [Average]
[info]   (min, avg, max) = (1153.598, 1171.483, 1183.742), stdev = 14.521
[info]   CI (99.9%): [1115.569, 1227.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.000 ±(99.9%) 0.081 B/op [Average]
[info]   (min, avg, max) = (23327.980, 23328.000, 23328.030), stdev = 0.021
[info]   CI (99.9%): [23327.919, 23328.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.504 ±(99.9%) 4.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.504, 2.411), stdev = 1.066
[info]   CI (99.9%): [≈ 0, 4.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.623 ±(99.9%) 709.466 MB/sec [Average]
[info]   (min, avg, max) = (1008.910, 1151.623, 1361.339), stdev = 184.246
[info]   CI (99.9%): [442.158, 1861.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   22939.618 ±(99.9%) 14307.224 B/op [Average]
[info]   (min, avg, max) = (20128.059, 22939.618, 27102.961), stdev = 3715.541
[info]   CI (99.9%): [8632.394, 37246.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.101 ±(99.9%) 138.632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.101, 80.504), stdev = 36.002
[info]   CI (99.9%): [≈ 0, 154.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 16.000), stdev = 6.189
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:42:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15512.023 ops/s
[info] # Warmup Iteration   2: 23114.645 ops/s
[info] # Warmup Iteration   3: 23167.692 ops/s
[info] Iteration   1: 22873.513 ops/s
[info]                  ·gc.alloc.rate:            1191.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92762.700 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 23202.283 ops/s
[info]                  ·gc.alloc.rate:                   1208.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68588.718 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 225.918 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 23352.264 ops/s
[info]                  ·gc.alloc.rate:                                  1216.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81983.338 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91766.113 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 23484.703 ops/s
[info]                  ·gc.alloc.rate:            1223.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68434.885 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 23367.895 ops/s
[info]                  ·gc.alloc.rate:                                  1217.062 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81984.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91707.216 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   23256.132 ±(99.9%) 909.750 ops/s [Average]
[info]   (min, avg, max) = (22873.513, 23256.132, 23484.703), stdev = 236.259
[info]   CI (99.9%): [22346.381, 24165.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1211.456 ±(99.9%) 47.827 MB/sec [Average]
[info]   (min, avg, max) = (1191.339, 1211.456, 1223.723), stdev = 12.421
[info]   CI (99.9%): [1163.629, 1259.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81983.888 ±(99.9%) 1.186 B/op [Average]
[info]   (min, avg, max) = (81983.338, 81983.888, 81984.043), stdev = 0.308
[info]   CI (99.9%): [81982.702, 81985.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.120), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.627 ±(99.9%) 13.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.627, 8.066), stdev = 3.600
[info]   CI (99.9%): [≈ 0, 15.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1220.728 ±(99.9%) 718.663 MB/sec [Average]
[info]   (min, avg, max) = (1011.328, 1220.728, 1361.454), stdev = 186.635
[info]   CI (99.9%): [502.064, 1939.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   82651.926 ±(99.9%) 49731.202 B/op [Average]
[info]   (min, avg, max) = (68434.885, 82651.926, 92762.700), stdev = 12915.035
[info]   CI (99.9%): [32920.724, 132383.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   45.184 ±(99.9%) 389.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.184, 225.918), stdev = 101.034
[info]   CI (99.9%): [≈ 0, 434.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 13.000), stdev = 4.506
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:42:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14396.672 ops/s
[info] # Warmup Iteration   2: 25454.866 ops/s
[info] # Warmup Iteration   3: 26238.013 ops/s
[info] Iteration   1: 26097.580 ops/s
[info]                  ·gc.alloc.rate:            1022.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60858.623 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 26266.477 ops/s
[info]                  ·gc.alloc.rate:            1028.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       61649.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60469.439 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 26535.313 ops/s
[info]                  ·gc.alloc.rate:                                  1039.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             61648.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.088 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.197 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60054.089 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                276.565 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 26792.969 ops/s
[info]                  ·gc.alloc.rate:                                  1049.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             61648.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79979.452 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 26275.197 ops/s
[info]                  ·gc.alloc.rate:                                  1029.053 MB/sec
[info]                  ·gc.alloc.rate.norm:                             61648.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61169.261 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   26393.507 ±(99.9%) 1049.937 ops/s [Average]
[info]   (min, avg, max) = (26097.580, 26393.507, 26792.969), stdev = 272.665
[info]   CI (99.9%): [25343.571, 27443.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1033.856 ±(99.9%) 41.940 MB/sec [Average]
[info]   (min, avg, max) = (1022.045, 1033.856, 1049.688), stdev = 10.892
[info]   CI (99.9%): [991.916, 1075.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61648.225 ±(99.9%) 1.799 B/op [Average]
[info]   (min, avg, max) = (61648.015, 61648.225, 61649.061), stdev = 0.467
[info]   CI (99.9%): [61646.425, 61650.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.088), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.522 ±(99.9%) 8.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.522, 5.197), stdev = 2.298
[info]   CI (99.9%): [≈ 0, 10.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.753 ±(99.9%) 601.013 MB/sec [Average]
[info]   (min, avg, max) = (1008.957, 1082.753, 1361.820), stdev = 156.081
[info]   CI (99.9%): [481.740, 1683.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   64506.173 ±(99.9%) 33346.344 B/op [Average]
[info]   (min, avg, max) = (60054.089, 64506.173, 79979.452), stdev = 8659.940
[info]   CI (99.9%): [31159.828, 97852.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.665), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   55.313 ±(99.9%) 476.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.313, 276.565), stdev = 123.684
[info]   CI (99.9%): [≈ 0, 531.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 13.000), stdev = 5.148
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:42:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 438893.281 ops/s
[info] # Warmup Iteration   2: 463394.778 ops/s
[info] # Warmup Iteration   3: 476789.733 ops/s
[info] Iteration   1: 474755.057 ops/s
[info]                  ·gc.alloc.rate:            1235.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4469.392 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 470064.190 ops/s
[info]                  ·gc.alloc.rate:                                  1223.088 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.325 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4536.693 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                11.152 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 479660.451 ops/s
[info]                  ·gc.alloc.rate:                                  1248.091 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3350.726 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 476610.197 ops/s
[info]                  ·gc.alloc.rate:                                  1240.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4496.474 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 478462.632 ops/s
[info]                  ·gc.alloc.rate:            1245.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4478.847 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   475910.505 ±(99.9%) 14482.143 ops/s [Average]
[info]   (min, avg, max) = (470064.190, 475910.505, 479660.451), stdev = 3760.967
[info]   CI (99.9%): [461428.362, 490392.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1238.467 ±(99.9%) 37.884 MB/sec [Average]
[info]   (min, avg, max) = (1223.088, 1238.467, 1248.091), stdev = 9.838
[info]   CI (99.9%): [1200.582, 1276.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.325), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1289.426 ±(99.9%) 578.229 MB/sec [Average]
[info]   (min, avg, max) = (1020.999, 1289.426, 1362.016), stdev = 150.164
[info]   CI (99.9%): [711.198, 1867.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4266.426 ±(99.9%) 1973.611 B/op [Average]
[info]   (min, avg, max) = (3350.726, 4266.426, 4536.693), stdev = 512.541
[info]   CI (99.9%): [2292.815, 6240.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.230 ±(99.9%) 19.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.230, 11.152), stdev = 4.987
[info]   CI (99.9%): [≈ 0, 21.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 11.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:42:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8594.449 ops/s
[info] # Warmup Iteration   2: 20532.085 ops/s
[info] # Warmup Iteration   3: 20404.684 ops/s
[info] Iteration   1: 20896.978 ops/s
[info]                  ·gc.alloc.rate:                   1588.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              119672.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1683.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        126832.542 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 351.198 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 21268.460 ops/s
[info]                  ·gc.alloc.rate:                                  1617.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119672.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.693 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100756.363 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 21001.519 ops/s
[info]                  ·gc.alloc.rate:                                  1596.747 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119672.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.328 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       127540.307 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 21288.819 ops/s
[info]                  ·gc.alloc.rate:                                  1618.457 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119672.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       125821.241 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 21306.126 ops/s
[info]                  ·gc.alloc.rate:                                  1619.812 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119672.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100571.974 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   21152.381 ±(99.9%) 729.890 ops/s [Average]
[info]   (min, avg, max) = (20896.978, 21152.381, 21306.126), stdev = 189.550
[info]   CI (99.9%): [20422.491, 21882.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1608.203 ±(99.9%) 55.577 MB/sec [Average]
[info]   (min, avg, max) = (1588.716, 1608.203, 1619.812), stdev = 14.433
[info]   CI (99.9%): [1552.625, 1663.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119672.021 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (119672.019, 119672.021, 119672.024), stdev = 0.002
[info]   CI (99.9%): [119672.013, 119672.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.023), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.488 ±(99.9%) 2.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.488, 1.693), stdev = 0.685
[info]   CI (99.9%): [≈ 0, 3.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1562.012 ±(99.9%) 705.506 MB/sec [Average]
[info]   (min, avg, max) = (1361.284, 1562.012, 1701.732), stdev = 183.218
[info]   CI (99.9%): [856.506, 2267.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   116304.485 ±(99.9%) 55028.798 B/op [Average]
[info]   (min, avg, max) = (100571.974, 116304.485, 127540.307), stdev = 14290.804
[info]   CI (99.9%): [61275.688, 171333.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   70.240 ±(99.9%) 604.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 70.240, 351.198), stdev = 157.060
[info]   CI (99.9%): [≈ 0, 675.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 19.000), stdev = 6.834
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:42:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47246.729 ops/s
[info] # Warmup Iteration   2: 67944.254 ops/s
[info] # Warmup Iteration   3: 66724.042 ops/s
[info] Iteration   1: 68998.682 ops/s
[info]                  ·gc.alloc.rate:            1460.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30753.772 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 69393.548 ops/s
[info]                  ·gc.alloc.rate:                                  1468.497 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33312.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.128 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.904 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38524.483 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                75.538 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 68417.043 ops/s
[info]                  ·gc.alloc.rate:            1447.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31320.902 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 69042.057 ops/s
[info]                  ·gc.alloc.rate:                                  1461.714 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33312.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31037.424 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 69413.800 ops/s
[info]                  ·gc.alloc.rate:            1469.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.934 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38588.346 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   69053.026 ±(99.9%) 1556.609 ops/s [Average]
[info]   (min, avg, max) = (68417.043, 69053.026, 69413.800), stdev = 404.247
[info]   CI (99.9%): [67496.416, 70609.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1461.632 ±(99.9%) 33.033 MB/sec [Average]
[info]   (min, avg, max) = (1447.884, 1461.632, 1469.222), stdev = 8.578
[info]   CI (99.9%): [1428.600, 1494.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312.006 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (33312.006, 33312.006, 33312.007), stdev = 0.001
[info]   CI (99.9%): [33312.005, 33312.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.587 ±(99.9%) 4.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.904), stdev = 1.295
[info]   CI (99.9%): [≈ 0, 5.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.424 ±(99.9%) 723.308 MB/sec [Average]
[info]   (min, avg, max) = (1348.658, 1494.424, 1701.934), stdev = 187.841
[info]   CI (99.9%): [771.116, 2217.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34044.986 ±(99.9%) 15877.331 B/op [Average]
[info]   (min, avg, max) = (30753.772, 34044.986, 38588.346), stdev = 4123.292
[info]   CI (99.9%): [18167.655, 49922.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.108 ±(99.9%) 130.081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.108, 75.538), stdev = 33.782
[info]   CI (99.9%): [≈ 0, 145.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.658
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:41:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80032.070 ops/s
[info] # Warmup Iteration   2: 120909.011 ops/s
[info] # Warmup Iteration   3: 120322.414 ops/s
[info] Iteration   1: 120238.563 ops/s
[info]                  ·gc.alloc.rate:            1145.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       15000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13209.761 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 120921.906 ops/s
[info]                  ·gc.alloc.rate:                   1152.476 MB/sec
[info]                  ·gc.alloc.rate.norm:              15000.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13135.161 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.020 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 122113.983 ops/s
[info]                  ·gc.alloc.rate:                                  1163.975 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.189 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.431 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17547.952 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 121401.285 ops/s
[info]                  ·gc.alloc.rate:            1156.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       15000.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13238.462 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 120583.453 ops/s
[info]                  ·gc.alloc.rate:            1149.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       15000.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17770.854 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   121051.838 ±(99.9%) 2821.729 ops/s [Average]
[info]   (min, avg, max) = (120238.563, 121051.838, 122113.983), stdev = 732.794
[info]   CI (99.9%): [118230.109, 123873.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1153.608 ±(99.9%) 27.447 MB/sec [Average]
[info]   (min, avg, max) = (1145.646, 1153.608, 1163.975), stdev = 7.128
[info]   CI (99.9%): [1126.161, 1181.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15000.003, 15000.003, 15000.004), stdev = 0.001
[info]   CI (99.9%): [15000.003, 15000.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.325 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.189), stdev = 0.084
[info]   CI (99.9%): [≈ 0, 0.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.486 ±(99.9%) 4.187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.486, 2.431), stdev = 1.087
[info]   CI (99.9%): [≈ 0, 4.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1152.430 ±(99.9%) 735.213 MB/sec [Average]
[info]   (min, avg, max) = (1008.913, 1152.430, 1361.691), stdev = 190.933
[info]   CI (99.9%): [417.216, 1887.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14980.438 ±(99.9%) 9422.946 B/op [Average]
[info]   (min, avg, max) = (13135.161, 14980.438, 17770.854), stdev = 2447.109
[info]   CI (99.9%): [5557.492, 24403.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.404 ±(99.9%) 89.582 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.404, 52.020), stdev = 23.264
[info]   CI (99.9%): [≈ 0, 99.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 13.000), stdev = 5.215
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:41:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1575132.577 ops/s
[info] # Warmup Iteration   2: 1744975.148 ops/s
[info] # Warmup Iteration   3: 1761189.160 ops/s
[info] Iteration   1: 1745023.114 ops/s
[info]                  ·gc.alloc.rate:                   1445.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1214.778 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.605 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1762495.031 ops/s
[info]                  ·gc.alloc.rate:                                  1460.100 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.141 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.783 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1519.845 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1762274.156 ops/s
[info]                  ·gc.alloc.rate:                                  1460.412 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1216.015 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 1757548.002 ops/s
[info]                  ·gc.alloc.rate:                                  1456.059 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1219.288 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1755553.831 ops/s
[info]                  ·gc.alloc.rate:            1454.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1525.802 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1756578.827 ±(99.9%) 27429.092 ops/s [Average]
[info]   (min, avg, max) = (1745023.114, 1756578.827, 1762495.031), stdev = 7123.248
[info]   CI (99.9%): [1729149.735, 1784007.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1455.337 ±(99.9%) 23.051 MB/sec [Average]
[info]   (min, avg, max) = (1445.663, 1455.337, 1460.412), stdev = 5.986
[info]   CI (99.9%): [1432.286, 1478.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.141), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.215 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.126), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.743 ±(99.9%) 728.258 MB/sec [Average]
[info]   (min, avg, max) = (1346.747, 1494.743, 1701.842), stdev = 189.126
[info]   CI (99.9%): [766.485, 2223.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1339.145 ±(99.9%) 645.737 B/op [Average]
[info]   (min, avg, max) = (1214.778, 1339.145, 1525.802), stdev = 167.696
[info]   CI (99.9%): [693.409, 1984.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.721 ±(99.9%) 6.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.721, 3.605), stdev = 1.612
[info]   CI (99.9%): [≈ 0, 6.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 12.000), stdev = 3.962
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:41:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1690390.800 ops/s
[info] # Warmup Iteration   2: 1968373.521 ops/s
[info] # Warmup Iteration   3: 1969218.436 ops/s
[info] Iteration   1: 1967475.179 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1969130.725 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1969209.634 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1968417.509 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1969235.849 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1968693.779 ±(99.9%) 2927.617 ops/s [Average]
[info]   (min, avg, max) = (1967475.179, 1968693.779, 1969235.849), stdev = 760.293
[info]   CI (99.9%): [1965766.162, 1971621.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:41:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66767.632 ops/s
[info] # Warmup Iteration   2: 117745.796 ops/s
[info] # Warmup Iteration   3: 118599.177 ops/s
[info] Iteration   1: 118567.821 ops/s
[info]                  ·gc.alloc.rate:            1335.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       17728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17861.347 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 119564.787 ops/s
[info]                  ·gc.alloc.rate:                                  1346.779 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17728.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.765 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17870.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                52.611 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 119675.034 ops/s
[info]                  ·gc.alloc.rate:                                  1348.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17728.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.624 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17906.705 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 120621.245 ops/s
[info]                  ·gc.alloc.rate:            1358.619 MB/sec
[info]                  ·gc.alloc.rate.norm:       17728.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17766.287 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 120643.160 ops/s
[info]                  ·gc.alloc.rate:                                  1359.020 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17728.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17763.048 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   119814.409 ±(99.9%) 3320.011 ops/s [Average]
[info]   (min, avg, max) = (118567.821, 119814.409, 120643.160), stdev = 862.196
[info]   CI (99.9%): [116494.398, 123134.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1349.557 ±(99.9%) 37.734 MB/sec [Average]
[info]   (min, avg, max) = (1335.330, 1349.557, 1359.020), stdev = 9.799
[info]   CI (99.9%): [1311.823, 1387.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17728.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17728.003, 17728.004, 17728.004), stdev = 0.001
[info]   CI (99.9%): [17728.003, 17728.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.134), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.360 ±(99.9%) 3.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.360, 1.765), stdev = 0.785
[info]   CI (99.9%): [≈ 0, 3.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.567 ±(99.9%) 27.103 MB/sec [Average]
[info]   (min, avg, max) = (1345.374, 1357.567, 1361.707), stdev = 7.038
[info]   CI (99.9%): [1330.464, 1384.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   17833.501 ±(99.9%) 250.708 B/op [Average]
[info]   (min, avg, max) = (17763.048, 17833.501, 17906.705), stdev = 65.108
[info]   CI (99.9%): [17582.792, 18084.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   10.522 ±(99.9%) 90.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.522, 52.611), stdev = 23.528
[info]   CI (99.9%): [≈ 0, 101.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.958
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:40:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18030.913 ops/s
[info] # Warmup Iteration   2: 32737.279 ops/s
[info] # Warmup Iteration   3: 33110.364 ops/s
[info] Iteration   1: 32657.223 ops/s
[info]                  ·gc.alloc.rate:            1172.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.853 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64847.795 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 33113.764 ops/s
[info]                  ·gc.alloc.rate:                                  1189.091 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56528.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64142.964 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                189.959 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 33649.507 ops/s
[info]                  ·gc.alloc.rate:                                  1208.577 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56528.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.484 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47763.096 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 32769.620 ops/s
[info]                  ·gc.alloc.rate:            1176.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65392.035 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 33609.962 ops/s
[info]                  ·gc.alloc.rate:            1207.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47817.087 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   33160.015 ±(99.9%) 1774.435 ops/s [Average]
[info]   (min, avg, max) = (32657.223, 33160.015, 33649.507), stdev = 460.815
[info]   CI (99.9%): [31385.580, 34934.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1190.860 ±(99.9%) 64.046 MB/sec [Average]
[info]   (min, avg, max) = (1172.655, 1190.860, 1208.577), stdev = 16.632
[info]   CI (99.9%): [1126.815, 1254.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56528.181 ±(99.9%) 1.448 B/op [Average]
[info]   (min, avg, max) = (56528.012, 56528.181, 56528.853), stdev = 0.376
[info]   CI (99.9%): [56526.733, 56529.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.071), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.173 ±(99.9%) 6.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.173, 3.382), stdev = 1.637
[info]   CI (99.9%): [≈ 0, 7.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.639 ±(99.9%) 698.179 MB/sec [Average]
[info]   (min, avg, max) = (1021.071, 1219.639, 1361.443), stdev = 181.315
[info]   CI (99.9%): [521.460, 1917.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   57992.595 ±(99.9%) 35903.829 B/op [Average]
[info]   (min, avg, max) = (47763.096, 57992.595, 65392.035), stdev = 9324.110
[info]   CI (99.9%): [22088.767, 93896.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   37.992 ±(99.9%) 327.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.992, 189.959), stdev = 84.952
[info]   CI (99.9%): [≈ 0, 365.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 16.000), stdev = 6.804
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:40:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 605255.486 ops/s
[info] # Warmup Iteration   2: 644163.983 ops/s
[info] # Warmup Iteration   3: 663640.843 ops/s
[info] Iteration   1: 653181.569 ops/s
[info]                  ·gc.alloc.rate:            1274.726 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2436.432 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 664083.314 ops/s
[info]                  ·gc.alloc.rate:                                  1295.841 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.149 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3211.140 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.894 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 666343.691 ops/s
[info]                  ·gc.alloc.rate:                                  1300.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3215.892 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 667362.622 ops/s
[info]                  ·gc.alloc.rate:                                  1302.498 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3211.084 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 664240.123 ops/s
[info]                  ·gc.alloc.rate:                                  1296.675 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3226.164 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   663042.264 ±(99.9%) 21894.295 ops/s [Average]
[info]   (min, avg, max) = (653181.569, 663042.264, 667362.622), stdev = 5685.879
[info]   CI (99.9%): [641147.969, 684936.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1294.041 ±(99.9%) 42.880 MB/sec [Average]
[info]   (min, avg, max) = (1274.726, 1294.041, 1302.498), stdev = 11.136
[info]   CI (99.9%): [1251.161, 1336.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3072.001, 3072.001, 3072.001), stdev = 0.001
[info]   CI (99.9%): [3072.001, 3072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.253 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.149), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.076 ±(99.9%) 0.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.076, 0.354), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 0.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1290.025 ±(99.9%) 600.741 MB/sec [Average]
[info]   (min, avg, max) = (1010.997, 1290.025, 1361.747), stdev = 156.011
[info]   CI (99.9%): [689.284, 1890.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3060.143 ±(99.9%) 1342.792 B/op [Average]
[info]   (min, avg, max) = (2436.432, 3060.143, 3226.164), stdev = 348.719
[info]   CI (99.9%): [1717.351, 4402.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.579 ±(99.9%) 13.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.579, 7.894), stdev = 3.530
[info]   CI (99.9%): [≈ 0, 15.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:40:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9475.772 ops/s
[info] # Warmup Iteration   2: 24281.561 ops/s
[info] # Warmup Iteration   3: 24378.954 ops/s
[info] Iteration   1: 24258.486 ops/s
[info]                  ·gc.alloc.rate:                                  1765.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114576.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.491 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109598.514 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                302.520 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 24735.030 ops/s
[info]                  ·gc.alloc.rate:                                  1800.406 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114576.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.463 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       129948.828 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 24284.850 ops/s
[info]                  ·gc.alloc.rate:                                  1767.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114576.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       110296.899 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 24913.373 ops/s
[info]                  ·gc.alloc.rate:                                  1813.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114576.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107521.438 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 24701.520 ops/s
[info]                  ·gc.alloc.rate:                                  1798.562 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114576.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       130122.395 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   24578.652 ±(99.9%) 1123.330 ops/s [Average]
[info]   (min, avg, max) = (24258.486, 24578.652, 24913.373), stdev = 291.725
[info]   CI (99.9%): [23455.322, 25701.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1789.261 ±(99.9%) 82.555 MB/sec [Average]
[info]   (min, avg, max) = (1765.624, 1789.261, 1813.923), stdev = 21.439
[info]   CI (99.9%): [1706.707, 1871.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114576.018 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (114576.016, 114576.018, 114576.021), stdev = 0.002
[info]   CI (99.9%): [114576.011, 114576.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.237 ±(99.9%) 0.844 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.237, 0.491), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 1.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1835.500 ±(99.9%) 727.173 MB/sec [Average]
[info]   (min, avg, max) = (1688.920, 1835.500, 2042.602), stdev = 188.845
[info]   CI (99.9%): [1108.326, 2562.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   117497.615 ±(99.9%) 44248.406 B/op [Average]
[info]   (min, avg, max) = (107521.438, 117497.615, 130122.395), stdev = 11491.171
[info]   CI (99.9%): [73249.209, 161746.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   60.504 ±(99.9%) 520.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.504, 302.520), stdev = 135.291
[info]   CI (99.9%): [≈ 0, 581.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 16.000), stdev = 5.167
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235413.133 ops/s
[info] # Warmup Iteration   2: 343497.937 ops/s
[info] # Warmup Iteration   3: 345532.543 ops/s
[info] Iteration   1: 346888.599 ops/s
[info]                  ·gc.alloc.rate:            964.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4578.710 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 345781.418 ops/s
[info]                  ·gc.alloc.rate:                   961.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4590.361 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 346740.967 ops/s
[info]                  ·gc.alloc.rate:                                  963.940 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4376.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.485 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4598.885 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.142 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 351530.644 ops/s
[info]                  ·gc.alloc.rate:                                  977.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4376.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4572.149 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 350675.751 ops/s
[info]                  ·gc.alloc.rate:            974.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4583.151 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   348323.476 ±(99.9%) 9975.396 ops/s [Average]
[info]   (min, avg, max) = (345781.418, 348323.476, 351530.644), stdev = 2590.579
[info]   CI (99.9%): [338348.080, 358298.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   968.434 ±(99.9%) 27.288 MB/sec [Average]
[info]   (min, avg, max) = (961.653, 968.434, 977.221), stdev = 7.087
[info]   CI (99.9%): [941.146, 995.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4376.001, 4376.001), stdev = 0.001
[info]   CI (99.9%): [4376.001, 4376.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.148 ±(99.9%) 0.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.148, 0.485), stdev = 0.219
[info]   CI (99.9%): [≈ 0, 0.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.600 ±(99.9%) 23.511 MB/sec [Average]
[info]   (min, avg, max) = (1008.760, 1014.600, 1021.041), stdev = 6.106
[info]   CI (99.9%): [991.089, 1038.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4584.651 ±(99.9%) 39.880 B/op [Average]
[info]   (min, avg, max) = (4572.149, 4584.651, 4598.885), stdev = 10.357
[info]   CI (99.9%): [4544.771, 4624.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.235 ±(99.9%) 30.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.235, 18.142), stdev = 7.884
[info]   CI (99.9%): [≈ 0, 34.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 12.000), stdev = 4.827
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:40:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1922708.123 ops/s
[info] # Warmup Iteration   2: 2185148.740 ops/s
[info] # Warmup Iteration   3: 2224373.414 ops/s
[info] Iteration   1: 2222849.686 ops/s
[info]                  ·gc.alloc.rate:            1299.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 714.528 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2212090.203 ops/s
[info]                  ·gc.alloc.rate:                                  1292.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       963.529 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.844 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 2216420.565 ops/s
[info]                  ·gc.alloc.rate:                                  1295.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       966.854 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2219442.358 ops/s
[info]                  ·gc.alloc.rate:                                  1297.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       965.508 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2185273.008 ops/s
[info]                  ·gc.alloc.rate:            1277.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 980.633 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   2211215.164 ±(99.9%) 57884.868 ops/s [Average]
[info]   (min, avg, max) = (2185273.008, 2211215.164, 2222849.686), stdev = 15032.516
[info]   CI (99.9%): [2153330.296, 2269100.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1292.422 ±(99.9%) 33.291 MB/sec [Average]
[info]   (min, avg, max) = (1277.530, 1292.422, 1299.078), stdev = 8.646
[info]   CI (99.9%): [1259.132, 1325.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.118), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.084), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1289.497 ±(99.9%) 604.047 MB/sec [Average]
[info]   (min, avg, max) = (1008.942, 1289.497, 1361.725), stdev = 156.869
[info]   CI (99.9%): [685.450, 1893.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   918.210 ±(99.9%) 439.211 B/op [Average]
[info]   (min, avg, max) = (714.528, 918.210, 980.633), stdev = 114.062
[info]   CI (99.9%): [479.000, 1357.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.569 ±(99.9%) 4.897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.569, 2.844), stdev = 1.272
[info]   CI (99.9%): [≈ 0, 5.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 3.033
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:39:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2029405.324 ops/s
[info] # Warmup Iteration   2: 2250012.128 ops/s
[info] # Warmup Iteration   3: 2231336.400 ops/s
[info] Iteration   1: 2237627.432 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2238285.938 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2239349.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2239769.430 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2239236.885 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2238853.772 ±(99.9%) 3366.273 ops/s [Average]
[info]   (min, avg, max) = (2237627.432, 2238853.772, 2239769.430), stdev = 874.210
[info]   CI (99.9%): [2235487.499, 2242220.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:39:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126679.400 ops/s
[info] # Warmup Iteration   2: 221587.168 ops/s
[info] # Warmup Iteration   3: 221853.416 ops/s
[info] Iteration   1: 221721.445 ops/s
[info]                  ·gc.alloc.rate:                   1433.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9551.509 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.371 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 224557.911 ops/s
[info]                  ·gc.alloc.rate:                                  1452.158 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.152 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9543.120 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 223645.842 ops/s
[info]                  ·gc.alloc.rate:                                  1446.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9581.944 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 224793.822 ops/s
[info]                  ·gc.alloc.rate:                                  1453.307 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.877 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11916.484 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 225324.021 ops/s
[info]                  ·gc.alloc.rate:            1456.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9510.725 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   224008.608 ±(99.9%) 5449.483 ops/s [Average]
[info]   (min, avg, max) = (221721.445, 224008.608, 225324.021), stdev = 1415.214
[info]   CI (99.9%): [218559.125, 229458.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1448.522 ±(99.9%) 34.933 MB/sec [Average]
[info]   (min, avg, max) = (1433.741, 1448.522, 1456.917), stdev = 9.072
[info]   CI (99.9%): [1413.588, 1483.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10176.002, 10176.002, 10176.002), stdev = 0.001
[info]   CI (99.9%): [10176.002, 10176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.256 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.152), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.232 ±(99.9%) 1.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.232, 1.063), stdev = 0.466
[info]   CI (99.9%): [≈ 0, 2.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1426.637 ±(99.9%) 593.083 MB/sec [Average]
[info]   (min, avg, max) = (1345.753, 1426.637, 1701.877), stdev = 154.022
[info]   CI (99.9%): [833.554, 2019.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10020.757 ±(99.9%) 4081.865 B/op [Average]
[info]   (min, avg, max) = (9510.725, 10020.757, 11916.484), stdev = 1060.047
[info]   CI (99.9%): [5938.891, 14102.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.674 ±(99.9%) 48.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.674, 28.371), stdev = 12.688
[info]   CI (99.9%): [≈ 0, 54.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 17.000), stdev = 5.941
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:39:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49045.423 ops/s
[info] # Warmup Iteration   2: 73511.512 ops/s
[info] # Warmup Iteration   3: 75418.313 ops/s
[info] Iteration   1: 76029.554 ops/s
[info]                  ·gc.alloc.rate:            1428.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       29576.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27854.653 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 75319.740 ops/s
[info]                  ·gc.alloc.rate:                                  1415.202 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.795 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28368.484 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                83.519 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 76466.193 ops/s
[info]                  ·gc.alloc.rate:                                  1437.034 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29576.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.340 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28024.547 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 75353.732 ops/s
[info]                  ·gc.alloc.rate:                                  1416.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28436.525 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 76409.770 ops/s
[info]                  ·gc.alloc.rate:                                  1435.684 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35055.436 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   75915.798 ±(99.9%) 2136.229 ops/s [Average]
[info]   (min, avg, max) = (75319.740, 75915.798, 76466.193), stdev = 554.772
[info]   CI (99.9%): [73779.569, 78052.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1426.567 ±(99.9%) 39.827 MB/sec [Average]
[info]   (min, avg, max) = (1415.202, 1426.567, 1437.034), stdev = 10.343
[info]   CI (99.9%): [1386.740, 1466.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29576.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29576.005, 29576.006, 29576.006), stdev = 0.001
[info]   CI (99.9%): [29576.005, 29576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.140 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.086), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.457 ±(99.9%) 2.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 1.795), stdev = 0.759
[info]   CI (99.9%): [≈ 0, 3.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1425.589 ±(99.9%) 594.842 MB/sec [Average]
[info]   (min, avg, max) = (1345.332, 1425.589, 1701.667), stdev = 154.479
[info]   CI (99.9%): [830.747, 2020.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   29547.929 ±(99.9%) 11891.387 B/op [Average]
[info]   (min, avg, max) = (27854.653, 29547.929, 35055.436), stdev = 3088.155
[info]   CI (99.9%): [17656.542, 41439.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   16.704 ±(99.9%) 143.824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.704, 83.519), stdev = 37.351
[info]   CI (99.9%): [≈ 0, 160.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.494
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:39:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40421.173 ops/s
[info] # Warmup Iteration   2: 76568.507 ops/s
[info] # Warmup Iteration   3: 78045.173 ops/s
[info] Iteration   1: 77983.338 ops/s
[info]                  ·gc.alloc.rate:            899.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.211 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20327.546 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 76973.420 ops/s
[info]                  ·gc.alloc.rate:            887.185 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20594.767 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 77697.887 ops/s
[info]                  ·gc.alloc.rate:            895.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13601.573 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 78028.356 ops/s
[info]                  ·gc.alloc.rate:                                  899.574 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.561 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20503.671 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                94.054 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 78360.218 ops/s
[info]                  ·gc.alloc.rate:                                  903.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20509.946 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   77808.644 ±(99.9%) 2012.759 ops/s [Average]
[info]   (min, avg, max) = (76973.420, 77808.644, 78360.218), stdev = 522.707
[info]   CI (99.9%): [75795.885, 79821.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   896.915 ±(99.9%) 23.410 MB/sec [Average]
[info]   (min, avg, max) = (887.185, 896.915, 903.230), stdev = 6.080
[info]   CI (99.9%): [873.505, 920.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18144.005, 18144.005, 18144.006), stdev = 0.001
[info]   CI (99.9%): [18144.005, 18144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.426 ±(99.9%) 2.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.426, 1.561), stdev = 0.681
[info]   CI (99.9%): [≈ 0, 3.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   944.633 ±(99.9%) 588.701 MB/sec [Average]
[info]   (min, avg, max) = (671.360, 944.633, 1021.009), stdev = 152.884
[info]   CI (99.9%): [355.932, 1533.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19107.500 ±(99.9%) 11857.835 B/op [Average]
[info]   (min, avg, max) = (13601.573, 19107.500, 20594.767), stdev = 3079.442
[info]   CI (99.9%): [7249.665, 30965.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.811 ±(99.9%) 161.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.811, 94.054), stdev = 42.062
[info]   CI (99.9%): [≈ 0, 180.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 13.000), stdev = 4.393
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:39:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80102.452 ops/s
[info] # Warmup Iteration   2: 101125.056 ops/s
[info] # Warmup Iteration   3: 100838.074 ops/s
[info] Iteration   1: 97094.670 ops/s
[info]                  ·gc.alloc.rate:            1022.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16358.187 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 100087.157 ops/s
[info]                  ·gc.alloc.rate:            1053.931 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21158.807 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 100672.921 ops/s
[info]                  ·gc.alloc.rate:                                  1060.120 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.819 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15902.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                62.484 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 100961.464 ops/s
[info]                  ·gc.alloc.rate:                                  1063.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.377 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15918.982 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 100422.098 ops/s
[info]                  ·gc.alloc.rate:                                  1057.632 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16576.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16003.933 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   99847.662 ±(99.9%) 6054.183 ops/s [Average]
[info]   (min, avg, max) = (97094.670, 99847.662, 100961.464), stdev = 1572.252
[info]   CI (99.9%): [93793.479, 105901.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1051.449 ±(99.9%) 63.946 MB/sec [Average]
[info]   (min, avg, max) = (1022.369, 1051.449, 1063.191), stdev = 16.606
[info]   CI (99.9%): [987.503, 1115.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.005), stdev = 0.001
[info]   CI (99.9%): [16576.003, 16576.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.116), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.451 ±(99.9%) 3.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.451, 1.819), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 3.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1082.691 ±(99.9%) 565.638 MB/sec [Average]
[info]   (min, avg, max) = (1008.935, 1082.691, 1345.314), stdev = 146.894
[info]   CI (99.9%): [517.053, 1648.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   17068.420 ±(99.9%) 8833.458 B/op [Average]
[info]   (min, avg, max) = (15902.189, 17068.420, 21158.807), stdev = 2294.021
[info]   CI (99.9%): [8234.962, 25901.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.497 ±(99.9%) 107.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.497, 62.484), stdev = 27.944
[info]   CI (99.9%): [≈ 0, 120.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 4.382
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:38:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19150.420 ops/s
[info] # Warmup Iteration   2: 41894.134 ops/s
[info] # Warmup Iteration   3: 41262.803 ops/s
[info] Iteration   1: 42336.393 ops/s
[info]                  ·gc.alloc.rate:                                  1975.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73448.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.994 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75749.061 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                173.339 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 43115.851 ops/s
[info]                  ·gc.alloc.rate:                                  2011.881 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73448.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.175 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74552.652 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 43171.439 ops/s
[info]                  ·gc.alloc.rate:                                  2014.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73448.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62045.199 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 42849.659 ops/s
[info]                  ·gc.alloc.rate:                                  1999.359 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73448.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.289 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75017.127 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 42988.952 ops/s
[info]                  ·gc.alloc.rate:                                  2006.332 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73448.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74774.602 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   42892.459 ±(99.9%) 1288.795 ops/s [Average]
[info]   (min, avg, max) = (42336.393, 42892.459, 43171.439), stdev = 334.696
[info]   CI (99.9%): [41603.664, 44181.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2001.495 ±(99.9%) 60.617 MB/sec [Average]
[info]   (min, avg, max) = (1975.332, 2001.495, 2014.569), stdev = 15.742
[info]   CI (99.9%): [1940.877, 2062.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73448.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (73448.009, 73448.010, 73448.010), stdev = 0.001
[info]   CI (99.9%): [73448.008, 73448.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.026, 0.107), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.974 ±(99.9%) 6.514 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.974, 3.994), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 7.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1973.161 ±(99.9%) 584.171 MB/sec [Average]
[info]   (min, avg, max) = (1701.807, 1973.161, 2042.569), stdev = 151.707
[info]   CI (99.9%): [1388.990, 2557.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72427.728 ±(99.9%) 22416.261 B/op [Average]
[info]   (min, avg, max) = (62045.199, 72427.728, 75749.061), stdev = 5821.432
[info]   CI (99.9%): [50011.467, 94843.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   34.668 ±(99.9%) 298.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.668, 173.339), stdev = 77.519
[info]   CI (99.9%): [≈ 0, 333.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:38:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90516.006 ops/s
[info] # Warmup Iteration   2: 127062.558 ops/s
[info] # Warmup Iteration   3: 129724.676 ops/s
[info] Iteration   1: 131088.754 ops/s
[info]                  ·gc.alloc.rate:            581.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8077.843 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 130426.322 ops/s
[info]                  ·gc.alloc.rate:                   578.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8110.923 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.039 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 129268.032 ops/s
[info]                  ·gc.alloc.rate:            573.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4095.810 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 129278.966 ops/s
[info]                  ·gc.alloc.rate:                   573.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8182.876 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 128998.448 ops/s
[info]                  ·gc.alloc.rate:                   572.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8200.381 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.127 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   129812.104 ±(99.9%) 3470.596 ops/s [Average]
[info]   (min, avg, max) = (128998.448, 129812.104, 131088.754), stdev = 901.303
[info]   CI (99.9%): [126341.508, 133282.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   575.993 ±(99.9%) 15.142 MB/sec [Average]
[info]   (min, avg, max) = (572.376, 575.993, 581.564), stdev = 3.932
[info]   CI (99.9%): [560.852, 591.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6984.003, 6984.003, 6984.003), stdev = 0.001
[info]   CI (99.9%): [6984.003, 6984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   605.060 ±(99.9%) 578.131 MB/sec [Average]
[info]   (min, avg, max) = (336.484, 605.060, 672.649), stdev = 150.139
[info]   CI (99.9%): [26.929, 1183.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7333.567 ±(99.9%) 6972.216 B/op [Average]
[info]   (min, avg, max) = (4095.810, 7333.567, 8200.381), stdev = 1810.662
[info]   CI (99.9%): [361.350, 14305.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.855 ±(99.9%) 17.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.855, 8.127), stdev = 4.432
[info]   CI (99.9%): [≈ 0, 21.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:38:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120948.692 ops/s
[info] # Warmup Iteration   2: 175763.579 ops/s
[info] # Warmup Iteration   3: 174892.143 ops/s
[info] Iteration   1: 174990.514 ops/s
[info]                  ·gc.alloc.rate:      259.663 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 173895.602 ops/s
[info]                  ·gc.alloc.rate:            258.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3038.564 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 174254.427 ops/s
[info]                  ·gc.alloc.rate:            258.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3032.253 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 175915.509 ops/s
[info]                  ·gc.alloc.rate:            261.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3003.679 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 177727.043 ops/s
[info]                  ·gc.alloc.rate:      263.751 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   175356.619 ±(99.9%) 5907.538 ops/s [Average]
[info]   (min, avg, max) = (173895.602, 175356.619, 177727.043), stdev = 1534.169
[info]   CI (99.9%): [169449.081, 181264.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   260.221 ±(99.9%) 8.806 MB/sec [Average]
[info]   (min, avg, max) = (258.034, 260.221, 263.751), stdev = 2.287
[info]   CI (99.9%): [251.415, 269.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.002, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.398 ±(99.9%) 707.943 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.398, 335.685), stdev = 183.850
[info]   CI (99.9%): [≈ 0, 909.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1814.899 ±(99.9%) 6379.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1814.899, 3038.564), stdev = 1656.821
[info]   CI (99.9%): [≈ 0, 8194.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:38:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 651771.472 ops/s
[info] # Warmup Iteration   2: 734543.134 ops/s
[info] # Warmup Iteration   3: 740821.682 ops/s
[info] Iteration   1: 741718.399 ops/s
[info]                  ·gc.alloc.rate:            919.714 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2141.379 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 742313.487 ops/s
[info]                  ·gc.alloc.rate:            920.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2139.718 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 735592.035 ops/s
[info]                  ·gc.alloc.rate:                   912.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2159.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.552 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 739124.224 ops/s
[info]                  ·gc.alloc.rate:                                  916.663 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.240 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1449.581 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 733751.987 ops/s
[info]                  ·gc.alloc.rate:                                  910.256 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2190.356 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   738500.027 ±(99.9%) 14445.089 ops/s [Average]
[info]   (min, avg, max) = (733751.987, 738500.027, 742313.487), stdev = 3751.344
[info]   CI (99.9%): [724054.937, 752945.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   915.889 ±(99.9%) 17.228 MB/sec [Average]
[info]   (min, avg, max) = (910.256, 915.889, 920.441), stdev = 4.474
[info]   CI (99.9%): [898.661, 933.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.113), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.240), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.855 ±(99.9%) 571.084 MB/sec [Average]
[info]   (min, avg, max) = (680.726, 945.855, 1021.405), stdev = 148.309
[info]   CI (99.9%): [374.771, 1516.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2016.060 ±(99.9%) 1221.908 B/op [Average]
[info]   (min, avg, max) = (1449.581, 2016.060, 2190.356), stdev = 317.326
[info]   CI (99.9%): [794.152, 3237.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.710 ±(99.9%) 14.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.710, 8.552), stdev = 3.824
[info]   CI (99.9%): [≈ 0, 16.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 4.219
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:37:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 700575.803 ops/s
[info] # Warmup Iteration   2: 736526.500 ops/s
[info] # Warmup Iteration   3: 744229.635 ops/s
[info] Iteration   1: 738921.415 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 740162.639 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 744095.446 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 731581.466 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 746063.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   740164.845 ±(99.9%) 21565.451 ops/s [Average]
[info]   (min, avg, max) = (731581.466, 740164.845, 746063.262), stdev = 5600.479
[info]   CI (99.9%): [718599.394, 761730.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:37:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146638.811 ops/s
[info] # Warmup Iteration   2: 198224.266 ops/s
[info] # Warmup Iteration   3: 201357.625 ops/s
[info] Iteration   1: 201757.421 ops/s
[info]                  ·gc.alloc.rate:                   657.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5232.721 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.196 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 200771.421 ops/s
[info]                  ·gc.alloc.rate:            654.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5263.611 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 199487.456 ops/s
[info]                  ·gc.alloc.rate:            649.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5297.378 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 200192.695 ops/s
[info]                  ·gc.alloc.rate:            652.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5278.805 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 202099.642 ops/s
[info]                  ·gc.alloc.rate:            658.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5229.055 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   200861.727 ±(99.9%) 4164.699 ops/s [Average]
[info]   (min, avg, max) = (199487.456, 200861.727, 202099.642), stdev = 1081.559
[info]   CI (99.9%): [196697.028, 205026.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   654.354 ±(99.9%) 13.598 MB/sec [Average]
[info]   (min, avg, max) = (649.883, 654.354, 658.382), stdev = 3.531
[info]   CI (99.9%): [640.756, 667.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   671.221 ±(99.9%) 1.039 MB/sec [Average]
[info]   (min, avg, max) = (670.739, 671.221, 671.356), stdev = 0.270
[info]   CI (99.9%): [670.182, 672.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5260.314 ±(99.9%) 113.333 B/op [Average]
[info]   (min, avg, max) = (5229.055, 5260.314, 5297.378), stdev = 29.432
[info]   CI (99.9%): [5146.981, 5373.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.039 ±(99.9%) 8.948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.039, 5.196), stdev = 2.324
[info]   CI (99.9%): [≈ 0, 9.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:37:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86297.950 ops/s
[info] # Warmup Iteration   2: 120479.351 ops/s
[info] # Warmup Iteration   3: 120701.866 ops/s
[info] Iteration   1: 121780.335 ops/s
[info]                  ·gc.alloc.rate:                   1500.337 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17416.290 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.655 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 123215.582 ops/s
[info]                  ·gc.alloc.rate:                                  1517.322 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17392.170 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 123678.942 ops/s
[info]                  ·gc.alloc.rate:                                  1523.412 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21658.488 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 122186.738 ops/s
[info]                  ·gc.alloc.rate:                                  1504.787 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17538.619 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 122866.979 ops/s
[info]                  ·gc.alloc.rate:                                  1513.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21801.957 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   122745.715 ±(99.9%) 2951.969 ops/s [Average]
[info]   (min, avg, max) = (121780.335, 122745.715, 123678.942), stdev = 766.617
[info]   CI (99.9%): [119793.746, 125697.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1511.781 ±(99.9%) 35.889 MB/sec [Average]
[info]   (min, avg, max) = (1500.337, 1511.781, 1523.412), stdev = 9.320
[info]   CI (99.9%): [1475.892, 1547.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.003, 19384.004), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.245 ±(99.9%) 1.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.245, 1.161), stdev = 0.512
[info]   CI (99.9%): [≈ 0, 2.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.985 ±(99.9%) 727.912 MB/sec [Average]
[info]   (min, avg, max) = (1348.035, 1494.985, 1702.167), stdev = 189.036
[info]   CI (99.9%): [767.073, 2222.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19161.505 ±(99.9%) 9034.048 B/op [Average]
[info]   (min, avg, max) = (17392.170, 19161.505, 21801.957), stdev = 2346.113
[info]   CI (99.9%): [10127.457, 28195.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.331 ±(99.9%) 88.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.331, 51.655), stdev = 23.101
[info]   CI (99.9%): [≈ 0, 99.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:37:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102886.361 ops/s
[info] # Warmup Iteration   2: 162643.101 ops/s
[info] # Warmup Iteration   3: 165009.640 ops/s
[info] Iteration   1: 164122.414 ops/s
[info]                  ·gc.alloc.rate:            875.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9677.925 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 162285.032 ops/s
[info]                  ·gc.alloc.rate:                   866.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9780.878 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.460 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 164623.131 ops/s
[info]                  ·gc.alloc.rate:            878.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6432.239 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 164762.788 ops/s
[info]                  ·gc.alloc.rate:                                  879.279 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.820 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9716.520 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                38.179 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 165859.859 ops/s
[info]                  ·gc.alloc.rate:                                  885.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6460.205 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   164330.645 ±(99.9%) 5034.885 ops/s [Average]
[info]   (min, avg, max) = (162285.032, 164330.645, 165859.859), stdev = 1307.544
[info]   CI (99.9%): [159295.760, 169365.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   876.950 ±(99.9%) 27.065 MB/sec [Average]
[info]   (min, avg, max) = (866.004, 876.950, 885.238), stdev = 7.029
[info]   CI (99.9%): [849.885, 904.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.086), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.222 ±(99.9%) 1.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.222, 0.820), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.588 ±(99.9%) 706.211 MB/sec [Average]
[info]   (min, avg, max) = (672.674, 877.588, 1017.086), stdev = 183.401
[info]   CI (99.9%): [171.378, 1583.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8413.553 ±(99.9%) 6917.001 B/op [Average]
[info]   (min, avg, max) = (6432.239, 8413.553, 9780.878), stdev = 1796.323
[info]   CI (99.9%): [1496.553, 15330.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.928 ±(99.9%) 63.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.928, 38.179), stdev = 16.589
[info]   CI (99.9%): [≈ 0, 72.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.000, 12.000), stdev = 4.528
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:37:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 401804.656 ops/s
[info] # Warmup Iteration   2: 431462.461 ops/s
[info] # Warmup Iteration   3: 430062.186 ops/s
[info] Iteration   1: 432198.737 ops/s
[info]                  ·gc.alloc.rate:            839.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2454.977 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 430394.047 ops/s
[info]                  ·gc.alloc.rate:            835.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3697.890 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 431209.694 ops/s
[info]                  ·gc.alloc.rate:            837.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2460.601 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 427158.166 ops/s
[info]                  ·gc.alloc.rate:                                  829.512 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3056.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3738.199 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.272 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 429965.313 ops/s
[info]                  ·gc.alloc.rate:                                  834.764 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3056.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2492.122 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   430185.191 ±(99.9%) 7295.629 ops/s [Average]
[info]   (min, avg, max) = (427158.166, 430185.191, 432198.737), stdev = 1894.652
[info]   CI (99.9%): [422889.562, 437480.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   835.258 ±(99.9%) 13.813 MB/sec [Average]
[info]   (min, avg, max) = (829.512, 835.258, 839.028), stdev = 3.587
[info]   CI (99.9%): [821.445, 849.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.079 ±(99.9%) 0.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.273), stdev = 0.120
[info]   CI (99.9%): [≈ 0, 0.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.975 ±(99.9%) 710.326 MB/sec [Average]
[info]   (min, avg, max) = (674.017, 810.975, 1014.686), stdev = 184.469
[info]   CI (99.9%): [100.649, 1521.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2968.758 ±(99.9%) 2634.985 B/op [Average]
[info]   (min, avg, max) = (2454.977, 2968.758, 3738.199), stdev = 684.297
[info]   CI (99.9%): [333.773, 5603.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.454 ±(99.9%) 21.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.454, 12.272), stdev = 5.488
[info]   CI (99.9%): [≈ 0, 23.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:36:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27470.977 ops/s
[info] # Warmup Iteration   2: 60371.870 ops/s
[info] # Warmup Iteration   3: 61236.699 ops/s
[info] Iteration   1: 61832.840 ops/s
[info]                  ·gc.alloc.rate:                                  2610.842 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69313.887 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 61920.094 ops/s
[info]                  ·gc.alloc.rate:            2614.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       66448.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2723.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69216.514 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 61777.840 ops/s
[info]                  ·gc.alloc.rate:                                  2607.997 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60702.655 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 61117.519 ops/s
[info]                  ·gc.alloc.rate:                                  2579.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70124.635 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 61454.443 ops/s
[info]                  ·gc.alloc.rate:                                  2594.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69736.752 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   61620.548 ±(99.9%) 1277.354 ops/s [Average]
[info]   (min, avg, max) = (61117.519, 61620.548, 61920.094), stdev = 331.725
[info]   CI (99.9%): [60343.193, 62897.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2601.407 ±(99.9%) 55.043 MB/sec [Average]
[info]   (min, avg, max) = (2579.874, 2601.407, 2614.311), stdev = 14.294
[info]   CI (99.9%): [2546.364, 2656.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66448.007, 66448.007, 66448.008), stdev = 0.001
[info]   CI (99.9%): [66448.005, 66448.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.096 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.168), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2654.840 ±(99.9%) 586.235 MB/sec [Average]
[info]   (min, avg, max) = (2382.499, 2654.840, 2723.446), stdev = 152.243
[info]   CI (99.9%): [2068.605, 3241.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67818.888 ±(99.9%) 15381.361 B/op [Average]
[info]   (min, avg, max) = (60702.655, 67818.888, 70124.635), stdev = 3994.491
[info]   CI (99.9%): [52437.527, 83200.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:36:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 134585.660 ops/s
[info] # Warmup Iteration   2: 179926.075 ops/s
[info] # Warmup Iteration   3: 181248.543 ops/s
[info] Iteration   1: 182306.725 ops/s
[info]                  ·gc.alloc.rate:            627.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5819.767 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 183328.134 ops/s
[info]                  ·gc.alloc.rate:            630.864 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2893.759 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 182365.347 ops/s
[info]                  ·gc.alloc.rate:            627.741 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5817.789 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 182291.995 ops/s
[info]                  ·gc.alloc.rate:            627.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5820.342 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 181860.691 ops/s
[info]                  ·gc.alloc.rate:            625.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       5416.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5834.070 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   182430.579 ±(99.9%) 2081.823 ops/s [Average]
[info]   (min, avg, max) = (181860.691, 182430.579, 183328.134), stdev = 540.643
[info]   CI (99.9%): [180348.756, 184512.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   627.810 ±(99.9%) 7.141 MB/sec [Average]
[info]   (min, avg, max) = (625.835, 627.810, 630.864), stdev = 1.854
[info]   CI (99.9%): [620.669, 634.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5416.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5416.002, 5416.002, 5416.002), stdev = 0.001
[info]   CI (99.9%): [5416.002, 5416.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   606.746 ±(99.9%) 580.500 MB/sec [Average]
[info]   (min, avg, max) = (337.069, 606.746, 674.311), stdev = 150.754
[info]   CI (99.9%): [26.246, 1187.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5237.145 ±(99.9%) 5044.377 B/op [Average]
[info]   (min, avg, max) = (2893.759, 5237.145, 5834.070), stdev = 1310.009
[info]   CI (99.9%): [192.769, 10281.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:36:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 195911.648 ops/s
[info] # Warmup Iteration   2: 304954.957 ops/s
[info] # Warmup Iteration   3: 304933.490 ops/s
[info] Iteration   1: 303298.285 ops/s
[info]                  ·gc.alloc.rate:            299.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1745.610 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 301825.802 ops/s
[info]                  ·gc.alloc.rate:            297.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1754.221 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 254673.634 ops/s
[info]                  ·gc.alloc.rate:      251.090 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 305595.583 ops/s
[info]                  ·gc.alloc.rate:            301.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1732.605 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 299464.910 ops/s
[info]                  ·gc.alloc.rate:            295.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1768.038 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   292971.643 ±(99.9%) 82885.045 ops/s [Average]
[info]   (min, avg, max) = (254673.634, 292971.643, 305595.583), stdev = 21524.983
[info]   CI (99.9%): [210086.598, 375856.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   288.870 ±(99.9%) 81.759 MB/sec [Average]
[info]   (min, avg, max) = (251.090, 288.870, 301.317), stdev = 21.233
[info]   CI (99.9%): [207.111, 370.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.002), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.102 ±(99.9%) 579.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.102, 336.418), stdev = 150.432
[info]   CI (99.9%): [≈ 0, 848.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1400.095 ±(99.9%) 3014.219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1400.095, 1768.038), stdev = 782.783
[info]   CI (99.9%): [≈ 0, 4414.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:36:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1314054.507 ops/s
[info] # Warmup Iteration   2: 1488372.616 ops/s
[info] # Warmup Iteration   3: 1531555.631 ops/s
[info] Iteration   1: 1519215.180 ops/s
[info]                  ·gc.alloc.rate:                   1128.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1392.416 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.689 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1527941.756 ops/s
[info]                  ·gc.alloc.rate:                   1133.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1040.238 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1500397.528 ops/s
[info]                  ·gc.alloc.rate:                                  1113.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1071.158 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1483110.069 ops/s
[info]                  ·gc.alloc.rate:            1100.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1083.706 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1499268.766 ops/s
[info]                  ·gc.alloc.rate:            1112.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1429.288 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1505986.660 ±(99.9%) 68253.326 ops/s [Average]
[info]   (min, avg, max) = (1483110.069, 1505986.660, 1527941.756), stdev = 17725.172
[info]   CI (99.9%): [1437733.333, 1574239.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1117.638 ±(99.9%) 51.047 MB/sec [Average]
[info]   (min, avg, max) = (1100.530, 1117.638, 1133.650), stdev = 13.257
[info]   CI (99.9%): [1066.590, 1168.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.118), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1151.612 ±(99.9%) 708.860 MB/sec [Average]
[info]   (min, avg, max) = (1009.646, 1151.612, 1361.355), stdev = 184.089
[info]   CI (99.9%): [442.752, 1860.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1203.361 ±(99.9%) 733.618 B/op [Average]
[info]   (min, avg, max) = (1040.238, 1203.361, 1429.288), stdev = 190.518
[info]   CI (99.9%): [469.744, 1936.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.961 ±(99.9%) 6.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.961, 4.117), stdev = 1.789
[info]   CI (99.9%): [≈ 0, 7.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 12.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:36:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1445589.101 ops/s
[info] # Warmup Iteration   2: 1600518.071 ops/s
[info] # Warmup Iteration   3: 1600508.425 ops/s
[info] Iteration   1: 1599053.951 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1600365.632 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1595565.979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1596283.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1593683.616 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1596990.519 ±(99.9%) 10388.544 ops/s [Average]
[info]   (min, avg, max) = (1593683.616, 1596990.519, 1600365.632), stdev = 2697.872
[info]   CI (99.9%): [1586601.976, 1607379.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:35:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178177.882 ops/s
[info] # Warmup Iteration   2: 307986.761 ops/s
[info] # Warmup Iteration   3: 307763.792 ops/s
[info] Iteration   1: 309777.918 ops/s
[info]                  ·gc.alloc.rate:            842.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3418.203 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 308411.155 ops/s
[info]                  ·gc.alloc.rate:                   838.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5146.611 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 309407.126 ops/s
[info]                  ·gc.alloc.rate:                   841.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3418.957 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 308033.646 ops/s
[info]                  ·gc.alloc.rate:                   837.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5173.615 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.826 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 303882.045 ops/s
[info]                  ·gc.alloc.rate:                                  826.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4280.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3525.901 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   307902.378 ±(99.9%) 9075.822 ops/s [Average]
[info]   (min, avg, max) = (303882.045, 307902.378, 309777.918), stdev = 2356.962
[info]   CI (99.9%): [298826.556, 316978.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   837.300 ±(99.9%) 24.809 MB/sec [Average]
[info]   (min, avg, max) = (826.316, 837.300, 842.498), stdev = 6.443
[info]   CI (99.9%): [812.491, 862.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.001), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.310), stdev = 0.138
[info]   CI (99.9%): [≈ 0, 0.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   809.345 ±(99.9%) 707.360 MB/sec [Average]
[info]   (min, avg, max) = (672.066, 809.345, 1012.502), stdev = 183.699
[info]   CI (99.9%): [101.984, 1516.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4136.657 ±(99.9%) 3601.732 B/op [Average]
[info]   (min, avg, max) = (3418.203, 4136.657, 5173.615), stdev = 935.358
[info]   CI (99.9%): [534.925, 7738.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.123 ±(99.9%) 38.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.123, 23.826), stdev = 10.041
[info]   CI (99.9%): [≈ 0, 44.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 13.000), stdev = 4.037
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:35:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2529.015 ops/s
[info] # Warmup Iteration   2: 4477.696 ops/s
[info] # Warmup Iteration   3: 4584.823 ops/s
[info] Iteration   1: 4584.760 ops/s
[info]                  ·gc.alloc.rate:            902.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1002.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344342.664 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 4570.190 ops/s
[info]                  ·gc.alloc.rate:            899.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1003.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 345472.644 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 4563.771 ops/s
[info]                  ·gc.alloc.rate:            899.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 345246.055 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 4571.325 ops/s
[info]                  ·gc.alloc.rate:                   899.871 MB/sec
[info]                  ·gc.alloc.rate.norm:              309840.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        232099.500 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2064.126 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4586.112 ops/s
[info]                  ·gc.alloc.rate:                                  902.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             309840.096 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.162 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 55.681 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       350439.723 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4575.232 ±(99.9%) 37.591 ops/s [Average]
[info]   (min, avg, max) = (4563.771, 4575.232, 4586.112), stdev = 9.762
[info]   CI (99.9%): [4537.641, 4612.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   900.736 ±(99.9%) 6.434 MB/sec [Average]
[info]   (min, avg, max) = (899.040, 900.736, 902.695), stdev = 1.671
[info]   CI (99.9%): [894.302, 907.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   309840.093 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (309840.089, 309840.093, 309840.096), stdev = 0.004
[info]   CI (99.9%): [309840.078, 309840.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.162), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   11.136 ±(99.9%) 95.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.136, 55.681), stdev = 24.901
[info]   CI (99.9%): [≈ 0, 107.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   940.574 ±(99.9%) 574.452 MB/sec [Average]
[info]   (min, avg, max) = (674.088, 940.574, 1020.979), stdev = 149.183
[info]   CI (99.9%): [366.122, 1515.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   323520.117 ±(99.9%) 197003.839 B/op [Average]
[info]   (min, avg, max) = (232099.500, 323520.117, 350439.723), stdev = 51161.271
[info]   CI (99.9%): [126516.278, 520523.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 10.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.995), stdev = 2.681
[info]   CI (99.9%): [≈ 0, 11.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   412.825 ±(99.9%) 3554.549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 412.825, 2064.126), stdev = 923.105
[info]   CI (99.9%): [≈ 0, 3967.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 12.000), stdev = 4.450
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:35:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2175.862 ops/s
[info] # Warmup Iteration   2: 4434.577 ops/s
[info] # Warmup Iteration   3: 4570.998 ops/s
[info] Iteration   1: 4607.255 ops/s
[info]                  ·gc.alloc.rate:            802.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       273960.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 341941.794 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 4623.882 ops/s
[info]                  ·gc.alloc.rate:            805.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       273960.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 227172.573 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 4577.686 ops/s
[info]                  ·gc.alloc.rate:            796.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       273960.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 344182.076 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 4616.611 ops/s
[info]                  ·gc.alloc.rate:                   803.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              273960.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        227516.923 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2043.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 4649.074 ops/s
[info]                  ·gc.alloc.rate:                                  809.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             273960.095 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       230235.720 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                225.500 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4614.902 ±(99.9%) 99.946 ops/s [Average]
[info]   (min, avg, max) = (4577.686, 4614.902, 4649.074), stdev = 25.956
[info]   CI (99.9%): [4514.956, 4714.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   803.356 ±(99.9%) 17.497 MB/sec [Average]
[info]   (min, avg, max) = (796.858, 803.356, 809.338), stdev = 4.544
[info]   CI (99.9%): [785.859, 820.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   273960.093 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (273960.088, 273960.093, 273960.096), stdev = 0.004
[info]   CI (99.9%): [273960.077, 273960.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.632 ±(99.9%) 22.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.632, 13.158), stdev = 5.884
[info]   CI (99.9%): [≈ 0, 25.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   803.436 ±(99.9%) 695.052 MB/sec [Average]
[info]   (min, avg, max) = (667.295, 803.436, 1001.110), stdev = 180.503
[info]   CI (99.9%): [108.384, 1498.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   274209.817 ±(99.9%) 242087.228 B/op [Average]
[info]   (min, avg, max) = (227172.573, 274209.817, 344182.076), stdev = 62869.284
[info]   CI (99.9%): [32122.589, 516297.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 10.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.994), stdev = 2.622
[info]   CI (99.9%): [≈ 0, 11.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   453.813 ±(99.9%) 3442.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 453.813, 2043.565), stdev = 894.047
[info]   CI (99.9%): [≈ 0, 3896.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 11.000, 16.000), stdev = 5.523
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:35:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22037.137 ops/s
[info] # Warmup Iteration   2: 29251.498 ops/s
[info] # Warmup Iteration   3: 29264.749 ops/s
[info] Iteration   1: 29308.673 ops/s
[info]                  ·gc.alloc.rate:            480.429 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17992.554 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 29603.771 ops/s
[info]                  ·gc.alloc.rate:                   485.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17777.877 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 29362.834 ops/s
[info]                  ·gc.alloc.rate:            481.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35918.941 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 29455.597 ops/s
[info]                  ·gc.alloc.rate:            482.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      334.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17867.792 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 29219.627 ops/s
[info]                  ·gc.alloc.rate:                   479.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             668.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36024.169 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   29390.100 ±(99.9%) 565.861 ops/s [Average]
[info]   (min, avg, max) = (29219.627, 29390.100, 29603.771), stdev = 146.952
[info]   CI (99.9%): [28824.239, 29955.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   481.775 ±(99.9%) 9.114 MB/sec [Average]
[info]   (min, avg, max) = (479.104, 481.775, 485.221), stdev = 2.367
[info]   CI (99.9%): [472.661, 490.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25800.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (25800.014, 25800.015, 25800.017), stdev = 0.001
[info]   CI (99.9%): [25800.009, 25800.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   468.550 ±(99.9%) 706.228 MB/sec [Average]
[info]   (min, avg, max) = (334.349, 468.550, 669.953), stdev = 183.405
[info]   CI (99.9%): [≈ 0, 1174.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   25116.266 ±(99.9%) 38159.266 B/op [Average]
[info]   (min, avg, max) = (17777.877, 25116.266, 36024.169), stdev = 9909.840
[info]   CI (99.9%): [≈ 0, 63275.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.259 ±(99.9%) 75.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.259, 35.881), stdev = 19.526
[info]   CI (99.9%): [≈ 0, 89.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:34:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1564.161 ops/s
[info] # Warmup Iteration   2: 3790.324 ops/s
[info] # Warmup Iteration   3: 3790.840 ops/s
[info] Iteration   1: 3910.193 ops/s
[info]                  ·gc.alloc.rate:            996.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1000.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 402865.472 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 3922.735 ops/s
[info]                  ·gc.alloc.rate:            999.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 401633.468 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 3930.736 ops/s
[info]                  ·gc.alloc.rate:                   1001.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              400992.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        267210.873 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.993 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2400.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 3975.782 ops/s
[info]                  ·gc.alloc.rate:                                  1012.789 MB/sec
[info]                  ·gc.alloc.rate.norm:                             400992.103 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       403927.189 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                263.660 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3991.591 ops/s
[info]                  ·gc.alloc.rate:            1016.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 402571.252 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3946.207 ±(99.9%) 136.437 ops/s [Average]
[info]   (min, avg, max) = (3910.193, 3946.207, 3991.591), stdev = 35.432
[info]   CI (99.9%): [3809.770, 4082.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1005.325 ±(99.9%) 34.840 MB/sec [Average]
[info]   (min, avg, max) = (996.104, 1005.325, 1016.984), stdev = 9.048
[info]   CI (99.9%): [970.485, 1040.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   400992.108 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (400992.103, 400992.108, 400992.112), stdev = 0.005
[info]   CI (99.9%): [400992.090, 400992.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.028), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.216 ±(99.9%) 19.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.216, 11.080), stdev = 4.955
[info]   CI (99.9%): [≈ 0, 21.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   942.046 ±(99.9%) 592.745 MB/sec [Average]
[info]   (min, avg, max) = (667.245, 942.046, 1020.989), stdev = 153.934
[info]   CI (99.9%): [349.301, 1534.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   375641.651 ±(99.9%) 233426.687 B/op [Average]
[info]   (min, avg, max) = (267210.873, 375641.651, 403927.189), stdev = 60620.169
[info]   CI (99.9%): [142214.964, 609068.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 10.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.993), stdev = 2.622
[info]   CI (99.9%): [≈ 0, 11.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   532.752 ±(99.9%) 4043.572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 532.752, 2400.098), stdev = 1050.103
[info]   CI (99.9%): [≈ 0, 4576.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 16.000), stdev = 6.269
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:34:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9764.769 ops/s
[info] # Warmup Iteration   2: 14218.341 ops/s
[info] # Warmup Iteration   3: 14322.106 ops/s
[info] Iteration   1: 14336.250 ops/s
[info]                  ·gc.alloc.rate:            797.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       87584.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      668.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73414.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 14261.929 ops/s
[info]                  ·gc.alloc.rate:            793.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       87608.606 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1002.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110701.399 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 14135.996 ops/s
[info]                  ·gc.alloc.rate:            787.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      751.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83654.695 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 14096.369 ops/s
[info]                  ·gc.alloc.rate:                   785.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              87648.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             668.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74664.561 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 594.937 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 14307.613 ops/s
[info]                  ·gc.alloc.rate:                                  797.033 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87648.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.226 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.874 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       112250.607 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                73.271 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14227.631 ±(99.9%) 408.414 ops/s [Average]
[info]   (min, avg, max) = (14096.369, 14227.631, 14336.250), stdev = 106.064
[info]   CI (99.9%): [13819.217, 14636.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   792.195 ±(99.9%) 21.756 MB/sec [Average]
[info]   (min, avg, max) = (785.252, 792.195, 797.636), stdev = 5.650
[info]   CI (99.9%): [770.438, 813.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87627.347 ±(99.9%) 114.086 B/op [Average]
[info]   (min, avg, max) = (87584.031, 87627.347, 87648.036), stdev = 29.628
[info]   CI (99.9%): [87513.261, 87741.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.226), stdev = 0.101
[info]   CI (99.9%): [≈ 0, 0.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.975 ±(99.9%) 42.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.975, 24.874), stdev = 11.124
[info]   CI (99.9%): [≈ 0, 47.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   822.539 ±(99.9%) 678.530 MB/sec [Average]
[info]   (min, avg, max) = (668.597, 822.539, 1020.758), stdev = 176.212
[info]   CI (99.9%): [144.009, 1501.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   90937.241 ±(99.9%) 73811.631 B/op [Average]
[info]   (min, avg, max) = (73414.944, 90937.241, 112250.607), stdev = 19168.646
[info]   CI (99.9%): [17125.610, 164748.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.961 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.330), stdev = 2.327
[info]   CI (99.9%): [≈ 0, 10.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   133.641 ±(99.9%) 1000.460 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.641, 594.937), stdev = 259.816
[info]   CI (99.9%): [≈ 0, 1134.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 13.000), stdev = 4.099
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:34:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9795.729 ops/s
[info] # Warmup Iteration   2: 15745.834 ops/s
[info] # Warmup Iteration   3: 15832.388 ops/s
[info] Iteration   1: 16152.773 ops/s
[info]                  ·gc.alloc.rate:            836.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65028.975 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 16106.465 ops/s
[info]                  ·gc.alloc.rate:            834.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97828.040 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 16073.149 ops/s
[info]                  ·gc.alloc.rate:            832.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65352.563 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 16119.766 ops/s
[info]                  ·gc.alloc.rate:                   835.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98334.486 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 650.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 16344.158 ops/s
[info]                  ·gc.alloc.rate:                                  846.691 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.789 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65556.045 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16159.262 ±(99.9%) 412.898 ops/s [Average]
[info]   (min, avg, max) = (16073.149, 16159.262, 16344.158), stdev = 107.228
[info]   CI (99.9%): [15746.365, 16572.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   837.032 ±(99.9%) 21.557 MB/sec [Average]
[info]   (min, avg, max) = (832.510, 837.032, 846.691), stdev = 5.598
[info]   CI (99.9%): [815.476, 858.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.027 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (81536.009, 81536.027, 81536.050), stdev = 0.015
[info]   CI (99.9%): [81535.971, 81536.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.558 ±(99.9%) 13.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.558, 7.789), stdev = 3.483
[info]   CI (99.9%): [≈ 0, 14.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   804.670 ±(99.9%) 701.171 MB/sec [Average]
[info]   (min, avg, max) = (667.253, 804.670, 1007.050), stdev = 182.092
[info]   CI (99.9%): [103.499, 1505.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   78420.022 ±(99.9%) 69119.261 B/op [Average]
[info]   (min, avg, max) = (65028.975, 78420.022, 98334.486), stdev = 17950.053
[info]   CI (99.9%): [9300.761, 147539.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.660), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   130.072 ±(99.9%) 1119.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130.072, 650.360), stdev = 290.850
[info]   CI (99.9%): [≈ 0, 1250.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 10.200, 15.000), stdev = 5.404
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:34:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244355.518 ops/s
[info] # Warmup Iteration   2: 271671.963 ops/s
[info] # Warmup Iteration   3: 273843.710 ops/s
[info] Iteration   1: 282833.564 ops/s
[info]                  ·gc.alloc.rate:            997.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1002.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5582.145 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 277236.844 ops/s
[info]                  ·gc.alloc.rate:                   977.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1003.196 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5695.227 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 275995.433 ops/s
[info]                  ·gc.alloc.rate:                   973.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5755.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 34.189 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 269956.981 ops/s
[info]                  ·gc.alloc.rate:                                  952.194 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.508 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5953.449 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 273701.200 ops/s
[info]                  ·gc.alloc.rate:            965.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3914.755 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   275944.804 ±(99.9%) 18266.703 ops/s [Average]
[info]   (min, avg, max) = (269956.981, 275944.804, 282833.564), stdev = 4743.805
[info]   CI (99.9%): [257678.102, 294211.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   973.344 ±(99.9%) 64.159 MB/sec [Average]
[info]   (min, avg, max) = (952.194, 973.344, 997.479), stdev = 16.662
[info]   CI (99.9%): [909.185, 1037.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.102 ±(99.9%) 0.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.102, 0.508), stdev = 0.227
[info]   CI (99.9%): [≈ 0, 0.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   943.412 ±(99.9%) 565.822 MB/sec [Average]
[info]   (min, avg, max) = (680.883, 943.412, 1021.044), stdev = 146.942
[info]   CI (99.9%): [377.590, 1509.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5380.132 ±(99.9%) 3196.674 B/op [Average]
[info]   (min, avg, max) = (3914.755, 5380.132, 5953.449), stdev = 830.166
[info]   CI (99.9%): [2183.457, 8576.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 10.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.994), stdev = 2.622
[info]   CI (99.9%): [≈ 0, 11.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.594 ±(99.9%) 57.593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.594, 34.189), stdev = 14.957
[info]   CI (99.9%): [≈ 0, 65.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 7.400, 12.000), stdev = 5.128
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288658.471 ops/s
[info] # Warmup Iteration   2: 315129.460 ops/s
[info] # Warmup Iteration   3: 316716.054 ops/s
[info] Iteration   1: 316919.056 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 316789.205 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 311645.389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 317130.419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 317230.200 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   315942.854 ±(99.9%) 9274.588 ops/s [Average]
[info]   (min, avg, max) = (311645.389, 315942.854, 317230.200), stdev = 2408.581
[info]   CI (99.9%): [306668.266, 325217.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:33:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10338.657 ops/s
[info] # Warmup Iteration   2: 14719.804 ops/s
[info] # Warmup Iteration   3: 14829.188 ops/s
[info] Iteration   1: 14438.736 ops/s
[info]                  ·gc.alloc.rate:            820.483 MB/sec
[info]                  ·gc.alloc.rate.norm:       89464.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1000.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109126.833 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 14567.889 ops/s
[info]                  ·gc.alloc.rate:            827.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       89451.616 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72112.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 14769.413 ops/s
[info]                  ·gc.alloc.rate:            839.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       89440.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 106681.766 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 14826.948 ops/s
[info]                  ·gc.alloc.rate:                   842.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              89440.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70847.819 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 636.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 14864.241 ops/s
[info]                  ·gc.alloc.rate:                                  844.654 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89438.693 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.252 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 26.727 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108045.361 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                70.526 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14693.445 ±(99.9%) 703.222 ops/s [Average]
[info]   (min, avg, max) = (14438.736, 14693.445, 14864.241), stdev = 182.624
[info]   CI (99.9%): [13990.224, 15396.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   834.982 ±(99.9%) 40.000 MB/sec [Average]
[info]   (min, avg, max) = (820.483, 834.982, 844.654), stdev = 10.388
[info]   CI (99.9%): [794.982, 874.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89446.905 ±(99.9%) 41.992 B/op [Average]
[info]   (min, avg, max) = (89438.693, 89446.905, 89464.030), stdev = 10.905
[info]   CI (99.9%): [89404.913, 89488.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.050 ±(99.9%) 0.435 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.252), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.345 ±(99.9%) 46.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.345, 26.727), stdev = 11.953
[info]   CI (99.9%): [≈ 0, 51.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   871.423 ±(99.9%) 717.726 MB/sec [Average]
[info]   (min, avg, max) = (667.381, 871.423, 1020.375), stdev = 186.391
[info]   CI (99.9%): [153.697, 1589.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   93362.774 ±(99.9%) 77012.741 B/op [Average]
[info]   (min, avg, max) = (70847.819, 93362.774, 109126.833), stdev = 19999.964
[info]   CI (99.9%): [16350.033, 170375.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 10.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.995), stdev = 2.623
[info]   CI (99.9%): [≈ 0, 11.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   141.377 ±(99.9%) 1071.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 141.377, 636.358), stdev = 278.383
[info]   CI (99.9%): [≈ 0, 1213.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 15.000), stdev = 4.930
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:33:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 824308.069 ops/s
[info] # Warmup Iteration   2: 875181.354 ops/s
[info] # Warmup Iteration   3: 885681.016 ops/s
[info] Iteration   1: 882032.259 ops/s
[info]                  ·gc.alloc.rate:      35.866 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 882683.108 ops/s
[info]                  ·gc.alloc.rate:      35.883 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 883078.166 ops/s
[info]                  ·gc.alloc.rate:      35.905 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 882123.254 ops/s
[info]                  ·gc.alloc.rate:      35.865 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 883203.615 ops/s
[info]                  ·gc.alloc.rate:      35.909 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   882624.080 ±(99.9%) 2061.640 ops/s [Average]
[info]   (min, avg, max) = (882032.259, 882624.080, 883203.615), stdev = 535.401
[info]   CI (99.9%): [880562.441, 884685.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   35.886 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (35.865, 35.886, 35.909), stdev = 0.021
[info]   CI (99.9%): [35.805, 35.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:33:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26950.101 ops/s
[info] # Warmup Iteration   2: 63896.712 ops/s
[info] # Warmup Iteration   3: 64948.296 ops/s
[info] Iteration   1: 67414.238 ops/s
[info]                  ·gc.alloc.rate:                                  3041.629 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71521.387 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 67542.815 ops/s
[info]                  ·gc.alloc.rate:                                  3047.346 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.252 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71384.813 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 66654.832 ops/s
[info]                  ·gc.alloc.rate:                                  3008.034 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.240 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72334.569 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 66938.706 ops/s
[info]                  ·gc.alloc.rate:                                  3020.314 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.247 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72029.888 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 67052.393 ops/s
[info]                  ·gc.alloc.rate:                                  3026.571 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71024.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71904.230 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   67120.597 ±(99.9%) 1387.256 ops/s [Average]
[info]   (min, avg, max) = (66654.832, 67120.597, 67542.815), stdev = 360.266
[info]   CI (99.9%): [65733.341, 68507.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3028.779 ±(99.9%) 61.391 MB/sec [Average]
[info]   (min, avg, max) = (3008.034, 3028.779, 3047.346), stdev = 15.943
[info]   CI (99.9%): [2967.388, 3090.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71024.006 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (71024.006, 71024.006, 71024.007), stdev = 0.001
[info]   CI (99.9%): [71024.005, 71024.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.008, 0.011), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.195 ±(99.9%) 0.341 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.195, 0.252), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3063.293 ±(99.9%) 1.993 MB/sec [Average]
[info]   (min, avg, max) = (3062.827, 3063.293, 3064.080), stdev = 0.518
[info]   CI (99.9%): [3061.300, 3065.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71834.977 ±(99.9%) 1483.079 B/op [Average]
[info]   (min, avg, max) = (71384.813, 71834.977, 72334.569), stdev = 385.151
[info]   CI (99.9%): [70351.898, 73318.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:33:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 599641.723 ops/s
[info] # Warmup Iteration   2: 978461.018 ops/s
[info] # Warmup Iteration   3: 996418.409 ops/s
[info] Iteration   1: 996894.410 ops/s
[info]                  ·gc.alloc.rate:            572.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1060.039 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1004131.374 ops/s
[info]                  ·gc.alloc.rate:                   576.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        526.241 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.044 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 999137.981 ops/s
[info]                  ·gc.alloc.rate:                   573.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1058.754 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.049 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 997352.096 ops/s
[info]                  ·gc.alloc.rate:            572.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1061.689 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 995178.154 ops/s
[info]                  ·gc.alloc.rate:            571.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 530.936 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   998538.803 ±(99.9%) 13205.256 ops/s [Average]
[info]   (min, avg, max) = (995178.154, 998538.803, 1004131.374), stdev = 3429.363
[info]   CI (99.9%): [985333.547, 1011744.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   573.539 ±(99.9%) 7.861 MB/sec [Average]
[info]   (min, avg, max) = (571.549, 573.539, 576.869), stdev = 2.042
[info]   CI (99.9%): [565.678, 581.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.553 ±(99.9%) 709.383 MB/sec [Average]
[info]   (min, avg, max) = (335.681, 537.553, 672.706), stdev = 184.224
[info]   CI (99.9%): [≈ 0, 1246.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   847.532 ±(99.9%) 1121.156 B/op [Average]
[info]   (min, avg, max) = (526.241, 847.532, 1061.689), stdev = 291.161
[info]   CI (99.9%): [≈ 0, 1968.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.419 ±(99.9%) 2.208 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.419, 1.049), stdev = 0.573
[info]   CI (99.9%): [≈ 0, 2.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 2.191
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:33:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 658011.083 ops/s
[info] # Warmup Iteration   2: 663759.356 ops/s
[info] # Warmup Iteration   3: 691712.272 ops/s
[info] Iteration   1: 688040.903 ops/s
[info]                  ·gc.alloc.rate:            185.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 770.980 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 691726.355 ops/s
[info]                  ·gc.alloc.rate:      186.349 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 689271.491 ops/s
[info]                  ·gc.alloc.rate:            185.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 768.120 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 617546.880 ops/s
[info]                  ·gc.alloc.rate:      166.344 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 687999.303 ops/s
[info]                  ·gc.alloc.rate:            185.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 769.555 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   674916.986 ±(99.9%) 123630.859 ops/s [Average]
[info]   (min, avg, max) = (617546.880, 674916.986, 691726.355), stdev = 32106.541
[info]   CI (99.9%): [551286.128, 798547.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   181.805 ±(99.9%) 33.320 MB/sec [Average]
[info]   (min, avg, max) = (166.344, 181.805, 186.349), stdev = 8.653
[info]   CI (99.9%): [148.486, 215.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.001, 424.001, 424.001), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   201.946 ±(99.9%) 709.870 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.946, 336.989), stdev = 184.351
[info]   CI (99.9%): [≈ 0, 911.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   461.731 ±(99.9%) 1623.054 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 461.731, 770.980), stdev = 421.502
[info]   CI (99.9%): [≈ 0, 2084.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:32:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 817445.161 ops/s
[info] # Warmup Iteration   2: 905022.916 ops/s
[info] # Warmup Iteration   3: 905497.499 ops/s
[info] Iteration   1: 904929.137 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 897656.988 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 904886.747 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 904548.425 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 904978.945 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   903400.048 ±(99.9%) 12379.507 ops/s [Average]
[info]   (min, avg, max) = (897656.988, 903400.048, 904978.945), stdev = 3214.919
[info]   CI (99.9%): [891020.542, 915779.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:32:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18517.923 ops/s
[info] # Warmup Iteration   2: 38253.703 ops/s
[info] # Warmup Iteration   3: 38648.373 ops/s
[info] Iteration   1: 38204.196 ops/s
[info]                  ·gc.alloc.rate:                                  1603.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66058.165 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.739 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1347.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55543.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                192.097 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 39328.197 ops/s
[info]                  ·gc.alloc.rate:                                  1650.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.876 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68110.123 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 39396.280 ops/s
[info]                  ·gc.alloc.rate:                                  1653.394 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67994.307 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 38248.109 ops/s
[info]                  ·gc.alloc.rate:                                  1605.203 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70034.812 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 38593.399 ops/s
[info]                  ·gc.alloc.rate:                                  1619.807 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55522.754 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   38754.036 ±(99.9%) 2217.239 ops/s [Average]
[info]   (min, avg, max) = (38204.196, 38754.036, 39396.280), stdev = 575.810
[info]   CI (99.9%): [36536.797, 40971.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1626.435 ±(99.9%) 93.265 MB/sec [Average]
[info]   (min, avg, max) = (1603.174, 1626.435, 1653.394), stdev = 24.221
[info]   CI (99.9%): [1533.171, 1719.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66062.842 ±(99.9%) 10.066 B/op [Average]
[info]   (min, avg, max) = (66058.165, 66062.842, 66064.011), stdev = 2.614
[info]   CI (99.9%): [66052.775, 66072.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.014, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.569 ±(99.9%) 2.850 B/op [Average]
[info]   (min, avg, max) = (0.052, 0.569, 1.739), stdev = 0.740
[info]   CI (99.9%): [≈ 0, 3.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1562.890 ±(99.9%) 732.147 MB/sec [Average]
[info]   (min, avg, max) = (1347.992, 1562.890, 1701.721), stdev = 190.136
[info]   CI (99.9%): [830.743, 2295.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   63441.103 ±(99.9%) 27972.252 B/op [Average]
[info]   (min, avg, max) = (55522.754, 63441.103, 70034.812), stdev = 7264.305
[info]   CI (99.9%): [35468.851, 91413.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   38.419 ±(99.9%) 330.803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.419, 192.097), stdev = 85.908
[info]   CI (99.9%): [≈ 0, 369.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:32:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328672.272 ops/s
[info] # Warmup Iteration   2: 635991.077 ops/s
[info] # Warmup Iteration   3: 639210.604 ops/s
[info] Iteration   1: 647302.986 ops/s
[info]                  ·gc.alloc.rate:                                  2072.570 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.351 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4957.764 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.098 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 649835.551 ops/s
[info]                  ·gc.alloc.rate:                                  2080.465 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.876 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4946.517 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 650092.463 ops/s
[info]                  ·gc.alloc.rate:                                  2081.481 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4944.645 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 650465.203 ops/s
[info]                  ·gc.alloc.rate:                                  2082.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4941.635 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 650204.938 ops/s
[info]                  ·gc.alloc.rate:                                  2082.604 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5040.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4943.489 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   649580.228 ±(99.9%) 4978.680 ops/s [Average]
[info]   (min, avg, max) = (647302.986, 649580.228, 650465.203), stdev = 1292.947
[info]   CI (99.9%): [644601.548, 654558.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2079.983 ±(99.9%) 16.358 MB/sec [Average]
[info]   (min, avg, max) = (2072.570, 2079.983, 2082.792), stdev = 4.248
[info]   CI (99.9%): [2063.624, 2096.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5040.001, 5040.001, 5040.001), stdev = 0.001
[info]   CI (99.9%): [5040.001, 5040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.242 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.032, 0.144), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.078 ±(99.9%) 0.588 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.078, 0.351), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2041.519 ±(99.9%) 6.076 MB/sec [Average]
[info]   (min, avg, max) = (2038.753, 2041.519, 2042.725), stdev = 1.578
[info]   CI (99.9%): [2035.443, 2047.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4946.810 ±(99.9%) 24.548 B/op [Average]
[info]   (min, avg, max) = (4941.635, 4946.810, 4957.764), stdev = 6.375
[info]   CI (99.9%): [4922.262, 4971.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.620 ±(99.9%) 13.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.620, 8.098), stdev = 3.622
[info]   CI (99.9%): [≈ 0, 15.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:32:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.897 ops/s
[info] # Warmup Iteration   2: 4864044.178 ops/s
[info] # Warmup Iteration   3: 5035802.165 ops/s
[info] Iteration   1: 5059792.510 ops/s
[info]                  ·gc.alloc.rate:            308.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103.809 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 5091648.775 ops/s
[info]                  ·gc.alloc.rate:            310.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103.160 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 5315342.569 ops/s
[info]                  ·gc.alloc.rate:            324.195 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98.818 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 5310303.266 ops/s
[info]                  ·gc.alloc.rate:            323.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98.912 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 5319629.275 ops/s
[info]                  ·gc.alloc.rate:            324.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98.735 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5219343.279 ±(99.9%) 506872.584 ops/s [Average]
[info]   (min, avg, max) = (5059792.510, 5219343.279, 5319629.275), stdev = 131633.200
[info]   CI (99.9%): [4712470.695, 5726215.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   318.395 ±(99.9%) 30.834 MB/sec [Average]
[info]   (min, avg, max) = (308.691, 318.395, 324.506), stdev = 8.008
[info]   CI (99.9%): [287.560, 349.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.768 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (333.712, 333.768, 333.802), stdev = 0.036
[info]   CI (99.9%): [333.627, 333.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   100.687 ±(99.9%) 9.876 B/op [Average]
[info]   (min, avg, max) = (98.735, 100.687, 103.809), stdev = 2.565
[info]   CI (99.9%): [90.811, 110.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:31:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167903.597 ops/s
[info] # Warmup Iteration   2: 777897.996 ops/s
[info] # Warmup Iteration   3: 775964.542 ops/s
[info] Iteration   1: 779225.397 ops/s
[info]                  ·gc.alloc.rate:                   966.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2036.984 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.345 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 762733.299 ops/s
[info]                  ·gc.alloc.rate:                   946.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2081.051 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.375 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 783115.538 ops/s
[info]                  ·gc.alloc.rate:                   971.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1350.806 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.339 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 780579.164 ops/s
[info]                  ·gc.alloc.rate:                                  968.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.189 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.172 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2050.938 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.059 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 783028.224 ops/s
[info]                  ·gc.alloc.rate:                                  971.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2052.553 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   777736.324 ±(99.9%) 32918.500 ops/s [Average]
[info]   (min, avg, max) = (762733.299, 777736.324, 783115.538), stdev = 8548.830
[info]   CI (99.9%): [744817.824, 810654.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   964.627 ±(99.9%) 40.858 MB/sec [Average]
[info]   (min, avg, max) = (946.008, 964.627, 971.432), stdev = 10.611
[info]   CI (99.9%): [923.769, 1005.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.189), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.088 ±(99.9%) 0.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.088, 0.382), stdev = 0.166
[info]   CI (99.9%): [≈ 0, 0.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.556 ±(99.9%) 589.233 MB/sec [Average]
[info]   (min, avg, max) = (672.005, 945.556, 1021.473), stdev = 153.022
[info]   CI (99.9%): [356.323, 1534.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1914.466 ±(99.9%) 1214.887 B/op [Average]
[info]   (min, avg, max) = (1350.806, 1914.466, 2081.051), stdev = 315.502
[info]   CI (99.9%): [699.579, 3129.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.997), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.423 ±(99.9%) 12.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.423, 8.059), stdev = 3.204
[info]   CI (99.9%): [≈ 0, 14.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 13.000), stdev = 4.243
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6797339.594 ops/s
[info] # Warmup Iteration   2: 7101607.383 ops/s
[info] # Warmup Iteration   3: 7288539.434 ops/s
[info] Iteration   1: 7284218.932 ops/s
[info]                  ·gc.alloc.rate:            333.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.828 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   2: 7293945.753 ops/s
[info]                  ·gc.alloc.rate:            333.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.731 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7297828.714 ops/s
[info]                  ·gc.alloc.rate:            333.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.692 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7497062.502 ops/s
[info]                  ·gc.alloc.rate:            342.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.760 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 7297446.945 ops/s
[info]                  ·gc.alloc.rate:            333.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72.696 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7334100.569 ±(99.9%) 351424.342 ops/s [Average]
[info]   (min, avg, max) = (7284218.932, 7334100.569, 7497062.502), stdev = 91263.786
[info]   CI (99.9%): [6982676.227, 7685524.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   335.501 ±(99.9%) 16.064 MB/sec [Average]
[info]   (min, avg, max) = (333.316, 335.501, 342.955), stdev = 4.172
[info]   CI (99.9%): [319.438, 351.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.051 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (337.002, 337.051, 337.149), stdev = 0.058
[info]   CI (99.9%): [336.827, 337.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   72.341 ±(99.9%) 3.410 B/op [Average]
[info]   (min, avg, max) = (70.760, 72.341, 72.828), stdev = 0.886
[info]   CI (99.9%): [68.931, 75.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:31:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28054.988 ops/s
[info] # Warmup Iteration   2: 244350.827 ops/s
[info] # Warmup Iteration   3: 256480.475 ops/s
[info] Iteration   1: 256359.280 ops/s
[info]                  ·gc.alloc.rate:                   1408.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8257.084 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 256307.668 ops/s
[info]                  ·gc.alloc.rate:                                  1408.380 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8648.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10373.314 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                28.633 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   3: 254040.617 ops/s
[info]                  ·gc.alloc.rate:                                  1395.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8648.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.222 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8435.689 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 260905.859 ops/s
[info]                  ·gc.alloc.rate:            1433.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       8648.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8213.756 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 259987.603 ops/s
[info]                  ·gc.alloc.rate:                                  1428.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8648.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8242.882 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   257520.205 ±(99.9%) 10972.009 ops/s [Average]
[info]   (min, avg, max) = (254040.617, 257520.205, 260905.859), stdev = 2849.396
[info]   CI (99.9%): [246548.197, 268492.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1415.061 ±(99.9%) 61.337 MB/sec [Average]
[info]   (min, avg, max) = (1395.688, 1415.061, 1433.947), stdev = 15.929
[info]   CI (99.9%): [1353.724, 1476.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8648.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8648.002, 8648.002, 8648.002), stdev = 0.001
[info]   CI (99.9%): [8648.001, 8648.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.036), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.222), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.883 ±(99.9%) 572.169 MB/sec [Average]
[info]   (min, avg, max) = (1344.674, 1423.883, 1689.358), stdev = 148.590
[info]   CI (99.9%): [851.714, 1996.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8704.545 ±(99.9%) 3607.759 B/op [Average]
[info]   (min, avg, max) = (8213.756, 8704.545, 10373.314), stdev = 936.924
[info]   CI (99.9%): [5096.786, 12312.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.545 ±(99.9%) 48.034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.545, 28.633), stdev = 12.474
[info]   CI (99.9%): [≈ 0, 54.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 17.000), stdev = 7.668
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:31:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2121.668 ops/s
[info] # Warmup Iteration   2: 3492.589 ops/s
[info] # Warmup Iteration   3: 3439.839 ops/s
[info] Iteration   1: 3570.471 ops/s
[info]                  ·gc.alloc.rate:                                  1686.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743312.114 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.163 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 71.868 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       745543.115 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1761.819 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 3625.971 ops/s
[info]                  ·gc.alloc.rate:                                  1712.829 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743312.121 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.427 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 185.491 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       738657.756 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3629.310 ops/s
[info]                  ·gc.alloc.rate:                                  1714.408 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743312.112 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.261 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 113.164 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       738047.295 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3623.692 ops/s
[info]                  ·gc.alloc.rate:                                  1711.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743312.113 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.359 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 155.809 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       739065.291 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3584.411 ops/s
[info]                  ·gc.alloc.rate:                                  1692.828 MB/sec
[info]                  ·gc.alloc.rate.norm:                             743312.114 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.239 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 105.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       747103.090 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   3606.771 ±(99.9%) 105.114 ops/s [Average]
[info]   (min, avg, max) = (3570.471, 3606.771, 3629.310), stdev = 27.298
[info]   CI (99.9%): [3501.657, 3711.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1703.567 ±(99.9%) 49.939 MB/sec [Average]
[info]   (min, avg, max) = (1686.429, 1703.567, 1714.408), stdev = 12.969
[info]   CI (99.9%): [1653.628, 1753.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   743312.115 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (743312.112, 743312.115, 743312.121), stdev = 0.004
[info]   CI (99.9%): [743312.101, 743312.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.290 ±(99.9%) 0.400 MB/sec [Average]
[info]   (min, avg, max) = (0.163, 0.290, 0.427), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   126.271 ±(99.9%) 171.801 B/op [Average]
[info]   (min, avg, max) = (71.868, 126.271, 185.491), stdev = 44.616
[info]   CI (99.9%): [≈ 0, 298.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1699.777 ±(99.9%) 17.886 MB/sec [Average]
[info]   (min, avg, max) = (1691.490, 1699.777, 1702.265), stdev = 4.645
[info]   CI (99.9%): [1681.891, 1717.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   741683.309 ±(99.9%) 16506.278 B/op [Average]
[info]   (min, avg, max) = (738047.295, 741683.309, 747103.090), stdev = 4286.628
[info]   CI (99.9%): [725177.031, 758189.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   352.364 ±(99.9%) 3033.959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 352.364, 1761.819), stdev = 787.909
[info]   CI (99.9%): [≈ 0, 3386.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 13.000), stdev = 3.715
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:31:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1926.171 ops/s
[info] # Warmup Iteration   2: 4527.821 ops/s
[info] # Warmup Iteration   3: 4645.619 ops/s
[info] Iteration   1: 4760.497 ops/s
[info]                  ·gc.alloc.rate:                                  1967.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650536.086 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.340 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2032.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       671819.693 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1541.376 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 4763.302 ops/s
[info]                  ·gc.alloc.rate:                                  1969.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650536.092 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.963 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       674697.590 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 4753.203 ops/s
[info]                  ·gc.alloc.rate:                                  1964.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650536.086 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       676116.512 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4769.835 ops/s
[info]                  ·gc.alloc.rate:                                  1972.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650536.092 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.922 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       561540.910 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4794.752 ops/s
[info]                  ·gc.alloc.rate:                                  1982.046 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650536.085 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.745 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       670196.793 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   4768.318 ±(99.9%) 61.365 ops/s [Average]
[info]   (min, avg, max) = (4753.203, 4768.318, 4794.752), stdev = 15.936
[info]   CI (99.9%): [4706.953, 4829.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1971.305 ±(99.9%) 25.211 MB/sec [Average]
[info]   (min, avg, max) = (1964.976, 1971.305, 1982.046), stdev = 6.547
[info]   CI (99.9%): [1946.095, 1996.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650536.088 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (650536.085, 650536.088, 650536.092), stdev = 0.004
[info]   CI (99.9%): [650536.074, 650536.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.024 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.019, 0.025), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.222 ±(99.9%) 7.795 B/op [Average]
[info]   (min, avg, max) = (3.340, 6.222, 8.143), stdev = 2.024
[info]   CI (99.9%): [≈ 0, 14.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1972.288 ±(99.9%) 581.390 MB/sec [Average]
[info]   (min, avg, max) = (1702.314, 1972.288, 2042.814), stdev = 150.985
[info]   CI (99.9%): [1390.898, 2553.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   650874.299 ±(99.9%) 192505.637 B/op [Average]
[info]   (min, avg, max) = (561540.910, 650874.299, 676116.512), stdev = 49993.103
[info]   CI (99.9%): [458368.662, 843379.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   308.275 ±(99.9%) 2654.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 308.275, 1541.376), stdev = 689.324
[info]   CI (99.9%): [≈ 0, 2962.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 15.000), stdev = 4.722
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36885.345 ops/s
[info] # Warmup Iteration   2: 41412.097 ops/s
[info] # Warmup Iteration   3: 41393.491 ops/s
[info] Iteration   1: 41474.464 ops/s
[info]                  ·gc.alloc.rate:            690.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38375.459 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 41816.800 ops/s
[info]                  ·gc.alloc.rate:            695.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25422.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 41534.231 ops/s
[info]                  ·gc.alloc.rate:            691.165 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25594.109 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 41599.974 ops/s
[info]                  ·gc.alloc.rate:            692.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25554.126 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 41644.753 ops/s
[info]                  ·gc.alloc.rate:                   692.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25527.744 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.701 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   41614.044 ±(99.9%) 502.446 ops/s [Average]
[info]   (min, avg, max) = (41474.464, 41614.044, 41816.800), stdev = 130.484
[info]   CI (99.9%): [41111.599, 42116.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   692.420 ±(99.9%) 7.628 MB/sec [Average]
[info]   (min, avg, max) = (690.547, 692.420, 695.640), stdev = 1.981
[info]   CI (99.9%): [684.792, 700.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26184.010, 26184.010, 26184.011), stdev = 0.001
[info]   CI (99.9%): [26184.009, 26184.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.761 ±(99.9%) 579.709 MB/sec [Average]
[info]   (min, avg, max) = (675.359, 742.761, 1012.070), stdev = 150.548
[info]   CI (99.9%): [163.052, 1322.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28094.718 ±(99.9%) 22131.429 B/op [Average]
[info]   (min, avg, max) = (25422.151, 28094.718, 38375.459), stdev = 5747.462
[info]   CI (99.9%): [5963.289, 50226.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   20.140 ±(99.9%) 173.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.140, 100.701), stdev = 45.035
[info]   CI (99.9%): [≈ 0, 193.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:30:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2631.387 ops/s
[info] # Warmup Iteration   2: 3948.283 ops/s
[info] # Warmup Iteration   3: 4002.624 ops/s
[info] Iteration   1: 3957.554 ops/s
[info]                  ·gc.alloc.rate:            727.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       289544.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 268037.108 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 4036.736 ops/s
[info]                  ·gc.alloc.rate:            742.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       289544.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 262793.193 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 4035.241 ops/s
[info]                  ·gc.alloc.rate:            742.378 MB/sec
[info]                  ·gc.alloc.rate.norm:       289544.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 262858.289 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 4012.564 ops/s
[info]                  ·gc.alloc.rate:            738.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       289544.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 396546.679 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 4022.075 ops/s
[info]                  ·gc.alloc.rate:                                  739.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             289544.109 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       265076.260 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1303.226 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4012.834 ±(99.9%) 124.993 ops/s [Average]
[info]   (min, avg, max) = (3957.554, 4012.834, 4036.736), stdev = 32.460
[info]   CI (99.9%): [3887.841, 4137.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   738.190 ±(99.9%) 23.126 MB/sec [Average]
[info]   (min, avg, max) = (727.991, 738.190, 742.653), stdev = 6.006
[info]   CI (99.9%): [715.064, 761.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289544.105 ±(99.9%) 0.019 B/op [Average]
[info]   (min, avg, max) = (289544.101, 289544.105, 289544.111), stdev = 0.005
[info]   CI (99.9%): [289544.086, 289544.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.027 ±(99.9%) 26.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.027, 15.135), stdev = 6.769
[info]   CI (99.9%): [≈ 0, 29.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   742.016 ±(99.9%) 578.669 MB/sec [Average]
[info]   (min, avg, max) = (673.916, 742.016, 1010.829), stdev = 150.278
[info]   CI (99.9%): [163.347, 1320.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   291062.306 ±(99.9%) 227212.437 B/op [Average]
[info]   (min, avg, max) = (262793.193, 291062.306, 396546.679), stdev = 59006.348
[info]   CI (99.9%): [63849.869, 518274.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   260.645 ±(99.9%) 2244.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 260.645, 1303.226), stdev = 582.821
[info]   CI (99.9%): [≈ 0, 2504.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 11.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:30:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_eb209134/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2100.755 ops/s
[info] # Warmup Iteration   2: 4294.611 ops/s
[info] # Warmup Iteration   3: 4500.079 ops/s
[info] Iteration   1: 4510.048 ops/s
[info]                  ·gc.alloc.rate:                   477.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              166581.968 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        116895.773 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 232.397 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4471.560 ops/s
[info]                  ·gc.alloc.rate:                   473.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              166580.416 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        236064.393 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 234.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 4512.176 ops/s
[info]                  ·gc.alloc.rate:            477.536 MB/sec
[info]                  ·gc.alloc.rate.norm:       166581.591 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117102.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 4494.732 ops/s
[info]                  ·gc.alloc.rate:                   475.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              166582.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:             669.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        234623.544 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 233.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 4358.269 ops/s
[info]                  ·gc.alloc.rate:            461.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       166580.886 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 121239.345 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4469.357 ±(99.9%) 247.151 ops/s [Average]
[info]   (min, avg, max) = (4358.269, 4469.357, 4512.176), stdev = 64.184
[info]   CI (99.9%): [4222.206, 4716.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   473.066 ±(99.9%) 25.853 MB/sec [Average]
[info]   (min, avg, max) = (461.447, 473.066, 477.536), stdev = 6.714
[info]   CI (99.9%): [447.213, 498.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   166581.391 ±(99.9%) 2.774 B/op [Average]
[info]   (min, avg, max) = (166580.416, 166581.391, 166582.096), stdev = 0.721
[info]   CI (99.9%): [166578.617, 166584.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   469.447 ±(99.9%) 706.244 MB/sec [Average]
[info]   (min, avg, max) = (334.971, 469.447, 670.722), stdev = 183.409
[info]   CI (99.9%): [≈ 0, 1175.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   165185.055 ±(99.9%) 246716.499 B/op [Average]
[info]   (min, avg, max) = (116895.773, 165185.055, 236064.393), stdev = 64071.491
[info]   CI (99.9%): [≈ 0, 411901.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   140.009 ±(99.9%) 492.159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.009, 234.423), stdev = 127.812
[info]   CI (99.9%): [≈ 0, 632.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:30:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5671.005 ops/s
[info] # Warmup Iteration   2: 5895.748 ops/s
[info] # Warmup Iteration   3: 6276.435 ops/s
[info] Iteration   1: 6500.560 ops/s
[info]                  ·gc.alloc.rate:      173.887 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6499.843 ops/s
[info]                  ·gc.alloc.rate:            173.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       42096.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81453.758 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 6365.264 ops/s
[info]                  ·gc.alloc.rate:            170.256 MB/sec
[info]                  ·gc.alloc.rate.norm:       42096.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83168.035 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 6518.476 ops/s
[info]                  ·gc.alloc.rate:      174.351 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6444.052 ops/s
[info]                  ·gc.alloc.rate:            172.401 MB/sec
[info]                  ·gc.alloc.rate.norm:       42096.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82161.502 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6465.639 ±(99.9%) 241.414 ops/s [Average]
[info]   (min, avg, max) = (6365.264, 6465.639, 6518.476), stdev = 62.694
[info]   CI (99.9%): [6224.225, 6707.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   172.943 ±(99.9%) 6.432 MB/sec [Average]
[info]   (min, avg, max) = (170.256, 172.943, 174.351), stdev = 1.670
[info]   CI (99.9%): [166.511, 179.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42096.065 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (42096.063, 42096.065, 42096.069), stdev = 0.003
[info]   CI (99.9%): [42096.052, 42096.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   201.838 ±(99.9%) 709.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.838, 336.486), stdev = 184.252
[info]   CI (99.9%): [≈ 0, 911.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   49356.659 ±(99.9%) 173511.466 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49356.659, 83168.035), stdev = 45060.377
[info]   CI (99.9%): [≈ 0, 222868.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:30:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5728.278 ops/s
[info] # Warmup Iteration   2: 6564.127 ops/s
[info] # Warmup Iteration   3: 6317.719 ops/s
[info] Iteration   1: 6627.691 ops/s
[info]                  ·gc.alloc.rate:      128.811 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6620.863 ops/s
[info]                  ·gc.alloc.rate:      128.670 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6561.526 ops/s
[info]                  ·gc.alloc.rate:            127.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       30592.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80844.043 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 6364.116 ops/s
[info]                  ·gc.alloc.rate:      123.687 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6544.319 ops/s
[info]                  ·gc.alloc.rate:            127.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       30592.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80893.810 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6543.703 ±(99.9%) 411.032 ops/s [Average]
[info]   (min, avg, max) = (6364.116, 6543.703, 6627.691), stdev = 106.744
[info]   CI (99.9%): [6132.671, 6954.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   127.194 ±(99.9%) 7.991 MB/sec [Average]
[info]   (min, avg, max) = (123.687, 127.194, 128.811), stdev = 2.075
[info]   CI (99.9%): [119.203, 135.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30592.062 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (30592.062, 30592.062, 30592.064), stdev = 0.001
[info]   CI (99.9%): [30592.058, 30592.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   134.713 ±(99.9%) 710.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 134.713, 337.092), stdev = 184.463
[info]   CI (99.9%): [≈ 0, 845.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   32347.571 ±(99.9%) 170559.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32347.571, 80893.810), stdev = 44293.739
[info]   CI (99.9%): [≈ 0, 202906.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:29:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4894.216 ops/s
[info] # Warmup Iteration   2: 6858.633 ops/s
[info] # Warmup Iteration   3: 7243.527 ops/s
[info] Iteration   1: 7276.544 ops/s
[info]                  ·gc.alloc.rate:                                  1694.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366544.060 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.153 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 33.182 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       365949.854 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                720.374 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 7380.911 ops/s
[info]                  ·gc.alloc.rate:                                  1719.026 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366544.060 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.560 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       362875.752 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 7360.149 ops/s
[info]                  ·gc.alloc.rate:                                  1714.215 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366544.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       363910.850 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7329.810 ops/s
[info]                  ·gc.alloc.rate:                                  1706.914 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366544.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.585 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       365399.847 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 7225.484 ops/s
[info]                  ·gc.alloc.rate:                                  1682.534 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366544.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.946 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       370708.687 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7314.580 ±(99.9%) 244.244 ops/s [Average]
[info]   (min, avg, max) = (7225.484, 7314.580, 7380.911), stdev = 63.429
[info]   CI (99.9%): [7070.335, 7558.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1703.442 ±(99.9%) 57.362 MB/sec [Average]
[info]   (min, avg, max) = (1682.534, 1703.442, 1719.026), stdev = 14.897
[info]   CI (99.9%): [1646.080, 1760.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366544.058 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (366544.055, 366544.058, 366544.060), stdev = 0.002
[info]   CI (99.9%): [366544.048, 366544.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.094 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.094, 0.153), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   20.261 ±(99.9%) 39.277 B/op [Average]
[info]   (min, avg, max) = (4.560, 20.261, 33.182), stdev = 10.200
[info]   CI (99.9%): [≈ 0, 59.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1699.747 ±(99.9%) 17.163 MB/sec [Average]
[info]   (min, avg, max) = (1691.777, 1699.747, 1701.900), stdev = 4.457
[info]   CI (99.9%): [1682.584, 1716.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   365768.998 ±(99.9%) 11614.829 B/op [Average]
[info]   (min, avg, max) = (362875.752, 365768.998, 370708.687), stdev = 3016.334
[info]   CI (99.9%): [354154.169, 377383.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   144.075 ±(99.9%) 1240.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 144.075, 720.374), stdev = 322.161
[info]   CI (99.9%): [≈ 0, 1384.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:29:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282.859 ops/s
[info] # Warmup Iteration   2: 11169.004 ops/s
[info] # Warmup Iteration   3: 11232.405 ops/s
[info] Iteration   1: 11226.043 ops/s
[info]                  ·gc.alloc.rate:            258.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46788.081 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 11313.054 ops/s
[info]                  ·gc.alloc.rate:            260.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.642 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46428.332 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11353.869 ops/s
[info]                  ·gc.alloc.rate:      261.756 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11224.801 ops/s
[info]                  ·gc.alloc.rate:            258.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46792.249 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 11324.448 ops/s
[info]                  ·gc.alloc.rate:            261.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46379.145 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11288.443 ±(99.9%) 228.836 ops/s [Average]
[info]   (min, avg, max) = (11224.801, 11288.443, 11353.869), stdev = 59.428
[info]   CI (99.9%): [11059.607, 11517.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   260.190 ±(99.9%) 5.343 MB/sec [Average]
[info]   (min, avg, max) = (258.710, 260.190, 261.756), stdev = 1.388
[info]   CI (99.9%): [254.847, 265.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.037 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.037, 36280.039), stdev = 0.002
[info]   CI (99.9%): [36280.031, 36280.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   266.938 ±(99.9%) 574.603 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.938, 333.688), stdev = 149.223
[info]   CI (99.9%): [≈ 0, 841.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   37277.561 ±(99.9%) 80246.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37277.561, 46792.249), stdev = 20839.693
[info]   CI (99.9%): [≈ 0, 117523.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 6.000), stdev = 2.345
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:29:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6500.521 ops/s
[info] # Warmup Iteration   2: 13343.695 ops/s
[info] # Warmup Iteration   3: 13427.418 ops/s
[info] Iteration   1: 13480.038 ops/s
[info]                  ·gc.alloc.rate:            342.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39196.196 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 13060.693 ops/s
[info]                  ·gc.alloc.rate:            331.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40456.427 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 13476.804 ops/s
[info]                  ·gc.alloc.rate:            342.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39204.919 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 13487.716 ops/s
[info]                  ·gc.alloc.rate:            342.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39172.953 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 13472.678 ops/s
[info]                  ·gc.alloc.rate:            342.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39219.466 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13395.586 ±(99.9%) 721.194 ops/s [Average]
[info]   (min, avg, max) = (13060.693, 13395.586, 13487.716), stdev = 187.292
[info]   CI (99.9%): [12674.392, 14116.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   340.365 ±(99.9%) 18.357 MB/sec [Average]
[info]   (min, avg, max) = (331.841, 340.365, 342.683), stdev = 4.767
[info]   CI (99.9%): [322.008, 358.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39992.031 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (39992.030, 39992.031, 39992.033), stdev = 0.001
[info]   CI (99.9%): [39992.027, 39992.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   335.698 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (335.665, 335.698, 335.766), stdev = 0.041
[info]   CI (99.9%): [335.540, 335.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   39449.992 ±(99.9%) 2167.401 B/op [Average]
[info]   (min, avg, max) = (39172.953, 39449.992, 40456.427), stdev = 562.867
[info]   CI (99.9%): [37282.591, 41617.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:29:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18426.177 ops/s
[info] # Warmup Iteration   2: 22678.066 ops/s
[info] # Warmup Iteration   3: 22657.287 ops/s
[info] Iteration   1: 22658.616 ops/s
[info]                  ·gc.alloc.rate:            424.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23410.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 22572.545 ops/s
[info]                  ·gc.alloc.rate:            423.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47003.850 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 22430.869 ops/s
[info]                  ·gc.alloc.rate:            420.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23650.684 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 22693.793 ops/s
[info]                  ·gc.alloc.rate:            425.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23375.604 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 22176.849 ops/s
[info]                  ·gc.alloc.rate:            415.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23920.448 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22506.534 ±(99.9%) 809.940 ops/s [Average]
[info]   (min, avg, max) = (22176.849, 22506.534, 22693.793), stdev = 210.339
[info]   CI (99.9%): [21696.594, 23316.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   421.806 ±(99.9%) 15.019 MB/sec [Average]
[info]   (min, avg, max) = (415.665, 421.806, 425.277), stdev = 3.900
[info]   CI (99.9%): [406.787, 436.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.020 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (29496.018, 29496.020, 29496.023), stdev = 0.002
[info]   CI (99.9%): [29496.012, 29496.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.485 ±(99.9%) 580.579 MB/sec [Average]
[info]   (min, avg, max) = (336.976, 404.485, 674.199), stdev = 150.775
[info]   CI (99.9%): [≈ 0, 985.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28272.251 ±(99.9%) 40329.956 B/op [Average]
[info]   (min, avg, max) = (23375.604, 28272.251, 47003.850), stdev = 10473.562
[info]   CI (99.9%): [≈ 0, 68602.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:28:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 668.445 ops/s
[info] # Warmup Iteration   2: 2071.417 ops/s
[info] # Warmup Iteration   3: 2073.461 ops/s
[info] Iteration   1: 2090.776 ops/s
[info]                  ·gc.alloc.rate:            1328.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000013.407 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1010482.417 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 2129.271 ops/s
[info]                  ·gc.alloc.rate:                   1353.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000008.192 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1351.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        998854.791 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3446.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 2151.945 ops/s
[info]                  ·gc.alloc.rate:                                  1367.272 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000008.204 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 47.643 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       995489.709 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2147.046 ops/s
[info]                  ·gc.alloc.rate:                                  1364.041 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000008.190 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       997806.957 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2148.816 ops/s
[info]                  ·gc.alloc.rate:                                  1365.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1000008.190 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 41.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       996878.765 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2133.571 ±(99.9%) 98.201 ops/s [Average]
[info]   (min, avg, max) = (2090.776, 2133.571, 2151.945), stdev = 25.502
[info]   CI (99.9%): [2035.370, 2231.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1355.623 ±(99.9%) 62.498 MB/sec [Average]
[info]   (min, avg, max) = (1328.286, 1355.623, 1367.272), stdev = 16.230
[info]   CI (99.9%): [1293.125, 1418.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1000009.237 ±(99.9%) 8.978 B/op [Average]
[info]   (min, avg, max) = (1000008.190, 1000009.237, 1000013.407), stdev = 2.331
[info]   CI (99.9%): [1000000.259, 1000018.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.065), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   18.249 ±(99.9%) 92.632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.249, 47.643), stdev = 24.056
[info]   CI (99.9%): [≈ 0, 110.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.401 ±(99.9%) 32.485 MB/sec [Average]
[info]   (min, avg, max) = (1342.192, 1355.401, 1361.094), stdev = 8.436
[info]   CI (99.9%): [1322.916, 1387.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   999902.528 ±(99.9%) 23266.887 B/op [Average]
[info]   (min, avg, max) = (995489.709, 999902.528, 1010482.417), stdev = 6042.337
[info]   CI (99.9%): [976635.640, 1023169.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   689.205 ±(99.9%) 5934.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 689.205, 3446.024), stdev = 1541.109
[info]   CI (99.9%): [≈ 0, 6623.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 18.000), stdev = 6.573
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:28:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4762.758 ops/s
[info] # Warmup Iteration   2: 7082.155 ops/s
[info] # Warmup Iteration   3: 7058.350 ops/s
[info] Iteration   1: 7244.496 ops/s
[info]                  ·gc.alloc.rate:                   1429.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              310552.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        292605.668 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 144.711 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 7234.403 ops/s
[info]                  ·gc.alloc.rate:                                  1427.449 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310552.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1516.668 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       329962.348 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                724.555 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 7297.380 ops/s
[info]                  ·gc.alloc.rate:                                  1439.827 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310552.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       293641.505 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7293.732 ops/s
[info]                  ·gc.alloc.rate:                                  1438.909 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310552.060 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       293802.515 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7292.387 ops/s
[info]                  ·gc.alloc.rate:                                  1438.779 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310552.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.823 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       293842.795 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7272.480 ±(99.9%) 117.126 ops/s [Average]
[info]   (min, avg, max) = (7234.403, 7272.480, 7297.380), stdev = 30.417
[info]   CI (99.9%): [7155.354, 7389.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1434.894 ±(99.9%) 22.778 MB/sec [Average]
[info]   (min, avg, max) = (1427.449, 1434.894, 1439.827), stdev = 5.915
[info]   CI (99.9%): [1412.116, 1457.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   310552.058 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (310552.056, 310552.058, 310552.061), stdev = 0.002
[info]   CI (99.9%): [310552.048, 310552.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.051), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.454 ±(99.9%) 18.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.454, 11.006), stdev = 4.781
[info]   CI (99.9%): [≈ 0, 21.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1389.532 ±(99.9%) 274.732 MB/sec [Average]
[info]   (min, avg, max) = (1346.899, 1389.532, 1516.668), stdev = 71.347
[info]   CI (99.9%): [1114.799, 1664.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   300770.966 ±(99.9%) 62866.906 B/op [Average]
[info]   (min, avg, max) = (292605.668, 300770.966, 329962.348), stdev = 16326.336
[info]   CI (99.9%): [237904.060, 363637.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   173.853 ±(99.9%) 1209.734 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 173.853, 724.555), stdev = 314.164
[info]   CI (99.9%): [≈ 0, 1383.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 14.000), stdev = 4.506
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:28:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3489.394 ops/s
[info] # Warmup Iteration   2: 53134.805 ops/s
[info] # Warmup Iteration   3: 53170.349 ops/s
[info] Iteration   1: 53744.412 ops/s
[info]                  ·gc.alloc.rate:            502.394 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9772.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 53355.176 ops/s
[info]                  ·gc.alloc.rate:            498.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19688.432 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 53887.663 ops/s
[info]                  ·gc.alloc.rate:                   503.721 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9727.772 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.456 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 53690.472 ops/s
[info]                  ·gc.alloc.rate:            501.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19565.972 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 53933.750 ops/s
[info]                  ·gc.alloc.rate:            504.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9718.936 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   53722.295 ±(99.9%) 878.795 ops/s [Average]
[info]   (min, avg, max) = (53355.176, 53722.295, 53933.750), stdev = 228.220
[info]   CI (99.9%): [52843.500, 54601.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   502.153 ±(99.9%) 8.190 MB/sec [Average]
[info]   (min, avg, max) = (498.727, 502.153, 504.087), stdev = 2.127
[info]   CI (99.9%): [493.963, 510.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.008, 14712.008, 14712.008), stdev = 0.001
[info]   CI (99.9%): [14712.007, 14712.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   466.928 ±(99.9%) 704.746 MB/sec [Average]
[info]   (min, avg, max) = (333.006, 466.928, 667.425), stdev = 183.020
[info]   CI (99.9%): [≈ 0, 1171.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   13694.818 ±(99.9%) 20853.983 B/op [Average]
[info]   (min, avg, max) = (9718.936, 13694.818, 19688.432), stdev = 5415.713
[info]   CI (99.9%): [≈ 0, 34548.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   3.891 ±(99.9%) 33.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.891, 19.456), stdev = 8.701
[info]   CI (99.9%): [≈ 0, 37.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:28:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_eb209134/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 19492.249 ops/s
[info] # Warmup Iteration   2: 36025.071 ops/s
[info] # Warmup Iteration   3: 37259.934 ops/s
[info] Iteration   1: 37539.749 ops/s
[info]                  ·gc.alloc.rate:            558.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.835 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14075.220 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 36721.991 ops/s
[info]                  ·gc.alloc.rate:                   546.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.795 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28748.837 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 28.549 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 37537.676 ops/s
[info]                  ·gc.alloc.rate:            558.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.925 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28152.690 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 37897.175 ops/s
[info]                  ·gc.alloc.rate:            564.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.831 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13941.917 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 37466.424 ops/s
[info]                  ·gc.alloc.rate:            557.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.955 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28206.031 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   37432.603 ±(99.9%) 1661.210 ops/s [Average]
[info]   (min, avg, max) = (36721.991, 37432.603, 37897.175), stdev = 431.411
[info]   CI (99.9%): [35771.393, 39093.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   557.269 ±(99.9%) 24.813 MB/sec [Average]
[info]   (min, avg, max) = (546.666, 557.269, 564.227), stdev = 6.444
[info]   CI (99.9%): [532.457, 582.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.868 ±(99.9%) 0.262 B/op [Average]
[info]   (min, avg, max) = (23431.795, 23431.868, 23431.955), stdev = 0.068
[info]   CI (99.9%): [23431.606, 23432.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   536.985 ±(99.9%) 707.486 MB/sec [Average]
[info]   (min, avg, max) = (335.714, 536.985, 671.397), stdev = 183.732
[info]   CI (99.9%): [≈ 0, 1244.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22624.939 ±(99.9%) 30301.614 B/op [Average]
[info]   (min, avg, max) = (13941.917, 22624.939, 28748.837), stdev = 7869.233
[info]   CI (99.9%): [≈ 0, 52926.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.710 ±(99.9%) 49.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.710, 28.549), stdev = 12.767
[info]   CI (99.9%): [≈ 0, 54.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 3.130
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:28:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61628.923 ops/s
[info] # Warmup Iteration   2: 72846.810 ops/s
[info] # Warmup Iteration   3: 71903.429 ops/s
[info] Iteration   1: 68067.883 ops/s
[info]                  ·gc.alloc.rate:            511.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15556.822 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 71795.629 ops/s
[info]                  ·gc.alloc.rate:            539.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7374.466 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 73399.424 ops/s
[info]                  ·gc.alloc.rate:            551.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14426.276 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 73292.616 ops/s
[info]                  ·gc.alloc.rate:            551.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14447.727 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 72967.305 ops/s
[info]                  ·gc.alloc.rate:            548.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7255.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   71904.571 ±(99.9%) 8615.187 ops/s [Average]
[info]   (min, avg, max) = (68067.883, 71904.571, 73399.424), stdev = 2237.337
[info]   CI (99.9%): [63289.384, 80519.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   540.614 ±(99.9%) 64.660 MB/sec [Average]
[info]   (min, avg, max) = (511.816, 540.614, 551.825), stdev = 16.792
[info]   CI (99.9%): [475.954, 605.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.006, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.310 ±(99.9%) 709.786 MB/sec [Average]
[info]   (min, avg, max) = (336.308, 538.310, 673.019), stdev = 184.329
[info]   CI (99.9%): [≈ 0, 1248.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11812.225 ±(99.9%) 15906.414 B/op [Average]
[info]   (min, avg, max) = (7255.836, 11812.225, 15556.822), stdev = 4130.845
[info]   CI (99.9%): [≈ 0, 27718.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:27:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78944.086 ops/s
[info] # Warmup Iteration   2: 95752.807 ops/s
[info] # Warmup Iteration   3: 94708.913 ops/s
[info] Iteration   1: 96307.454 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 96264.089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 96098.635 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 95319.353 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 96296.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   96057.282 ±(99.9%) 1621.175 ops/s [Average]
[info]   (min, avg, max) = (95319.353, 96057.282, 96307.454), stdev = 421.014
[info]   CI (99.9%): [94436.107, 97678.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:27:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1983.827 ops/s
[info] # Warmup Iteration   2: 4893.153 ops/s
[info] # Warmup Iteration   3: 4948.042 ops/s
[info] Iteration   1: 4958.047 ops/s
[info]                  ·gc.alloc.rate:            1435.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       455567.545 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 426195.406 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4997.475 ops/s
[info]                  ·gc.alloc.rate:                                  1446.232 MB/sec
[info]                  ·gc.alloc.rate.norm:                             455568.975 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.337 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       427065.560 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1468.300 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 5013.282 ops/s
[info]                  ·gc.alloc.rate:                                  1451.301 MB/sec
[info]                  ·gc.alloc.rate.norm:                             455566.934 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 12.609 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       534219.677 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 5049.407 ops/s
[info]                  ·gc.alloc.rate:                                  1461.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             455568.371 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.412 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       424329.706 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 5006.062 ops/s
[info]                  ·gc.alloc.rate:                                  1449.404 MB/sec
[info]                  ·gc.alloc.rate.norm:                             455567.941 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.466 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       427973.112 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5004.855 ±(99.9%) 126.292 ops/s [Average]
[info]   (min, avg, max) = (4958.047, 5004.855, 5049.407), stdev = 32.798
[info]   CI (99.9%): [4878.563, 5131.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1448.669 ±(99.9%) 36.621 MB/sec [Average]
[info]   (min, avg, max) = (1435.015, 1448.669, 1461.395), stdev = 9.510
[info]   CI (99.9%): [1412.048, 1485.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   455567.953 ±(99.9%) 2.996 B/op [Average]
[info]   (min, avg, max) = (455566.934, 455567.953, 455568.975), stdev = 0.778
[info]   CI (99.9%): [455564.957, 455570.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.071), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   10.565 ±(99.9%) 31.283 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.565, 22.337), stdev = 8.124
[info]   CI (99.9%): [≈ 0, 41.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.580 ±(99.9%) 597.617 MB/sec [Average]
[info]   (min, avg, max) = (1342.494, 1424.580, 1701.865), stdev = 155.199
[info]   CI (99.9%): [826.963, 2022.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   447956.692 ±(99.9%) 185759.883 B/op [Average]
[info]   (min, avg, max) = (424329.706, 447956.692, 534219.677), stdev = 48241.252
[info]   CI (99.9%): [262196.809, 633716.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   293.660 ±(99.9%) 2528.501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 293.660, 1468.300), stdev = 656.644
[info]   CI (99.9%): [≈ 0, 2822.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 18.000), stdev = 6.099
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:27:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2991474.292 ops/s
[info] # Warmup Iteration   2: 4658040.755 ops/s
[info] # Warmup Iteration   3: 4796912.379 ops/s
[info] Iteration   1: 4773701.867 ops/s
[info]                  ·gc.alloc.rate:                                  2960.011 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1010.024 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4692275.075 ops/s
[info]                  ·gc.alloc.rate:                                  2910.203 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1027.572 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 4777022.332 ops/s
[info]                  ·gc.alloc.rate:                                  2962.249 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       897.175 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 4770592.150 ops/s
[info]                  ·gc.alloc.rate:                                  2958.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1010.689 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 4791060.695 ops/s
[info]                  ·gc.alloc.rate:                                  2970.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1006.372 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   4760930.424 ±(99.9%) 150825.332 ops/s [Average]
[info]   (min, avg, max) = (4692275.075, 4760930.424, 4791060.695), stdev = 39168.860
[info]   CI (99.9%): [4610105.092, 4911755.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   2952.320 ±(99.9%) 92.521 MB/sec [Average]
[info]   (min, avg, max) = (2910.203, 2952.320, 2970.798), stdev = 24.027
[info]   CI (99.9%): [2859.799, 3044.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2995.383 ±(99.9%) 586.311 MB/sec [Average]
[info]   (min, avg, max) = (2723.006, 2995.383, 3063.977), stdev = 152.263
[info]   CI (99.9%): [2409.071, 3581.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   990.366 ±(99.9%) 203.069 B/op [Average]
[info]   (min, avg, max) = (897.175, 990.366, 1027.572), stdev = 52.736
[info]   CI (99.9%): [787.297, 1193.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.000, 12.000), stdev = 2.345
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:27:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.881 ops/s
[info] # Warmup Iteration   2: 37967993.634 ops/s
[info] # Warmup Iteration   3: 34802198.962 ops/s
[info] Iteration   1: 31901070.258 ops/s
[info]                  ·gc.alloc.rate:            324.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16.466 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 36739757.768 ops/s
[info]                  ·gc.alloc.rate:            373.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.296 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 36135131.581 ops/s
[info]                  ·gc.alloc.rate:            367.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.535 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 37200255.859 ops/s
[info]                  ·gc.alloc.rate:            378.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.120 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 37450593.096 ops/s
[info]                  ·gc.alloc.rate:            380.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14.025 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   35885361.712 ±(99.9%) 8790492.128 ops/s [Average]
[info]   (min, avg, max) = (31901070.258, 35885361.712, 37450593.096), stdev = 2282862.890
[info]   CI (99.9%): [27094869.585, 44675853.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   364.788 ±(99.9%) 89.258 MB/sec [Average]
[info]   (min, avg, max) = (324.335, 364.788, 380.699), stdev = 23.180
[info]   CI (99.9%): [275.530, 454.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.711 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (333.693, 333.711, 333.771), stdev = 0.034
[info]   CI (99.9%): [333.582, 333.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   14.688 ±(99.9%) 3.898 B/op [Average]
[info]   (min, avg, max) = (14.025, 14.688, 16.466), stdev = 1.012
[info]   CI (99.9%): [10.790, 18.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:27:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2416680.313 ops/s
[info] # Warmup Iteration   2: 7051710.356 ops/s
[info] # Warmup Iteration   3: 7212964.479 ops/s
[info] Iteration   1: 7294745.508 ops/s
[info]                  ·gc.alloc.rate:                                  2743.394 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       587.515 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 7259230.826 ops/s
[info]                  ·gc.alloc.rate:                                  2730.298 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.944 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       590.406 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 7235426.665 ops/s
[info]                  ·gc.alloc.rate:                                  2721.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       592.373 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 7271645.191 ops/s
[info]                  ·gc.alloc.rate:            2734.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 589.424 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 7303229.159 ops/s
[info]                  ·gc.alloc.rate:                                  2746.775 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       660.189 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   7272855.470 ±(99.9%) 105273.850 ops/s [Average]
[info]   (min, avg, max) = (7235426.665, 7272855.470, 7303229.159), stdev = 27339.284
[info]   CI (99.9%): [7167581.621, 7378129.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2735.256 ±(99.9%) 39.613 MB/sec [Average]
[info]   (min, avg, max) = (2721.132, 2735.256, 2746.775), stdev = 10.287
[info]   CI (99.9%): [2695.643, 2774.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2790.868 ±(99.9%) 586.128 MB/sec [Average]
[info]   (min, avg, max) = (2722.610, 2790.868, 3063.159), stdev = 152.216
[info]   CI (99.9%): [2204.740, 3376.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   603.981 ±(99.9%) 121.179 B/op [Average]
[info]   (min, avg, max) = (587.515, 603.981, 660.189), stdev = 31.470
[info]   CI (99.9%): [482.802, 725.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:26:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33400599.444 ops/s
[info] # Warmup Iteration   2: 35001334.115 ops/s
[info] # Warmup Iteration   3: 35424730.050 ops/s
[info] Iteration   1: 35332429.832 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 35305025.128 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 35349405.520 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35353241.052 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 35323771.785 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   35332774.664 ±(99.9%) 75718.434 ops/s [Average]
[info]   (min, avg, max) = (35305025.128, 35332774.664, 35353241.052), stdev = 19663.837
[info]   CI (99.9%): [35257056.230, 35408493.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:26:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22446850.118 ops/s
[info] # Warmup Iteration   2: 28411507.129 ops/s
[info] # Warmup Iteration   3: 28052964.771 ops/s
[info] Iteration   1: 28405677.929 ops/s
[info]                  ·gc.alloc.rate:            1010.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.027 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 28146278.578 ops/s
[info]                  ·gc.alloc.rate:            1001.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56.542 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 25565972.003 ops/s
[info]                  ·gc.alloc.rate:                                  909.489 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62.455 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.205 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 24848172.336 ops/s
[info]                  ·gc.alloc.rate:                                  883.926 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       43.122 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Iteration   5: 24824895.572 ops/s
[info]                  ·gc.alloc.rate:            883.114 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.951 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64.741 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   26358199.283 ±(99.9%) 6847280.302 ops/s [Average]
[info]   (min, avg, max) = (24824895.572, 26358199.283, 28405677.929), stdev = 1778216.950
[info]   CI (99.9%): [19510918.981, 33205479.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   937.669 ±(99.9%) 243.638 MB/sec [Average]
[info]   (min, avg, max) = (883.114, 937.669, 1010.484), stdev = 63.272
[info]   CI (99.9%): [694.031, 1181.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.045), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   947.587 ±(99.9%) 574.804 MB/sec [Average]
[info]   (min, avg, max) = (680.655, 947.587, 1020.951), stdev = 149.275
[info]   CI (99.9%): [372.783, 1522.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   56.577 ±(99.9%) 32.363 B/op [Average]
[info]   (min, avg, max) = (43.122, 56.577, 64.741), stdev = 8.404
[info]   CI (99.9%): [24.215, 88.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.205), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.400, 8.000), stdev = 3.209
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:26:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3074639.499 ops/s
[info] # Warmup Iteration   2: 5769962.719 ops/s
[info] # Warmup Iteration   3: 5846583.878 ops/s
[info] Iteration   1: 5994009.444 ops/s
[info]                  ·gc.alloc.rate:                                  2893.700 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       715.037 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 5989834.098 ops/s
[info]                  ·gc.alloc.rate:                                  2892.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.246 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       804.971 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 5952960.809 ops/s
[info]                  ·gc.alloc.rate:                                  2875.044 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       719.971 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 5957924.525 ops/s
[info]                  ·gc.alloc.rate:                                  2876.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       809.283 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   5: 5996677.306 ops/s
[info]                  ·gc.alloc.rate:            2895.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2722.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 714.713 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   5978281.237 ±(99.9%) 81110.235 ops/s [Average]
[info]   (min, avg, max) = (5952960.809, 5978281.237, 5996677.306), stdev = 21064.070
[info]   CI (99.9%): [5897171.002, 6059391.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2886.505 ±(99.9%) 37.969 MB/sec [Average]
[info]   (min, avg, max) = (2875.044, 2886.505, 2895.146), stdev = 9.861
[info]   CI (99.9%): [2848.536, 2924.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2859.009 ±(99.9%) 717.582 MB/sec [Average]
[info]   (min, avg, max) = (2722.502, 2859.009, 3063.246), stdev = 186.354
[info]   CI (99.9%): [2141.427, 3576.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   752.795 ±(99.9%) 191.243 B/op [Average]
[info]   (min, avg, max) = (714.713, 752.795, 809.283), stdev = 49.665
[info]   CI (99.9%): [561.552, 944.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 11.000), stdev = 2.168
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:26:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14203308.279 ops/s
[info] # Warmup Iteration   2: 21003204.458 ops/s
[info] # Warmup Iteration   3: 21075344.187 ops/s
[info] Iteration   1: 21289839.706 ops/s
[info]                  ·gc.alloc.rate:                                  1947.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       150.494 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.246 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 20688406.236 ops/s
[info]                  ·gc.alloc.rate:                                  1892.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       129.477 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 20636448.712 ops/s
[info]                  ·gc.alloc.rate:                                  1888.026 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       155.760 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 20050691.983 ops/s
[info]                  ·gc.alloc.rate:                                  1835.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.545 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       133.599 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 20623873.427 ops/s
[info]                  ·gc.alloc.rate:                                  1886.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       155.853 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   20657852.013 ±(99.9%) 1690119.025 ops/s [Average]
[info]   (min, avg, max) = (20050691.983, 20657852.013, 21289839.706), stdev = 438918.544
[info]   CI (99.9%): [18967732.988, 22347971.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   1890.009 ±(99.9%) 153.525 MB/sec [Average]
[info]   (min, avg, max) = (1835.089, 1890.009, 1947.626), stdev = 39.870
[info]   CI (99.9%): [1736.484, 2043.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
[info]   CI (99.9%): [144.000, 144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.026, 0.122), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1904.788 ±(99.9%) 712.297 MB/sec [Average]
[info]   (min, avg, max) = (1701.800, 1904.788, 2042.212), stdev = 184.981
[info]   CI (99.9%): [1192.491, 2617.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   145.037 ±(99.9%) 48.504 B/op [Average]
[info]   (min, avg, max) = (129.477, 145.037, 155.853), stdev = 12.596
[info]   CI (99.9%): [96.533, 193.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.049 ±(99.9%) 0.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.246), stdev = 0.110
[info]   CI (99.9%): [≈ 0, 0.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:25:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.834 ops/s
[info] # Warmup Iteration   2: 52473123.640 ops/s
[info] # Warmup Iteration   3: 52560868.081 ops/s
[info] Iteration   1: 53284764.743 ops/s
[info]                  ·gc.alloc.rate:            1624.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1668.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.287 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  24.000 ms
[info] Iteration   2: 54582429.796 ops/s
[info]                  ·gc.alloc.rate:                                  1664.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.608 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.807 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.192 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 54934220.889 ops/s
[info]                  ·gc.alloc.rate:                                  1675.774 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.763 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 54878112.261 ops/s
[info]                  ·gc.alloc.rate:                                  1673.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.813 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 55152606.898 ops/s
[info]                  ·gc.alloc.rate:                                  1681.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48.568 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   54566426.918 ±(99.9%) 2867980.918 ops/s [Average]
[info]   (min, avg, max) = (53284764.743, 54566426.918, 55152606.898), stdev = 744805.537
[info]   CI (99.9%): [51698446.000, 57434407.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1664.113 ±(99.9%) 87.964 MB/sec [Average]
[info]   (min, avg, max) = (1624.778, 1664.113, 1681.896), stdev = 22.844
[info]   CI (99.9%): [1576.149, 1752.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.123 ±(99.9%) 1.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.608), stdev = 0.271
[info]   CI (99.9%): [≈ 0, 1.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1693.403 ±(99.9%) 56.168 MB/sec [Average]
[info]   (min, avg, max) = (1668.350, 1693.403, 1702.416), stdev = 14.587
[info]   CI (99.9%): [1637.235, 1749.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   48.848 ±(99.9%) 1.021 B/op [Average]
[info]   (min, avg, max) = (48.568, 48.848, 49.287), stdev = 0.265
[info]   CI (99.9%): [47.826, 49.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.661), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.192), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.400, 24.000), stdev = 8.706
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:25:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3183033.846 ops/s
[info] # Warmup Iteration   2: 10820217.188 ops/s
[info] # Warmup Iteration   3: 10895047.059 ops/s
[info] Iteration   1: 10691492.051 ops/s
[info]                  ·gc.alloc.rate:                                  2119.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2377.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       350.085 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.686 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 10889145.036 ops/s
[info]                  ·gc.alloc.rate:                                  2158.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       295.203 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 10719252.581 ops/s
[info]                  ·gc.alloc.rate:                                  2124.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       299.881 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 10823271.718 ops/s
[info]                  ·gc.alloc.rate:                                  2146.099 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       296.998 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 10862040.441 ops/s
[info]                  ·gc.alloc.rate:                                  2152.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       345.261 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   10797040.365 ±(99.9%) 336726.373 ops/s [Average]
[info]   (min, avg, max) = (10691492.051, 10797040.365, 10889145.036), stdev = 87446.770
[info]   CI (99.9%): [10460313.992, 11133766.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2140.330 ±(99.9%) 66.750 MB/sec [Average]
[info]   (min, avg, max) = (2119.278, 2140.330, 2158.484), stdev = 17.335
[info]   CI (99.9%): [2073.580, 2207.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.018, 0.082), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.003, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2177.583 ±(99.9%) 712.206 MB/sec [Average]
[info]   (min, avg, max) = (2042.276, 2177.583, 2382.401), stdev = 184.958
[info]   CI (99.9%): [1465.377, 2889.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   317.486 ±(99.9%) 106.510 B/op [Average]
[info]   (min, avg, max) = (295.203, 317.486, 350.085), stdev = 27.660
[info]   CI (99.9%): [210.975, 423.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.137 ±(99.9%) 1.182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.686), stdev = 0.307
[info]   CI (99.9%): [≈ 0, 1.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 10.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:25:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30210890.026 ops/s
[info] # Warmup Iteration   2: 40677334.382 ops/s
[info] # Warmup Iteration   3: 44464229.769 ops/s
[info] Iteration   1: 44924821.592 ops/s
[info]                  ·gc.alloc.rate:            913.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.569 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 44602154.129 ops/s
[info]                  ·gc.alloc.rate:            906.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35.610 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 44593995.869 ops/s
[info]                  ·gc.alloc.rate:                   906.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35.619 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 38790562.913 ops/s
[info]                  ·gc.alloc.rate:                                  788.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27.488 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.135 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36106404.831 ops/s
[info]                  ·gc.alloc.rate:                                  734.163 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29.676 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   41803587.867 ±(99.9%) 15747281.652 ops/s [Average]
[info]   (min, avg, max) = (36106404.831, 41803587.867, 44924821.592), stdev = 4089519.037
[info]   CI (99.9%): [26056306.215, 57550869.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   849.893 ±(99.9%) 320.022 MB/sec [Average]
[info]   (min, avg, max) = (734.163, 849.893, 913.311), stdev = 83.109
[info]   CI (99.9%): [529.871, 1169.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.828 ±(99.9%) 700.613 MB/sec [Average]
[info]   (min, avg, max) = (672.687, 809.828, 1009.202), stdev = 181.947
[info]   CI (99.9%): [109.215, 1510.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   30.392 ±(99.9%) 20.197 B/op [Average]
[info]   (min, avg, max) = (23.569, 30.392, 35.619), stdev = 5.245
[info]   CI (99.9%): [10.195, 50.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.032 ±(99.9%) 0.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.135), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 5.800, 9.000), stdev = 3.421
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35226443.110 ops/s
[info] # Warmup Iteration   2: 49647530.049 ops/s
[info] # Warmup Iteration   3: 49774397.755 ops/s
[info] Iteration   1: 49736598.540 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 49772221.235 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 49776654.577 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49746236.666 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 49781978.221 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   49762737.848 ±(99.9%) 77237.677 ops/s [Average]
[info]   (min, avg, max) = (49736598.540, 49762737.848, 49781978.221), stdev = 20058.379
[info]   CI (99.9%): [49685500.171, 49839975.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:25:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41568158.937 ops/s
[info] # Warmup Iteration   2: 39411093.507 ops/s
[info] # Warmup Iteration   3: 39156391.512 ops/s
[info] Iteration   1: 39876478.258 ops/s
[info]                  ·gc.alloc.rate:                                  2026.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.609 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 40308316.534 ops/s
[info]                  ·gc.alloc.rate:                                  2049.343 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.748 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 40261828.506 ops/s
[info]                  ·gc.alloc.rate:                                  2046.456 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.838 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 40177288.257 ops/s
[info]                  ·gc.alloc.rate:            2042.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80.005 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 40010877.289 ops/s
[info]                  ·gc.alloc.rate:                                  2034.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.337 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   40126957.769 ±(99.9%) 693727.831 ops/s [Average]
[info]   (min, avg, max) = (39876478.258, 40126957.769, 40308316.534), stdev = 180158.915
[info]   CI (99.9%): [39433229.938, 40820685.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2039.816 ±(99.9%) 35.841 MB/sec [Average]
[info]   (min, avg, max) = (2026.657, 2039.816, 2049.343), stdev = 9.308
[info]   CI (99.9%): [2003.975, 2075.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   2042.527 ±(99.9%) 1.263 MB/sec [Average]
[info]   (min, avg, max) = (2042.085, 2042.527, 2042.894), stdev = 0.328
[info]   CI (99.9%): [2041.264, 2043.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   80.108 ±(99.9%) 1.383 B/op [Average]
[info]   (min, avg, max) = (79.748, 80.108, 80.609), stdev = 0.359
[info]   CI (99.9%): [78.724, 81.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:24:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1337625.889 ops/s
[info] # Warmup Iteration   2: 2035190.298 ops/s
[info] # Warmup Iteration   3: 2075585.358 ops/s
[info] Iteration   1: 2085580.594 ops/s
[info]                  ·gc.alloc.rate:                                  1674.577 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.186 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1275.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.016 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 2112713.582 ops/s
[info]                  ·gc.alloc.rate:                                  1696.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1267.890 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2111552.793 ops/s
[info]                  ·gc.alloc.rate:                                  1695.491 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1268.596 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2091780.876 ops/s
[info]                  ·gc.alloc.rate:                                  1679.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1024.460 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2115117.154 ops/s
[info]                  ·gc.alloc.rate:                                  1698.676 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1266.440 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2103349.000 ±(99.9%) 52481.353 ops/s [Average]
[info]   (min, avg, max) = (2085580.594, 2103349.000, 2115117.154), stdev = 13629.241
[info]   CI (99.9%): [2050867.647, 2155830.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1688.957 ±(99.9%) 42.484 MB/sec [Average]
[info]   (min, avg, max) = (1674.577, 1688.957, 1698.676), stdev = 11.033
[info]   CI (99.9%): [1646.473, 1731.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.318 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.039, 0.186), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.029 ±(99.9%) 0.240 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.029, 0.141), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.233 ±(99.9%) 581.376 MB/sec [Average]
[info]   (min, avg, max) = (1361.313, 1631.233, 1701.956), stdev = 150.982
[info]   CI (99.9%): [1049.857, 2212.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1220.545 ±(99.9%) 422.293 B/op [Average]
[info]   (min, avg, max) = (1024.460, 1220.545, 1275.336), stdev = 109.668
[info]   CI (99.9%): [798.251, 1642.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.603 ±(99.9%) 5.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.603, 3.016), stdev = 1.349
[info]   CI (99.9%): [≈ 0, 5.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:24:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124213.739 ops/s
[info] # Warmup Iteration   2: 134612.442 ops/s
[info] # Warmup Iteration   3: 137336.117 ops/s
[info] Iteration   1: 137857.780 ops/s
[info]                  ·gc.alloc.rate:                                  2528.492 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31089.198 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 137419.286 ops/s
[info]                  ·gc.alloc.rate:                                  2520.289 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27290.335 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 137416.507 ops/s
[info]                  ·gc.alloc.rate:                                  2520.738 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27290.931 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 137590.961 ops/s
[info]                  ·gc.alloc.rate:            2523.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       28872.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2723.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31149.971 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 136770.131 ops/s
[info]                  ·gc.alloc.rate:                                  2509.592 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27419.012 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   137410.933 ±(99.9%) 1543.635 ops/s [Average]
[info]   (min, avg, max) = (136770.131, 137410.933, 137857.780), stdev = 400.877
[info]   CI (99.9%): [135867.298, 138954.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2520.611 ±(99.9%) 26.868 MB/sec [Average]
[info]   (min, avg, max) = (2509.592, 2520.611, 2528.492), stdev = 6.978
[info]   CI (99.9%): [2493.743, 2547.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.003, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.023 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2518.792 ±(99.9%) 717.371 MB/sec [Average]
[info]   (min, avg, max) = (2382.222, 2518.792, 2723.080), stdev = 186.299
[info]   CI (99.9%): [1801.422, 3236.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28847.890 ±(99.9%) 7988.308 B/op [Average]
[info]   (min, avg, max) = (27290.335, 28847.890, 31149.971), stdev = 2074.538
[info]   CI (99.9%): [20859.582, 36836.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:24:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8525.128 ops/s
[info] # Warmup Iteration   2: 21086.678 ops/s
[info] # Warmup Iteration   3: 21563.074 ops/s
[info] Iteration   1: 21577.990 ops/s
[info]                  ·gc.alloc.rate:                                  1705.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124440.135 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.886 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       123164.682 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                340.100 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 21788.290 ops/s
[info]                  ·gc.alloc.rate:                                  1722.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124440.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.632 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       122940.147 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 21785.027 ops/s
[info]                  ·gc.alloc.rate:                                  1722.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124440.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       122957.074 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 21957.166 ops/s
[info]                  ·gc.alloc.rate:                                  1736.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124440.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.597 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       121994.066 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 22014.706 ops/s
[info]                  ·gc.alloc.rate:                                  1740.455 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124440.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.375 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       121667.197 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   21824.636 ±(99.9%) 659.728 ops/s [Average]
[info]   (min, avg, max) = (21577.990, 21824.636, 22014.706), stdev = 171.329
[info]   CI (99.9%): [21164.908, 22484.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1725.444 ±(99.9%) 52.519 MB/sec [Average]
[info]   (min, avg, max) = (1705.851, 1725.444, 1740.455), stdev = 13.639
[info]   CI (99.9%): [1672.925, 1777.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   124440.044 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (124440.019, 124440.044, 124440.135), stdev = 0.051
[info]   CI (99.9%): [124439.847, 124440.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.007, 0.012), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.499 ±(99.9%) 1.126 B/op [Average]
[info]   (min, avg, max) = (0.093, 0.499, 0.886), stdev = 0.292
[info]   CI (99.9%): [≈ 0, 1.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.109 ±(99.9%) 23.133 MB/sec [Average]
[info]   (min, avg, max) = (1688.367, 1699.109, 1702.078), stdev = 6.008
[info]   CI (99.9%): [1675.976, 1722.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   122544.633 ±(99.9%) 2571.597 B/op [Average]
[info]   (min, avg, max) = (121667.197, 122544.633, 123164.682), stdev = 667.835
[info]   CI (99.9%): [119973.036, 125116.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   68.020 ±(99.9%) 585.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 68.020, 340.100), stdev = 152.097
[info]   CI (99.9%): [≈ 0, 653.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 16.000), stdev = 5.273
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68801.683 ops/s
[info] # Warmup Iteration   2: 130265.521 ops/s
[info] # Warmup Iteration   3: 131435.016 ops/s
[info] Iteration   1: 129363.396 ops/s
[info]                  ·gc.alloc.rate:                   1437.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20446.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 64.833 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 132654.688 ops/s
[info]                  ·gc.alloc.rate:                                  1473.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.502 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16154.189 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 132405.051 ops/s
[info]                  ·gc.alloc.rate:            1471.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16184.197 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 131063.431 ops/s
[info]                  ·gc.alloc.rate:            1456.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20437.193 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 131936.092 ops/s
[info]                  ·gc.alloc.rate:                                  1466.388 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16241.962 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   131484.532 ±(99.9%) 5129.120 ops/s [Average]
[info]   (min, avg, max) = (129363.396, 131484.532, 132654.688), stdev = 1332.016
[info]   CI (99.9%): [126355.412, 136613.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1460.933 ±(99.9%) 57.065 MB/sec [Average]
[info]   (min, avg, max) = (1437.349, 1460.933, 1473.862), stdev = 14.820
[info]   CI (99.9%): [1403.868, 1517.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17488.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17488.003, 17488.003, 17488.003), stdev = 0.001
[info]   CI (99.9%): [17488.003, 17488.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.127), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.309 ±(99.9%) 2.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.309, 1.502), stdev = 0.667
[info]   CI (99.9%): [≈ 0, 2.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.366 ±(99.9%) 695.536 MB/sec [Average]
[info]   (min, avg, max) = (1361.341, 1493.366, 1701.606), stdev = 180.629
[info]   CI (99.9%): [797.830, 2188.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17892.848 ±(99.9%) 8961.270 B/op [Average]
[info]   (min, avg, max) = (16154.189, 17892.848, 20446.697), stdev = 2327.213
[info]   CI (99.9%): [8931.578, 26854.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.967 ±(99.9%) 111.646 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.967, 64.833), stdev = 28.994
[info]   CI (99.9%): [≈ 0, 124.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 22.000), stdev = 8.173
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:24:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 424446.300 ops/s
[info] # Warmup Iteration   2: 486770.393 ops/s
[info] # Warmup Iteration   3: 492094.391 ops/s
[info] Iteration   1: 488858.385 ops/s
[info]                  ·gc.alloc.rate:            1011.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3249.234 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 485552.939 ops/s
[info]                  ·gc.alloc.rate:                   1004.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3271.334 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 490977.735 ops/s
[info]                  ·gc.alloc.rate:                                  1015.716 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.350 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3250.160 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.813 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 494374.779 ops/s
[info]                  ·gc.alloc.rate:                                  1022.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.132 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3251.112 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 493031.456 ops/s
[info]                  ·gc.alloc.rate:                                  1019.721 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3259.861 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   490559.059 ±(99.9%) 13449.898 ops/s [Average]
[info]   (min, avg, max) = (485552.939, 490559.059, 494374.779), stdev = 3492.896
[info]   CI (99.9%): [477109.160, 504008.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1014.731 ±(99.9%) 27.739 MB/sec [Average]
[info]   (min, avg, max) = (1004.382, 1014.731, 1022.621), stdev = 7.204
[info]   CI (99.9%): [986.992, 1042.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.097 ±(99.9%) 0.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.350), stdev = 0.153
[info]   CI (99.9%): [≈ 0, 0.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1014.827 ±(99.9%) 22.990 MB/sec [Average]
[info]   (min, avg, max) = (1009.112, 1014.827, 1021.086), stdev = 5.970
[info]   CI (99.9%): [991.837, 1037.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3256.340 ±(99.9%) 36.186 B/op [Average]
[info]   (min, avg, max) = (3249.234, 3256.340, 3271.334), stdev = 9.397
[info]   CI (99.9%): [3220.154, 3292.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.994 ±(99.9%) 21.439 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.994, 12.813), stdev = 5.568
[info]   CI (99.9%): [≈ 0, 24.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 3.317
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:23:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468890.492 ops/s
[info] # Warmup Iteration   2: 521499.055 ops/s
[info] # Warmup Iteration   3: 534544.506 ops/s
[info] Iteration   1: 536250.537 ops/s
[info]                  ·gc.alloc.rate:            523.323 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1974.521 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 538984.800 ops/s
[info]                  ·gc.alloc.rate:            525.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.296 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 982.301 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 538200.898 ops/s
[info]                  ·gc.alloc.rate:            525.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1967.419 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 538046.795 ops/s
[info]                  ·gc.alloc.rate:            525.123 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 983.986 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 536331.631 ops/s
[info]                  ·gc.alloc.rate:            523.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1974.267 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   537562.932 ±(99.9%) 4677.113 ops/s [Average]
[info]   (min, avg, max) = (536250.537, 537562.932, 538984.800), stdev = 1214.631
[info]   CI (99.9%): [532885.819, 542240.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   524.586 ±(99.9%) 4.341 MB/sec [Average]
[info]   (min, avg, max) = (523.323, 524.586, 525.858), stdev = 1.127
[info]   CI (99.9%): [520.245, 528.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   538.183 ±(99.9%) 709.475 MB/sec [Average]
[info]   (min, avg, max) = (336.296, 538.183, 672.827), stdev = 184.248
[info]   CI (99.9%): [≈ 0, 1247.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   1576.499 ±(99.9%) 2085.758 B/op [Average]
[info]   (min, avg, max) = (982.301, 1576.499, 1974.521), stdev = 541.665
[info]   CI (99.9%): [≈ 0, 3662.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:23:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23168.799 ops/s
[info] # Warmup Iteration   2: 43542.439 ops/s
[info] # Warmup Iteration   3: 44332.744 ops/s
[info] Iteration   1: 44119.333 ops/s
[info]                  ·gc.alloc.rate:            753.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23952.786 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 44015.632 ops/s
[info]                  ·gc.alloc.rate:                   752.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36061.696 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.819 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 44401.923 ops/s
[info]                  ·gc.alloc.rate:                   758.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23823.760 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.611 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 44366.864 ops/s
[info]                  ·gc.alloc.rate:            757.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23866.718 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 44259.928 ops/s
[info]                  ·gc.alloc.rate:                   756.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24065.446 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 142.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   44232.736 ±(99.9%) 630.814 ops/s [Average]
[info]   (min, avg, max) = (44015.632, 44232.736, 44401.923), stdev = 163.820
[info]   CI (99.9%): [43601.922, 44863.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   755.645 ±(99.9%) 10.668 MB/sec [Average]
[info]   (min, avg, max) = (752.039, 755.645, 758.611), stdev = 2.770
[info]   CI (99.9%): [744.977, 766.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26888.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26888.009, 26888.010, 26888.010), stdev = 0.001
[info]   CI (99.9%): [26888.008, 26888.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   740.311 ±(99.9%) 577.610 MB/sec [Average]
[info]   (min, avg, max) = (671.395, 740.311, 1008.620), stdev = 150.003
[info]   CI (99.9%): [162.701, 1317.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   26354.081 ±(99.9%) 20899.400 B/op [Average]
[info]   (min, avg, max) = (23823.760, 26354.081, 36061.696), stdev = 5427.508
[info]   CI (99.9%): [5454.682, 47253.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   37.910 ±(99.9%) 228.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.910, 142.119), stdev = 59.449
[info]   CI (99.9%): [≈ 0, 266.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.000, 13.000), stdev = 2.550
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:23:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 291770.772 ops/s
[info] # Warmup Iteration   2: 361238.471 ops/s
[info] # Warmup Iteration   3: 366161.724 ops/s
[info] Iteration   1: 365553.577 ops/s
[info]                  ·gc.alloc.rate:                                  2480.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10258.675 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 365509.650 ops/s
[info]                  ·gc.alloc.rate:            2480.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2723.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11726.061 B/op
[info]                  ·gc.count:                 8.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 368506.747 ops/s
[info]                  ·gc.alloc.rate:                                  2500.331 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10176.842 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 363806.251 ops/s
[info]                  ·gc.alloc.rate:                                  2468.374 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10307.900 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 361429.767 ops/s
[info]                  ·gc.alloc.rate:                                  2452.971 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11857.920 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   364961.199 ±(99.9%) 10009.367 ops/s [Average]
[info]   (min, avg, max) = (361429.767, 364961.199, 368506.747), stdev = 2599.401
[info]   CI (99.9%): [354951.832, 374970.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2476.470 ±(99.9%) 67.168 MB/sec [Average]
[info]   (min, avg, max) = (2452.971, 2476.470, 2500.331), stdev = 17.443
[info]   CI (99.9%): [2409.302, 2543.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.001, 10680.001, 10680.001), stdev = 0.001
[info]   CI (99.9%): [10680.001, 10680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.016), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2518.833 ±(99.9%) 718.778 MB/sec [Average]
[info]   (min, avg, max) = (2382.373, 2518.833, 2723.514), stdev = 186.664
[info]   CI (99.9%): [1800.054, 3237.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10865.480 ±(99.9%) 3266.736 B/op [Average]
[info]   (min, avg, max) = (10176.842, 10865.480, 11857.920), stdev = 848.361
[info]   CI (99.9%): [7598.744, 14132.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:23:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190490.773 ops/s
[info] # Warmup Iteration   2: 376934.848 ops/s
[info] # Warmup Iteration   3: 379856.687 ops/s
[info] Iteration   1: 381331.910 ops/s
[info]                  ·gc.alloc.rate:            1009.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4165.194 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 380685.372 ops/s
[info]                  ·gc.alloc.rate:            1007.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4172.305 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 381497.034 ops/s
[info]                  ·gc.alloc.rate:                   1010.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4177.178 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.237 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 384857.525 ops/s
[info]                  ·gc.alloc.rate:                                  1019.028 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.201 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4176.118 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 384416.988 ops/s
[info]                  ·gc.alloc.rate:                                  1018.341 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4180.919 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   382557.766 ±(99.9%) 7426.687 ops/s [Average]
[info]   (min, avg, max) = (380685.372, 382557.766, 384857.525), stdev = 1928.687
[info]   CI (99.9%): [375131.079, 389984.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1013.017 ±(99.9%) 20.177 MB/sec [Average]
[info]   (min, avg, max) = (1007.977, 1013.017, 1019.028), stdev = 5.240
[info]   CI (99.9%): [992.840, 1033.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.049), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.042 ±(99.9%) 0.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.201), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.562 ±(99.9%) 24.131 MB/sec [Average]
[info]   (min, avg, max) = (1008.922, 1014.562, 1021.497), stdev = 6.267
[info]   CI (99.9%): [990.432, 1038.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4174.343 ±(99.9%) 22.965 B/op [Average]
[info]   (min, avg, max) = (4165.194, 4174.343, 4180.919), stdev = 5.964
[info]   CI (99.9%): [4151.378, 4197.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.847 ±(99.9%) 33.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.847, 19.237), stdev = 8.603
[info]   CI (99.9%): [≈ 0, 36.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 13.000), stdev = 4.868
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:22:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 386418.170 ops/s
[info] # Warmup Iteration   2: 425755.722 ops/s
[info] # Warmup Iteration   3: 423713.355 ops/s
[info] Iteration   1: 426685.583 ops/s
[info]                  ·gc.alloc.rate:            841.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2486.588 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 424951.299 ops/s
[info]                  ·gc.alloc.rate:            838.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3745.082 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 418636.401 ops/s
[info]                  ·gc.alloc.rate:            825.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2534.329 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 423732.252 ops/s
[info]                  ·gc.alloc.rate:                                  835.727 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3104.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.346 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3768.172 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.371 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 426836.774 ops/s
[info]                  ·gc.alloc.rate:                                  841.816 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3104.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2510.271 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   424168.462 ±(99.9%) 12895.720 ops/s [Average]
[info]   (min, avg, max) = (418636.401, 424168.462, 426836.774), stdev = 3348.977
[info]   CI (99.9%): [411272.742, 437064.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   836.550 ±(99.9%) 25.629 MB/sec [Average]
[info]   (min, avg, max) = (825.514, 836.550, 841.816), stdev = 6.656
[info]   CI (99.9%): [810.921, 862.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.093), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.092 ±(99.9%) 0.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.346), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.958 ±(99.9%) 710.110 MB/sec [Average]
[info]   (min, avg, max) = (674.009, 810.958, 1014.550), stdev = 184.413
[info]   CI (99.9%): [100.848, 1521.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3008.888 ±(99.9%) 2629.397 B/op [Average]
[info]   (min, avg, max) = (2486.588, 3008.888, 3768.172), stdev = 682.846
[info]   CI (99.9%): [379.491, 5638.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.474 ±(99.9%) 21.303 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.474, 12.371), stdev = 5.532
[info]   CI (99.9%): [≈ 0, 23.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 8.000), stdev = 2.280
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:22:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55724.370 ops/s
[info] # Warmup Iteration   2: 91910.967 ops/s
[info] # Warmup Iteration   3: 93933.242 ops/s
[info] Iteration   1: 95817.396 ops/s
[info]                  ·gc.alloc.rate:                                  3469.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61504.583 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 95439.435 ops/s
[info]                  ·gc.alloc.rate:                                  3454.621 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56132.913 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 95844.681 ops/s
[info]                  ·gc.alloc.rate:                                  3470.719 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55895.176 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 95560.121 ops/s
[info]                  ·gc.alloc.rate:                                  3460.010 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56062.436 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 95659.996 ops/s
[info]                  ·gc.alloc.rate:                                  3463.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56002.084 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   95664.326 ±(99.9%) 659.719 ops/s [Average]
[info]   (min, avg, max) = (95439.435, 95664.326, 95844.681), stdev = 171.327
[info]   CI (99.9%): [95004.607, 96324.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3463.514 ±(99.9%) 25.488 MB/sec [Average]
[info]   (min, avg, max) = (3454.621, 3463.514, 3470.719), stdev = 6.619
[info]   CI (99.9%): [3438.026, 3489.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56984.004, 56984.004, 56984.005), stdev = 0.001
[info]   CI (99.9%): [56984.004, 56984.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.029 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.029, 0.051), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3471.847 ±(99.9%) 586.610 MB/sec [Average]
[info]   (min, avg, max) = (3403.024, 3471.847, 3744.361), stdev = 152.341
[info]   CI (99.9%): [2885.238, 4058.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57119.438 ±(99.9%) 9445.324 B/op [Average]
[info]   (min, avg, max) = (55895.176, 57119.438, 61504.583), stdev = 2452.921
[info]   CI (99.9%): [47674.114, 66564.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   51.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 10.000), stdev = 0.894
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:22:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 228027.961 ops/s
[info] # Warmup Iteration   2: 307080.106 ops/s
[info] # Warmup Iteration   3: 286741.202 ops/s
[info] Iteration   1: 303035.593 ops/s
[info]                  ·gc.alloc.rate:            462.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3501.354 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 285072.674 ops/s
[info]                  ·gc.alloc.rate:            434.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1861.010 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 304543.006 ops/s
[info]                  ·gc.alloc.rate:            464.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1741.981 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 304752.694 ops/s
[info]                  ·gc.alloc.rate:            464.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3481.641 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 270334.918 ops/s
[info]                  ·gc.alloc.rate:            412.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       2400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1962.427 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   293547.777 ±(99.9%) 59252.642 ops/s [Average]
[info]   (min, avg, max) = (270334.918, 293547.777, 304752.694), stdev = 15387.723
[info]   CI (99.9%): [234295.135, 352800.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   447.596 ±(99.9%) 90.432 MB/sec [Average]
[info]   (min, avg, max) = (412.177, 447.596, 464.774), stdev = 23.485
[info]   CI (99.9%): [357.164, 538.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2400.001, 2400.001, 2400.002), stdev = 0.001
[info]   CI (99.9%): [2400.001, 2400.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.878 ±(99.9%) 710.994 MB/sec [Average]
[info]   (min, avg, max) = (337.028, 471.878, 674.240), stdev = 184.643
[info]   CI (99.9%): [≈ 0, 1182.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2509.683 ±(99.9%) 3464.374 B/op [Average]
[info]   (min, avg, max) = (1741.981, 2509.683, 3501.354), stdev = 899.687
[info]   CI (99.9%): [≈ 0, 5974.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:22:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333209.921 ops/s
[info] # Warmup Iteration   2: 589205.792 ops/s
[info] # Warmup Iteration   3: 595060.849 ops/s
[info] Iteration   1: 594825.256 ops/s
[info]                  ·gc.alloc.rate:            435.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 888.273 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 597375.904 ops/s
[info]                  ·gc.alloc.rate:            437.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 884.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 592517.856 ops/s
[info]                  ·gc.alloc.rate:                   433.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1785.291 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.769 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 597227.390 ops/s
[info]                  ·gc.alloc.rate:            437.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 884.728 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 598321.549 ops/s
[info]                  ·gc.alloc.rate:            437.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 883.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   596053.591 ±(99.9%) 9087.883 ops/s [Average]
[info]   (min, avg, max) = (592517.856, 596053.591, 598321.549), stdev = 2360.094
[info]   CI (99.9%): [586965.708, 605141.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   436.292 ±(99.9%) 6.714 MB/sec [Average]
[info]   (min, avg, max) = (433.670, 436.292, 437.901), stdev = 1.744
[info]   CI (99.9%): [429.578, 443.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1152.001, 1152.001, 1152.001), stdev = 0.001
[info]   CI (99.9%): [1152.001, 1152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.000 ±(99.9%) 579.196 MB/sec [Average]
[info]   (min, avg, max) = (335.690, 403.000, 672.071), stdev = 150.415
[info]   CI (99.9%): [≈ 0, 982.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1065.182 ±(99.9%) 1550.106 B/op [Average]
[info]   (min, avg, max) = (883.110, 1065.182, 1785.291), stdev = 402.558
[info]   CI (99.9%): [≈ 0, 2615.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.354 ±(99.9%) 3.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.354, 1.769), stdev = 0.791
[info]   CI (99.9%): [≈ 0, 3.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:22:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2161396.633 ops/s
[info] # Warmup Iteration   2: 2360774.236 ops/s
[info] # Warmup Iteration   3: 2419118.948 ops/s
[info] Iteration   1: 2434432.956 ops/s
[info]                  ·gc.alloc.rate:            1125.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 652.442 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2412037.104 ops/s
[info]                  ·gc.alloc.rate:                   1115.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        878.005 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.608 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 2415376.007 ops/s
[info]                  ·gc.alloc.rate:                                  1117.360 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       665.397 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 2412483.463 ops/s
[info]                  ·gc.alloc.rate:                                  1115.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       666.200 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2374078.874 ops/s
[info]                  ·gc.alloc.rate:            1098.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 902.614 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2409681.681 ±(99.9%) 84495.290 ops/s [Average]
[info]   (min, avg, max) = (2374078.874, 2409681.681, 2434432.956), stdev = 21943.158
[info]   CI (99.9%): [2325186.391, 2494176.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1114.527 ±(99.9%) 38.945 MB/sec [Average]
[info]   (min, avg, max) = (1098.154, 1114.527, 1125.961), stdev = 10.114
[info]   CI (99.9%): [1075.582, 1153.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.153 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.058), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1151.638 ±(99.9%) 709.743 MB/sec [Average]
[info]   (min, avg, max) = (1009.100, 1151.638, 1361.549), stdev = 184.318
[info]   CI (99.9%): [441.895, 1861.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   752.932 ±(99.9%) 484.520 B/op [Average]
[info]   (min, avg, max) = (652.442, 752.932, 902.614), stdev = 125.828
[info]   CI (99.9%): [268.412, 1237.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.522 ±(99.9%) 4.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.522, 2.608), stdev = 1.166
[info]   CI (99.9%): [≈ 0, 5.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 12.000), stdev = 4.438
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2282850.579 ops/s
[info] # Warmup Iteration   2: 2475709.245 ops/s
[info] # Warmup Iteration   3: 2470536.855 ops/s
[info] Iteration   1: 2471577.486 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2471185.388 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2469493.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2471704.073 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2470794.695 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2470950.942 ±(99.9%) 3424.988 ops/s [Average]
[info]   (min, avg, max) = (2469493.066, 2470950.942, 2471704.073), stdev = 889.459
[info]   CI (99.9%): [2467525.954, 2474375.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:21:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304347.242 ops/s
[info] # Warmup Iteration   2: 399855.838 ops/s
[info] # Warmup Iteration   3: 406086.098 ops/s
[info] Iteration   1: 403586.893 ops/s
[info]                  ·gc.alloc.rate:            580.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2623.687 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 402284.125 ops/s
[info]                  ·gc.alloc.rate:            578.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2632.197 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 399604.933 ops/s
[info]                  ·gc.alloc.rate:            574.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2649.854 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 401580.820 ops/s
[info]                  ·gc.alloc.rate:            577.833 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1318.402 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 401836.439 ops/s
[info]                  ·gc.alloc.rate:            577.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2635.197 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   401778.642 ±(99.9%) 5544.382 ops/s [Average]
[info]   (min, avg, max) = (399604.933, 401778.642, 403586.893), stdev = 1439.859
[info]   CI (99.9%): [396234.260, 407323.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   577.915 ±(99.9%) 7.786 MB/sec [Average]
[info]   (min, avg, max) = (574.808, 577.915, 580.417), stdev = 2.022
[info]   CI (99.9%): [570.129, 585.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.452 ±(99.9%) 578.959 MB/sec [Average]
[info]   (min, avg, max) = (336.491, 605.452, 672.773), stdev = 150.354
[info]   CI (99.9%): [26.493, 1184.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2371.867 ±(99.9%) 2267.955 B/op [Average]
[info]   (min, avg, max) = (1318.402, 2371.867, 2649.854), stdev = 588.981
[info]   CI (99.9%): [103.913, 4639.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:21:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29525.766 ops/s
[info] # Warmup Iteration   2: 37856.681 ops/s
[info] # Warmup Iteration   3: 38159.838 ops/s
[info] Iteration   1: 38127.171 ops/s
[info]                  ·gc.alloc.rate:            1285.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55654.215 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 38146.290 ops/s
[info]                  ·gc.alloc.rate:                                  1285.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53040.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.923 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55902.799 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                137.421 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 38448.299 ops/s
[info]                  ·gc.alloc.rate:                                  1296.055 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53040.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55734.998 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 38431.205 ops/s
[info]                  ·gc.alloc.rate:                                  1295.244 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53040.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       41819.736 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 38498.363 ops/s
[info]                  ·gc.alloc.rate:            1297.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55659.733 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   38330.266 ±(99.9%) 687.401 ops/s [Average]
[info]   (min, avg, max) = (38127.171, 38330.266, 38498.363), stdev = 178.516
[info]   CI (99.9%): [37642.864, 39017.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1291.869 ±(99.9%) 23.365 MB/sec [Average]
[info]   (min, avg, max) = (1285.030, 1291.869, 1297.481), stdev = 6.068
[info]   CI (99.9%): [1268.505, 1315.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53040.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (53040.011, 53040.011, 53040.012), stdev = 0.001
[info]   CI (99.9%): [53040.009, 53040.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.886 ±(99.9%) 7.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.886, 4.136), stdev = 1.820
[info]   CI (99.9%): [≈ 0, 7.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1289.601 ±(99.9%) 578.055 MB/sec [Average]
[info]   (min, avg, max) = (1021.244, 1289.601, 1361.908), stdev = 150.119
[info]   CI (99.9%): [711.545, 1867.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   52954.296 ±(99.9%) 23971.098 B/op [Average]
[info]   (min, avg, max) = (41819.736, 52954.296, 55902.799), stdev = 6225.218
[info]   CI (99.9%): [28983.199, 76925.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.484 ±(99.9%) 236.647 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.484, 137.421), stdev = 61.456
[info]   CI (99.9%): [≈ 0, 264.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 4.243
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:21:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26755.838 ops/s
[info] # Warmup Iteration   2: 52151.948 ops/s
[info] # Warmup Iteration   3: 52628.453 ops/s
[info] Iteration   1: 53013.506 ops/s
[info]                  ·gc.alloc.rate:            955.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.887 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19974.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 52678.130 ops/s
[info]                  ·gc.alloc.rate:                   948.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30131.609 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.902 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 52407.742 ops/s
[info]                  ·gc.alloc.rate:                   943.969 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30266.812 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 160.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 52561.082 ops/s
[info]                  ·gc.alloc.rate:                                  946.700 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28352.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.598 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30578.231 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 52678.044 ops/s
[info]                  ·gc.alloc.rate:            949.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30511.484 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   52667.701 ±(99.9%) 858.321 ops/s [Average]
[info]   (min, avg, max) = (52407.742, 52667.701, 53013.506), stdev = 222.903
[info]   CI (99.9%): [51809.380, 53526.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   948.744 ±(99.9%) 15.857 MB/sec [Average]
[info]   (min, avg, max) = (943.969, 948.744, 955.127), stdev = 4.118
[info]   CI (99.9%): [932.887, 964.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28352.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28352.008, 28352.008, 28352.008), stdev = 0.001
[info]   CI (99.9%): [28352.007, 28352.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.120), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.720 ±(99.9%) 6.195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.720, 3.598), stdev = 1.609
[info]   CI (99.9%): [≈ 0, 6.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.283 ±(99.9%) 589.049 MB/sec [Average]
[info]   (min, avg, max) = (672.887, 946.283, 1021.358), stdev = 152.974
[info]   CI (99.9%): [357.234, 1535.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   28292.428 ±(99.9%) 17919.568 B/op [Average]
[info]   (min, avg, max) = (19974.006, 28292.428, 30578.231), stdev = 4653.655
[info]   CI (99.9%): [10372.860, 46211.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.328), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 10.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   35.988 ±(99.9%) 269.078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.988, 160.036), stdev = 69.879
[info]   CI (99.9%): [≈ 0, 305.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 13.000), stdev = 5.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:21:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64655.091 ops/s
[info] # Warmup Iteration   2: 71318.204 ops/s
[info] # Warmup Iteration   3: 72761.774 ops/s
[info] Iteration   1: 68081.221 ops/s
[info]                  ·gc.alloc.rate:            1043.846 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23375.947 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 71941.098 ops/s
[info]                  ·gc.alloc.rate:            1103.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22121.918 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 72548.691 ops/s
[info]                  ·gc.alloc.rate:                                  1112.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24136.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.512 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29465.504 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                72.255 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 73196.091 ops/s
[info]                  ·gc.alloc.rate:                                  1122.743 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24136.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21958.132 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 73264.116 ops/s
[info]                  ·gc.alloc.rate:            1123.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21937.455 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   71806.244 ±(99.9%) 8281.632 ops/s [Average]
[info]   (min, avg, max) = (68081.221, 71806.244, 73264.116), stdev = 2150.713
[info]   CI (99.9%): [63524.612, 80087.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1101.207 ±(99.9%) 127.513 MB/sec [Average]
[info]   (min, avg, max) = (1043.846, 1101.207, 1123.457), stdev = 33.115
[info]   CI (99.9%): [973.693, 1228.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24136.006, 24136.006, 24136.006), stdev = 0.001
[info]   CI (99.9%): [24136.005, 24136.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.116), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.511 ±(99.9%) 4.309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.512), stdev = 1.119
[info]   CI (99.9%): [≈ 0, 4.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.632 ±(99.9%) 589.743 MB/sec [Average]
[info]   (min, avg, max) = (1010.975, 1084.632, 1358.451), stdev = 153.154
[info]   CI (99.9%): [494.889, 1674.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23771.791 ±(99.9%) 12470.275 B/op [Average]
[info]   (min, avg, max) = (21937.455, 23771.791, 29465.504), stdev = 3238.491
[info]   CI (99.9%): [11301.516, 36242.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.451 ±(99.9%) 124.427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.451, 72.255), stdev = 32.313
[info]   CI (99.9%): [≈ 0, 138.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 3.507
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:20:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7667.996 ops/s
[info] # Warmup Iteration   2: 18716.085 ops/s
[info] # Warmup Iteration   3: 18962.094 ops/s
[info] Iteration   1: 18876.739 ops/s
[info]                  ·gc.alloc.rate:                   1361.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              113520.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        112127.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.536 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 19045.206 ops/s
[info]                  ·gc.alloc.rate:                                  1373.546 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113520.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.354 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       111798.932 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                385.324 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 19185.134 ops/s
[info]                  ·gc.alloc.rate:                                  1384.107 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113520.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.042 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.479 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       139617.056 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 18851.467 ops/s
[info]                  ·gc.alloc.rate:                                  1359.529 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113520.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113672.201 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19272.003 ops/s
[info]                  ·gc.alloc.rate:                                  1390.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113520.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.680 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       111189.528 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   19046.110 ±(99.9%) 712.445 ops/s [Average]
[info]   (min, avg, max) = (18851.467, 19046.110, 19272.003), stdev = 185.020
[info]   CI (99.9%): [18333.665, 19758.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1373.720 ±(99.9%) 52.243 MB/sec [Average]
[info]   (min, avg, max) = (1359.529, 1373.720, 1390.186), stdev = 13.567
[info]   CI (99.9%): [1321.477, 1425.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   113520.054 ±(99.9%) 0.267 B/op [Average]
[info]   (min, avg, max) = (113520.021, 113520.054, 113520.178), stdev = 0.069
[info]   CI (99.9%): [113519.787, 113520.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.124 ±(99.9%) 5.477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.124, 3.479), stdev = 1.422
[info]   CI (99.9%): [≈ 0, 6.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.510 ±(99.9%) 598.578 MB/sec [Average]
[info]   (min, avg, max) = (1344.533, 1424.510, 1702.298), stdev = 155.449
[info]   CI (99.9%): [825.932, 2023.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   117680.997 ±(99.9%) 47350.509 B/op [Average]
[info]   (min, avg, max) = (111189.528, 117680.997, 139617.056), stdev = 12296.777
[info]   CI (99.9%): [70330.488, 165031.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   88.172 ±(99.9%) 646.310 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88.172, 385.324), stdev = 167.845
[info]   CI (99.9%): [≈ 0, 734.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 18.000), stdev = 6.481
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:20:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74057.563 ops/s
[info] # Warmup Iteration   2: 143115.660 ops/s
[info] # Warmup Iteration   3: 143614.705 ops/s
[info] Iteration   1: 144420.893 ops/s
[info]                  ·gc.alloc.rate:                   1329.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14642.300 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.259 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 143680.942 ops/s
[info]                  ·gc.alloc.rate:                                  1323.542 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.593 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14820.166 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                43.782 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 141773.568 ops/s
[info]                  ·gc.alloc.rate:                                  1305.887 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15115.941 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 145897.842 ops/s
[info]                  ·gc.alloc.rate:            1343.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.538 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14688.314 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 145691.501 ops/s
[info]                  ·gc.alloc.rate:            1341.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14709.079 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   144292.949 ±(99.9%) 6463.415 ops/s [Average]
[info]   (min, avg, max) = (141773.568, 144292.949, 145897.842), stdev = 1678.528
[info]   CI (99.9%): [137829.534, 150756.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1328.960 ±(99.9%) 59.109 MB/sec [Average]
[info]   (min, avg, max) = (1305.887, 1328.960, 1343.711), stdev = 15.350
[info]   CI (99.9%): [1269.851, 1388.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14496.003, 14496.003, 14496.003), stdev = 0.001
[info]   CI (99.9%): [14496.003, 14496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.145), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.329 ±(99.9%) 2.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.329, 1.593), stdev = 0.707
[info]   CI (99.9%): [≈ 0, 3.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.243 ±(99.9%) 31.046 MB/sec [Average]
[info]   (min, avg, max) = (1343.382, 1356.243, 1361.735), stdev = 8.063
[info]   CI (99.9%): [1325.196, 1387.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14795.160 ±(99.9%) 734.954 B/op [Average]
[info]   (min, avg, max) = (14642.300, 14795.160, 15115.941), stdev = 190.865
[info]   CI (99.9%): [14060.206, 15530.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.208 ±(99.9%) 73.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.208, 43.782), stdev = 19.030
[info]   CI (99.9%): [≈ 0, 83.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 18.000), stdev = 6.611
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:20:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 428429.813 ops/s
[info] # Warmup Iteration   2: 488399.915 ops/s
[info] # Warmup Iteration   3: 491352.977 ops/s
[info] Iteration   1: 491211.976 ops/s
[info]                  ·gc.alloc.rate:            541.714 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2155.667 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 492532.466 ops/s
[info]                  ·gc.alloc.rate:            543.162 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1074.954 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 494883.130 ops/s
[info]                  ·gc.alloc.rate:                   545.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2141.810 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 490117.735 ops/s
[info]                  ·gc.alloc.rate:            540.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2160.486 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 491376.672 ops/s
[info]                  ·gc.alloc.rate:            541.908 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1077.476 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   492024.396 ±(99.9%) 6980.567 ops/s [Average]
[info]   (min, avg, max) = (490117.735, 492024.396, 494883.130), stdev = 1812.831
[info]   CI (99.9%): [485043.829, 499004.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   542.632 ±(99.9%) 7.741 MB/sec [Average]
[info]   (min, avg, max) = (540.553, 542.632, 545.825), stdev = 2.010
[info]   CI (99.9%): [534.891, 550.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.298 ±(99.9%) 709.919 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 538.298, 673.417), stdev = 184.364
[info]   CI (99.9%): [≈ 0, 1248.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1722.079 ±(99.9%) 2270.458 B/op [Average]
[info]   (min, avg, max) = (1074.954, 1722.079, 2160.486), stdev = 589.631
[info]   CI (99.9%): [≈ 0, 3992.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.424 ±(99.9%) 3.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.424, 2.119), stdev = 0.947
[info]   CI (99.9%): [≈ 0, 4.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:20:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457730.086 ops/s
[info] # Warmup Iteration   2: 506380.637 ops/s
[info] # Warmup Iteration   3: 501492.434 ops/s
[info] Iteration   1: 495075.330 ops/s
[info]                  ·gc.alloc.rate:      5.032 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 498283.172 ops/s
[info]                  ·gc.alloc.rate:      5.065 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 498389.166 ops/s
[info]                  ·gc.alloc.rate:      5.066 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 502212.406 ops/s
[info]                  ·gc.alloc.rate:      5.105 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 496426.499 ops/s
[info]                  ·gc.alloc.rate:      5.046 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   498077.314 ±(99.9%) 10363.834 ops/s [Average]
[info]   (min, avg, max) = (495075.330, 498077.314, 502212.406), stdev = 2691.455
[info]   CI (99.9%): [487713.480, 508441.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.063 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (5.032, 5.063, 5.105), stdev = 0.028
[info]   CI (99.9%): [4.957, 5.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:19:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31179.065 ops/s
[info] # Warmup Iteration   2: 60041.286 ops/s
[info] # Warmup Iteration   3: 59837.328 ops/s
[info] Iteration   1: 60553.862 ops/s
[info]                  ·gc.alloc.rate:            1085.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       28224.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26212.236 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 60534.230 ops/s
[info]                  ·gc.alloc.rate:                   1085.507 MB/sec
[info]                  ·gc.alloc.rate.norm:              28224.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26186.257 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 61109.492 ops/s
[info]                  ·gc.alloc.rate:                                  1095.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28224.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.676 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26196.815 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                102.934 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 60198.233 ops/s
[info]                  ·gc.alloc.rate:                                  1079.866 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28224.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.983 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26698.118 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 61240.520 ops/s
[info]                  ·gc.alloc.rate:            1098.363 MB/sec
[info]                  ·gc.alloc.rate.norm:       28224.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34991.337 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   60727.267 ±(99.9%) 1674.847 ops/s [Average]
[info]   (min, avg, max) = (60198.233, 60727.267, 61240.520), stdev = 434.952
[info]   CI (99.9%): [59052.421, 62402.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1089.084 ±(99.9%) 29.904 MB/sec [Average]
[info]   (min, avg, max) = (1079.866, 1089.084, 1098.363), stdev = 7.766
[info]   CI (99.9%): [1059.180, 1118.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28224.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28224.007, 28224.007, 28224.007), stdev = 0.001
[info]   CI (99.9%): [28224.006, 28224.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.038), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.332 ±(99.9%) 1.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 0.983), stdev = 0.467
[info]   CI (99.9%): [≈ 0, 2.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.183 ±(99.9%) 600.015 MB/sec [Average]
[info]   (min, avg, max) = (1007.134, 1083.183, 1361.719), stdev = 155.822
[info]   CI (99.9%): [483.168, 1683.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   28056.953 ±(99.9%) 14950.061 B/op [Average]
[info]   (min, avg, max) = (26186.257, 28056.953, 34991.337), stdev = 3882.483
[info]   CI (99.9%): [13106.892, 43007.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   24.051 ±(99.9%) 172.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.051, 102.934), stdev = 44.730
[info]   CI (99.9%): [≈ 0, 196.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 14.000), stdev = 5.292
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:19:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1042242.383 ops/s
[info] # Warmup Iteration   2: 1998778.871 ops/s
[info] # Warmup Iteration   3: 2010806.353 ops/s
[info] Iteration   1: 2026567.710 ops/s
[info]                  ·gc.alloc.rate:                                  2863.593 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2114.847 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 1996128.833 ops/s
[info]                  ·gc.alloc.rate:                                  2820.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2147.100 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 2009299.022 ops/s
[info]                  ·gc.alloc.rate:                                  2839.613 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2399.615 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1996494.497 ops/s
[info]                  ·gc.alloc.rate:                                  2821.575 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.514 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2146.707 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 2010982.855 ops/s
[info]                  ·gc.alloc.rate:            2842.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       2224.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3064.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2397.532 B/op
[info]                  ·gc.count:                 9.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2007894.583 ±(99.9%) 48271.104 ops/s [Average]
[info]   (min, avg, max) = (1996128.833, 2007894.583, 2026567.710), stdev = 12535.853
[info]   CI (99.9%): [1959623.479, 2056165.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2837.590 ±(99.9%) 67.722 MB/sec [Average]
[info]   (min, avg, max) = (2820.898, 2837.590, 2863.593), stdev = 17.587
[info]   CI (99.9%): [2769.868, 2905.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2224.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.000, 2224.000, 2224.000), stdev = 0.001
[info]   CI (99.9%): [2224.000, 2224.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2859.561 ±(99.9%) 718.429 MB/sec [Average]
[info]   (min, avg, max) = (2723.048, 2859.561, 3064.046), stdev = 186.574
[info]   CI (99.9%): [2141.132, 3577.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2241.160 ±(99.9%) 555.628 B/op [Average]
[info]   (min, avg, max) = (2114.847, 2241.160, 2399.615), stdev = 144.295
[info]   CI (99.9%): [1685.533, 2796.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:19:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.853 ops/s
[info] # Warmup Iteration   2: 820209.238 ops/s
[info] # Warmup Iteration   3: 832974.183 ops/s
[info] Iteration   1: 870365.686 ops/s
[info]                  ·gc.alloc.rate:            552.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 603.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 867908.219 ops/s
[info]                  ·gc.alloc.rate:            551.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1210.389 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 832146.697 ops/s
[info]                  ·gc.alloc.rate:            528.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1262.417 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 831213.240 ops/s
[info]                  ·gc.alloc.rate:            528.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 631.915 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 828069.838 ops/s
[info]                  ·gc.alloc.rate:            526.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1268.627 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   845940.736 ±(99.9%) 81813.546 ops/s [Average]
[info]   (min, avg, max) = (828069.838, 845940.736, 870365.686), stdev = 21246.718
[info]   CI (99.9%): [764127.190, 927754.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   537.419 ±(99.9%) 51.923 MB/sec [Average]
[info]   (min, avg, max) = (526.076, 537.419, 552.899), stdev = 13.484
[info]   CI (99.9%): [485.496, 589.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.906 ±(99.9%) 703.798 MB/sec [Average]
[info]   (min, avg, max) = (333.667, 533.906, 667.394), stdev = 182.774
[info]   CI (99.9%): [≈ 0, 1237.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   995.367 ±(99.9%) 1330.965 B/op [Average]
[info]   (min, avg, max) = (603.486, 995.367, 1268.627), stdev = 345.648
[info]   CI (99.9%): [≈ 0, 2326.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:19:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32239.376 ops/s
[info] # Warmup Iteration   2: 276748.696 ops/s
[info] # Warmup Iteration   3: 288671.163 ops/s
[info] Iteration   1: 288580.270 ops/s
[info]                  ·gc.alloc.rate:            555.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       3032.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3662.094 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 291510.494 ops/s
[info]                  ·gc.alloc.rate:                   561.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1812.571 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.596 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 275923.811 ops/s
[info]                  ·gc.alloc.rate:                   531.523 MB/sec
[info]                  ·gc.alloc.rate.norm:              3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3833.826 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 292098.218 ops/s
[info]                  ·gc.alloc.rate:            562.628 MB/sec
[info]                  ·gc.alloc.rate.norm:       3032.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3621.634 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 288443.125 ops/s
[info]                  ·gc.alloc.rate:                   555.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              3032.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1831.828 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.635 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   287311.184 ±(99.9%) 25332.002 ops/s [Average]
[info]   (min, avg, max) = (275923.811, 287311.184, 292098.218), stdev = 6578.640
[info]   CI (99.9%): [261979.182, 312643.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   553.451 ±(99.9%) 48.796 MB/sec [Average]
[info]   (min, avg, max) = (531.523, 553.451, 562.628), stdev = 12.672
[info]   CI (99.9%): [504.655, 602.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3032.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3032.001, 3032.001, 3032.002), stdev = 0.001
[info]   CI (99.9%): [3032.001, 3032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.390 ±(99.9%) 708.939 MB/sec [Average]
[info]   (min, avg, max) = (335.672, 537.390, 672.086), stdev = 184.109
[info]   CI (99.9%): [≈ 0, 1246.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2952.390 ±(99.9%) 3984.692 B/op [Average]
[info]   (min, avg, max) = (1812.571, 2952.390, 3833.826), stdev = 1034.812
[info]   CI (99.9%): [≈ 0, 6937.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.206 ±(99.9%) 7.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.206, 3.800), stdev = 2.015
[info]   CI (99.9%): [≈ 0, 9.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:19:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 678110.448 ops/s
[info] # Warmup Iteration   2: 740033.230 ops/s
[info] # Warmup Iteration   3: 754257.898 ops/s
[info] Iteration   1: 753003.745 ops/s
[info]                  ·gc.alloc.rate:            566.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1409.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 749982.440 ops/s
[info]                  ·gc.alloc.rate:            564.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1414.684 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 742901.620 ops/s
[info]                  ·gc.alloc.rate:            558.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 714.099 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 743899.947 ops/s
[info]                  ·gc.alloc.rate:            559.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1426.258 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 741501.423 ops/s
[info]                  ·gc.alloc.rate:            557.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1430.868 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   746257.835 ±(99.9%) 19139.991 ops/s [Average]
[info]   (min, avg, max) = (741501.423, 746257.835, 753003.745), stdev = 4970.595
[info]   CI (99.9%): [727117.844, 765397.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   561.342 ±(99.9%) 14.654 MB/sec [Average]
[info]   (min, avg, max) = (557.728, 561.342, 566.618), stdev = 3.805
[info]   CI (99.9%): [546.689, 575.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.662 ±(99.9%) 580.436 MB/sec [Average]
[info]   (min, avg, max) = (337.015, 606.662, 674.317), stdev = 150.737
[info]   CI (99.9%): [26.226, 1187.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1278.991 ±(99.9%) 1216.438 B/op [Average]
[info]   (min, avg, max) = (714.099, 1278.991, 1430.868), stdev = 315.905
[info]   CI (99.9%): [62.554, 2495.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:18:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3691589.551 ops/s
[info] # Warmup Iteration   2: 4017362.458 ops/s
[info] # Warmup Iteration   3: 4131838.097 ops/s
[info] Iteration   1: 4150000.518 ops/s
[info]                  ·gc.alloc.rate:            1328.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 511.330 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 4039968.311 ops/s
[info]                  ·gc.alloc.rate:                                  1293.660 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.259 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       529.167 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.298 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 4156900.364 ops/s
[info]                  ·gc.alloc.rate:                                  1331.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       386.638 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 4214437.969 ops/s
[info]                  ·gc.alloc.rate:                                  1349.605 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       508.503 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4208735.085 ops/s
[info]                  ·gc.alloc.rate:                                  1347.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       509.191 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4154008.449 ±(99.9%) 270069.293 ops/s [Average]
[info]   (min, avg, max) = (4039968.311, 4154008.449, 4214437.969), stdev = 70136.138
[info]   CI (99.9%): [3883939.156, 4424077.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1330.201 ±(99.9%) 86.528 MB/sec [Average]
[info]   (min, avg, max) = (1293.660, 1330.201, 1349.605), stdev = 22.471
[info]   CI (99.9%): [1243.673, 1416.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1290.175 ±(99.9%) 579.286 MB/sec [Average]
[info]   (min, avg, max) = (1021.242, 1290.175, 1361.664), stdev = 150.439
[info]   CI (99.9%): [710.889, 1869.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   488.966 ±(99.9%) 222.689 B/op [Average]
[info]   (min, avg, max) = (386.638, 488.966, 529.167), stdev = 57.832
[info]   CI (99.9%): [266.276, 711.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 2.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.298), stdev = 0.580
[info]   CI (99.9%): [≈ 0, 2.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 11.000), stdev = 3.633
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:18:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7410826.340 ops/s
[info] # Warmup Iteration   2: 7952254.697 ops/s
[info] # Warmup Iteration   3: 8084309.742 ops/s
[info] Iteration   1: 8166656.625 ops/s
[info]                  ·gc.alloc.rate:            664.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.917 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 8177448.634 ops/s
[info]                  ·gc.alloc.rate:            664.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129.745 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7986358.697 ops/s
[info]                  ·gc.alloc.rate:            649.420 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132.854 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 8139266.316 ops/s
[info]                  ·gc.alloc.rate:            661.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.355 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 8154325.618 ops/s
[info]                  ·gc.alloc.rate:            663.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130.113 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   8124811.178 ±(99.9%) 303021.982 ops/s [Average]
[info]   (min, avg, max) = (7986358.697, 8124811.178, 8177448.634), stdev = 78693.847
[info]   CI (99.9%): [7821789.196, 8427833.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   660.734 ±(99.9%) 24.728 MB/sec [Average]
[info]   (min, avg, max) = (649.420, 660.734, 664.913), stdev = 6.422
[info]   CI (99.9%): [636.006, 685.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   674.087 ±(99.9%) 0.277 MB/sec [Average]
[info]   (min, avg, max) = (673.980, 674.087, 674.155), stdev = 0.072
[info]   CI (99.9%): [673.810, 674.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   130.597 ±(99.9%) 4.937 B/op [Average]
[info]   (min, avg, max) = (129.745, 130.597, 132.854), stdev = 1.282
[info]   CI (99.9%): [125.659, 135.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:18:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18767.245 ops/s
[info] # Warmup Iteration   2: 163861.379 ops/s
[info] # Warmup Iteration   3: 171550.748 ops/s
[info] Iteration   1: 176454.290 ops/s
[info]                  ·gc.alloc.rate:            1199.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8995.654 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 173492.665 ops/s
[info]                  ·gc.alloc.rate:                   1178.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              10696.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12194.923 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.043 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 176217.049 ops/s
[info]                  ·gc.alloc.rate:                                  1197.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.868 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9079.095 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                41.647 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 176913.752 ops/s
[info]                  ·gc.alloc.rate:                                  1202.133 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10696.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12113.428 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 173247.087 ops/s
[info]                  ·gc.alloc.rate:            1177.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       10696.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9276.917 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   175264.969 ±(99.9%) 6739.269 ops/s [Average]
[info]   (min, avg, max) = (173247.087, 175264.969, 176913.752), stdev = 1750.167
[info]   CI (99.9%): [168525.699, 182004.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1190.912 ±(99.9%) 46.109 MB/sec [Average]
[info]   (min, avg, max) = (1177.239, 1190.912, 1202.133), stdev = 11.974
[info]   CI (99.9%): [1144.804, 1237.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10696.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10696.002, 10696.002, 10696.003), stdev = 0.001
[info]   CI (99.9%): [10696.002, 10696.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.097), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.216 ±(99.9%) 1.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 0.868), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 1.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1150.242 ±(99.9%) 712.004 MB/sec [Average]
[info]   (min, avg, max) = (1008.450, 1150.242, 1361.438), stdev = 184.905
[info]   CI (99.9%): [438.238, 1862.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10332.003 ±(99.9%) 6418.215 B/op [Average]
[info]   (min, avg, max) = (8995.654, 10332.003, 12194.923), stdev = 1666.790
[info]   CI (99.9%): [3913.788, 16750.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   9.538 ±(99.9%) 69.848 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.538, 41.647), stdev = 18.139
[info]   CI (99.9%): [≈ 0, 79.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 18.000), stdev = 6.573
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:18:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 831808.868 ops/s
[info] # Warmup Iteration   2: 911734.299 ops/s
[info] # Warmup Iteration   3: 913469.745 ops/s
[info] Iteration   1: 912440.926 ops/s
[info]                  ·gc.alloc.rate:      51.017 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 911004.230 ops/s
[info]                  ·gc.alloc.rate:      50.940 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 914643.011 ops/s
[info]                  ·gc.alloc.rate:      51.131 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 897683.875 ops/s
[info]                  ·gc.alloc.rate:            50.206 MB/sec
[info]                  ·gc.alloc.rate.norm:       88.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      341.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 597.961 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 907820.089 ops/s
[info]                  ·gc.alloc.rate:      50.751 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   908718.426 ±(99.9%) 25596.715 ops/s [Average]
[info]   (min, avg, max) = (897683.875, 908718.426, 914643.011), stdev = 6647.386
[info]   CI (99.9%): [883121.711, 934315.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   50.809 ±(99.9%) 1.403 MB/sec [Average]
[info]   (min, avg, max) = (50.206, 50.809, 51.131), stdev = 0.364
[info]   CI (99.9%): [49.406, 52.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.000, 88.000), stdev = 0.001
[info]   CI (99.9%): [88.000, 88.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   68.229 ±(99.9%) 587.476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 68.229, 341.147), stdev = 152.566
[info]   CI (99.9%): [≈ 0, 655.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   119.592 ±(99.9%) 1029.725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 119.592, 597.961), stdev = 267.416
[info]   CI (99.9%): [≈ 0, 1149.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:18:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25673.127 ops/s
[info] # Warmup Iteration   2: 57194.223 ops/s
[info] # Warmup Iteration   3: 58004.884 ops/s
[info] Iteration   1: 59230.934 ops/s
[info]                  ·gc.alloc.rate:                                  2751.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72360.754 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 58872.737 ops/s
[info]                  ·gc.alloc.rate:                                  2735.488 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72797.002 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 58418.263 ops/s
[info]                  ·gc.alloc.rate:                                  2713.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73362.634 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 58940.207 ops/s
[info]                  ·gc.alloc.rate:                                  2737.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72714.266 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 59126.934 ops/s
[info]                  ·gc.alloc.rate:                                  2746.553 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72483.111 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   58917.815 ±(99.9%) 1208.298 ops/s [Average]
[info]   (min, avg, max) = (58418.263, 58917.815, 59230.934), stdev = 313.791
[info]   CI (99.9%): [57709.516, 60126.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2737.065 ±(99.9%) 55.759 MB/sec [Average]
[info]   (min, avg, max) = (2713.923, 2737.065, 2751.561), stdev = 14.480
[info]   CI (99.9%): [2681.307, 2792.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73120.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73120.007, 73120.007, 73120.007), stdev = 0.001
[info]   CI (99.9%): [73120.006, 73120.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.109 ±(99.9%) 0.260 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.109, 0.180), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2722.912 ±(99.9%) 1.246 MB/sec [Average]
[info]   (min, avg, max) = (2722.610, 2722.912, 2723.404), stdev = 0.324
[info]   CI (99.9%): [2721.666, 2724.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72743.553 ±(99.9%) 1493.014 B/op [Average]
[info]   (min, avg, max) = (72360.754, 72743.553, 73362.634), stdev = 387.731
[info]   CI (99.9%): [71250.540, 74236.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:17:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 613456.187 ops/s
[info] # Warmup Iteration   2: 1029045.585 ops/s
[info] # Warmup Iteration   3: 1032930.436 ops/s
[info] Iteration   1: 1035983.757 ops/s
[info]                  ·gc.alloc.rate:            579.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.620 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1022.110 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1034663.036 ops/s
[info]                  ·gc.alloc.rate:            578.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 511.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1022030.516 ops/s
[info]                  ·gc.alloc.rate:                   571.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1035.047 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.026 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1036743.628 ops/s
[info]                  ·gc.alloc.rate:            579.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1021.392 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1033527.490 ops/s
[info]                  ·gc.alloc.rate:            577.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1024.514 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1032589.685 ±(99.9%) 23219.837 ops/s [Average]
[info]   (min, avg, max) = (1022030.516, 1032589.685, 1036743.628), stdev = 6030.118
[info]   CI (99.9%): [1009369.848, 1055809.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   577.335 ±(99.9%) 12.932 MB/sec [Average]
[info]   (min, avg, max) = (571.459, 577.335, 579.724), stdev = 3.358
[info]   CI (99.9%): [564.403, 590.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   880.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (880.000, 880.000, 880.000), stdev = 0.001
[info]   CI (99.9%): [880.000, 880.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.354 ±(99.9%) 578.889 MB/sec [Average]
[info]   (min, avg, max) = (336.426, 605.354, 672.870), stdev = 150.336
[info]   CI (99.9%): [26.466, 1184.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   922.954 ±(99.9%) 885.495 B/op [Average]
[info]   (min, avg, max) = (511.705, 922.954, 1035.047), stdev = 229.960
[info]   CI (99.9%): [37.459, 1808.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.205 ±(99.9%) 1.767 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 1.026), stdev = 0.459
[info]   CI (99.9%): [≈ 0, 1.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 9.000), stdev = 1.949
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:17:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1251572.992 ops/s
[info] # Warmup Iteration   2: 1469892.615 ops/s
[info] # Warmup Iteration   3: 1481476.885 ops/s
[info] Iteration   1: 1484292.069 ops/s
[info]                  ·gc.alloc.rate:            414.979 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 356.696 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1485323.961 ops/s
[info]                  ·gc.alloc.rate:            415.254 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 712.906 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1487042.394 ops/s
[info]                  ·gc.alloc.rate:            415.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 356.042 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1487415.589 ops/s
[info]                  ·gc.alloc.rate:            415.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 355.944 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1486595.778 ops/s
[info]                  ·gc.alloc.rate:                   415.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        356.148 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1486133.958 ±(99.9%) 4994.629 ops/s [Average]
[info]   (min, avg, max) = (1484292.069, 1486133.958, 1487415.589), stdev = 1297.089
[info]   CI (99.9%): [1481139.329, 1491128.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   415.451 ±(99.9%) 1.254 MB/sec [Average]
[info]   (min, avg, max) = (414.979, 415.451, 415.763), stdev = 0.326
[info]   CI (99.9%): [414.197, 416.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.660 ±(99.9%) 579.367 MB/sec [Average]
[info]   (min, avg, max) = (336.337, 403.660, 672.811), stdev = 150.460
[info]   CI (99.9%): [≈ 0, 983.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   427.547 ±(99.9%) 614.257 B/op [Average]
[info]   (min, avg, max) = (355.944, 427.547, 712.906), stdev = 159.521
[info]   CI (99.9%): [≈ 0, 1041.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.141 ±(99.9%) 1.214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.705), stdev = 0.315
[info]   CI (99.9%): [≈ 0, 1.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 883678.355 ops/s
[info] # Warmup Iteration   2: 955176.966 ops/s
[info] # Warmup Iteration   3: 958407.416 ops/s
[info] Iteration   1: 958584.638 ops/s
[info]                  ·gc.alloc.rate:      9.744 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 955525.657 ops/s
[info]                  ·gc.alloc.rate:      9.716 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 958323.152 ops/s
[info]                  ·gc.alloc.rate:      9.742 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 958474.002 ops/s
[info]                  ·gc.alloc.rate:      9.746 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 958329.365 ops/s
[info]                  ·gc.alloc.rate:      9.743 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   957847.363 ±(99.9%) 5015.185 ops/s [Average]
[info]   (min, avg, max) = (955525.657, 957847.363, 958584.638), stdev = 1302.428
[info]   CI (99.9%): [952832.178, 962862.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.738 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (9.716, 9.738, 9.746), stdev = 0.012
[info]   CI (99.9%): [9.690, 9.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:17:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20264.800 ops/s
[info] # Warmup Iteration   2: 37598.426 ops/s
[info] # Warmup Iteration   3: 37672.497 ops/s
[info] Iteration   1: 37177.639 ops/s
[info]                  ·gc.alloc.rate:                                  1567.360 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66345.982 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.914 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57134.039 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                169.202 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 38376.799 ops/s
[info]                  ·gc.alloc.rate:                                  1618.592 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66352.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.495 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69801.253 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 38015.429 ops/s
[info]                  ·gc.alloc.rate:                                  1602.982 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66352.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70462.145 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 38584.123 ops/s
[info]                  ·gc.alloc.rate:                                  1626.459 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66352.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55538.580 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 38371.970 ops/s
[info]                  ·gc.alloc.rate:            1617.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       66352.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69806.709 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   38105.192 ±(99.9%) 2146.304 ops/s [Average]
[info]   (min, avg, max) = (37177.639, 38105.192, 38584.123), stdev = 557.388
[info]   CI (99.9%): [35958.888, 40251.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1606.596 ±(99.9%) 90.546 MB/sec [Average]
[info]   (min, avg, max) = (1567.360, 1606.596, 1626.459), stdev = 23.514
[info]   CI (99.9%): [1516.050, 1697.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66350.805 ±(99.9%) 10.382 B/op [Average]
[info]   (min, avg, max) = (66345.982, 66350.805, 66352.011), stdev = 2.696
[info]   CI (99.9%): [66340.423, 66361.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.045), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.537 ±(99.9%) 3.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.537, 1.914), stdev = 0.792
[info]   CI (99.9%): [≈ 0, 3.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1563.590 ±(99.9%) 731.408 MB/sec [Average]
[info]   (min, avg, max) = (1349.737, 1563.590, 1702.733), stdev = 189.944
[info]   CI (99.9%): [832.181, 2294.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   64548.545 ±(99.9%) 28967.252 B/op [Average]
[info]   (min, avg, max) = (55538.580, 64548.545, 70462.145), stdev = 7522.703
[info]   CI (99.9%): [35581.294, 93515.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   33.840 ±(99.9%) 291.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.840, 169.202), stdev = 75.670
[info]   CI (99.9%): [≈ 0, 325.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202497.568 ops/s
[info] # Warmup Iteration   2: 226901.220 ops/s
[info] # Warmup Iteration   3: 227538.465 ops/s
[info] Iteration   1: 226553.573 ops/s
[info]                  ·gc.alloc.rate:            886.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7024.596 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 228204.242 ops/s
[info]                  ·gc.alloc.rate:            893.231 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4649.271 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 226615.632 ops/s
[info]                  ·gc.alloc.rate:            886.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7022.954 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 227661.707 ops/s
[info]                  ·gc.alloc.rate:                                  891.360 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6160.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.622 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1018.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7036.743 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.026 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 228496.679 ops/s
[info]                  ·gc.alloc.rate:                                  894.485 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6160.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4689.213 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   227506.367 ±(99.9%) 3440.407 ops/s [Average]
[info]   (min, avg, max) = (226553.573, 227506.367, 228496.679), stdev = 893.463
[info]   CI (99.9%): [224065.960, 230946.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   890.520 ±(99.9%) 13.887 MB/sec [Average]
[info]   (min, avg, max) = (886.703, 890.520, 894.485), stdev = 3.606
[info]   CI (99.9%): [876.633, 904.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.002, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.090), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.146 ±(99.9%) 1.040 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.146, 0.622), stdev = 0.270
[info]   CI (99.9%): [≈ 0, 1.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   879.104 ±(99.9%) 708.671 MB/sec [Average]
[info]   (min, avg, max) = (674.167, 879.104, 1018.225), stdev = 184.040
[info]   CI (99.9%): [170.433, 1587.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6084.555 ±(99.9%) 4975.365 B/op [Average]
[info]   (min, avg, max) = (4649.271, 6084.555, 7036.743), stdev = 1292.086
[info]   CI (99.9%): [1109.191, 11059.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.605 ±(99.9%) 39.652 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.605, 23.026), stdev = 10.298
[info]   CI (99.9%): [≈ 0, 44.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:16:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9446.311 ops/s
[info] # Warmup Iteration   2: 22388.620 ops/s
[info] # Warmup Iteration   3: 22955.327 ops/s
[info] Iteration   1: 23103.466 ops/s
[info]                  ·gc.alloc.rate:                   1279.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              87200.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68655.681 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.377 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 23154.871 ops/s
[info]                  ·gc.alloc.rate:                   1282.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              87200.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        91641.169 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 316.941 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 23453.580 ops/s
[info]                  ·gc.alloc.rate:                                  1299.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87200.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91367.096 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 23489.053 ops/s
[info]                  ·gc.alloc.rate:                                  1301.474 MB/sec
[info]                  ·gc.alloc.rate.norm:                             87200.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91230.977 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 23548.760 ops/s
[info]                  ·gc.alloc.rate:            1304.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       87200.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90994.708 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   23349.946 ±(99.9%) 790.143 ops/s [Average]
[info]   (min, avg, max) = (23103.466, 23349.946, 23548.760), stdev = 205.198
[info]   CI (99.9%): [22559.802, 24140.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1293.681 ±(99.9%) 44.376 MB/sec [Average]
[info]   (min, avg, max) = (1279.757, 1293.681, 1304.835), stdev = 11.524
[info]   CI (99.9%): [1249.305, 1338.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87200.031 ±(99.9%) 0.101 B/op [Average]
[info]   (min, avg, max) = (87200.017, 87200.031, 87200.077), stdev = 0.026
[info]   CI (99.9%): [87199.930, 87200.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.047 ±(99.9%) 8.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.047, 5.208), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 10.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.125 ±(99.9%) 604.275 MB/sec [Average]
[info]   (min, avg, max) = (1007.597, 1288.125, 1361.636), stdev = 156.928
[info]   CI (99.9%): [683.850, 1892.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86777.926 ±(99.9%) 39019.882 B/op [Average]
[info]   (min, avg, max) = (68655.681, 86777.926, 91641.169), stdev = 10133.339
[info]   CI (99.9%): [47758.044, 125797.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   72.464 ±(99.9%) 531.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 72.464, 316.941), stdev = 138.072
[info]   CI (99.9%): [≈ 0, 604.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 15.000), stdev = 5.718
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:16:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60846.215 ops/s
[info] # Warmup Iteration   2: 128212.877 ops/s
[info] # Warmup Iteration   3: 128569.232 ops/s
[info] Iteration   1: 128055.665 ops/s
[info]                  ·gc.alloc.rate:                   1570.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              19301.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20705.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 57.310 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 131610.025 ops/s
[info]                  ·gc.alloc.rate:                                  1608.242 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.820 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20353.661 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 132092.616 ops/s
[info]                  ·gc.alloc.rate:            1614.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       19232.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16222.907 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 131549.568 ops/s
[info]                  ·gc.alloc.rate:                                  1607.524 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20362.479 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 131169.103 ops/s
[info]                  ·gc.alloc.rate:                                  1602.622 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20421.771 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   130895.395 ±(99.9%) 6242.010 ops/s [Average]
[info]   (min, avg, max) = (128055.665, 130895.395, 132092.616), stdev = 1621.030
[info]   CI (99.9%): [124653.385, 137137.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1600.617 ±(99.9%) 66.692 MB/sec [Average]
[info]   (min, avg, max) = (1570.517, 1600.617, 1614.181), stdev = 17.320
[info]   CI (99.9%): [1533.925, 1667.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19245.853 ±(99.9%) 119.249 B/op [Average]
[info]   (min, avg, max) = (19232.003, 19245.853, 19301.251), stdev = 30.969
[info]   CI (99.9%): [19126.604, 19365.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.069), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.178 ±(99.9%) 1.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.820), stdev = 0.359
[info]   CI (99.9%): [≈ 0, 1.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1630.438 ±(99.9%) 579.356 MB/sec [Average]
[info]   (min, avg, max) = (1361.622, 1630.438, 1702.038), stdev = 150.457
[info]   CI (99.9%): [1051.081, 2209.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19613.186 ±(99.9%) 7318.718 B/op [Average]
[info]   (min, avg, max) = (16222.907, 19613.186, 20705.113), stdev = 1900.648
[info]   CI (99.9%): [12294.468, 26931.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.462 ±(99.9%) 98.690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.462, 57.310), stdev = 25.630
[info]   CI (99.9%): [≈ 0, 110.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 19.000), stdev = 6.708
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:16:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 297247.123 ops/s
[info] # Warmup Iteration   2: 335050.220 ops/s
[info] # Warmup Iteration   3: 334704.344 ops/s
[info] Iteration   1: 337964.541 ops/s
[info]                  ·gc.alloc.rate:                                  1609.435 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.163 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.759 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7869.826 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.612 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 339311.752 ops/s
[info]                  ·gc.alloc.rate:                                  1616.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7894.647 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 340534.574 ops/s
[info]                  ·gc.alloc.rate:                                  1621.764 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7865.767 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 341627.877 ops/s
[info]                  ·gc.alloc.rate:            1627.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.920 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6272.889 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 338922.506 ops/s
[info]                  ·gc.alloc.rate:                                  1614.109 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7903.521 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   339672.250 ±(99.9%) 5505.351 ops/s [Average]
[info]   (min, avg, max) = (337964.541, 339672.250, 341627.877), stdev = 1429.722
[info]   CI (99.9%): [334166.899, 345177.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1617.796 ±(99.9%) 26.915 MB/sec [Average]
[info]   (min, avg, max) = (1609.435, 1617.796, 1627.472), stdev = 6.990
[info]   CI (99.9%): [1590.880, 1644.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.163), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.176 ±(99.9%) 1.268 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.176, 0.759), stdev = 0.329
[info]   CI (99.9%): [≈ 0, 1.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.478 ±(99.9%) 580.602 MB/sec [Average]
[info]   (min, avg, max) = (1361.920, 1631.478, 1702.151), stdev = 150.781
[info]   CI (99.9%): [1050.876, 2212.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   7561.330 ±(99.9%) 2774.152 B/op [Average]
[info]   (min, avg, max) = (6272.889, 7561.330, 7903.521), stdev = 720.439
[info]   CI (99.9%): [4787.178, 10335.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.722 ±(99.9%) 32.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.722, 18.612), stdev = 8.324
[info]   CI (99.9%): [≈ 0, 35.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 12.000), stdev = 3.834
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:16:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 332892.749 ops/s
[info] # Warmup Iteration   2: 400125.504 ops/s
[info] # Warmup Iteration   3: 395900.849 ops/s
[info] Iteration   1: 394482.008 ops/s
[info]                  ·gc.alloc.rate:            1351.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5371.071 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 398158.118 ops/s
[info]                  ·gc.alloc.rate:                                  1364.366 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.166 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.657 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5366.362 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.799 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 399270.869 ops/s
[info]                  ·gc.alloc.rate:                                  1367.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5367.160 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 401903.928 ops/s
[info]                  ·gc.alloc.rate:            1377.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5331.977 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 401774.379 ops/s
[info]                  ·gc.alloc.rate:                                  1376.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5333.688 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   399117.860 ±(99.9%) 11751.549 ops/s [Average]
[info]   (min, avg, max) = (394482.008, 399117.860, 401903.928), stdev = 3051.840
[info]   CI (99.9%): [387366.311, 410869.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1367.586 ±(99.9%) 40.611 MB/sec [Average]
[info]   (min, avg, max) = (1351.645, 1367.586, 1377.400), stdev = 10.547
[info]   CI (99.9%): [1326.975, 1408.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.285 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.166), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.133 ±(99.9%) 1.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.657), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1357.934 ±(99.9%) 25.691 MB/sec [Average]
[info]   (min, avg, max) = (1346.398, 1357.934, 1362.066), stdev = 6.672
[info]   CI (99.9%): [1332.243, 1383.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   5354.051 ±(99.9%) 74.939 B/op [Average]
[info]   (min, avg, max) = (5331.977, 5354.051, 5371.071), stdev = 19.461
[info]   CI (99.9%): [5279.113, 5428.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   3.160 ±(99.9%) 27.207 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.160, 15.799), stdev = 7.065
[info]   CI (99.9%): [≈ 0, 30.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 12.000), stdev = 3.912
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:15:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26505.175 ops/s
[info] # Warmup Iteration   2: 52031.505 ops/s
[info] # Warmup Iteration   3: 52553.329 ops/s
[info] Iteration   1: 52316.465 ops/s
[info]                  ·gc.alloc.rate:                   1179.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40419.252 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 52554.947 ops/s
[info]                  ·gc.alloc.rate:                   1185.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30182.168 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 139.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 53085.084 ops/s
[info]                  ·gc.alloc.rate:                                  1196.852 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35488.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.218 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40366.305 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 53350.573 ops/s
[info]                  ·gc.alloc.rate:            1202.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30124.944 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 53299.765 ops/s
[info]                  ·gc.alloc.rate:            1201.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40202.002 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   52921.367 ±(99.9%) 1779.622 ops/s [Average]
[info]   (min, avg, max) = (52316.465, 52921.367, 53350.573), stdev = 462.162
[info]   CI (99.9%): [51141.744, 54700.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1193.218 ±(99.9%) 39.868 MB/sec [Average]
[info]   (min, avg, max) = (1179.494, 1193.218, 1202.816), stdev = 10.354
[info]   CI (99.9%): [1153.349, 1233.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35488.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35488.008, 35488.008, 35488.008), stdev = 0.001
[info]   CI (99.9%): [35488.007, 35488.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.075), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.444 ±(99.9%) 3.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.444, 2.218), stdev = 0.992
[info]   CI (99.9%): [≈ 0, 4.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.030 ±(99.9%) 719.578 MB/sec [Average]
[info]   (min, avg, max) = (1008.041, 1219.030, 1361.375), stdev = 186.872
[info]   CI (99.9%): [499.452, 1938.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   36258.934 ±(99.9%) 21463.623 B/op [Average]
[info]   (min, avg, max) = (30124.944, 36258.934, 40419.252), stdev = 5574.035
[info]   CI (99.9%): [14795.312, 57722.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   31.936 ±(99.9%) 234.237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.936, 139.640), stdev = 60.830
[info]   CI (99.9%): [≈ 0, 266.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 18.000), stdev = 6.804
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:15:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46181.182 ops/s
[info] # Warmup Iteration   2: 57478.894 ops/s
[info] # Warmup Iteration   3: 57811.738 ops/s
[info] Iteration   1: 58737.443 ops/s
[info]                  ·gc.alloc.rate:            1320.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       35376.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36127.018 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 58374.098 ops/s
[info]                  ·gc.alloc.rate:                                  1311.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35376.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.508 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36529.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.798 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 58889.786 ops/s
[info]                  ·gc.alloc.rate:                                  1323.954 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35376.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.370 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36388.614 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 58920.036 ops/s
[info]                  ·gc.alloc.rate:            1324.691 MB/sec
[info]                  ·gc.alloc.rate.norm:       35376.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.846 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36368.238 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 59297.583 ops/s
[info]                  ·gc.alloc.rate:                                  1333.004 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35376.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36137.675 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   58843.789 ±(99.9%) 1285.471 ops/s [Average]
[info]   (min, avg, max) = (58374.098, 58843.789, 59297.583), stdev = 333.833
[info]   CI (99.9%): [57558.317, 60129.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1322.691 ±(99.9%) 29.711 MB/sec [Average]
[info]   (min, avg, max) = (1311.778, 1322.691, 1333.004), stdev = 7.716
[info]   CI (99.9%): [1292.981, 1352.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35376.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35376.007, 35376.007, 35376.008), stdev = 0.001
[info]   CI (99.9%): [35376.006, 35376.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.155 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.093), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.589 ±(99.9%) 4.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.589, 2.508), stdev = 1.084
[info]   CI (99.9%): [≈ 0, 4.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1357.605 ±(99.9%) 23.836 MB/sec [Average]
[info]   (min, avg, max) = (1348.054, 1357.605, 1361.851), stdev = 6.190
[info]   CI (99.9%): [1333.768, 1381.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   36310.307 ±(99.9%) 670.128 B/op [Average]
[info]   (min, avg, max) = (36127.018, 36310.307, 36529.992), stdev = 174.030
[info]   CI (99.9%): [35640.179, 36980.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.960 ±(99.9%) 154.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.960, 89.798), stdev = 40.159
[info]   CI (99.9%): [≈ 0, 172.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38050.078 ops/s
[info] # Warmup Iteration   2: 93820.431 ops/s
[info] # Warmup Iteration   3: 94604.552 ops/s
[info] Iteration   1: 96871.076 ops/s
[info]                  ·gc.alloc.rate:            482.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       7832.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5465.223 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 96249.383 ops/s
[info]                  ·gc.alloc.rate:            478.898 MB/sec
[info]                  ·gc.alloc.rate.norm:       7832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11001.982 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 94263.431 ops/s
[info]                  ·gc.alloc.rate:            469.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       7832.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5616.875 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 96356.732 ops/s
[info]                  ·gc.alloc.rate:                   479.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              7832.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10978.885 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 97040.427 ops/s
[info]                  ·gc.alloc.rate:            482.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       7832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5456.044 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   96156.210 ±(99.9%) 4272.470 ops/s [Average]
[info]   (min, avg, max) = (94263.431, 96156.210, 97040.427), stdev = 1109.547
[info]   CI (99.9%): [91883.740, 100428.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   478.497 ±(99.9%) 21.204 MB/sec [Average]
[info]   (min, avg, max) = (469.128, 478.497, 482.945), stdev = 5.507
[info]   CI (99.9%): [457.293, 499.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7832.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7832.004, 7832.004, 7832.005), stdev = 0.001
[info]   CI (99.9%): [7832.004, 7832.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.820 ±(99.9%) 708.655 MB/sec [Average]
[info]   (min, avg, max) = (336.379, 470.820, 672.730), stdev = 184.035
[info]   CI (99.9%): [≈ 0, 1179.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7703.802 ±(99.9%) 11555.634 B/op [Average]
[info]   (min, avg, max) = (5456.044, 7703.802, 11001.982), stdev = 3000.961
[info]   CI (99.9%): [≈ 0, 19259.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.176 ±(99.9%) 18.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.176, 10.881), stdev = 4.866
[info]   CI (99.9%): [≈ 0, 20.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:15:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152038.319 ops/s
[info] # Warmup Iteration   2: 168839.695 ops/s
[info] # Warmup Iteration   3: 162129.713 ops/s
[info] Iteration   1: 170436.554 ops/s
[info]                  ·gc.alloc.rate:            701.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9337.680 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 170344.688 ops/s
[info]                  ·gc.alloc.rate:            701.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6228.482 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 169930.650 ops/s
[info]                  ·gc.alloc.rate:            699.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6243.654 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 167217.919 ops/s
[info]                  ·gc.alloc.rate:            688.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6344.937 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 161525.046 ops/s
[info]                  ·gc.alloc.rate:                   664.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6568.447 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.453 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   167890.972 ±(99.9%) 14617.114 ops/s [Average]
[info]   (min, avg, max) = (161525.046, 167890.972, 170436.554), stdev = 3796.018
[info]   CI (99.9%): [153273.857, 182508.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   691.298 ±(99.9%) 60.412 MB/sec [Average]
[info]   (min, avg, max) = (664.923, 691.298, 701.872), stdev = 15.689
[info]   CI (99.9%): [630.887, 751.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.003), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   741.599 ±(99.9%) 580.762 MB/sec [Average]
[info]   (min, avg, max) = (673.999, 741.599, 1011.398), stdev = 150.822
[info]   CI (99.9%): [160.838, 1322.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6944.640 ±(99.9%) 5177.674 B/op [Average]
[info]   (min, avg, max) = (6228.482, 6944.640, 9337.680), stdev = 1344.626
[info]   CI (99.9%): [1766.965, 12122.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.491 ±(99.9%) 55.886 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.491, 32.453), stdev = 14.513
[info]   CI (99.9%): [≈ 0, 62.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:15:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7542.647 ops/s
[info] # Warmup Iteration   2: 20829.685 ops/s
[info] # Warmup Iteration   3: 21363.760 ops/s
[info] Iteration   1: 21435.694 ops/s
[info]                  ·gc.alloc.rate:                   1203.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              88368.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98646.352 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.907 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 21528.656 ops/s
[info]                  ·gc.alloc.rate:                   1208.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              88368.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        73677.402 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 389.570 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 21447.316 ops/s
[info]                  ·gc.alloc.rate:                                  1204.331 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88368.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.275 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99915.591 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 21843.491 ops/s
[info]                  ·gc.alloc.rate:            1226.738 MB/sec
[info]                  ·gc.alloc.rate.norm:       88368.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73578.386 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 21816.421 ops/s
[info]                  ·gc.alloc.rate:                                  1225.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88368.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.284 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98225.909 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   21614.315 ±(99.9%) 771.331 ops/s [Average]
[info]   (min, avg, max) = (21435.694, 21614.315, 21843.491), stdev = 200.312
[info]   CI (99.9%): [20842.985, 22385.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1213.667 ±(99.9%) 43.825 MB/sec [Average]
[info]   (min, avg, max) = (1203.503, 1213.667, 1226.738), stdev = 11.381
[info]   CI (99.9%): [1169.841, 1257.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88368.020 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (88368.019, 88368.020, 88368.024), stdev = 0.002
[info]   CI (99.9%): [88368.012, 88368.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.072), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.112 ±(99.9%) 8.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.112, 5.275), stdev = 2.331
[info]   CI (99.9%): [≈ 0, 10.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.225 ±(99.9%) 720.226 MB/sec [Average]
[info]   (min, avg, max) = (1007.702, 1219.225, 1361.802), stdev = 187.040
[info]   CI (99.9%): [498.998, 1939.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   88808.728 ±(99.9%) 53416.666 B/op [Average]
[info]   (min, avg, max) = (73578.386, 88808.728, 99915.591), stdev = 13872.139
[info]   CI (99.9%): [35392.062, 142225.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 8.958 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.328), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 10.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   87.695 ±(99.9%) 654.904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87.695, 389.570), stdev = 170.077
[info]   CI (99.9%): [≈ 0, 742.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 17.000), stdev = 6.760
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:14:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84299.727 ops/s
[info] # Warmup Iteration   2: 162422.714 ops/s
[info] # Warmup Iteration   3: 158931.346 ops/s
[info] Iteration   1: 160188.428 ops/s
[info]                  ·gc.alloc.rate:                   1030.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9909.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.545 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 161286.089 ops/s
[info]                  ·gc.alloc.rate:                   1038.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1342.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13087.572 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.489 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 160125.812 ops/s
[info]                  ·gc.alloc.rate:                                  1030.278 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10128.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.195 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9991.676 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                45.833 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 161567.560 ops/s
[info]                  ·gc.alloc.rate:                                  1039.586 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10128.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9947.812 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 161595.505 ops/s
[info]                  ·gc.alloc.rate:            1040.044 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9945.781 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   160952.679 ±(99.9%) 2836.343 ops/s [Average]
[info]   (min, avg, max) = (160125.812, 160952.679, 161595.505), stdev = 736.589
[info]   CI (99.9%): [158116.336, 163789.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1035.832 ±(99.9%) 18.914 MB/sec [Average]
[info]   (min, avg, max) = (1030.278, 1035.832, 1040.044), stdev = 4.912
[info]   CI (99.9%): [1016.918, 1054.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10128.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10128.003, 10128.003, 10128.003), stdev = 0.001
[info]   CI (99.9%): [10128.002, 10128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.039), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.116 ±(99.9%) 0.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.382), stdev = 0.171
[info]   CI (99.9%): [≈ 0, 0.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1081.861 ±(99.9%) 560.417 MB/sec [Average]
[info]   (min, avg, max) = (1008.433, 1081.861, 1342.041), stdev = 145.539
[info]   CI (99.9%): [521.444, 1642.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   10576.422 ±(99.9%) 5406.609 B/op [Average]
[info]   (min, avg, max) = (9909.268, 10576.422, 13087.572), stdev = 1404.079
[info]   CI (99.9%): [5169.813, 15983.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.773 ±(99.9%) 74.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.773, 45.833), stdev = 19.317
[info]   CI (99.9%): [≈ 0, 86.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 17.000), stdev = 6.427
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:14:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467363.241 ops/s
[info] # Warmup Iteration   2: 521627.152 ops/s
[info] # Warmup Iteration   3: 521263.980 ops/s
[info] Iteration   1: 526585.100 ops/s
[info]                  ·gc.alloc.rate:            586.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1007.406 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 522749.243 ops/s
[info]                  ·gc.alloc.rate:            581.878 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2025.660 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 521522.559 ops/s
[info]                  ·gc.alloc.rate:                   580.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2032.401 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 521867.022 ops/s
[info]                  ·gc.alloc.rate:            581.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2031.065 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 522620.344 ops/s
[info]                  ·gc.alloc.rate:                   581.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1013.057 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.006 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   523068.854 ±(99.9%) 7821.342 ops/s [Average]
[info]   (min, avg, max) = (521522.559, 523068.854, 526585.100), stdev = 2031.178
[info]   CI (99.9%): [515247.512, 530890.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   582.279 ±(99.9%) 8.580 MB/sec [Average]
[info]   (min, avg, max) = (580.537, 582.279, 586.149), stdev = 2.228
[info]   CI (99.9%): [573.699, 590.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.657 ±(99.9%) 709.893 MB/sec [Average]
[info]   (min, avg, max) = (336.373, 538.657, 673.660), stdev = 184.357
[info]   CI (99.9%): [≈ 0, 1248.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1621.918 ±(99.9%) 2150.200 B/op [Average]
[info]   (min, avg, max) = (1007.406, 1621.918, 2032.401), stdev = 558.400
[info]   CI (99.9%): [≈ 0, 3772.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.803 ±(99.9%) 4.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 2.010), stdev = 1.100
[info]   CI (99.9%): [≈ 0, 5.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:14:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 510699.643 ops/s
[info] # Warmup Iteration   2: 562678.928 ops/s
[info] # Warmup Iteration   3: 564020.690 ops/s
[info] Iteration   1: 563929.567 ops/s
[info]                  ·gc.alloc.rate:      11.465 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 559329.496 ops/s
[info]                  ·gc.alloc.rate:      11.372 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 562168.600 ops/s
[info]                  ·gc.alloc.rate:      11.428 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 557885.539 ops/s
[info]                  ·gc.alloc.rate:      11.341 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 562731.254 ops/s
[info]                  ·gc.alloc.rate:      11.441 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   561208.891 ±(99.9%) 9668.396 ops/s [Average]
[info]   (min, avg, max) = (557885.539, 561208.891, 563929.567), stdev = 2510.852
[info]   CI (99.9%): [551540.496, 570877.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.409 ±(99.9%) 0.197 MB/sec [Average]
[info]   (min, avg, max) = (11.341, 11.409, 11.465), stdev = 0.051
[info]   CI (99.9%): [11.212, 11.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29064.136 ops/s
[info] # Warmup Iteration   2: 56544.093 ops/s
[info] # Warmup Iteration   3: 58793.342 ops/s
[info] Iteration   1: 58970.548 ops/s
[info]                  ·gc.alloc.rate:            1058.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       28256.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26881.094 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 58387.081 ops/s
[info]                  ·gc.alloc.rate:                   1048.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              28256.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        36215.993 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.911 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 58547.517 ops/s
[info]                  ·gc.alloc.rate:                                  1051.121 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28256.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.778 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27342.946 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                107.438 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 59687.979 ops/s
[info]                  ·gc.alloc.rate:                                  1071.423 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28256.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.809 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26928.001 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 58010.179 ops/s
[info]                  ·gc.alloc.rate:            1041.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       28256.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27706.827 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   58720.661 ±(99.9%) 2468.761 ops/s [Average]
[info]   (min, avg, max) = (58010.179, 58720.661, 59687.979), stdev = 641.129
[info]   CI (99.9%): [56251.899, 61189.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1054.169 ±(99.9%) 43.837 MB/sec [Average]
[info]   (min, avg, max) = (1041.604, 1054.169, 1071.423), stdev = 11.384
[info]   CI (99.9%): [1010.331, 1098.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28256.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28256.007, 28256.007, 28256.008), stdev = 0.001
[info]   CI (99.9%): [28256.006, 28256.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.066), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.517 ±(99.9%) 3.030 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.517, 1.778), stdev = 0.787
[info]   CI (99.9%): [≈ 0, 3.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.015 ±(99.9%) 563.394 MB/sec [Average]
[info]   (min, avg, max) = (1006.954, 1082.015, 1343.537), stdev = 146.312
[info]   CI (99.9%): [518.621, 1645.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   29014.972 ±(99.9%) 15554.708 B/op [Average]
[info]   (min, avg, max) = (26881.094, 29014.972, 36215.993), stdev = 4039.508
[info]   CI (99.9%): [13460.264, 44569.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   28.670 ±(99.9%) 179.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.670, 107.438), stdev = 46.698
[info]   CI (99.9%): [≈ 0, 208.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 18.000), stdev = 6.804
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:13:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61001.014 ops/s
[info] # Warmup Iteration   2: 75907.599 ops/s
[info] # Warmup Iteration   3: 77146.981 ops/s
[info] Iteration   1: 76547.247 ops/s
[info]                  ·gc.alloc.rate:            1337.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       27504.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27722.061 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 77572.952 ops/s
[info]                  ·gc.alloc.rate:                                  1355.482 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.301 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27558.538 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                67.579 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 77617.360 ops/s
[info]                  ·gc.alloc.rate:                                  1356.251 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27609.034 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 77421.655 ops/s
[info]                  ·gc.alloc.rate:                                  1352.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27677.846 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 77430.186 ops/s
[info]                  ·gc.alloc.rate:                                  1352.985 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27504.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27675.701 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   77317.880 ±(99.9%) 1691.664 ops/s [Average]
[info]   (min, avg, max) = (76547.247, 77317.880, 77617.360), stdev = 439.320
[info]   CI (99.9%): [75626.216, 79009.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1351.043 ±(99.9%) 29.461 MB/sec [Average]
[info]   (min, avg, max) = (1337.620, 1351.043, 1356.251), stdev = 7.651
[info]   CI (99.9%): [1321.582, 1380.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27504.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27504.005, 27504.005, 27504.006), stdev = 0.001
[info]   CI (99.9%): [27504.004, 27504.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.113), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.491 ±(99.9%) 3.900 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.491, 2.301), stdev = 1.013
[info]   CI (99.9%): [≈ 0, 4.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.137 ±(99.9%) 22.018 MB/sec [Average]
[info]   (min, avg, max) = (1348.225, 1358.137, 1361.431), stdev = 5.718
[info]   CI (99.9%): [1336.119, 1380.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27648.636 ±(99.9%) 248.531 B/op [Average]
[info]   (min, avg, max) = (27558.538, 27648.636, 27722.061), stdev = 64.543
[info]   CI (99.9%): [27400.106, 27897.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   13.516 ±(99.9%) 116.374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.516, 67.579), stdev = 30.222
[info]   CI (99.9%): [≈ 0, 129.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 12.000), stdev = 3.782
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:13:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76478.677 ops/s
[info] # Warmup Iteration   2: 150071.829 ops/s
[info] # Warmup Iteration   3: 150433.329 ops/s
[info] Iteration   1: 150885.427 ops/s
[info]                  ·gc.alloc.rate:                   644.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7010.842 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 149449.242 ops/s
[info]                  ·gc.alloc.rate:                   638.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7078.384 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.015 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 150679.987 ops/s
[info]                  ·gc.alloc.rate:            644.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7027.570 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 150493.612 ops/s
[info]                  ·gc.alloc.rate:                   643.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7029.054 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.966 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 150414.754 ops/s
[info]                  ·gc.alloc.rate:            642.980 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7039.621 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   150384.604 ±(99.9%) 2131.610 ops/s [Average]
[info]   (min, avg, max) = (149449.242, 150384.604, 150885.427), stdev = 553.572
[info]   CI (99.9%): [148252.994, 152516.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   642.795 ±(99.9%) 9.095 MB/sec [Average]
[info]   (min, avg, max) = (638.781, 642.795, 644.832), stdev = 2.362
[info]   CI (99.9%): [633.700, 651.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6728.003, 6728.003, 6728.003), stdev = 0.001
[info]   CI (99.9%): [6728.002, 6728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.319 ±(99.9%) 1.679 MB/sec [Average]
[info]   (min, avg, max) = (671.941, 672.319, 672.827), stdev = 0.436
[info]   CI (99.9%): [670.639, 673.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7037.094 ±(99.9%) 97.335 B/op [Average]
[info]   (min, avg, max) = (7010.842, 7037.094, 7078.384), stdev = 25.277
[info]   CI (99.9%): [6939.760, 7134.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.186 ±(99.9%) 14.715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.186, 7.015), stdev = 3.821
[info]   CI (99.9%): [≈ 0, 18.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:13:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186079.555 ops/s
[info] # Warmup Iteration   2: 209720.752 ops/s
[info] # Warmup Iteration   3: 211725.453 ops/s
[info] Iteration   1: 211382.313 ops/s
[info]                  ·gc.alloc.rate:            753.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5019.246 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 211836.132 ops/s
[info]                  ·gc.alloc.rate:            754.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5008.491 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 211156.257 ops/s
[info]                  ·gc.alloc.rate:            752.270 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7536.925 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 200719.576 ops/s
[info]                  ·gc.alloc.rate:            715.399 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5285.814 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 205646.132 ops/s
[info]                  ·gc.alloc.rate:                                  732.661 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5608.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5184.636 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                25.490 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   208148.082 ±(99.9%) 18721.570 ops/s [Average]
[info]   (min, avg, max) = (200719.576, 208148.082, 211836.132), stdev = 4861.932
[info]   CI (99.9%): [189426.512, 226869.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   741.642 ±(99.9%) 66.316 MB/sec [Average]
[info]   (min, avg, max) = (715.399, 741.642, 754.852), stdev = 17.222
[info]   CI (99.9%): [675.326, 807.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.002, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.102), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.156 ±(99.9%) 1.344 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.780), stdev = 0.349
[info]   CI (99.9%): [≈ 0, 1.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.159 ±(99.9%) 578.769 MB/sec [Average]
[info]   (min, avg, max) = (673.970, 742.159, 1011.020), stdev = 150.304
[info]   CI (99.9%): [163.390, 1320.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5607.022 ±(99.9%) 4178.362 B/op [Average]
[info]   (min, avg, max) = (5008.491, 5607.022, 7536.925), stdev = 1085.107
[info]   CI (99.9%): [1428.660, 9785.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.098 ±(99.9%) 43.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.098, 25.490), stdev = 11.399
[info]   CI (99.9%): [≈ 0, 48.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:13:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23981.756 ops/s
[info] # Warmup Iteration   2: 40510.194 ops/s
[info] # Warmup Iteration   3: 40189.615 ops/s
[info] Iteration   1: 40808.562 ops/s
[info]                  ·gc.alloc.rate:                                  1692.037 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65264.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.748 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65332.078 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                154.146 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 40835.209 ops/s
[info]                  ·gc.alloc.rate:                                  1693.392 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65264.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65598.582 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 41422.298 ops/s
[info]                  ·gc.alloc.rate:                                  1718.138 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65264.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64669.105 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 41305.965 ops/s
[info]                  ·gc.alloc.rate:            1712.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       65264.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64850.689 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 41459.872 ops/s
[info]                  ·gc.alloc.rate:                                  1719.488 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65264.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.156 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64603.609 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   41166.381 ±(99.9%) 1231.037 ops/s [Average]
[info]   (min, avg, max) = (40808.562, 41166.381, 41459.872), stdev = 319.696
[info]   CI (99.9%): [39935.344, 42397.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1707.115 ±(99.9%) 51.643 MB/sec [Average]
[info]   (min, avg, max) = (1692.037, 1707.115, 1719.488), stdev = 13.411
[info]   CI (99.9%): [1655.472, 1758.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65264.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65264.010, 65264.010, 65264.011), stdev = 0.001
[info]   CI (99.9%): [65264.009, 65264.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.402 ±(99.9%) 2.905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.402, 1.748), stdev = 0.754
[info]   CI (99.9%): [≈ 0, 3.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1700.423 ±(99.9%) 14.294 MB/sec [Average]
[info]   (min, avg, max) = (1693.802, 1700.423, 1702.476), stdev = 3.712
[info]   CI (99.9%): [1686.129, 1714.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65010.813 ±(99.9%) 1675.033 B/op [Average]
[info]   (min, avg, max) = (64603.609, 65010.813, 65598.582), stdev = 435.001
[info]   CI (99.9%): [63335.780, 66685.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.829 ±(99.9%) 265.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.829, 154.146), stdev = 68.936
[info]   CI (99.9%): [≈ 0, 296.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:13:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189511.288 ops/s
[info] # Warmup Iteration   2: 258350.338 ops/s
[info] # Warmup Iteration   3: 252838.829 ops/s
[info] Iteration   1: 258523.146 ops/s
[info]                  ·gc.alloc.rate:            1217.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8208.063 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 259339.876 ops/s
[info]                  ·gc.alloc.rate:                                  1220.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.376 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8202.391 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.213 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 254779.666 ops/s
[info]                  ·gc.alloc.rate:                                  1199.027 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6308.369 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 259607.957 ops/s
[info]                  ·gc.alloc.rate:                                  1222.233 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8254.723 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 261175.199 ops/s
[info]                  ·gc.alloc.rate:                                  1229.212 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6153.478 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   258685.169 ±(99.9%) 9185.145 ops/s [Average]
[info]   (min, avg, max) = (254779.666, 258685.169, 261175.199), stdev = 2385.353
[info]   CI (99.9%): [249500.023, 267870.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1217.556 ±(99.9%) 43.429 MB/sec [Average]
[info]   (min, avg, max) = (1199.027, 1217.556, 1229.212), stdev = 11.278
[info]   CI (99.9%): [1174.127, 1260.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7408.002, 7408.002, 7408.002), stdev = 0.001
[info]   CI (99.9%): [7408.001, 7408.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.114 ±(99.9%) 0.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.376), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.725 ±(99.9%) 702.166 MB/sec [Average]
[info]   (min, avg, max) = (1021.045, 1220.725, 1361.932), stdev = 182.350
[info]   CI (99.9%): [518.560, 1922.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7425.405 ±(99.9%) 4204.789 B/op [Average]
[info]   (min, avg, max) = (6153.478, 7425.405, 8254.723), stdev = 1091.970
[info]   CI (99.9%): [3220.616, 11630.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.043 ±(99.9%) 34.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.043, 20.213), stdev = 9.039
[info]   CI (99.9%): [≈ 0, 38.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 5.413
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:12:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 286258.538 ops/s
[info] # Warmup Iteration   2: 493805.834 ops/s
[info] # Warmup Iteration   3: 483563.306 ops/s
[info] Iteration   1: 498537.182 ops/s
[info]                  ·gc.alloc.rate:                   400.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1059.809 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 499444.059 ops/s
[info]                  ·gc.alloc.rate:            401.070 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1060.065 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 496300.729 ops/s
[info]                  ·gc.alloc.rate:            398.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1066.798 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 504879.900 ops/s
[info]                  ·gc.alloc.rate:            405.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1048.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 501700.568 ops/s
[info]                  ·gc.alloc.rate:                   402.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2108.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   500172.487 ±(99.9%) 12579.606 ops/s [Average]
[info]   (min, avg, max) = (496300.729, 500172.487, 504879.900), stdev = 3266.884
[info]   CI (99.9%): [487592.882, 512752.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   401.679 ±(99.9%) 9.964 MB/sec [Average]
[info]   (min, avg, max) = (398.554, 401.679, 405.398), stdev = 2.587
[info]   CI (99.9%): [391.716, 411.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.390 ±(99.9%) 578.345 MB/sec [Average]
[info]   (min, avg, max) = (335.803, 403.390, 672.065), stdev = 150.194
[info]   CI (99.9%): [≈ 0, 981.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1268.790 ±(99.9%) 1807.872 B/op [Average]
[info]   (min, avg, max) = (1048.705, 1268.790, 2108.575), stdev = 469.499
[info]   CI (99.9%): [≈ 0, 3076.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.839 ±(99.9%) 4.421 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.839, 2.103), stdev = 1.148
[info]   CI (99.9%): [≈ 0, 5.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 538106.810 ops/s
[info] # Warmup Iteration   2: 576345.122 ops/s
[info] # Warmup Iteration   3: 581161.306 ops/s
[info] Iteration   1: 594857.216 ops/s
[info]                  ·gc.alloc.rate:                   314.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        890.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 592321.471 ops/s
[info]                  ·gc.alloc.rate:            313.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 895.603 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 581843.194 ops/s
[info]                  ·gc.alloc.rate:                   307.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        909.942 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.802 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 590864.138 ops/s
[info]                  ·gc.alloc.rate:            312.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 897.834 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 588570.354 ops/s
[info]                  ·gc.alloc.rate:            311.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 901.330 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   589691.275 ±(99.9%) 19043.110 ops/s [Average]
[info]   (min, avg, max) = (581843.194, 589691.275, 594857.216), stdev = 4945.435
[info]   CI (99.9%): [570648.164, 608734.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   311.711 ±(99.9%) 10.215 MB/sec [Average]
[info]   (min, avg, max) = (307.526, 311.711, 314.546), stdev = 2.653
[info]   CI (99.9%): [301.496, 321.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.001, 832.001, 832.001), stdev = 0.001
[info]   CI (99.9%): [832.001, 832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.774 ±(99.9%) 1.303 MB/sec [Average]
[info]   (min, avg, max) = (336.335, 336.774, 337.078), stdev = 0.338
[info]   CI (99.9%): [335.471, 338.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   898.948 ±(99.9%) 28.461 B/op [Average]
[info]   (min, avg, max) = (890.029, 898.948, 909.942), stdev = 7.391
[info]   CI (99.9%): [870.487, 927.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.713 ±(99.9%) 3.759 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.713, 1.802), stdev = 0.976
[info]   CI (99.9%): [≈ 0, 4.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:12:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 578846.148 ops/s
[info] # Warmup Iteration   2: 636234.776 ops/s
[info] # Warmup Iteration   3: 641221.277 ops/s
[info] Iteration   1: 644165.061 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 648196.502 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 641068.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 643184.451 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 645489.384 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   644420.768 ±(99.9%) 10229.613 ops/s [Average]
[info]   (min, avg, max) = (641068.443, 644420.768, 648196.502), stdev = 2656.598
[info]   CI (99.9%): [634191.155, 654650.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:12:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19784.109 ops/s
[info] # Warmup Iteration   2: 29729.361 ops/s
[info] # Warmup Iteration   3: 29651.687 ops/s
[info] Iteration   1: 29321.756 ops/s
[info]                  ·gc.alloc.rate:                   1461.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              78432.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90280.438 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 214.528 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 30083.873 ops/s
[info]                  ·gc.alloc.rate:                                  1498.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.578 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.208 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.863 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71231.658 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 30148.817 ops/s
[info]                  ·gc.alloc.rate:                                  1502.441 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.342 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88850.585 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 30166.678 ops/s
[info]                  ·gc.alloc.rate:            1502.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71035.707 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 30124.897 ops/s
[info]                  ·gc.alloc.rate:            1500.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71132.367 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   29969.204 ±(99.9%) 1398.790 ops/s [Average]
[info]   (min, avg, max) = (29321.756, 29969.204, 30166.678), stdev = 363.261
[info]   CI (99.9%): [28570.414, 31367.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1493.246 ±(99.9%) 69.112 MB/sec [Average]
[info]   (min, avg, max) = (1461.249, 1493.246, 1502.696), stdev = 17.948
[info]   CI (99.9%): [1424.134, 1562.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78419.328 ±(99.9%) 27.334 B/op [Average]
[info]   (min, avg, max) = (78416.014, 78419.328, 78432.019), stdev = 7.099
[info]   CI (99.9%): [78391.993, 78446.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.355 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.208), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.241 ±(99.9%) 18.568 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.241, 10.863), stdev = 4.822
[info]   CI (99.9%): [≈ 0, 20.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.744 ±(99.9%) 698.082 MB/sec [Average]
[info]   (min, avg, max) = (1361.267, 1493.744, 1702.367), stdev = 181.290
[info]   CI (99.9%): [795.662, 2191.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   78506.151 ±(99.9%) 38924.831 B/op [Average]
[info]   (min, avg, max) = (71035.707, 78506.151, 90280.438), stdev = 10108.655
[info]   CI (99.9%): [39581.320, 117430.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.906 ±(99.9%) 369.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.906, 214.528), stdev = 95.940
[info]   CI (99.9%): [≈ 0, 412.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 20.000), stdev = 7.396
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290497.190 ops/s
[info] # Warmup Iteration   2: 618855.507 ops/s
[info] # Warmup Iteration   3: 624555.753 ops/s
[info] Iteration   1: 623764.074 ops/s
[info]                  ·gc.alloc.rate:                                  1902.048 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1695.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4277.556 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.404 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 628444.540 ops/s
[info]                  ·gc.alloc.rate:                                  1916.541 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5114.972 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 629315.427 ops/s
[info]                  ·gc.alloc.rate:                                  1918.838 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4256.443 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 637573.536 ops/s
[info]                  ·gc.alloc.rate:                                  1944.779 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5041.515 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 629026.547 ops/s
[info]                  ·gc.alloc.rate:                                  1917.962 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5110.175 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   629624.825 ±(99.9%) 19193.167 ops/s [Average]
[info]   (min, avg, max) = (623764.074, 629624.825, 637573.536), stdev = 4984.404
[info]   CI (99.9%): [610431.658, 648817.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1920.034 ±(99.9%) 59.459 MB/sec [Average]
[info]   (min, avg, max) = (1902.048, 1920.034, 1944.779), stdev = 15.441
[info]   CI (99.9%): [1860.575, 1979.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4800.001, 4800.001, 4800.001), stdev = 0.001
[info]   CI (99.9%): [4800.001, 4800.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.026, 0.118), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.499 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.066, 0.298), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.681 ±(99.9%) 725.565 MB/sec [Average]
[info]   (min, avg, max) = (1695.024, 1904.681, 2042.631), stdev = 188.427
[info]   CI (99.9%): [1179.116, 2630.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4760.132 ±(99.9%) 1737.277 B/op [Average]
[info]   (min, avg, max) = (4256.443, 4760.132, 5114.972), stdev = 451.165
[info]   CI (99.9%): [3022.855, 6497.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.681 ±(99.9%) 14.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.681, 8.404), stdev = 3.758
[info]   CI (99.9%): [≈ 0, 16.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:11:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 357804.293 ops/s
[info] # Warmup Iteration   2: 1320775.745 ops/s
[info] # Warmup Iteration   3: 1350455.235 ops/s
[info] Iteration   1: 1354870.583 ops/s
[info]                  ·gc.alloc.rate:                   1026.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1171.540 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 1354250.452 ops/s
[info]                  ·gc.alloc.rate:                   1025.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.549 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1172.100 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 1346104.458 ops/s
[info]                  ·gc.alloc.rate:                                  1020.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1348.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1575.194 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.660 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.445 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   4: 1360820.522 ops/s
[info]                  ·gc.alloc.rate:                                  1030.901 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.177 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1181.082 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1361949.485 ops/s
[info]                  ·gc.alloc.rate:                                  1031.407 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1180.144 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1355599.100 ±(99.9%) 24360.341 ops/s [Average]
[info]   (min, avg, max) = (1346104.458, 1355599.100, 1361949.485), stdev = 6326.303
[info]   CI (99.9%): [1331238.759, 1379959.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1026.842 ±(99.9%) 17.643 MB/sec [Average]
[info]   (min, avg, max) = (1020.157, 1026.842, 1031.407), stdev = 4.582
[info]   CI (99.9%): [1009.199, 1044.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.177), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.205), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1081.544 ±(99.9%) 574.326 MB/sec [Average]
[info]   (min, avg, max) = (1008.459, 1081.544, 1348.108), stdev = 149.151
[info]   CI (99.9%): [507.218, 1655.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1256.012 ±(99.9%) 687.274 B/op [Average]
[info]   (min, avg, max) = (1171.540, 1256.012, 1575.194), stdev = 178.483
[info]   CI (99.9%): [568.738, 1943.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.198 ±(99.9%) 7.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.198, 4.660), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.399 ±(99.9%) 8.837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.399, 5.445), stdev = 2.295
[info]   CI (99.9%): [≈ 0, 10.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 14.000), stdev = 5.958
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:11:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6804203.652 ops/s
[info] # Warmup Iteration   2: 6945044.291 ops/s
[info] # Warmup Iteration   3: 7404314.951 ops/s
[info] Iteration   1: 7507303.126 ops/s
[info]                  ·gc.alloc.rate:            228.950 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.664 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7503674.011 ops/s
[info]                  ·gc.alloc.rate:            228.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 7520045.065 ops/s
[info]                  ·gc.alloc.rate:      229.381 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7480579.920 ops/s
[info]                  ·gc.alloc.rate:            228.099 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.918 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7502061.437 ops/s
[info]                  ·gc.alloc.rate:            228.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70.712 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7502732.712 ±(99.9%) 54886.506 ops/s [Average]
[info]   (min, avg, max) = (7480579.920, 7502732.712, 7520045.065), stdev = 14253.851
[info]   CI (99.9%): [7447846.205, 7557619.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   228.809 ±(99.9%) 1.780 MB/sec [Average]
[info]   (min, avg, max) = (228.099, 228.809, 229.381), stdev = 0.462
[info]   CI (99.9%): [227.029, 230.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.627 ±(99.9%) 580.393 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.627, 337.068), stdev = 150.726
[info]   CI (99.9%): [≈ 0, 850.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   56.598 ±(99.9%) 121.833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56.598, 70.918), stdev = 31.640
[info]   CI (99.9%): [≈ 0, 178.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:11:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26189.412 ops/s
[info] # Warmup Iteration   2: 202022.337 ops/s
[info] # Warmup Iteration   3: 202612.616 ops/s
[info] Iteration   1: 205185.366 ops/s
[info]                  ·gc.alloc.rate:            1428.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       10960.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10315.923 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 203526.339 ops/s
[info]                  ·gc.alloc.rate:                                  1417.564 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10960.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.149 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.154 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10462.065 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                36.058 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 206741.912 ops/s
[info]                  ·gc.alloc.rate:                                  1439.844 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10960.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10365.321 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 207476.244 ops/s
[info]                  ·gc.alloc.rate:                                  1445.172 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10960.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.924 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10328.657 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 208020.564 ops/s
[info]                  ·gc.alloc.rate:                                  1448.713 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10960.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12876.445 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   206190.085 ±(99.9%) 7051.615 ops/s [Average]
[info]   (min, avg, max) = (203526.339, 206190.085, 208020.564), stdev = 1831.282
[info]   CI (99.9%): [199138.470, 213241.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1436.012 ±(99.9%) 49.189 MB/sec [Average]
[info]   (min, avg, max) = (1417.564, 1436.012, 1448.713), stdev = 12.774
[info]   CI (99.9%): [1386.823, 1485.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.002, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.149), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.271 ±(99.9%) 1.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.271, 1.154), stdev = 0.500
[info]   CI (99.9%): [≈ 0, 2.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.728 ±(99.9%) 597.538 MB/sec [Average]
[info]   (min, avg, max) = (1344.803, 1424.728, 1702.032), stdev = 155.179
[info]   CI (99.9%): [827.190, 2022.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10869.682 ±(99.9%) 4325.331 B/op [Average]
[info]   (min, avg, max) = (10315.923, 10869.682, 12876.445), stdev = 1123.275
[info]   CI (99.9%): [6544.351, 15195.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.212 ±(99.9%) 62.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.212, 36.058), stdev = 16.126
[info]   CI (99.9%): [≈ 0, 69.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 17.000), stdev = 5.916
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:11:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320490.999 ops/s
[info] # Warmup Iteration   2: 848092.390 ops/s
[info] # Warmup Iteration   3: 848983.597 ops/s
[info] Iteration   1: 852994.459 ops/s
[info]                  ·gc.alloc.rate:            1287.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       2376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1865.730 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 849859.535 ops/s
[info]                  ·gc.alloc.rate:                   1283.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2495.549 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 860938.294 ops/s
[info]                  ·gc.alloc.rate:                                  1299.880 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2376.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.176 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.321 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2489.097 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 862633.432 ops/s
[info]                  ·gc.alloc.rate:                                  1302.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2376.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2484.147 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 862873.603 ops/s
[info]                  ·gc.alloc.rate:            1302.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       2376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2483.418 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   857859.865 ±(99.9%) 23190.236 ops/s [Average]
[info]   (min, avg, max) = (849859.535, 857859.865, 862873.603), stdev = 6022.431
[info]   CI (99.9%): [834669.629, 881050.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1295.046 ±(99.9%) 34.716 MB/sec [Average]
[info]   (min, avg, max) = (1283.267, 1295.046, 1302.500), stdev = 9.016
[info]   CI (99.9%): [1260.330, 1329.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2376.000, 2376.000, 2376.001), stdev = 0.001
[info]   CI (99.9%): [2376.000, 2376.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.302 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.176), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.065 ±(99.9%) 0.552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.321), stdev = 0.143
[info]   CI (99.9%): [≈ 0, 0.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1288.666 ±(99.9%) 598.196 MB/sec [Average]
[info]   (min, avg, max) = (1010.970, 1288.666, 1361.753), stdev = 155.349
[info]   CI (99.9%): [690.470, 1886.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2363.588 ±(99.9%) 1071.840 B/op [Average]
[info]   (min, avg, max) = (1865.730, 2363.588, 2495.549), stdev = 278.353
[info]   CI (99.9%): [1291.749, 3435.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.480 ±(99.9%) 12.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.480, 7.402), stdev = 3.310
[info]   CI (99.9%): [≈ 0, 14.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 13.000), stdev = 4.615
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:10:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_eb209134/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 514076.494 ops/s
[info] # Warmup Iteration   2: 2095112.016 ops/s
[info] # Warmup Iteration   3: 2140223.908 ops/s
[info] Iteration   1: 2148006.813 ops/s
[info]                  ·gc.alloc.rate:            884.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.950 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 737.941 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 2142230.547 ops/s
[info]                  ·gc.alloc.rate:            882.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 739.999 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 2146589.868 ops/s
[info]                  ·gc.alloc.rate:            883.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 492.300 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 2091339.196 ops/s
[info]                  ·gc.alloc.rate:                   860.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        760.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.509 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 2184642.852 ops/s
[info]                  ·gc.alloc.rate:                                  899.666 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       490.461 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2142561.855 ±(99.9%) 128298.598 ops/s [Average]
[info]   (min, avg, max) = (2091339.196, 2142561.855, 2184642.852), stdev = 33318.739
[info]   CI (99.9%): [2014263.257, 2270860.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   882.145 ±(99.9%) 53.221 MB/sec [Average]
[info]   (min, avg, max) = (860.923, 882.145, 899.666), stdev = 13.821
[info]   CI (99.9%): [828.924, 935.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   875.552 ±(99.9%) 701.046 MB/sec [Average]
[info]   (min, avg, max) = (671.374, 875.552, 1011.042), stdev = 182.059
[info]   CI (99.9%): [174.506, 1576.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   644.339 ±(99.9%) 538.796 B/op [Average]
[info]   (min, avg, max) = (490.461, 644.339, 760.992), stdev = 139.924
[info]   CI (99.9%): [105.542, 1183.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.702 ±(99.9%) 6.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.702, 3.509), stdev = 1.569
[info]   CI (99.9%): [≈ 0, 6.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 13.000), stdev = 4.359
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3824414.785 ops/s
[info] # Warmup Iteration   2: 5653034.966 ops/s
[info] # Warmup Iteration   3: 5729090.141 ops/s
[info] Iteration   1: 5751549.963 ops/s
[info]                  ·gc.alloc.rate:            643.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.105 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 5768882.681 ops/s
[info]                  ·gc.alloc.rate:            644.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91.776 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5739362.868 ops/s
[info]                  ·gc.alloc.rate:            641.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.497 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 5740436.961 ops/s
[info]                  ·gc.alloc.rate:            641.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.466 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 5723568.510 ops/s
[info]                  ·gc.alloc.rate:            640.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.010 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5744760.197 ±(99.9%) 64574.515 ops/s [Average]
[info]   (min, avg, max) = (5723568.510, 5744760.197, 5768882.681), stdev = 16769.796
[info]   CI (99.9%): [5680185.682, 5809334.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   642.415 ±(99.9%) 6.864 MB/sec [Average]
[info]   (min, avg, max) = (640.230, 642.415, 644.998), stdev = 1.783
[info]   CI (99.9%): [635.551, 649.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.533 ±(99.9%) 579.464 MB/sec [Average]
[info]   (min, avg, max) = (336.338, 605.533, 673.004), stdev = 150.485
[info]   CI (99.9%): [26.070, 1184.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   165.971 ±(99.9%) 159.714 B/op [Average]
[info]   (min, avg, max) = (91.776, 165.971, 185.010), stdev = 41.477
[info]   CI (99.9%): [6.256, 325.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:10:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3732487.639 ops/s
[info] # Warmup Iteration   2: 5729118.161 ops/s
[info] # Warmup Iteration   3: 5769143.793 ops/s
[info] Iteration   1: 5732669.567 ops/s
[info]                  ·gc.alloc.rate:            349.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 5754957.389 ops/s
[info]                  ·gc.alloc.rate:                   350.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        91.994 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.182 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5750041.888 ops/s
[info]                  ·gc.alloc.rate:            350.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92.257 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 5759064.469 ops/s
[info]                  ·gc.alloc.rate:            351.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91.933 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5718778.387 ops/s
[info]                  ·gc.alloc.rate:            348.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 185.157 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5743102.340 ±(99.9%) 65119.914 ops/s [Average]
[info]   (min, avg, max) = (5718778.387, 5743102.340, 5759064.469), stdev = 16911.435
[info]   CI (99.9%): [5677982.426, 5808222.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   350.255 ±(99.9%) 3.984 MB/sec [Average]
[info]   (min, avg, max) = (348.782, 350.255, 351.235), stdev = 1.035
[info]   CI (99.9%): [346.271, 354.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   403.744 ±(99.9%) 578.954 MB/sec [Average]
[info]   (min, avg, max) = (336.316, 403.744, 672.703), stdev = 150.352
[info]   CI (99.9%): [≈ 0, 982.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   110.739 ±(99.9%) 160.192 B/op [Average]
[info]   (min, avg, max) = (91.933, 110.739, 185.157), stdev = 41.601
[info]   CI (99.9%): [≈ 0, 270.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.036 ±(99.9%) 0.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.182), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 6.000), stdev = 1.517
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:10:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38870.251 ops/s
[info] # Warmup Iteration   2: 284643.945 ops/s
[info] # Warmup Iteration   3: 280556.675 ops/s
[info] Iteration   1: 287217.778 ops/s
[info]                  ·gc.alloc.rate:                   1659.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              9096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1678.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9201.621 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.550 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 293609.299 ops/s
[info]                  ·gc.alloc.rate:                                  1696.693 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.212 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9123.051 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 294209.626 ops/s
[info]                  ·gc.alloc.rate:                                  1700.232 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9104.604 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 295536.219 ops/s
[info]                  ·gc.alloc.rate:                                  1707.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9063.822 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 294718.643 ops/s
[info]                  ·gc.alloc.rate:                                  1703.414 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9088.636 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   293058.313 ±(99.9%) 12863.351 ops/s [Average]
[info]   (min, avg, max) = (287217.778, 293058.313, 295536.219), stdev = 3340.571
[info]   CI (99.9%): [280194.962, 305921.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1693.547 ±(99.9%) 74.592 MB/sec [Average]
[info]   (min, avg, max) = (1659.666, 1693.547, 1707.730), stdev = 19.371
[info]   CI (99.9%): [1618.955, 1768.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   9096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9096.001, 9096.001, 9096.002), stdev = 0.001
[info]   CI (99.9%): [9096.001, 9096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.364 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.212), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.230 ±(99.9%) 1.951 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.230, 1.136), stdev = 0.507
[info]   CI (99.9%): [≈ 0, 2.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1697.248 ±(99.9%) 39.417 MB/sec [Average]
[info]   (min, avg, max) = (1678.938, 1697.248, 1702.034), stdev = 10.236
[info]   CI (99.9%): [1657.831, 1736.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   9116.347 ±(99.9%) 201.758 B/op [Average]
[info]   (min, avg, max) = (9063.822, 9116.347, 9201.621), stdev = 52.396
[info]   CI (99.9%): [8914.589, 9318.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.110 ±(99.9%) 43.999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.110, 25.550), stdev = 11.426
[info]   CI (99.9%): [≈ 0, 49.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 22.000), stdev = 8.081
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:10:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44540.341 ops/s
[info] # Warmup Iteration   2: 54639.153 ops/s
[info] # Warmup Iteration   3: 54396.702 ops/s
[info] Iteration   1: 55129.407 ops/s
[info]                  ·gc.alloc.rate:                                  1576.137 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.368 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38586.106 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                95.087 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 55675.401 ops/s
[info]                  ·gc.alloc.rate:                                  1591.839 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.223 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48111.909 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 55534.843 ops/s
[info]                  ·gc.alloc.rate:                                  1587.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48234.043 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 55505.529 ops/s
[info]                  ·gc.alloc.rate:                                  1586.797 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38606.001 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 55561.524 ops/s
[info]                  ·gc.alloc.rate:                                  1588.298 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48210.608 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   55481.341 ±(99.9%) 797.078 ops/s [Average]
[info]   (min, avg, max) = (55129.407, 55481.341, 55675.401), stdev = 206.999
[info]   CI (99.9%): [54684.263, 56278.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1586.153 ±(99.9%) 22.783 MB/sec [Average]
[info]   (min, avg, max) = (1576.137, 1586.153, 1591.839), stdev = 5.917
[info]   CI (99.9%): [1563.370, 1608.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (44992.007, 44992.007, 44992.008), stdev = 0.001
[info]   CI (99.9%): [44992.007, 44992.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.013, 0.047), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.372 ±(99.9%) 2.147 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.372, 1.338), stdev = 0.558
[info]   CI (99.9%): [≈ 0, 2.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1563.909 ±(99.9%) 728.664 MB/sec [Average]
[info]   (min, avg, max) = (1351.729, 1563.909, 1702.223), stdev = 189.232
[info]   CI (99.9%): [835.245, 2292.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   44349.733 ±(99.9%) 20225.784 B/op [Average]
[info]   (min, avg, max) = (38586.106, 44349.733, 48234.043), stdev = 5252.572
[info]   CI (99.9%): [24123.949, 64575.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.017 ±(99.9%) 163.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.017, 95.087), stdev = 42.524
[info]   CI (99.9%): [≈ 0, 182.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 10.000), stdev = 2.828
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:09:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42892.936 ops/s
[info] # Warmup Iteration   2: 80038.571 ops/s
[info] # Warmup Iteration   3: 80202.751 ops/s
[info] Iteration   1: 80650.145 ops/s
[info]                  ·gc.alloc.rate:            1241.793 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26259.574 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 81407.533 ops/s
[info]                  ·gc.alloc.rate:                   1253.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19588.358 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 77.272 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 81184.237 ops/s
[info]                  ·gc.alloc.rate:                                  1250.363 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24240.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26396.489 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 81462.279 ops/s
[info]                  ·gc.alloc.rate:                                  1254.403 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24240.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26304.807 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 82066.550 ops/s
[info]                  ·gc.alloc.rate:                                  1263.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24240.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19583.911 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   81354.149 ±(99.9%) 1969.622 ops/s [Average]
[info]   (min, avg, max) = (80650.145, 81354.149, 82066.550), stdev = 511.505
[info]   CI (99.9%): [79384.527, 83323.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1252.790 ±(99.9%) 30.612 MB/sec [Average]
[info]   (min, avg, max) = (1241.793, 1252.790, 1263.874), stdev = 7.950
[info]   CI (99.9%): [1222.178, 1283.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24240.005, 24240.005, 24240.005), stdev = 0.001
[info]   CI (99.9%): [24240.004, 24240.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.100 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.060), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.263 ±(99.9%) 1.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.263, 1.162), stdev = 0.504
[info]   CI (99.9%): [≈ 0, 2.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.437 ±(99.9%) 715.516 MB/sec [Average]
[info]   (min, avg, max) = (1012.969, 1220.437, 1361.601), stdev = 185.817
[info]   CI (99.9%): [504.921, 1935.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23626.628 ±(99.9%) 14204.175 B/op [Average]
[info]   (min, avg, max) = (19583.911, 23626.628, 26396.489), stdev = 3688.779
[info]   CI (99.9%): [9422.453, 37830.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.454 ±(99.9%) 133.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.454, 77.272), stdev = 34.557
[info]   CI (99.9%): [≈ 0, 148.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 17.000), stdev = 6.042
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92405.475 ops/s
[info] # Warmup Iteration   2: 105807.100 ops/s
[info] # Warmup Iteration   3: 107985.990 ops/s
[info] Iteration   1: 103257.410 ops/s
[info]                  ·gc.alloc.rate:                                  1516.663 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23120.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20600.328 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                50.765 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 109115.978 ops/s
[info]                  ·gc.alloc.rate:                                  1602.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23120.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.786 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24548.827 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 107095.248 ops/s
[info]                  ·gc.alloc.rate:            1573.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       23120.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25012.012 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 108157.417 ops/s
[info]                  ·gc.alloc.rate:                                  1588.819 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23120.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19812.801 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 109601.620 ops/s
[info]                  ·gc.alloc.rate:                                  1610.375 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23120.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24439.321 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   107445.535 ±(99.9%) 9743.146 ops/s [Average]
[info]   (min, avg, max) = (103257.410, 107445.535, 109601.620), stdev = 2530.264
[info]   CI (99.9%): [97702.388, 117188.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1578.357 ±(99.9%) 143.566 MB/sec [Average]
[info]   (min, avg, max) = (1516.663, 1578.357, 1610.375), stdev = 37.284
[info]   CI (99.9%): [1434.791, 1721.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23120.004, 23120.004, 23120.004), stdev = 0.001
[info]   CI (99.9%): [23120.003, 23120.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.478 ±(99.9%) 2.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.478, 1.476), stdev = 0.645
[info]   CI (99.9%): [≈ 0, 2.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.782 ±(99.9%) 728.899 MB/sec [Average]
[info]   (min, avg, max) = (1351.373, 1563.782, 1702.269), stdev = 189.293
[info]   CI (99.9%): [834.883, 2292.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   22882.658 ±(99.9%) 9503.862 B/op [Average]
[info]   (min, avg, max) = (19812.801, 22882.658, 25012.012), stdev = 2468.123
[info]   CI (99.9%): [13378.796, 32386.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.153 ±(99.9%) 87.420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.153, 50.765), stdev = 22.703
[info]   CI (99.9%): [≈ 0, 97.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 13.000), stdev = 4.278
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21944.226 ops/s
[info] # Warmup Iteration   2: 40093.195 ops/s
[info] # Warmup Iteration   3: 39809.870 ops/s
[info] Iteration   1: 40860.536 ops/s
[info]                  ·gc.alloc.rate:                                  2148.307 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       91777.341 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 41086.448 ops/s
[info]                  ·gc.alloc.rate:                                  2160.795 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78237.468 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 40888.772 ops/s
[info]                  ·gc.alloc.rate:                                  2149.925 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.151 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.230 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78614.354 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 40673.198 ops/s
[info]                  ·gc.alloc.rate:                                  2139.130 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.304 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92206.017 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 40341.331 ops/s
[info]                  ·gc.alloc.rate:                                  2121.740 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79682.108 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   40770.057 ±(99.9%) 1081.562 ops/s [Average]
[info]   (min, avg, max) = (40341.331, 40770.057, 41086.448), stdev = 280.878
[info]   CI (99.9%): [39688.495, 41851.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2143.980 ±(99.9%) 56.296 MB/sec [Average]
[info]   (min, avg, max) = (2121.740, 2143.980, 2160.795), stdev = 14.620
[info]   CI (99.9%): [2087.684, 2200.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82760.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (82760.010, 82760.010, 82760.011), stdev = 0.001
[info]   CI (99.9%): [82760.009, 82760.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.025, 0.105), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.955 ±(99.9%) 6.649 B/op [Average]
[info]   (min, avg, max) = (0.091, 0.955, 4.041), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2178.689 ±(99.9%) 717.598 MB/sec [Average]
[info]   (min, avg, max) = (2042.230, 2178.689, 2383.285), stdev = 186.358
[info]   CI (99.9%): [1461.090, 2896.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84103.457 ±(99.9%) 27809.299 B/op [Average]
[info]   (min, avg, max) = (78237.468, 84103.457, 92206.017), stdev = 7221.987
[info]   CI (99.9%): [56294.158, 111912.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:09:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176531.767 ops/s
[info] # Warmup Iteration   2: 240764.310 ops/s
[info] # Warmup Iteration   3: 240609.505 ops/s
[info] Iteration   1: 241238.788 ops/s
[info]                  ·gc.alloc.rate:            1147.727 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6597.114 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 237698.333 ops/s
[info]                  ·gc.alloc.rate:                   1130.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8927.204 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 239860.590 ops/s
[info]                  ·gc.alloc.rate:                                  1141.203 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7488.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.640 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6700.627 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 244310.453 ops/s
[info]                  ·gc.alloc.rate:                                  1162.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7488.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6578.543 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 243727.547 ops/s
[info]                  ·gc.alloc.rate:            1159.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8792.080 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   241367.142 ±(99.9%) 10542.070 ops/s [Average]
[info]   (min, avg, max) = (237698.333, 241367.142, 244310.453), stdev = 2737.742
[info]   CI (99.9%): [230825.072, 251909.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1148.400 ±(99.9%) 50.364 MB/sec [Average]
[info]   (min, avg, max) = (1130.891, 1148.400, 1162.384), stdev = 13.079
[info]   CI (99.9%): [1098.036, 1198.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7488.002, 7488.002, 7488.002), stdev = 0.001
[info]   CI (99.9%): [7488.001, 7488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.129 ±(99.9%) 1.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.640), stdev = 0.286
[info]   CI (99.9%): [≈ 0, 1.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1152.723 ±(99.9%) 711.499 MB/sec [Average]
[info]   (min, avg, max) = (1011.176, 1152.723, 1361.782), stdev = 184.774
[info]   CI (99.9%): [441.224, 1864.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7519.114 ±(99.9%) 4719.137 B/op [Average]
[info]   (min, avg, max) = (6578.543, 7519.114, 8927.204), stdev = 1225.545
[info]   CI (99.9%): [2799.977, 12238.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.411 ±(99.9%) 37.977 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.411, 22.053), stdev = 9.863
[info]   CI (99.9%): [≈ 0, 42.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 14.000), stdev = 5.320
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:09:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262285.966 ops/s
[info] # Warmup Iteration   2: 470163.308 ops/s
[info] # Warmup Iteration   3: 466294.784 ops/s
[info] Iteration   1: 469314.220 ops/s
[info]                  ·gc.alloc.rate:            417.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       1400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1125.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 471828.598 ops/s
[info]                  ·gc.alloc.rate:            419.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       1400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1119.896 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 472105.807 ops/s
[info]                  ·gc.alloc.rate:            419.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       1400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1119.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 469284.137 ops/s
[info]                  ·gc.alloc.rate:            417.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       1400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2251.937 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 470497.256 ops/s
[info]                  ·gc.alloc.rate:            418.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       1400.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1123.066 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   470606.003 ±(99.9%) 5156.129 ops/s [Average]
[info]   (min, avg, max) = (469284.137, 470606.003, 472105.807), stdev = 1339.030
[info]   CI (99.9%): [465449.875, 475762.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   418.599 ±(99.9%) 4.618 MB/sec [Average]
[info]   (min, avg, max) = (417.385, 418.599, 419.935), stdev = 1.199
[info]   CI (99.9%): [413.981, 423.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1400.001, 1400.001, 1400.001), stdev = 0.001
[info]   CI (99.9%): [1400.001, 1400.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   402.851 ±(99.9%) 578.017 MB/sec [Average]
[info]   (min, avg, max) = (335.712, 402.851, 671.374), stdev = 150.109
[info]   CI (99.9%): [≈ 0, 980.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1347.990 ±(99.9%) 1945.840 B/op [Average]
[info]   (min, avg, max) = (1119.227, 1347.990, 2251.937), stdev = 505.329
[info]   CI (99.9%): [≈ 0, 3293.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:08:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 700615.294 ops/s
[info] # Warmup Iteration   2: 790920.535 ops/s
[info] # Warmup Iteration   3: 802510.326 ops/s
[info] Iteration   1: 791501.214 ops/s
[info]                  ·gc.alloc.rate:            426.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1337.765 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 805455.806 ops/s
[info]                  ·gc.alloc.rate:            433.948 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 657.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 804896.155 ops/s
[info]                  ·gc.alloc.rate:            433.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 657.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 806801.539 ops/s
[info]                  ·gc.alloc.rate:                   434.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        656.227 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.299 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 787551.133 ops/s
[info]                  ·gc.alloc.rate:            424.331 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1345.873 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   799241.170 ±(99.9%) 34673.099 ops/s [Average]
[info]   (min, avg, max) = (787551.133, 799241.170, 806801.539), stdev = 9004.494
[info]   CI (99.9%): [764568.071, 833914.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   430.620 ±(99.9%) 18.753 MB/sec [Average]
[info]   (min, avg, max) = (424.331, 430.620, 434.636), stdev = 4.870
[info]   CI (99.9%): [411.868, 449.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.062 ±(99.9%) 710.016 MB/sec [Average]
[info]   (min, avg, max) = (336.344, 471.062, 673.462), stdev = 184.389
[info]   CI (99.9%): [≈ 0, 1181.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   930.993 ±(99.9%) 1444.154 B/op [Average]
[info]   (min, avg, max) = (656.227, 930.993, 1345.873), stdev = 375.042
[info]   CI (99.9%): [≈ 0, 2375.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.260 ±(99.9%) 2.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.260, 1.299), stdev = 0.581
[info]   CI (99.9%): [≈ 0, 2.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:08:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 586619.479 ops/s
[info] # Warmup Iteration   2: 628649.937 ops/s
[info] # Warmup Iteration   3: 632519.485 ops/s
[info] Iteration   1: 630633.794 ops/s
[info]                  ·gc.alloc.rate:      6.411 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 628529.509 ops/s
[info]                  ·gc.alloc.rate:      6.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 630111.565 ops/s
[info]                  ·gc.alloc.rate:      6.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 629059.832 ops/s
[info]                  ·gc.alloc.rate:      6.394 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 633304.964 ops/s
[info]                  ·gc.alloc.rate:      6.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   630327.933 ±(99.9%) 7164.032 ops/s [Average]
[info]   (min, avg, max) = (628529.509, 630327.933, 633304.964), stdev = 1860.476
[info]   CI (99.9%): [623163.900, 637491.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   6.408 ±(99.9%) 0.073 MB/sec [Average]
[info]   (min, avg, max) = (6.389, 6.408, 6.437), stdev = 0.019
[info]   CI (99.9%): [6.335, 6.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19864.122 ops/s
[info] # Warmup Iteration   2: 29453.153 ops/s
[info] # Warmup Iteration   3: 29785.490 ops/s
[info] Iteration   1: 29625.819 ops/s
[info]                  ·gc.alloc.rate:                   1476.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              78432.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        89315.801 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 247.706 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 29992.470 ops/s
[info]                  ·gc.alloc.rate:                                  1494.322 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.451 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.167 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.776 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71447.741 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 29793.239 ops/s
[info]                  ·gc.alloc.rate:                                  1484.750 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71924.875 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 29947.181 ops/s
[info]                  ·gc.alloc.rate:            1491.814 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89446.838 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 30389.441 ops/s
[info]                  ·gc.alloc.rate:            1514.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70512.217 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   29949.630 ±(99.9%) 1096.905 ops/s [Average]
[info]   (min, avg, max) = (29625.819, 29949.630, 30389.441), stdev = 284.863
[info]   CI (99.9%): [28852.726, 31046.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1492.252 ±(99.9%) 54.708 MB/sec [Average]
[info]   (min, avg, max) = (1476.090, 1492.252, 1514.285), stdev = 14.208
[info]   CI (99.9%): [1437.544, 1546.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78419.302 ±(99.9%) 27.382 B/op [Average]
[info]   (min, avg, max) = (78416.013, 78419.302, 78432.018), stdev = 7.111
[info]   CI (99.9%): [78391.920, 78446.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.288 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.167), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.764 ±(99.9%) 15.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.764, 8.776), stdev = 3.920
[info]   CI (99.9%): [≈ 0, 16.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.523 ±(99.9%) 695.772 MB/sec [Average]
[info]   (min, avg, max) = (1361.524, 1493.523, 1701.669), stdev = 180.690
[info]   CI (99.9%): [797.751, 2189.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   78529.494 ±(99.9%) 38196.261 B/op [Average]
[info]   (min, avg, max) = (70512.217, 78529.494, 89446.838), stdev = 9919.448
[info]   CI (99.9%): [40333.234, 116725.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   49.541 ±(99.9%) 426.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.541, 247.706), stdev = 110.778
[info]   CI (99.9%): [≈ 0, 476.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 19.000), stdev = 6.950
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:08:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4082868.836 ops/s
[info] # Warmup Iteration   2: 4852175.635 ops/s
[info] # Warmup Iteration   3: 4861823.945 ops/s
[info] Iteration   1: 4865443.740 ops/s
[info]                  ·gc.alloc.rate:                                  3586.703 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1101.074 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 4791878.208 ops/s
[info]                  ·gc.alloc.rate:                                  3531.910 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1229.811 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 4795694.938 ops/s
[info]                  ·gc.alloc.rate:                                  3535.218 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1117.149 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 4859631.485 ops/s
[info]                  ·gc.alloc.rate:                                  3581.443 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1212.662 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 4853266.962 ops/s
[info]                  ·gc.alloc.rate:                                  3576.458 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1103.869 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4833183.067 ±(99.9%) 139570.357 ops/s [Average]
[info]   (min, avg, max) = (4791878.208, 4833183.067, 4865443.740), stdev = 36245.978
[info]   CI (99.9%): [4693612.710, 4972753.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3562.346 ±(99.9%) 102.230 MB/sec [Average]
[info]   (min, avg, max) = (3531.910, 3562.346, 3586.703), stdev = 26.549
[info]   CI (99.9%): [3460.116, 3664.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3540.205 ±(99.9%) 717.247 MB/sec [Average]
[info]   (min, avg, max) = (3403.396, 3540.205, 3744.466), stdev = 186.267
[info]   CI (99.9%): [2822.958, 4257.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1152.913 ±(99.9%) 242.428 B/op [Average]
[info]   (min, avg, max) = (1101.074, 1152.913, 1229.811), stdev = 62.958
[info]   CI (99.9%): [910.484, 1395.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   52.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.200, 13.000), stdev = 1.924
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:07:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 577655.547 ops/s
[info] # Warmup Iteration   2: 7563084.699 ops/s
[info] # Warmup Iteration   3: 7692921.119 ops/s
[info] Iteration   1: 7701673.228 ops/s
[info]                  ·gc.alloc.rate:                   822.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        136.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 7682008.294 ops/s
[info]                  ·gc.alloc.rate:                   819.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        204.974 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.136 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 7594299.640 ops/s
[info]                  ·gc.alloc.rate:            810.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.322 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 7759469.546 ops/s
[info]                  ·gc.alloc.rate:                   828.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        202.946 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.946 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 7702381.598 ops/s
[info]                  ·gc.alloc.rate:                                  822.406 MB/sec
[info]                  ·gc.alloc.rate.norm:                             168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.480 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            678.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       138.570 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.544 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7687966.461 ±(99.9%) 230374.536 ops/s [Average]
[info]   (min, avg, max) = (7594299.640, 7687966.461, 7759469.546), stdev = 59827.535
[info]   CI (99.9%): [7457591.925, 7918340.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   820.689 ±(99.9%) 24.476 MB/sec [Average]
[info]   (min, avg, max) = (810.837, 820.689, 828.373), stdev = 6.356
[info]   CI (99.9%): [796.213, 845.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.096 ±(99.9%) 0.826 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.480), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   802.722 ±(99.9%) 695.295 MB/sec [Average]
[info]   (min, avg, max) = (666.757, 802.722, 1000.684), stdev = 180.566
[info]   CI (99.9%): [107.427, 1498.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   164.216 ±(99.9%) 139.776 B/op [Average]
[info]   (min, avg, max) = (136.268, 164.216, 204.974), stdev = 36.299
[info]   CI (99.9%): [24.440, 303.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 7.391 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.732, 4.664), stdev = 1.920
[info]   CI (99.9%): [≈ 0, 9.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.353 ±(99.9%) 1.500 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.353, 0.946), stdev = 0.389
[info]   CI (99.9%): [≈ 0, 1.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 11.200, 16.000), stdev = 4.764
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:07:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2444100.787 ops/s
[info] # Warmup Iteration   2: 3774816.050 ops/s
[info] # Warmup Iteration   3: 3820690.227 ops/s
[info] Iteration   1: 3816969.174 ops/s
[info]                  ·gc.alloc.rate:                                  2153.042 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       982.454 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 3849121.758 ops/s
[info]                  ·gc.alloc.rate:                                  2171.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       835.125 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3848482.263 ops/s
[info]                  ·gc.alloc.rate:                                  2170.895 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       974.477 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 3860074.609 ops/s
[info]                  ·gc.alloc.rate:                                  2177.865 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       832.735 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3822560.204 ops/s
[info]                  ·gc.alloc.rate:                                  2156.829 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       840.906 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3839441.602 ±(99.9%) 71810.936 ops/s [Average]
[info]   (min, avg, max) = (3816969.174, 3839441.602, 3860074.609), stdev = 18649.072
[info]   CI (99.9%): [3767630.666, 3911252.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2165.990 ±(99.9%) 40.617 MB/sec [Average]
[info]   (min, avg, max) = (2153.042, 2165.990, 2177.865), stdev = 10.548
[info]   CI (99.9%): [2125.373, 2206.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   888.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (888.000, 888.000, 888.000), stdev = 0.001
[info]   CI (99.9%): [888.000, 888.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.030, 0.138), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.012, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2178.231 ±(99.9%) 716.906 MB/sec [Average]
[info]   (min, avg, max) = (2042.031, 2178.231, 2382.305), stdev = 186.178
[info]   CI (99.9%): [1461.326, 2895.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   893.139 ±(99.9%) 300.348 B/op [Average]
[info]   (min, avg, max) = (832.735, 893.139, 982.454), stdev = 77.999
[info]   CI (99.9%): [592.792, 1193.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 13.000), stdev = 3.578
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7075645.640 ops/s
[info] # Warmup Iteration   2: 7640026.770 ops/s
[info] # Warmup Iteration   3: 7637067.402 ops/s
[info] Iteration   1: 7654752.755 ops/s
[info]                  ·gc.alloc.rate:                   817.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        138.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7657654.035 ops/s
[info]                  ·gc.alloc.rate:                   817.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        207.695 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7663784.684 ops/s
[info]                  ·gc.alloc.rate:            817.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.442 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 7450552.033 ops/s
[info]                  ·gc.alloc.rate:                   795.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        142.123 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7146001.104 ops/s
[info]                  ·gc.alloc.rate:                                  762.701 MB/sec
[info]                  ·gc.alloc.rate.norm:                             168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       224.912 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7514548.922 ±(99.9%) 866032.413 ops/s [Average]
[info]   (min, avg, max) = (7146001.104, 7514548.922, 7663784.684), stdev = 224905.867
[info]   CI (99.9%): [6648516.510, 8380581.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   802.030 ±(99.9%) 92.418 MB/sec [Average]
[info]   (min, avg, max) = (762.701, 802.030, 817.926), stdev = 24.001
[info]   CI (99.9%): [709.612, 894.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.077), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.321 ±(99.9%) 722.043 MB/sec [Average]
[info]   (min, avg, max) = (672.713, 810.321, 1021.074), stdev = 187.512
[info]   CI (99.9%): [88.278, 1532.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   170.329 ±(99.9%) 163.400 B/op [Average]
[info]   (min, avg, max) = (138.442, 170.329, 224.912), stdev = 42.434
[info]   CI (99.9%): [6.929, 333.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.224 ±(99.9%) 1.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.224, 0.844), stdev = 0.354
[info]   CI (99.9%): [≈ 0, 1.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:07:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3307079.249 ops/s
[info] # Warmup Iteration   2: 4518137.892 ops/s
[info] # Warmup Iteration   3: 4634126.728 ops/s
[info] Iteration   1: 4687266.738 ops/s
[info]                  ·gc.alloc.rate:                                  2525.134 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       914.380 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4696595.422 ops/s
[info]                  ·gc.alloc.rate:                                  2530.165 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       798.482 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 4706206.621 ops/s
[info]                  ·gc.alloc.rate:                                  2535.646 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       910.689 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 4705448.422 ops/s
[info]                  ·gc.alloc.rate:                                  2534.929 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       796.978 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4634596.263 ops/s
[info]                  ·gc.alloc.rate:                                  2497.564 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       924.783 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4686022.693 ±(99.9%) 114597.225 ops/s [Average]
[info]   (min, avg, max) = (4634596.263, 4686022.693, 4706206.621), stdev = 29760.535
[info]   CI (99.9%): [4571425.468, 4800619.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2524.688 ±(99.9%) 60.604 MB/sec [Average]
[info]   (min, avg, max) = (2497.564, 2524.688, 2535.646), stdev = 15.739
[info]   CI (99.9%): [2464.083, 2585.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2586.885 ±(99.9%) 718.750 MB/sec [Average]
[info]   (min, avg, max) = (2382.407, 2586.885, 2723.708), stdev = 186.657
[info]   CI (99.9%): [1868.135, 3305.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   869.062 ±(99.9%) 251.541 B/op [Average]
[info]   (min, avg, max) = (796.978, 869.062, 924.783), stdev = 65.324
[info]   CI (99.9%): [617.522, 1120.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2494412.801 ops/s
[info] # Warmup Iteration   2: 3303546.108 ops/s
[info] # Warmup Iteration   3: 3344265.710 ops/s
[info] Iteration   1: 3279713.707 ops/s
[info]                  ·gc.alloc.rate:            783.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 322.870 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 3320366.344 ops/s
[info]                  ·gc.alloc.rate:            793.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 478.366 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 3347483.647 ops/s
[info]                  ·gc.alloc.rate:            799.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.318 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 3329421.007 ops/s
[info]                  ·gc.alloc.rate:                   795.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        477.063 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.889 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 3335172.061 ops/s
[info]                  ·gc.alloc.rate:                                  796.725 MB/sec
[info]                  ·gc.alloc.rate.norm:                             376.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.181 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       321.274 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3322431.353 ±(99.9%) 99445.440 ops/s [Average]
[info]   (min, avg, max) = (3279713.707, 3322431.353, 3347483.647), stdev = 25825.665
[info]   CI (99.9%): [3222985.913, 3421876.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   793.690 ±(99.9%) 24.005 MB/sec [Average]
[info]   (min, avg, max) = (783.407, 793.690, 799.821), stdev = 6.234
[info]   CI (99.9%): [769.685, 817.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.312 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.909 ±(99.9%) 703.825 MB/sec [Average]
[info]   (min, avg, max) = (672.709, 808.909, 1009.121), stdev = 182.781
[info]   CI (99.9%): [105.084, 1512.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   383.178 ±(99.9%) 332.443 B/op [Average]
[info]   (min, avg, max) = (316.318, 383.178, 478.366), stdev = 86.334
[info]   CI (99.9%): [50.735, 715.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.378 ±(99.9%) 3.254 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.889), stdev = 0.845
[info]   CI (99.9%): [≈ 0, 3.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 11.000), stdev = 3.507
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 542640.250 ops/s
[info] # Warmup Iteration   2: 6895837.850 ops/s
[info] # Warmup Iteration   3: 7221286.856 ops/s
[info] Iteration   1: 7264726.316 ops/s
[info]                  ·gc.alloc.rate:            701.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.604 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 7254155.077 ops/s
[info]                  ·gc.alloc.rate:                   700.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.669 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        144.671 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 7253515.019 ops/s
[info]                  ·gc.alloc.rate:            700.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      666.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.682 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 7234875.039 ops/s
[info]                  ·gc.alloc.rate:                   698.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.837 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        145.056 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 7270345.925 ops/s
[info]                  ·gc.alloc.rate:                   702.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        144.345 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.144 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7255523.475 ±(99.9%) 52256.148 ops/s [Average]
[info]   (min, avg, max) = (7234875.039, 7255523.475, 7270345.925), stdev = 13570.756
[info]   CI (99.9%): [7203267.327, 7307779.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   700.694 ±(99.9%) 5.027 MB/sec [Average]
[info]   (min, avg, max) = (698.760, 700.694, 702.166), stdev = 1.306
[info]   CI (99.9%): [695.667, 705.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   666.910 ±(99.9%) 1.208 MB/sec [Average]
[info]   (min, avg, max) = (666.669, 666.910, 667.459), stdev = 0.314
[info]   CI (99.9%): [665.702, 668.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   144.672 ±(99.9%) 0.980 B/op [Average]
[info]   (min, avg, max) = (144.345, 144.672, 145.056), stdev = 0.254
[info]   CI (99.9%): [143.692, 145.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.087 ±(99.9%) 0.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.145), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:06:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2212184.556 ops/s
[info] # Warmup Iteration   2: 3172470.781 ops/s
[info] # Warmup Iteration   3: 3185378.339 ops/s
[info] Iteration   1: 3198862.692 ops/s
[info]                  ·gc.alloc.rate:            991.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.542 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 330.359 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 3177494.444 ops/s
[info]                  ·gc.alloc.rate:            985.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 498.881 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 3182840.731 ops/s
[info]                  ·gc.alloc.rate:                                  987.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             488.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.390 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       500.348 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.306 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 3215094.223 ops/s
[info]                  ·gc.alloc.rate:                                  997.068 MB/sec
[info]                  ·gc.alloc.rate.norm:                             488.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       499.884 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3220686.823 ops/s
[info]                  ·gc.alloc.rate:                                  998.897 MB/sec
[info]                  ·gc.alloc.rate.norm:                             488.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       499.009 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3198995.782 ±(99.9%) 73389.171 ops/s [Average]
[info]   (min, avg, max) = (3177494.444, 3198995.782, 3220686.823), stdev = 19058.935
[info]   CI (99.9%): [3125606.611, 3272384.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   992.040 ±(99.9%) 23.101 MB/sec [Average]
[info]   (min, avg, max) = (985.203, 992.040, 998.897), stdev = 5.999
[info]   CI (99.9%): [968.939, 1015.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.080 ±(99.9%) 0.668 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.390), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.040 ±(99.9%) 0.330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.193), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.703 ±(99.9%) 592.776 MB/sec [Average]
[info]   (min, avg, max) = (671.542, 946.703, 1021.432), stdev = 153.942
[info]   CI (99.9%): [353.927, 1539.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   465.696 ±(99.9%) 291.333 B/op [Average]
[info]   (min, avg, max) = (330.359, 465.696, 500.348), stdev = 75.658
[info]   CI (99.9%): [174.364, 757.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.461 ±(99.9%) 3.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.461, 2.306), stdev = 1.031
[info]   CI (99.9%): [≈ 0, 4.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 12.000), stdev = 4.359
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8981153.860 ops/s
[info] # Warmup Iteration   2: 9718823.967 ops/s
[info] # Warmup Iteration   3: 9814289.315 ops/s
[info] Iteration   1: 9810858.732 ops/s
[info]                  ·gc.alloc.rate:            947.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 161.886 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 9928289.579 ops/s
[info]                  ·gc.alloc.rate:                   958.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106.659 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9693506.545 ops/s
[info]                  ·gc.alloc.rate:                   936.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        163.969 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.649 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 9369912.393 ops/s
[info]                  ·gc.alloc.rate:                                  905.024 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.131 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       171.525 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 9397843.360 ops/s
[info]                  ·gc.alloc.rate:            907.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 171.019 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9640082.122 ±(99.9%) 956390.306 ops/s [Average]
[info]   (min, avg, max) = (9369912.393, 9640082.122, 9928289.579), stdev = 248371.525
[info]   CI (99.9%): [8683691.816, 10596472.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   931.030 ±(99.9%) 91.816 MB/sec [Average]
[info]   (min, avg, max) = (905.024, 931.030, 958.665), stdev = 23.844
[info]   CI (99.9%): [839.214, 1022.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.225 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.131), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.022), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.873 ±(99.9%) 590.630 MB/sec [Average]
[info]   (min, avg, max) = (672.698, 946.873, 1021.480), stdev = 153.385
[info]   CI (99.9%): [356.243, 1537.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   155.012 ±(99.9%) 105.356 B/op [Average]
[info]   (min, avg, max) = (106.659, 155.012, 171.525), stdev = 27.361
[info]   CI (99.9%): [49.656, 260.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.151 ±(99.9%) 1.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.151, 0.649), stdev = 0.282
[info]   CI (99.9%): [≈ 0, 1.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.536
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7687525.239 ops/s
[info] # Warmup Iteration   2: 8068358.527 ops/s
[info] # Warmup Iteration   3: 8088145.890 ops/s
[info] Iteration   1: 8087173.137 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8085719.998 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8087387.523 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8088384.033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8063970.817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8082527.101 ±(99.9%) 40111.591 ops/s [Average]
[info]   (min, avg, max) = (8063970.817, 8082527.101, 8088384.033), stdev = 10416.853
[info]   CI (99.9%): [8042415.511, 8122638.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2262055.547 ops/s
[info] # Warmup Iteration   2: 2999440.351 ops/s
[info] # Warmup Iteration   3: 3104024.738 ops/s
[info] Iteration   1: 3108353.880 ops/s
[info]                  ·gc.alloc.rate:            995.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 509.964 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3062761.689 ops/s
[info]                  ·gc.alloc.rate:            981.071 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 517.571 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3140399.123 ops/s
[info]                  ·gc.alloc.rate:                   1005.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        336.516 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3185004.349 ops/s
[info]                  ·gc.alloc.rate:                                  1020.095 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       504.619 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3190430.716 ops/s
[info]                  ·gc.alloc.rate:                                  1022.009 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       671.656 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3137389.951 ±(99.9%) 206485.550 ops/s [Average]
[info]   (min, avg, max) = (3062761.689, 3137389.951, 3190430.716), stdev = 53623.642
[info]   CI (99.9%): [2930904.401, 3343875.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1004.796 ±(99.9%) 66.261 MB/sec [Average]
[info]   (min, avg, max) = (981.071, 1004.796, 1022.009), stdev = 17.208
[info]   CI (99.9%): [938.534, 1071.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.295 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.085), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.850 ±(99.9%) 940.501 MB/sec [Average]
[info]   (min, avg, max) = (671.381, 1013.850, 1361.980), stdev = 244.245
[info]   CI (99.9%): [73.349, 1954.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   508.065 ±(99.9%) 456.820 B/op [Average]
[info]   (min, avg, max) = (336.516, 508.065, 671.656), stdev = 118.635
[info]   CI (99.9%): [51.245, 964.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.467 ±(99.9%) 4.024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.467, 2.337), stdev = 1.045
[info]   CI (99.9%): [≈ 0, 4.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 11.000), stdev = 4.025
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:05:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471804.544 ops/s
[info] # Warmup Iteration   2: 691543.785 ops/s
[info] # Warmup Iteration   3: 702062.772 ops/s
[info] Iteration   1: 699042.596 ops/s
[info]                  ·gc.alloc.rate:            1225.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3035.512 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 697895.806 ops/s
[info]                  ·gc.alloc.rate:                                  1223.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2760.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3047.994 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.511 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 704410.137 ops/s
[info]                  ·gc.alloc.rate:                                  1235.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2760.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2281.691 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 703277.852 ops/s
[info]                  ·gc.alloc.rate:            1233.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3047.155 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 703620.395 ops/s
[info]                  ·gc.alloc.rate:            1233.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2284.125 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   701649.357 ±(99.9%) 11397.392 ops/s [Average]
[info]   (min, avg, max) = (697895.806, 701649.357, 704410.137), stdev = 2959.867
[info]   CI (99.9%): [690251.965, 713046.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1230.448 ±(99.9%) 20.030 MB/sec [Average]
[info]   (min, avg, max) = (1223.917, 1230.448, 1235.072), stdev = 5.202
[info]   CI (99.9%): [1210.418, 1250.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2760.001, 2760.001, 2760.001), stdev = 0.001
[info]   CI (99.9%): [2760.001, 2760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.054), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.122), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1220.772 ±(99.9%) 702.136 MB/sec [Average]
[info]   (min, avg, max) = (1021.033, 1220.772, 1361.936), stdev = 182.342
[info]   CI (99.9%): [518.637, 1922.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2739.295 ±(99.9%) 1604.382 B/op [Average]
[info]   (min, avg, max) = (2281.691, 2739.295, 3047.994), stdev = 416.653
[info]   CI (99.9%): [1134.914, 4343.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.502 ±(99.9%) 12.935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.502, 7.511), stdev = 3.359
[info]   CI (99.9%): [≈ 0, 14.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 4.690
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:05:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.894 ops/s
[info] # Warmup Iteration   2: 1786022.511 ops/s
[info] # Warmup Iteration   3: 1816106.547 ops/s
[info] Iteration   1: 1849203.568 ops/s
[info]                  ·gc.alloc.rate:            517.037 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 284.037 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1841596.279 ops/s
[info]                  ·gc.alloc.rate:            514.856 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 570.418 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1852922.340 ops/s
[info]                  ·gc.alloc.rate:            517.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 283.474 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1840533.070 ops/s
[info]                  ·gc.alloc.rate:            514.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 570.767 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1852399.997 ops/s
[info]                  ·gc.alloc.rate:            517.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 283.546 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   1847331.051 ±(99.9%) 22745.150 ops/s [Average]
[info]   (min, avg, max) = (1840533.070, 1847331.051, 1852922.340), stdev = 5906.843
[info]   CI (99.9%): [1824585.900, 1870076.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   516.452 ±(99.9%) 6.414 MB/sec [Average]
[info]   (min, avg, max) = (514.499, 516.452, 517.957), stdev = 1.666
[info]   CI (99.9%): [510.038, 522.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.217 ±(99.9%) 703.789 MB/sec [Average]
[info]   (min, avg, max) = (333.698, 467.217, 667.461), stdev = 182.772
[info]   CI (99.9%): [≈ 0, 1171.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   398.448 ±(99.9%) 605.111 B/op [Average]
[info]   (min, avg, max) = (283.474, 398.448, 570.767), stdev = 157.145
[info]   CI (99.9%): [≈ 0, 1003.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 463990.338 ops/s
[info] # Warmup Iteration   2: 1142916.568 ops/s
[info] # Warmup Iteration   3: 1146022.552 ops/s
[info] Iteration   1: 1139312.919 ops/s
[info]                  ·gc.alloc.rate:            787.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1394.084 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 1148404.493 ops/s
[info]                  ·gc.alloc.rate:            793.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 922.058 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1146417.396 ops/s
[info]                  ·gc.alloc.rate:            792.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 923.652 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1136693.961 ops/s
[info]                  ·gc.alloc.rate:                   785.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1397.339 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 1152582.657 ops/s
[info]                  ·gc.alloc.rate:                                  796.698 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1088.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       929.648 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1144682.285 ±(99.9%) 25244.835 ops/s [Average]
[info]   (min, avg, max) = (1136693.961, 1144682.285, 1152582.657), stdev = 6556.003
[info]   CI (99.9%): [1119437.451, 1169927.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   791.252 ±(99.9%) 17.241 MB/sec [Average]
[info]   (min, avg, max) = (785.698, 791.252, 796.698), stdev = 4.477
[info]   CI (99.9%): [774.011, 808.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   808.911 ±(99.9%) 704.243 MB/sec [Average]
[info]   (min, avg, max) = (672.661, 808.911, 1009.362), stdev = 182.890
[info]   CI (99.9%): [104.668, 1513.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1113.356 ±(99.9%) 992.589 B/op [Average]
[info]   (min, avg, max) = (922.058, 1113.356, 1397.339), stdev = 257.772
[info]   CI (99.9%): [120.767, 2105.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.107 ±(99.9%) 9.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.107, 5.534), stdev = 2.475
[info]   CI (99.9%): [≈ 0, 10.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 13.000), stdev = 4.393
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2183673.882 ops/s
[info] # Warmup Iteration   2: 2374644.781 ops/s
[info] # Warmup Iteration   3: 2447387.777 ops/s
[info] Iteration   1: 2452141.188 ops/s
[info]                  ·gc.alloc.rate:            685.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 432.679 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2449627.611 ops/s
[info]                  ·gc.alloc.rate:            684.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433.135 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2389637.393 ops/s
[info]                  ·gc.alloc.rate:            668.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 443.995 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2449754.565 ops/s
[info]                  ·gc.alloc.rate:            684.906 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.169 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2454545.175 ops/s
[info]                  ·gc.alloc.rate:            686.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 432.237 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2439141.186 ±(99.9%) 106842.661 ops/s [Average]
[info]   (min, avg, max) = (2389637.393, 2439141.186, 2454545.175), stdev = 27746.700
[info]   CI (99.9%): [2332298.525, 2545983.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   681.921 ±(99.9%) 29.626 MB/sec [Average]
[info]   (min, avg, max) = (668.207, 681.921, 686.379), stdev = 7.694
[info]   CI (99.9%): [652.295, 711.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.148 ±(99.9%) 0.500 MB/sec [Average]
[info]   (min, avg, max) = (673.998, 674.148, 674.274), stdev = 0.130
[info]   CI (99.9%): [673.647, 674.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   435.030 ±(99.9%) 19.351 B/op [Average]
[info]   (min, avg, max) = (432.237, 435.030, 443.995), stdev = 5.025
[info]   CI (99.9%): [415.679, 454.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 635939.374 ops/s
[info] # Warmup Iteration   2: 1132456.671 ops/s
[info] # Warmup Iteration   3: 1111176.672 ops/s
[info] Iteration   1: 1140457.297 ops/s
[info]                  ·gc.alloc.rate:            811.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 928.452 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1127169.027 ops/s
[info]                  ·gc.alloc.rate:            802.273 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 939.454 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1135209.666 ops/s
[info]                  ·gc.alloc.rate:            807.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1399.160 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 1141903.600 ops/s
[info]                  ·gc.alloc.rate:            812.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 927.325 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 1133926.283 ops/s
[info]                  ·gc.alloc.rate:                                  807.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.228 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.316 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1411.878 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.548 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1135733.175 ±(99.9%) 22557.924 ops/s [Average]
[info]   (min, avg, max) = (1127169.027, 1135733.175, 1141903.600), stdev = 5858.221
[info]   CI (99.9%): [1113175.251, 1158291.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   808.174 ±(99.9%) 15.453 MB/sec [Average]
[info]   (min, avg, max) = (802.273, 808.174, 812.421), stdev = 4.013
[info]   CI (99.9%): [792.721, 823.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.393 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.228), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.063 ±(99.9%) 0.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.063, 0.316), stdev = 0.142
[info]   CI (99.9%): [≈ 0, 0.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   808.935 ±(99.9%) 718.239 MB/sec [Average]
[info]   (min, avg, max) = (672.597, 808.935, 1017.389), stdev = 186.524
[info]   CI (99.9%): [90.695, 1527.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1121.254 ±(99.9%) 999.549 B/op [Average]
[info]   (min, avg, max) = (927.325, 1121.254, 1411.878), stdev = 259.580
[info]   CI (99.9%): [121.705, 2120.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.110 ±(99.9%) 9.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.110, 5.548), stdev = 2.481
[info]   CI (99.9%): [≈ 0, 10.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.600, 13.000), stdev = 2.510
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 933189.599 ops/s
[info] # Warmup Iteration   2: 1693222.856 ops/s
[info] # Warmup Iteration   3: 1709726.305 ops/s
[info] Iteration   1: 1722390.411 ops/s
[info]                  ·gc.alloc.rate:            1444.842 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1685.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1540.034 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 1712470.677 ops/s
[info]                  ·gc.alloc.rate:                                  1436.304 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1248.352 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.061 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 1747909.823 ops/s
[info]                  ·gc.alloc.rate:                                  1466.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1225.982 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1729848.065 ops/s
[info]                  ·gc.alloc.rate:                                  1450.712 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1548.486 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1747146.911 ops/s
[info]                  ·gc.alloc.rate:                                  1465.282 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1226.529 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1731953.177 ±(99.9%) 59682.184 ops/s [Average]
[info]   (min, avg, max) = (1712470.677, 1731953.177, 1747909.823), stdev = 15499.274
[info]   CI (99.9%): [1672270.994, 1791635.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1452.660 ±(99.9%) 49.985 MB/sec [Average]
[info]   (min, avg, max) = (1436.304, 1452.660, 1466.160), stdev = 12.981
[info]   CI (99.9%): [1402.675, 1502.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1320.000, 1320.000, 1320.000), stdev = 0.001
[info]   CI (99.9%): [1320.000, 1320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1493.822 ±(99.9%) 703.157 MB/sec [Average]
[info]   (min, avg, max) = (1358.343, 1493.822, 1701.824), stdev = 182.608
[info]   CI (99.9%): [790.665, 2196.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1357.877 ±(99.9%) 656.186 B/op [Average]
[info]   (min, avg, max) = (1225.982, 1357.877, 1548.486), stdev = 170.409
[info]   CI (99.9%): [701.691, 2014.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.612 ±(99.9%) 5.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.612, 3.061), stdev = 1.369
[info]   CI (99.9%): [≈ 0, 5.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 16.000), stdev = 5.505
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:04:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.892 ops/s
[info] # Warmup Iteration   2: 2755542.132 ops/s
[info] # Warmup Iteration   3: 2867028.609 ops/s
[info] Iteration   1: 2872495.012 ops/s
[info]                  ·gc.alloc.rate:            744.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 365.723 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2890816.101 ops/s
[info]                  ·gc.alloc.rate:            749.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 363.398 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2867316.605 ops/s
[info]                  ·gc.alloc.rate:            743.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 549.561 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 2865900.277 ops/s
[info]                  ·gc.alloc.rate:            742.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 366.552 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2870452.489 ops/s
[info]                  ·gc.alloc.rate:                   744.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        365.982 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.192 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2873396.097 ±(99.9%) 38798.025 ops/s [Average]
[info]   (min, avg, max) = (2865900.277, 2873396.097, 2890816.101), stdev = 10075.724
[info]   CI (99.9%): [2834598.072, 2912194.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   744.863 ±(99.9%) 9.972 MB/sec [Average]
[info]   (min, avg, max) = (742.868, 744.863, 749.321), stdev = 2.590
[info]   CI (99.9%): [734.891, 754.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   734.209 ±(99.9%) 574.794 MB/sec [Average]
[info]   (min, avg, max) = (667.402, 734.209, 1001.235), stdev = 149.272
[info]   CI (99.9%): [159.414, 1309.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   402.243 ±(99.9%) 317.146 B/op [Average]
[info]   (min, avg, max) = (363.398, 402.243, 549.561), stdev = 82.362
[info]   CI (99.9%): [85.097, 719.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.438 ±(99.9%) 3.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.192), stdev = 0.980
[info]   CI (99.9%): [≈ 0, 4.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 14.000), stdev = 2.168
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1024430.151 ops/s
[info] # Warmup Iteration   2: 2389312.680 ops/s
[info] # Warmup Iteration   3: 2386802.076 ops/s
[info] Iteration   1: 2387363.547 ops/s
[info]                  ·gc.alloc.rate:            1128.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 665.326 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 2399934.373 ops/s
[info]                  ·gc.alloc.rate:            1134.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.271 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 661.841 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 2417103.580 ops/s
[info]                  ·gc.alloc.rate:                                  1142.657 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.147 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       883.996 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.603 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2380009.300 ops/s
[info]                  ·gc.alloc.rate:                                  1124.921 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       675.296 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2405348.413 ops/s
[info]                  ·gc.alloc.rate:            1136.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 668.155 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2397951.843 ±(99.9%) 56444.305 ops/s [Average]
[info]   (min, avg, max) = (2380009.300, 2397951.843, 2417103.580), stdev = 14658.407
[info]   CI (99.9%): [2341507.537, 2454396.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1133.501 ±(99.9%) 26.987 MB/sec [Average]
[info]   (min, avg, max) = (1124.921, 1133.501, 1142.657), stdev = 7.009
[info]   CI (99.9%): [1106.513, 1160.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.252 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.147), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.164 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.624 ±(99.9%) 590.340 MB/sec [Average]
[info]   (min, avg, max) = (1009.084, 1083.624, 1357.666), stdev = 153.310
[info]   CI (99.9%): [493.283, 1673.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   710.923 ±(99.9%) 373.039 B/op [Average]
[info]   (min, avg, max) = (661.841, 710.923, 883.996), stdev = 96.877
[info]   CI (99.9%): [337.884, 1083.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.521 ±(99.9%) 4.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.521, 2.603), stdev = 1.164
[info]   CI (99.9%): [≈ 0, 5.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 12.000), stdev = 4.764
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1926153.426 ops/s
[info] # Warmup Iteration   2: 2834751.266 ops/s
[info] # Warmup Iteration   3: 2908107.240 ops/s
[info] Iteration   1: 2898598.245 ops/s
[info]                  ·gc.alloc.rate:                   751.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        548.333 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2912336.847 ops/s
[info]                  ·gc.alloc.rate:            754.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 363.598 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 2853587.131 ops/s
[info]                  ·gc.alloc.rate:                   739.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.568 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        371.450 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.367 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2906485.063 ops/s
[info]                  ·gc.alloc.rate:                   753.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        364.690 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2865696.367 ops/s
[info]                  ·gc.alloc.rate:                                  742.776 MB/sec
[info]                  ·gc.alloc.rate.norm:                             408.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       556.813 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.195 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2887340.731 ±(99.9%) 100520.005 ops/s [Average]
[info]   (min, avg, max) = (2853587.131, 2887340.731, 2912336.847), stdev = 26104.726
[info]   CI (99.9%): [2786820.725, 2987860.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   748.435 ±(99.9%) 25.772 MB/sec [Average]
[info]   (min, avg, max) = (739.846, 748.435, 754.787), stdev = 6.693
[info]   CI (99.9%): [722.663, 774.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   808.630 ±(99.9%) 714.118 MB/sec [Average]
[info]   (min, avg, max) = (672.643, 808.630, 1013.695), stdev = 185.454
[info]   CI (99.9%): [94.513, 1522.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   440.977 ±(99.9%) 392.618 B/op [Average]
[info]   (min, avg, max) = (363.598, 440.977, 556.813), stdev = 101.962
[info]   CI (99.9%): [48.359, 833.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.996), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.657 ±(99.9%) 3.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.657, 2.195), stdev = 0.874
[info]   CI (99.9%): [≈ 0, 4.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 9.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2109069.167 ops/s
[info] # Warmup Iteration   2: 2993321.255 ops/s
[info] # Warmup Iteration   3: 2839690.318 ops/s
[info] Iteration   1: 2996135.843 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2998462.432 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2998840.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3007149.867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3004665.142 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3001050.813 ±(99.9%) 17854.983 ops/s [Average]
[info]   (min, avg, max) = (2996135.843, 3001050.813, 3007149.867), stdev = 4636.882
[info]   CI (99.9%): [2983195.830, 3018905.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1650393.768 ops/s
[info] # Warmup Iteration   2: 2362456.289 ops/s
[info] # Warmup Iteration   3: 2385680.507 ops/s
[info] Iteration   1: 2387317.056 ops/s
[info]                  ·gc.alloc.rate:            1152.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 665.307 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2366661.231 ops/s
[info]                  ·gc.alloc.rate:                   1142.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        894.843 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.658 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 2405056.761 ops/s
[info]                  ·gc.alloc.rate:                                  1161.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       668.263 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 2385299.271 ops/s
[info]                  ·gc.alloc.rate:                                  1151.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       898.406 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2415810.977 ops/s
[info]                  ·gc.alloc.rate:            1166.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 665.265 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2392029.059 ±(99.9%) 73220.994 ops/s [Average]
[info]   (min, avg, max) = (2366661.231, 2392029.059, 2415810.977), stdev = 19015.260
[info]   CI (99.9%): [2318808.065, 2465250.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1154.891 ±(99.9%) 35.796 MB/sec [Average]
[info]   (min, avg, max) = (1142.452, 1154.891, 1166.382), stdev = 9.296
[info]   CI (99.9%): [1119.095, 1190.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.133), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.539 ±(99.9%) 709.683 MB/sec [Average]
[info]   (min, avg, max) = (1008.941, 1151.539, 1361.373), stdev = 184.302
[info]   CI (99.9%): [441.857, 1861.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   758.417 ±(99.9%) 485.865 B/op [Average]
[info]   (min, avg, max) = (665.265, 758.417, 898.406), stdev = 126.178
[info]   CI (99.9%): [272.552, 1244.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.532 ±(99.9%) 4.577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.532, 2.658), stdev = 1.189
[info]   CI (99.9%): [≈ 0, 5.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 14.000), stdev = 5.310
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5151.561 ops/s
[info] # Warmup Iteration   2: 8419.390 ops/s
[info] # Warmup Iteration   3: 10102.373 ops/s
[info] Iteration   1: 10064.574 ops/s
[info]                  ·gc.alloc.rate:            1461.964 MB/sec
[info]                  ·gc.alloc.rate.norm:       228552.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 210819.293 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   2: 10850.772 ops/s
[info]                  ·gc.alloc.rate:                                  1572.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             228189.924 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.920 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245888.318 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                483.081 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 11301.045 ops/s
[info]                  ·gc.alloc.rate:                                  1636.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             227976.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.738 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       237026.602 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 11371.347 ops/s
[info]                  ·gc.alloc.rate:                                  1647.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             227996.537 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.317 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       235567.720 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 11403.379 ops/s
[info]                  ·gc.alloc.rate:                                  1652.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             228016.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.430 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       187908.938 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   10998.223 ±(99.9%) 2185.488 ops/s [Average]
[info]   (min, avg, max) = (10064.574, 10998.223, 11403.379), stdev = 567.564
[info]   CI (99.9%): [8812.735, 13183.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1594.227 ±(99.9%) 309.996 MB/sec [Average]
[info]   (min, avg, max) = (1461.964, 1594.227, 1652.274), stdev = 80.505
[info]   CI (99.9%): [1284.231, 1904.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228146.115 ±(99.9%) 933.167 B/op [Average]
[info]   (min, avg, max) = (227976.036, 228146.115, 228552.041), stdev = 242.341
[info]   CI (99.9%): [227212.948, 229079.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.084 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.056), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.281 ±(99.9%) 11.599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.281, 7.738), stdev = 3.012
[info]   CI (99.9%): [≈ 0, 15.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1561.751 ±(99.9%) 726.743 MB/sec [Average]
[info]   (min, avg, max) = (1348.534, 1561.751, 1701.828), stdev = 188.733
[info]   CI (99.9%): [835.008, 2288.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   223442.174 ±(99.9%) 91474.941 B/op [Average]
[info]   (min, avg, max) = (187908.938, 223442.174, 245888.318), stdev = 23755.752
[info]   CI (99.9%): [131967.233, 314917.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   96.616 ±(99.9%) 831.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 96.616, 483.081), stdev = 216.040
[info]   CI (99.9%): [≈ 0, 928.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.600, 20.000), stdev = 6.804
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4399.962 ops/s
[info] # Warmup Iteration   2: 13761.432 ops/s
[info] # Warmup Iteration   3: 14322.265 ops/s
[info] Iteration   1: 14391.824 ops/s
[info]                  ·gc.alloc.rate:            203.332 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36715.458 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 14474.482 ops/s
[info]                  ·gc.alloc.rate:      204.512 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14380.841 ops/s
[info]                  ·gc.alloc.rate:            203.351 MB/sec
[info]                  ·gc.alloc.rate.norm:       22255.936 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36740.983 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14474.578 ops/s
[info]                  ·gc.alloc.rate:      204.711 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14301.853 ops/s
[info]                  ·gc.alloc.rate:            202.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       22256.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36943.887 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14404.716 ±(99.9%) 279.437 ops/s [Average]
[info]   (min, avg, max) = (14301.853, 14404.716, 14474.578), stdev = 72.569
[info]   CI (99.9%): [14125.279, 14684.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   203.627 ±(99.9%) 3.885 MB/sec [Average]
[info]   (min, avg, max) = (202.230, 203.627, 204.711), stdev = 1.009
[info]   CI (99.9%): [199.742, 207.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22249.612 ±(99.9%) 33.684 B/op [Average]
[info]   (min, avg, max) = (22240.028, 22249.612, 22256.036), stdev = 8.748
[info]   CI (99.9%): [22215.928, 22283.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.414 ±(99.9%) 707.997 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.414, 335.700), stdev = 183.865
[info]   CI (99.9%): [≈ 0, 909.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22080.066 ±(99.9%) 77615.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22080.066, 36943.887), stdev = 20156.444
[info]   CI (99.9%): [≈ 0, 99695.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18637.753 ops/s
[info] # Warmup Iteration   2: 21974.321 ops/s
[info] # Warmup Iteration   3: 36439.958 ops/s
[info] Iteration   1: 36352.696 ops/s
[info]                  ·gc.alloc.rate:            336.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14592.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 36393.306 ops/s
[info]                  ·gc.alloc.rate:            337.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14576.359 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 36624.765 ops/s
[info]                  ·gc.alloc.rate:            339.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14484.438 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 36770.932 ops/s
[info]                  ·gc.alloc.rate:            340.562 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14426.937 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 36730.271 ops/s
[info]                  ·gc.alloc.rate:            340.135 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14443.038 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   36574.394 ±(99.9%) 739.195 ops/s [Average]
[info]   (min, avg, max) = (36352.696, 36574.394, 36770.932), stdev = 191.967
[info]   CI (99.9%): [35835.199, 37313.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   338.702 ±(99.9%) 6.887 MB/sec [Average]
[info]   (min, avg, max) = (336.607, 338.702, 340.562), stdev = 1.789
[info]   CI (99.9%): [331.815, 345.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.012 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.012, 14576.015), stdev = 0.002
[info]   CI (99.9%): [14576.006, 14576.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.036 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (336.985, 337.036, 337.079), stdev = 0.038
[info]   CI (99.9%): [336.889, 337.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14504.633 ±(99.9%) 292.529 B/op [Average]
[info]   (min, avg, max) = (14426.937, 14504.633, 14592.394), stdev = 75.969
[info]   CI (99.9%): [14212.104, 14797.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676.469 ops/s
[info] # Warmup Iteration   2: 2623.153 ops/s
[info] # Warmup Iteration   3: 2457.367 ops/s
[info] Iteration   1: 2560.282 ops/s
[info]                  ·gc.alloc.rate:            839.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       515687.909 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 619073.374 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  31.000 ms
[info] Iteration   2: 3012.047 ops/s
[info]                  ·gc.alloc.rate:            986.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       515464.316 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 526202.095 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 3028.842 ops/s
[info]                  ·gc.alloc.rate:            992.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       515464.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 523249.806 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  20.000 ms
[info] Iteration   4: 3045.244 ops/s
[info]                  ·gc.alloc.rate:                                  997.704 MB/sec
[info]                  ·gc.alloc.rate.norm:                             515464.134 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 25.363 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       524976.494 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2409.728 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   5: 3062.753 ops/s
[info]                  ·gc.alloc.rate:                                  1003.495 MB/sec
[info]                  ·gc.alloc.rate.norm:                             515464.133 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.444 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       524630.225 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2941.834 ±(99.9%) 824.517 ops/s [Average]
[info]   (min, avg, max) = (2560.282, 2941.834, 3062.753), stdev = 214.125
[info]   CI (99.9%): [2117.317, 3766.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   963.885 ±(99.9%) 269.608 MB/sec [Average]
[info]   (min, avg, max) = (839.130, 963.885, 1003.495), stdev = 70.016
[info]   CI (99.9%): [694.277, 1233.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   515508.928 ±(99.9%) 385.272 B/op [Average]
[info]   (min, avg, max) = (515464.133, 515508.928, 515687.909), stdev = 100.054
[info]   CI (99.9%): [515123.655, 515894.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.361 ±(99.9%) 42.290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.361, 25.363), stdev = 10.983
[info]   CI (99.9%): [≈ 0, 48.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1011.891 ±(99.9%) 25.062 MB/sec [Average]
[info]   (min, avg, max) = (1007.315, 1011.891, 1021.340), stdev = 6.508
[info]   CI (99.9%): [986.829, 1036.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   543626.399 ±(99.9%) 162455.784 B/op [Average]
[info]   (min, avg, max) = (523249.806, 543626.399, 619073.374), stdev = 42189.251
[info]   CI (99.9%): [381170.615, 706082.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   481.946 ±(99.9%) 4149.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 481.946, 2409.728), stdev = 1077.663
[info]   CI (99.9%): [≈ 0, 4631.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   88.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 17.600, 31.000), stdev = 9.370
[info]   CI (99.9%): [88.000, 88.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_eb209134/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 18224.911 ops/s
[info] # Warmup Iteration   2: 52602.450 ops/s
[info] # Warmup Iteration   3: 53615.032 ops/s
[info] Iteration   1: 53681.921 ops/s
[info]                  ·gc.alloc.rate:            685.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.998 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19647.007 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 53950.825 ops/s
[info]                  ·gc.alloc.rate:            688.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19549.063 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 53720.119 ops/s
[info]                  ·gc.alloc.rate:            686.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19633.112 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 53842.151 ops/s
[info]                  ·gc.alloc.rate:            687.514 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.985 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1005.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29382.403 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   5: 54386.912 ops/s
[info]                  ·gc.alloc.rate:                   694.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.991 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19392.372 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 115.660 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   53916.385 ±(99.9%) 1091.823 ops/s [Average]
[info]   (min, avg, max) = (53681.921, 53916.385, 54386.912), stdev = 283.543
[info]   CI (99.9%): [52824.563, 55008.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   688.499 ±(99.9%) 14.145 MB/sec [Average]
[info]   (min, avg, max) = (685.434, 688.499, 694.596), stdev = 3.673
[info]   CI (99.9%): [674.354, 702.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.008 ±(99.9%) 0.094 B/op [Average]
[info]   (min, avg, max) = (20099.985, 20100.008, 20100.044), stdev = 0.024
[info]   CI (99.9%): [20099.914, 20100.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   737.055 ±(99.9%) 576.809 MB/sec [Average]
[info]   (min, avg, max) = (669.986, 737.055, 1005.017), stdev = 149.795
[info]   CI (99.9%): [160.246, 1313.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21520.791 ±(99.9%) 16927.208 B/op [Average]
[info]   (min, avg, max) = (19392.372, 21520.791, 29382.403), stdev = 4395.942
[info]   CI (99.9%): [4593.584, 38447.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   23.132 ±(99.9%) 199.174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.132, 115.660), stdev = 51.725
[info]   CI (99.9%): [≈ 0, 222.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   53.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.600, 14.000), stdev = 1.949
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65704.959 ops/s
[info] # Warmup Iteration   2: 85224.544 ops/s
[info] # Warmup Iteration   3: 85832.058 ops/s
[info] Iteration   1: 84539.082 ops/s
[info]                  ·gc.alloc.rate:            554.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12524.678 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 85820.989 ops/s
[info]                  ·gc.alloc.rate:            562.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12338.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 85853.982 ops/s
[info]                  ·gc.alloc.rate:            562.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6167.017 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 86195.618 ops/s
[info]                  ·gc.alloc.rate:            565.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.836 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12285.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 85477.023 ops/s
[info]                  ·gc.alloc.rate:            560.528 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12388.136 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   85577.339 ±(99.9%) 2440.079 ops/s [Average]
[info]   (min, avg, max) = (84539.082, 85577.339, 86195.618), stdev = 633.681
[info]   CI (99.9%): [83137.259, 88017.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   561.112 ±(99.9%) 16.110 MB/sec [Average]
[info]   (min, avg, max) = (554.241, 561.112, 565.210), stdev = 4.184
[info]   CI (99.9%): [545.002, 577.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.490 ±(99.9%) 579.269 MB/sec [Average]
[info]   (min, avg, max) = (336.385, 605.490, 672.857), stdev = 150.434
[info]   CI (99.9%): [26.221, 1184.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11140.713 ±(99.9%) 10711.733 B/op [Average]
[info]   (min, avg, max) = (6167.017, 11140.713, 12524.678), stdev = 2781.803
[info]   CI (99.9%): [428.979, 21852.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73476.766 ops/s
[info] # Warmup Iteration   2: 90872.529 ops/s
[info] # Warmup Iteration   3: 90284.217 ops/s
[info] Iteration   1: 91009.201 ops/s
[info]                  ·gc.alloc.rate:      11.100 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 91003.709 ops/s
[info]                  ·gc.alloc.rate:      11.100 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 89577.934 ops/s
[info]                  ·gc.alloc.rate:      10.930 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 91004.026 ops/s
[info]                  ·gc.alloc.rate:      11.100 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 90911.256 ops/s
[info]                  ·gc.alloc.rate:      11.088 MB/sec
[info]                  ·gc.alloc.rate.norm: 192.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   90701.225 ±(99.9%) 2423.099 ops/s [Average]
[info]   (min, avg, max) = (89577.934, 90701.225, 91009.201), stdev = 629.271
[info]   CI (99.9%): [88278.126, 93124.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.063 ±(99.9%) 0.289 MB/sec [Average]
[info]   (min, avg, max) = (10.930, 11.063, 11.100), stdev = 0.075
[info]   CI (99.9%): [10.775, 11.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.004, 192.004, 192.005), stdev = 0.001
[info]   CI (99.9%): [192.004, 192.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276951.735 ops/s
[info] # Warmup Iteration   2: 335592.668 ops/s
[info] # Warmup Iteration   3: 338733.194 ops/s
[info] Iteration   1: 338479.908 ops/s
[info]                  ·gc.alloc.rate:                                  1813.112 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.493 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7898.306 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.487 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 343424.696 ops/s
[info]                  ·gc.alloc.rate:            1839.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7799.883 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 338133.747 ops/s
[info]                  ·gc.alloc.rate:                                  1811.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9506.323 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 343907.516 ops/s
[info]                  ·gc.alloc.rate:                                  1842.955 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7788.817 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 343644.084 ops/s
[info]                  ·gc.alloc.rate:                                  1841.326 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9353.760 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   341517.990 ±(99.9%) 11316.681 ops/s [Average]
[info]   (min, avg, max) = (338133.747, 341517.990, 343907.516), stdev = 2938.906
[info]   CI (99.9%): [330201.309, 352834.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1829.810 ±(99.9%) 61.021 MB/sec [Average]
[info]   (min, avg, max) = (1811.891, 1829.810, 1842.955), stdev = 15.847
[info]   CI (99.9%): [1768.790, 1890.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.106), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.109 ±(99.9%) 0.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.493), stdev = 0.215
[info]   CI (99.9%): [≈ 0, 0.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1837.587 ±(99.9%) 720.952 MB/sec [Average]
[info]   (min, avg, max) = (1698.353, 1837.587, 2042.744), stdev = 187.229
[info]   CI (99.9%): [1116.635, 2558.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8469.418 ±(99.9%) 3387.088 B/op [Average]
[info]   (min, avg, max) = (7788.817, 8469.418, 9506.323), stdev = 879.616
[info]   CI (99.9%): [5082.330, 11856.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.097 ±(99.9%) 26.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.097, 15.487), stdev = 6.926
[info]   CI (99.9%): [≈ 0, 29.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 7.000), stdev = 1.304
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:01:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196164.156 ops/s
[info] # Warmup Iteration   2: 375898.938 ops/s
[info] # Warmup Iteration   3: 384165.788 ops/s
[info] Iteration   1: 385952.114 ops/s
[info]                  ·gc.alloc.rate:            470.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1371.767 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 383549.504 ops/s
[info]                  ·gc.alloc.rate:            467.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2760.784 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 384922.302 ops/s
[info]                  ·gc.alloc.rate:            469.556 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1375.462 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 382302.612 ops/s
[info]                  ·gc.alloc.rate:                   466.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2767.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.742 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 385387.973 ops/s
[info]                  ·gc.alloc.rate:            470.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1373.735 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   384422.901 ±(99.9%) 5704.189 ops/s [Average]
[info]   (min, avg, max) = (382302.612, 384422.901, 385952.114), stdev = 1481.360
[info]   CI (99.9%): [378718.712, 390127.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   468.919 ±(99.9%) 6.998 MB/sec [Average]
[info]   (min, avg, max) = (466.312, 468.919, 470.798), stdev = 1.817
[info]   CI (99.9%): [461.920, 475.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.769 ±(99.9%) 708.694 MB/sec [Average]
[info]   (min, avg, max) = (336.333, 470.769, 672.727), stdev = 184.046
[info]   CI (99.9%): [≈ 0, 1179.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1929.759 ±(99.9%) 2932.194 B/op [Average]
[info]   (min, avg, max) = (1371.767, 1929.759, 2767.046), stdev = 761.481
[info]   CI (99.9%): [≈ 0, 4861.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.548 ±(99.9%) 4.723 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.548, 2.742), stdev = 1.226
[info]   CI (99.9%): [≈ 0, 5.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1004271.406 ops/s
[info] # Warmup Iteration   2: 1058519.188 ops/s
[info] # Warmup Iteration   3: 1104176.239 ops/s
[info] Iteration   1: 1100402.166 ops/s
[info]                  ·gc.alloc.rate:            576.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 964.133 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1091551.492 ops/s
[info]                  ·gc.alloc.rate:            571.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 971.976 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1093792.552 ops/s
[info]                  ·gc.alloc.rate:            572.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 969.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1104938.171 ops/s
[info]                  ·gc.alloc.rate:            578.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 480.115 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 1100359.754 ops/s
[info]                  ·gc.alloc.rate:            576.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 964.240 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1098208.827 ±(99.9%) 20962.582 ops/s [Average]
[info]   (min, avg, max) = (1091551.492, 1098208.827, 1104938.171), stdev = 5443.916
[info]   CI (99.9%): [1077246.245, 1119171.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   574.897 ±(99.9%) 11.079 MB/sec [Average]
[info]   (min, avg, max) = (571.352, 574.897, 578.441), stdev = 2.877
[info]   CI (99.9%): [563.818, 585.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.628 ±(99.9%) 580.317 MB/sec [Average]
[info]   (min, avg, max) = (337.037, 606.628, 674.060), stdev = 150.706
[info]   CI (99.9%): [26.312, 1186.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   870.092 ±(99.9%) 839.561 B/op [Average]
[info]   (min, avg, max) = (480.115, 870.092, 971.976), stdev = 218.031
[info]   CI (99.9%): [30.531, 1709.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 6.000), stdev = 1.789
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57439.647 ops/s
[info] # Warmup Iteration   2: 93591.352 ops/s
[info] # Warmup Iteration   3: 97066.190 ops/s
[info] Iteration   1: 97641.688 ops/s
[info]                  ·gc.alloc.rate:                                  3394.532 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54867.224 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 98235.947 ops/s
[info]                  ·gc.alloc.rate:                                  3415.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54535.514 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 96691.262 ops/s
[info]                  ·gc.alloc.rate:                                  3362.476 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55407.925 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 96445.685 ops/s
[info]                  ·gc.alloc.rate:                                  3352.831 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55549.232 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 97866.847 ops/s
[info]                  ·gc.alloc.rate:                                  3403.184 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54720.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54741.103 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   97376.286 ±(99.9%) 2973.598 ops/s [Average]
[info]   (min, avg, max) = (96445.685, 97376.286, 98235.947), stdev = 772.234
[info]   CI (99.9%): [94402.688, 100349.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3385.739 ±(99.9%) 103.713 MB/sec [Average]
[info]   (min, avg, max) = (3352.831, 3385.739, 3415.673), stdev = 26.934
[info]   CI (99.9%): [3282.026, 3489.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54720.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54720.004, 54720.004, 54720.005), stdev = 0.001
[info]   CI (99.9%): [54720.004, 54720.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.037 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.039, 0.045), stdev = 0.010
[info]   CI (99.9%): [0.001, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3404.141 ±(99.9%) 1.899 MB/sec [Average]
[info]   (min, avg, max) = (3403.640, 3404.141, 3404.748), stdev = 0.493
[info]   CI (99.9%): [3402.242, 3406.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   55020.200 ±(99.9%) 1685.534 B/op [Average]
[info]   (min, avg, max) = (54535.514, 55020.200, 55549.232), stdev = 437.728
[info]   CI (99.9%): [53334.666, 56705.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250830.076 ops/s
[info] # Warmup Iteration   2: 322034.611 ops/s
[info] # Warmup Iteration   3: 317647.987 ops/s
[info] Iteration   1: 322989.336 ops/s
[info]                  ·gc.alloc.rate:            507.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1642.442 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 322419.766 ops/s
[info]                  ·gc.alloc.rate:            506.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3290.721 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 322208.088 ops/s
[info]                  ·gc.alloc.rate:            505.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1646.361 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 321735.574 ops/s
[info]                  ·gc.alloc.rate:            505.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.204 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3297.726 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 319904.528 ops/s
[info]                  ·gc.alloc.rate:            502.524 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1658.289 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   321851.458 ±(99.9%) 4535.305 ops/s [Average]
[info]   (min, avg, max) = (319904.528, 321851.458, 322989.336), stdev = 1177.804
[info]   CI (99.9%): [317316.154, 326386.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   505.517 ±(99.9%) 6.932 MB/sec [Average]
[info]   (min, avg, max) = (502.524, 505.517, 507.192), stdev = 1.800
[info]   CI (99.9%): [498.585, 512.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.908 ±(99.9%) 711.194 MB/sec [Average]
[info]   (min, avg, max) = (336.982, 471.908, 674.258), stdev = 184.695
[info]   CI (99.9%): [≈ 0, 1183.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2307.108 ±(99.9%) 3469.937 B/op [Average]
[info]   (min, avg, max) = (1642.442, 2307.108, 3297.726), stdev = 901.132
[info]   CI (99.9%): [≈ 0, 5777.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.817
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 378383.574 ops/s
[info] # Warmup Iteration   2: 572154.646 ops/s
[info] # Warmup Iteration   3: 667022.546 ops/s
[info] Iteration   1: 682430.894 ops/s
[info]                  ·gc.alloc.rate:                   520.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1548.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 683927.453 ops/s
[info]                  ·gc.alloc.rate:            521.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 774.127 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 680328.460 ops/s
[info]                  ·gc.alloc.rate:                   518.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1554.905 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 662422.995 ops/s
[info]                  ·gc.alloc.rate:            504.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 799.259 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 675319.421 ops/s
[info]                  ·gc.alloc.rate:            514.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1567.984 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   676885.845 ±(99.9%) 33558.705 ops/s [Average]
[info]   (min, avg, max) = (662422.995, 676885.845, 683927.453), stdev = 8715.089
[info]   CI (99.9%): [643327.139, 710444.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   516.088 ±(99.9%) 25.797 MB/sec [Average]
[info]   (min, avg, max) = (504.999, 516.088, 521.575), stdev = 6.700
[info]   CI (99.9%): [490.291, 541.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.001, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.824 ±(99.9%) 707.994 MB/sec [Average]
[info]   (min, avg, max) = (336.354, 537.824, 672.687), stdev = 183.864
[info]   CI (99.9%): [≈ 0, 1245.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1248.970 ±(99.9%) 1625.552 B/op [Average]
[info]   (min, avg, max) = (774.127, 1248.970, 1567.984), stdev = 422.151
[info]   CI (99.9%): [≈ 0, 2874.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.615 ±(99.9%) 3.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.615, 1.541), stdev = 0.843
[info]   CI (99.9%): [≈ 0, 3.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1677675.171 ops/s
[info] # Warmup Iteration   2: 1955251.185 ops/s
[info] # Warmup Iteration   3: 1966036.475 ops/s
[info] Iteration   1: 1948038.928 ops/s
[info]                  ·gc.alloc.rate:                   900.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        816.454 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.538 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 1970011.259 ops/s
[info]                  ·gc.alloc.rate:                   911.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        806.789 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.532 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1949671.336 ops/s
[info]                  ·gc.alloc.rate:            901.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 543.114 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1956606.304 ops/s
[info]                  ·gc.alloc.rate:                                  904.935 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.098 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       818.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.215 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1959666.649 ops/s
[info]                  ·gc.alloc.rate:                                  906.328 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       820.139 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1956798.895 ±(99.9%) 33918.839 ops/s [Average]
[info]   (min, avg, max) = (1948038.928, 1956798.895, 1970011.259), stdev = 8808.615
[info]   CI (99.9%): [1922880.056, 1990717.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   905.057 ±(99.9%) 16.100 MB/sec [Average]
[info]   (min, avg, max) = (900.936, 905.057, 911.385), stdev = 4.181
[info]   CI (99.9%): [888.957, 921.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.064), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.252 ±(99.9%) 589.111 MB/sec [Average]
[info]   (min, avg, max) = (672.701, 946.252, 1021.037), stdev = 152.990
[info]   CI (99.9%): [357.141, 1535.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   760.946 ±(99.9%) 469.317 B/op [Average]
[info]   (min, avg, max) = (543.114, 760.946, 820.139), stdev = 121.880
[info]   CI (99.9%): [291.629, 1230.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.857 ±(99.9%) 5.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.857, 3.215), stdev = 1.345
[info]   CI (99.9%): [≈ 0, 6.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 2.950
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1853850.966 ops/s
[info] # Warmup Iteration   2: 2065026.047 ops/s
[info] # Warmup Iteration   3: 2057115.846 ops/s
[info] Iteration   1: 2066042.882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2066141.201 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2065685.190 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2066765.920 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2067100.121 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2066347.063 ±(99.9%) 2208.269 ops/s [Average]
[info]   (min, avg, max) = (2065685.190, 2066347.063, 2067100.121), stdev = 573.481
[info]   CI (99.9%): [2064138.794, 2068555.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 10, VM 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 274399.534 ops/s
[info] # Warmup Iteration   2: 375430.019 ops/s
[info] # Warmup Iteration   3: 367501.391 ops/s
[info] Iteration   1: 377381.604 ops/s
[info]                  ·gc.alloc.rate:            563.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2805.945 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 378846.530 ops/s
[info]                  ·gc.alloc.rate:            566.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1397.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 377481.914 ops/s
[info]                  ·gc.alloc.rate:            563.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2805.150 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 376969.659 ops/s
[info]                  ·gc.alloc.rate:            563.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2808.951 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 376400.001 ops/s
[info]                  ·gc.alloc.rate:            562.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2813.167 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   377415.942 ±(99.9%) 3488.723 ops/s [Average]
[info]   (min, avg, max) = (376400.001, 377415.942, 378846.530), stdev = 906.010
[info]   CI (99.9%): [373927.218, 380904.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   563.911 ±(99.9%) 5.250 MB/sec [Average]
[info]   (min, avg, max) = (562.392, 563.911, 566.083), stdev = 1.363
[info]   CI (99.9%): [558.661, 569.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.001, 2352.001, 2352.001), stdev = 0.001
[info]   CI (99.9%): [2352.001, 2352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.401 ±(99.9%) 579.149 MB/sec [Average]
[info]   (min, avg, max) = (336.351, 605.401, 672.719), stdev = 150.403
[info]   CI (99.9%): [26.252, 1184.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2526.142 ±(99.9%) 2429.525 B/op [Average]
[info]   (min, avg, max) = (1397.496, 2526.142, 2813.167), stdev = 630.940
[info]   CI (99.9%): [96.617, 4955.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:31:12
[info] Benchmark                                                                                                     (size)   Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                                           N/A  thrpt    5    685871.463 ±    21223.108   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      1823.201 ±       57.379  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5      4184.001 ±        0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.017 ±        0.119  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5         0.041 ±        0.278    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      1767.829 ±      591.537  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5      4055.887 ±     1284.307    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                               N/A  thrpt    5         0.799 ±        6.881  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                          N/A  thrpt    5         1.859 ±       16.010    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        26.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        31.000                     ms
[info] AdtBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   1399667.245 ±    49296.430   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      1124.101 ±       39.033  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5      1264.000 ±        0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.038 ±        0.261  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.043 ±        0.293    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1150.184 ±      713.692  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      1294.497 ±      837.938    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.066 ±        7.822  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.195 ±        8.771    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5        17.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        49.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5   3331113.062 ±    71596.985   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5       220.083 ±        4.798  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       104.000 ±        0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       269.729 ±      580.613  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       127.751 ±      274.997    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         0.063 ±        0.542    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5         4.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                          N/A  thrpt    5        11.000                     ms
[info] AdtBenchmark.readPlayJson                                                                                        N/A  thrpt    5    153061.841 ±     4694.588   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      1281.918 ±       39.478  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5     13184.003 ±        0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.029 ±        0.242  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5         0.297 ±        2.475    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      1219.064 ±      720.439  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5     12534.000 ±     7292.625    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                            N/A  thrpt    5         1.066 ±        7.820  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                       N/A  thrpt    5        11.065 ±       81.276    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        18.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        43.000                     ms
[info] AdtBenchmark.writeCirce                                                                                          N/A  thrpt    5    549462.654 ±    12884.993   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      1653.581 ±       37.887  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5      4736.001 ±        0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.043 ±        0.355  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.124 ±        1.017    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      1630.762 ±      579.451  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5      4670.513 ±     1650.634    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.666 ±        5.737  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         1.922 ±       16.551    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        24.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        34.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5   1658092.961 ±    70256.585   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5       691.041 ±       29.384  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       656.000 ±        0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       671.404 ±        0.232  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       637.422 ±       27.225    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5        10.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        43.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5   7168224.393 ±   228279.065   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       364.322 ±       11.553  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        80.000 ±        0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       336.495 ±        1.280  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        73.894 ±        2.421    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         0.029 ±        0.252    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5         5.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        15.000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5   7435215.477 ±   611944.651   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                                       N/A  thrpt    5    298095.362 ±    17595.598   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5       965.130 ±       56.929  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      5096.001 ±        0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.036 ±        0.243  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.191 ±        1.295    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5       944.796 ±      587.625  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      4995.130 ±     3247.539    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         1.066 ±        7.821  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         5.664 ±       41.706    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5        14.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        48.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                                       N/A  thrpt    5   1444503.046 ±    39015.357   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      2231.919 ±       59.863  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      2432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.031 ±        0.258  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.033 ±        0.279    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      2246.467 ±      717.811  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      2447.073 ±      734.068    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        33.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        26.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                                 N/A  thrpt    5   8779789.309 ±   292019.508   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                                  N/A  thrpt    5      1070.945 ±       35.561  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                             N/A  thrpt    5       192.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.117 ±        1.006  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.021 ±        0.183    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1076.619 ±      565.644  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5       193.025 ±      101.356    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.332 ±       11.470  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         0.239 ±        2.054    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                                       N/A  thrpt    5        16.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                                        N/A  thrpt    5        52.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                                N/A  thrpt    5   2202147.653 ±    34980.864   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1544.638 ±       24.961  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5      1104.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.030 ±        0.251  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.021 ±        0.180    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1561.643 ±      703.910  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      1116.050 ±      498.587    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.932 ±        8.029  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.670 ±        5.771    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        23.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        37.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                               N/A  thrpt    5   9369398.790 ±  1667669.641   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5      1190.657 ±      211.249  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       200.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.026 ±        0.212  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.004 ±        0.035    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1221.472 ±      703.477  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       204.663 ±       95.089    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.110 ±        0.946    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5        18.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        25.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                                    N/A  thrpt    5    606458.545 ±    29375.660   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                                     N/A  thrpt    5      1559.641 ±       75.591  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4048.001 ±        0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.040 ±        0.329  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.107 ±        0.872    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1561.256 ±      734.627  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4053.077 ±     1932.269    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.066 ±        6.688  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         2.812 ±       17.701    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                          N/A  thrpt    5        23.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                           N/A  thrpt    5        39.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                                      N/A  thrpt    5   1612642.508 ±    35755.495   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5      1401.842 ±       31.589  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5      1368.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.011 ±        0.060  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         0.011 ±        0.059    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5      1357.709 ±       23.551  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5      1324.960 ±       31.119    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5         0.648 ±        5.583    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5        20.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        32.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                                N/A  thrpt    5  16959646.338 ±   857334.649   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                 N/A  thrpt    5       517.240 ±       26.128  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                            N/A  thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       533.985 ±      703.880  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5        49.719 ±       67.293    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                                      N/A  thrpt    5         8.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                                       N/A  thrpt    5        37.000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                               N/A  thrpt    5   4660177.434 ±    72353.552   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5      1279.062 ±       20.467  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.019 ±        0.158  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.006 ±        0.053    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1286.761 ±      572.841  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       434.637 ±      194.778    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.933 ±        8.031  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.314 ±        2.706    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5        19.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        41.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5  21137437.002 ±  1217626.700   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       644.674 ±       36.639  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       605.954 ±      579.010  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5        45.204 ±       44.199    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         0.010 ±        0.086    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         9.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5        27.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5  20489662.416 ±   759696.709   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                                   N/A  thrpt    5   1278513.246 ±    58484.689   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                                    N/A  thrpt    5      1877.985 ±       85.753  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2312.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.021 ±        0.118  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.026 ±        0.147    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1835.332 ±      727.146  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2258.820 ±      855.435    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.932 ±        8.028  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.168 ±       10.057    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                         N/A  thrpt    5        27.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                          N/A  thrpt    5        33.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                         128  thrpt    5    351933.001 ±    10388.851   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1937.338 ±       56.486  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      8664.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.036 ±        0.291  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.158 ±        1.296    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1906.177 ±      718.337  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      8526.503 ±     3292.057    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                               128  thrpt    5        28.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                                128  thrpt    5        28.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                                  128  thrpt    5    409106.012 ±    15361.583   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       544.904 ±       20.334  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      2096.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       537.368 ±      708.459  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2067.220 ±     2726.820    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.512 ±        4.407    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         8.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        33.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                                 128  thrpt    5   1000244.705 ±    15921.971   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       666.072 ±       10.794  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      1048.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       674.155 ±        0.338  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1060.734 ±       16.882    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5        10.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        29.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                                      128  thrpt    5     96143.652 ±     3515.703   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3328.794 ±      119.959  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     54496.004 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.004 ±        0.006  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.059 ±        0.105    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      3335.598 ±      584.364  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     54597.497 ±     8316.056    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        49.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        50.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                                        128  thrpt    5    389540.157 ±    14557.331   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       603.942 ±       22.659  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      2440.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       606.619 ±      580.023  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2454.348 ±     2387.855    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.544 ±        4.681    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         9.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        30.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                                 128  thrpt    5    621677.968 ±    14720.086   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       458.219 ±       10.819  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1160.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       470.458 ±      708.144  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1192.226 ±     1809.950    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.267 ±        1.405  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.677 ±        3.570    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         7.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        30.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                                128  thrpt    5   2713098.509 ±   116463.090   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1254.951 ±       53.441  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.021 ±        0.166  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.012 ±        0.095    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1288.690 ±      576.346  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       747.345 ±      325.610    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.460 ±        3.964    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        29.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2898242.232 ±   847885.187   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                                     128  thrpt    5    410348.761 ±     4791.549   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       590.244 ±        6.914  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5      2264.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       605.469 ±      579.223  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2323.535 ±     2236.288    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         9.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        35.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                            128  thrpt    5     19762.202 ±      576.912   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1236.664 ±       35.829  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     98480.034 ±        0.070    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.015 ±        0.075  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         1.229 ±        5.967    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1221.461 ±      721.685  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     97333.286 ±    59272.889    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        53.252 ±      458.512    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        18.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        30.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                                     128  thrpt    5     31463.775 ±      999.215   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       788.790 ±       25.328  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     39455.805 ±        1.790    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.021 ±        0.180  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.035 ±        8.910    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       808.934 ±      703.651  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     40518.139 ±    36419.582    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        39.872 ±      343.313    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        12.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        44.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                                    128  thrpt    5     37030.108 ±     4053.816   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       497.470 ±       54.272  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5     21144.011 ±        0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       471.904 ±      711.089  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     19999.669 ±    29281.767    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         7.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        20.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                         128  thrpt    5     25039.372 ±      654.578   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1326.724 ±       34.758  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     83400.018 ±        0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.024 ±        0.194  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.494 ±       12.253    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1289.352 ±      603.484  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     81029.243 ±    37171.234    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        50.550 ±      435.251    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        19.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        32.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                           128  thrpt    5     27920.737 ±      841.003   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1585.997 ±       47.724  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     89408.026 ±        0.098    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.025 ±        0.194  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.429 ±       11.067    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1562.981 ±      732.210  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     88142.941 ±    42418.614    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        37.648 ±      324.162    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        34.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                                    128  thrpt    5     28405.131 ±     1191.575   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1528.901 ±       63.751  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     84720.026 ±        0.096    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.024 ±        0.191  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         1.368 ±       10.678    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1561.125 ±      703.379  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     86504.974 ±    38772.899    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        52.369 ±      450.912    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        39.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                                   128  thrpt    5     30279.693 ±      739.122   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1562.650 ±       38.505  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     81224.015 ±        0.008    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.035 ±        0.158  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         1.802 ±        8.282    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1562.565 ±      707.187  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     81247.366 ±    37775.756    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        42.009 ±      361.709    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        27.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5     30534.558 ±      898.951   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5      1516.669 ±       45.753  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5     78168.014 ±        0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                128  thrpt    5         0.039 ±        0.316  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           128  thrpt    5         2.022 ±       16.271    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1494.687 ±      730.612  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     77008.789 ±    36526.288    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        41.711 ±      359.143    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5        22.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                  128  thrpt    5        28.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                                        128  thrpt    5      8022.165 ±      243.153   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1043.138 ±       31.847  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    204656.053 ±        0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.013 ±        0.076  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         2.631 ±       14.920    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1081.919 ±      575.976  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    212433.497 ±   119619.249    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       158.735 ±     1366.755    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        16.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        47.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                                128  thrpt    5     19139.519 ±     1136.788   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1487.004 ±       88.957  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5    122279.976 ±       30.785    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.023 ±        0.154  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         1.836 ±       12.400    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1426.899 ±      592.423  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5    117270.071 ±    44485.149    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        55.337 ±      476.466    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        21.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        27.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                         128  thrpt    5     40098.948 ±     1810.293   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       989.007 ±       44.995  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     38823.845 ±        1.421    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.027 ±        0.157  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.057 ±        6.164    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1014.640 ±       23.677  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     39832.262 ±      920.342    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        31.343 ±      269.872    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        15.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        39.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                                        128  thrpt    5     56133.155 ±      244.408   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       725.235 ±        3.103  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     20336.007 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.006 ±        0.047  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.155 ±        1.332    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       742.140 ±      586.079  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     20811.803 ±    16486.629    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        18.694 ±      160.960    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        11.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        29.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                             128  thrpt    5     29952.061 ±      876.668   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2000.479 ±       58.442  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5    105128.015 ±        0.006    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.009 ±        0.016  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.496 ±        0.826    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      2040.372 ±       15.123  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    107228.331 ±     2506.068    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        49.580 ±      426.896    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        30.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        34.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                                        128  thrpt    5     31762.355 ±      602.190   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1798.888 ±       33.855  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     89144.014 ±        0.005    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.015 ±        0.124  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.751 ±        6.101    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1768.299 ±      590.191  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     87650.985 ±    30574.218    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        39.414 ±      339.366    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5        26.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        30.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                                       128  thrpt    5     43441.979 ±      323.577   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1810.828 ±       14.135  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     65600.010 ±        0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.034 ±        0.284  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         1.244 ±       10.337    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1769.330 ±      587.864  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     64096.596 ±    21282.572    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        29.056 ±      250.185    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        26.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        23.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     45076.470 ±     1617.424   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5      1653.781 ±       59.149  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     57736.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.025 ±        0.194  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.894 ±        6.830    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1699.743 ±       20.205  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     59343.897 ±     1777.647    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        28.200 ±      242.812    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5        25.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5        27.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                               128  thrpt    5    379180.756 ±     4718.363   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1917.507 ±       24.044  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      7960.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.031 ±        0.233  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.129 ±        0.974    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1905.278 ±      715.372  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      7910.469 ±     3026.371    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         2.779 ±       23.926    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        28.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        24.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                         128  thrpt    5   1507653.604 ±    34606.145   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                          128  thrpt    5       475.088 ±       11.012  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     128  thrpt    5       496.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       533.920 ±      703.709  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       557.946 ±      741.076    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                               128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                                128  thrpt    5        36.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                                        128  thrpt    5    591040.305 ±     7292.236   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       501.635 ±        6.257  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       538.013 ±      708.852  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1434.091 ±     1902.578    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.356 ±        3.063    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        33.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                                       128  thrpt    5   1734943.310 ±     6648.313   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       335.101 ±        1.353  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       337.051 ±        0.232  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       305.770 ±        1.176    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        15.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                            128  thrpt    5     92130.214 ±     1247.409   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      3346.414 ±       44.959  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     57176.005 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.003 ±        0.007  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.055 ±        0.124    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3335.298 ±      586.204  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     56987.621 ±    10144.010    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        49.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        40.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                              128  thrpt    5    323786.628 ±     6527.036   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5       503.579 ±       10.326  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      2448.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       471.855 ±      710.759  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      2294.289 ±     3461.728    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        24.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                                        128  thrpt    5   1217322.540 ±    59561.779   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                         128  thrpt    5       563.037 ±       27.673  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                    128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       533.937 ±      703.825  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       692.045 ±      930.015    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                              128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                               128  thrpt    5        37.000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                                       128  thrpt    5    986548.378 ±    10974.765   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       696.982 ±        7.688  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1112.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       672.737 ±        0.283  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1073.326 ±       11.909    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.279 ±       11.015    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        10.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        40.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                                      128  thrpt    5   2452008.662 ±    26319.907   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      1134.309 ±       12.210  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.014 ±        0.114  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.009 ±        0.073    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1152.118 ±      710.042  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       739.435 ±      455.775    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.066 ±        6.689  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.682 ±        4.277    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5        17.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        29.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5   2532346.718 ±    22434.172   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                           128  thrpt    5    408569.810 ±    18933.740   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5       477.618 ±       22.253  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5      1840.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       538.206 ±      709.598  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      2077.412 ±     2781.918    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        31.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                                  128  thrpt    5    141888.944 ±     2738.378   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1705.748 ±       32.583  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     18920.003 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.021 ±        0.144  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.234 ±        1.609    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1700.676 ±       10.908  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     18864.049 ±      308.279    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         7.428 ±       63.957    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        25.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        24.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                           128  thrpt    5    366961.351 ±    14129.079   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       311.510 ±       11.840  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       336.413 ±        0.277  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1442.919 ±       55.893    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        19.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                          128  thrpt    5    822199.651 ±    74593.834   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       158.812 ±       14.409  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       304.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       134.961 ±      711.610  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       263.180 ±     1388.427    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         2.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         6.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                               128  thrpt    5     76504.076 ±     2110.650   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3257.307 ±       89.526  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     67016.005 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.009 ±        0.019  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.186 ±        0.390    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3267.526 ±      717.247  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     67209.667 ±    13187.565    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        48.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        39.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                                 128  thrpt    5    313203.490 ±    13143.548   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1386.560 ±       58.890  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      6968.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.008 ±        0.056  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.041 ±        0.286    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1358.146 ±       22.482  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      6825.779 ±      268.213    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         3.400 ±       29.275    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        20.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        29.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                          128  thrpt    5   1788733.919 ±    62769.580   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       918.283 ±       32.068  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       808.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.031 ±        0.210  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.027 ±        0.182    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       878.646 ±      710.461  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       773.458 ±      631.786    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.703 ±        6.049    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        13.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        38.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2178885.744 ±    26274.377   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       586.924 ±        7.002  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       424.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       538.450 ±      709.222  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       389.287 ±      516.069    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.097 ±        0.831    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         8.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        24.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2492346.861 ±     9524.765   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                              128  thrpt    5     39201.195 ±     1514.607   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1651.975 ±       63.486  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     66320.703 ±        5.964    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.042 ±        0.222  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.719 ±        8.980    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1698.802 ±       27.123  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     68203.931 ±     1607.206    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        32.658 ±      281.198    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        25.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        32.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                                  128  thrpt    5    213385.764 ±     2822.458   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2196.286 ±       28.665  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     16200.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.010 ±        0.023  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.070 ±        0.167    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2178.411 ±      718.225  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     16068.458 ±     5310.491    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        32.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        25.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                           128  thrpt    5    304885.324 ±     7366.529   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1475.314 ±       35.944  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      7616.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.038 ±        0.325  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.197 ±        1.677    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1494.514 ±      729.814  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      7714.142 ±     3724.207    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         4.172 ±       35.923    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        22.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        32.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                          128  thrpt    5   1239896.601 ±    22206.722   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       428.540 ±        7.768  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       471.871 ±      710.971  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       599.289 ±      906.412    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        20.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                               128  thrpt    5     70299.210 ±     3009.361   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2954.465 ±      126.984  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     66144.006 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.006 ±        0.011  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.129 ±        0.248    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2995.475 ±      586.086  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     67084.390 ±    14716.507    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        44.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        38.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                                 128  thrpt    5    213306.013 ±    10900.932   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1807.555 ±       93.388  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     13336.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.018 ±        0.143  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.136 ±        1.051    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1768.808 ±      588.670  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     13047.514 ±     4108.026    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.887 ±       42.081    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        26.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        26.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                          128  thrpt    5   1130413.590 ±    14563.294   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       660.802 ±        8.670  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       672.813 ±        0.529  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       936.731 ±       12.039    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.112 ±        9.575    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        10.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        40.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   3017065.649 ±   157817.017   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1027.348 ±       53.669  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.018 ±        0.115  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.010 ±        0.060    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1082.970 ±      566.665  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       564.742 ±      281.456    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±        5.619  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.489 ±        2.958    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        16.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        30.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   3187856.923 ±   131718.066   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                              128  thrpt    5    254831.448 ±     4922.531   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      2082.583 ±       39.951  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     12864.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.052 ±        0.426  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.322 ±        2.628    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2110.244 ±      585.538  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     13033.408 ±     3497.912    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        31.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        27.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                                128  thrpt    5     25836.466 ±      428.752   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1513.266 ±       25.412  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     92192.017 ±        0.011    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.031 ±        0.190  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         1.904 ±       11.559    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1494.886 ±      727.753  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     91059.037 ±    43786.030    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        40.880 ±      351.990    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        22.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        28.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                          128  thrpt    5     93008.632 ±      958.368   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       837.692 ±        8.905  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5     14176.005 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.097 ±        0.837  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.645 ±       14.162    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       869.641 ±      710.797  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     14722.745 ±    12153.650    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.465 ±       12.618  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        24.792 ±      213.464    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                                128  thrpt    5        13.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                                 128  thrpt    5        57.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                         128  thrpt    5     59867.137 ±     1684.607   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       989.225 ±       27.843  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     26008.007 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.030 ±        0.179  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.783 ±        4.718    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1014.293 ±       25.328  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     26667.282 ±      271.416    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±        6.690  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        24.632 ±      176.514    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        15.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        38.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                                        128  thrpt    5    130311.432 ±      972.867   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       839.795 ±        6.670  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     10144.003 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.019 ±        0.109  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.228 ±        1.320    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       810.864 ±      709.522  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      9794.751 ±     8574.311    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         8.038 ±       69.209    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        12.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        28.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                             128  thrpt    5     32817.172 ±     2089.757   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1714.983 ±      109.139  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     82248.013 ±        0.006    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.019 ±        0.103  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.925 ±        5.104    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1699.532 ±       20.515  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     81521.839 ±     4319.700    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        39.473 ±      339.877    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        25.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        32.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                               128  thrpt    5     39562.446 ±      591.494   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       443.163 ±        6.593  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     17631.804 ±        1.779    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       471.720 ±      711.330  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     18781.897 ±    28495.282    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         5.297 ±       45.613    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         7.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        23.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                                        128  thrpt    5     41306.209 ±      611.553   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       373.068 ±        5.528  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     14216.010 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       403.629 ±      579.175  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     15398.063 ±    22405.753    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        24.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                                       128  thrpt    5     44738.549 ±      180.813   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       393.134 ±        1.619  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     13832.009 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       403.753 ±      580.303  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     14208.968 ±    20482.015    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         4.693 ±       40.410    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        17.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     44173.665 ±     3455.388   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5       337.711 ±       26.556  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     12032.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5       336.420 ±        0.209  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     11990.086 ±      961.025    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         4.694 ±       40.418    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5         5.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5        14.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                              128  thrpt    5     19590.680 ±      565.065   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5       734.864 ±       21.095  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     59040.026 ±        0.030    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       674.342 ±        1.786  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     54180.028 ±     1539.247    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.932 ±        5.318  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        74.704 ±      424.441    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        10.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        33.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                                       128  thrpt    5     18781.222 ±      186.540   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       533.093 ±        4.911  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     44675.320 ±       36.864    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       538.200 ±      709.486  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     45133.870 ±    59831.914    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         8.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        33.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                                      128  thrpt    5     80454.313 ±      850.706   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       209.357 ±        2.261  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       202.736 ±      712.646  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3973.579 ±    13967.737    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5         9.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                           128  thrpt    5     15815.498 ±      409.284   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1025.356 ±       26.381  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    102048.029 ±        0.012    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.026 ±        0.149  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         2.583 ±       14.799    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1014.662 ±       23.100  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5    100984.186 ±      573.962    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        79.578 ±      685.193    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        39.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                             128  thrpt    5     58809.791 ±      365.122   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       891.048 ±        5.772  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     23848.007 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.024 ±        0.146  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.642 ±        3.899    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       878.940 ±      714.556  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     23524.799 ±    19140.344    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        17.834 ±      153.552    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5        13.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        35.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                                      128  thrpt    5     88056.008 ±     2390.960   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1044.175 ±       28.458  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     18664.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.028 ±        0.189  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.510 ±        3.398    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1082.787 ±      565.655  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     19362.155 ±    10425.324    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        14.396 ±      123.953    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        38.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    209440.029 ±     1119.795   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       332.105 ±        1.855  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      2496.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       336.881 ±        1.125  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2531.904 ±       16.181    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         1.001 ±        8.620    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         5.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        14.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    238795.550 ±     1889.273   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                          128  thrpt    5     68718.247 ±     2457.081   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1071.479 ±       38.233  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     24544.006 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.027 ±        0.190  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.624 ±        4.389    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1082.708 ±      565.727  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     24815.309 ±    13501.374    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        18.496 ±      159.257    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        39.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                                  128  thrpt    5     27132.814 ±     1093.368   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       563.801 ±       22.754  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     32707.411 ±       67.769    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       539.256 ±      711.025  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     31360.917 ±    42178.327    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         8.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        29.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                           128  thrpt    5     28241.648 ±      489.808   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       371.205 ±        6.449  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     20687.783 ±        2.004    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       403.638 ±      579.110  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     22517.133 ±    32691.273    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        25.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                          128  thrpt    5    118578.722 ±     4562.606   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       462.912 ±       17.668  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      6144.004 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       471.896 ±      710.921  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      6278.216 ±     9642.641    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        20.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                               128  thrpt    5     40653.530 ±      282.181   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2192.117 ±       15.709  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     84872.011 ±        0.006    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.009 ±        0.047  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.336 ±        1.824    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2178.312 ±      718.548  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     84329.814 ±    27362.766    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        32.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        28.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                                 128  thrpt    5    179036.555 ±     2211.346   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       625.123 ±        7.645  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       606.638 ±      580.291  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      5335.270 ±     5124.797    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        31.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                          128  thrpt    5    275743.140 ±    28611.780   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       278.879 ±       28.941  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1592.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       269.068 ±      579.188  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1547.360 ±     3335.123    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        16.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    497676.145 ±    13148.552   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       381.973 ±        9.928  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       403.790 ±      580.259  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1276.830 ±     1831.231    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.420 ±        3.613    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        20.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    530722.465 ±     4800.930   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                              128  thrpt    5    270811.415 ±    26352.626   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5       745.997 ±       72.666  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5      4336.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       740.665 ±      577.656  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      4301.423 ±     3205.042    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         5.324 ±       38.074    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        11.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        44.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                                 128  thrpt    5     36566.418 ±      831.756   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1630.976 ±       36.401  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     70199.924 ±        0.750    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.036 ±        0.228  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         1.539 ±        9.936    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1631.863 ±      582.144  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     70248.972 ±    25505.279    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        28.959 ±      249.346    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        24.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        26.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                           128  thrpt    5    302888.176 ±    26988.110   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       314.104 ±       27.940  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       267.031 ±      574.805  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1392.700 ±     3001.696    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        19.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                          128  thrpt    5     98603.228 ±     5113.764   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1089.469 ±       56.536  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     17392.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.046 ±        0.394  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.749 ±        6.407    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.372 ±      562.867  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     17300.991 ±     9187.480    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        14.945 ±      128.677    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5        16.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        36.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                         128  thrpt    5    401308.553 ±     3513.101   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       261.068 ±        2.345  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       269.609 ±      580.354  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1058.521 ±     2278.551    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5        12.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                              128  thrpt    5     36437.485 ±     2034.048   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      1945.666 ±      108.603  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     84047.920 ±        0.787    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.026 ±        0.193  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.158 ±        8.544    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1905.182 ±      721.882  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     82242.381 ±    27994.778    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        35.432 ±      305.079    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        28.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        27.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                                128  thrpt    5     87964.330 ±    17268.904   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5       424.737 ±       83.387  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      7600.005 ±        0.002    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       404.446 ±      580.404  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      7226.357 ±     9967.821    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5         6.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                          128  thrpt    5    113002.877 ±      386.671   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       345.766 ±        1.054  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       333.722 ±        0.144  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4648.251 ±       15.907    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        24.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                         128  thrpt    5     98614.259 ±     4895.780   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       325.827 ±       16.113  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5200.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       336.407 ±        0.161  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5369.567 ±      271.185    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                                        128  thrpt    5    115114.730 ±      836.893   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       352.233 ±        2.682  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       403.668 ±      579.361  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      5520.490 ±     7944.839    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        17.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    113722.944 ±     5003.790   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5       258.379 ±       11.234  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5      3576.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           128  thrpt    5       269.109 ±      579.277  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      3733.516 ±     8038.804    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       128  thrpt    5        11.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                               128  thrpt    5      8711.882 ±      273.957   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1432.910 ±       44.039  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5    258856.049 ±        0.013    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.009 ±        0.076  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         1.589 ±       13.685    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1426.225 ±      593.226  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    257593.468 ±   103988.405    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5       120.071 ±     1033.844    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        30.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                                        128  thrpt    5      8729.269 ±      312.404   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1362.102 ±       47.426  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5    245560.048 ±        0.008    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.007 ±        0.055  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.258 ±        9.986    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1424.302 ±     1081.861  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    256700.807 ±   194084.115    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       145.518 ±     1252.951    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        38.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                                       128  thrpt    5    174233.594 ±     1236.427   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       453.383 ±        3.221  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       472.748 ±      712.177  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      4273.047 ±     6463.347    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         7.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        20.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                            128  thrpt    5      4813.924 ±      143.649   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1278.507 ±       38.397  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5    418040.089 ±        0.016    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.024 ±        0.178  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         7.864 ±       58.478    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1287.629 ±      574.516  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    421185.284 ±   193063.050    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5       263.186 ±     2266.109    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        40.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                              128  thrpt    5     25370.504 ±      835.733   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5      1315.139 ±       42.657  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     81576.044 ±       43.661    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.018 ±        0.083  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.114 ±        5.174    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1289.624 ±      578.301  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     79961.170 ±    34643.441    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        41.403 ±      356.494    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        38.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                                       128  thrpt    5     25666.314 ±      982.405   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1304.858 ±       50.321  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     80016.017 ±        0.009    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.020 ±        0.155  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         1.220 ±        9.624    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1356.592 ±       28.397  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     83191.793 ±     1788.655    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        57.796 ±      497.637    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        20.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        37.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                                      128  thrpt    5    362159.694 ±    14294.863   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       800.756 ±       31.187  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      3480.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.021 ±        0.182  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.092 ±        0.795    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       809.050 ±      703.084  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3513.084 ±     2982.420    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         4.045 ±       28.913    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5        12.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        32.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5    389911.846 ±    27925.782   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                           128  thrpt    5     27166.352 ±      644.108   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1429.475 ±       33.748  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     82824.016 ±        0.008    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.034 ±        0.278  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.974 ±       16.114    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1425.467 ±      594.908  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     82577.200 ±    33660.205    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        46.351 ±      399.096    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        34.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                                   128  thrpt    5     95557.403 ±     3964.529   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                    128  thrpt    5      1556.506 ±       64.454  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     25640.004 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        128  thrpt    5         0.025 ±        0.107  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   128  thrpt    5         0.417 ±        1.765    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                              128  thrpt    5      1563.598 ±      728.442  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                         128  thrpt    5     25739.003 ±    11252.190    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                       128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                  128  thrpt    5        11.180 ±       96.261    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                         128  thrpt    5        23.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                          128  thrpt    5        26.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                             128  thrpt    5    464304.619 ±    12138.858   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                              128  thrpt    5       481.453 ±       12.604  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         128  thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       467.243 ±      703.975  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1584.086 ±     2389.487    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                                   128  thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                                    128  thrpt    5        34.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                            128  thrpt    5    262972.995 ±     4492.308   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       376.958 ±        6.551  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      2256.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       403.560 ±      579.642  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2414.370 ±     3452.348    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         0.800 ±        6.889    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                                  128  thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                                   128  thrpt    5        23.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                           128  thrpt    5    610851.331 ±     5754.185   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       397.405 ±        3.713  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       404.440 ±      580.399  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1042.870 ±     1509.820    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                                 128  thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                                  128  thrpt    5        17.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                                128  thrpt    5     67504.537 ±     1248.415   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                 128  thrpt    5      2957.361 ±       53.637  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     68952.006 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.006 ±        0.012  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.147 ±        0.267    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2995.464 ±      585.051  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     69844.798 ±    13978.118    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                                      128  thrpt    5        44.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                                       128  thrpt    5        36.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                                  128  thrpt    5    206332.057 ±     6157.221   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                   128  thrpt    5      1225.849 ±       37.133  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                              128  thrpt    5      9352.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.011 ±        0.052  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.084 ±        0.398    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1288.655 ±      576.448  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5      9832.967 ±     4452.225    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         5.131 ±       44.177    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                                        128  thrpt    5        19.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                         128  thrpt    5        34.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                            128  thrpt    5    965756.376 ±    36367.251   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       525.200 ±       19.810  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       533.907 ±      703.713  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       871.960 ±     1168.297    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                                  128  thrpt    5         8.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                                   128  thrpt    5        38.000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                           128  thrpt    5    802115.431 ±    18863.867   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       631.937 ±       14.810  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1240.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       605.494 ±      579.397  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1189.202 ±     1150.725    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                                 128  thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                                  128  thrpt    5        36.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                          128  thrpt    5   1025437.872 ±    43031.668   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       557.643 ±       23.359  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       605.706 ±      579.849  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       930.903 ±      904.330    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.412 ±        2.172    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                128  thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                 128  thrpt    5        27.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                  128  thrpt    5   1100022.665 ±     1709.774   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                               128  thrpt    5     29658.978 ±      953.152   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                128  thrpt    5      1548.943 ±       49.640  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     82203.790 ±       26.755    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.028 ±        0.237  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         1.487 ±       12.652    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1561.623 ±      704.399  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     82937.399 ±    39607.249    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        42.824 ±      368.726    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                                     128  thrpt    5        23.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                                      128  thrpt    5        34.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                              128  thrpt    5    131171.731 ±     3489.639   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1618.873 ±       43.009  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     19424.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.017 ±        0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.209 ±        0.877    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1631.200 ±      581.274  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     19574.548 ±     7077.898    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         8.069 ±       69.477    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        24.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                                       128  thrpt    5    168464.709 ±     4427.258   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       899.032 ±       23.738  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      8400.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.019 ±        0.114  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.182 ±        1.073    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       945.692 ±      587.935  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      8838.428 ±     5546.288    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         8.756 ±       62.796    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5        14.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        43.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                                      128  thrpt    5    218711.609 ±     8734.602   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       996.046 ±       40.056  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      7168.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.018 ±        0.102  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.130 ±        0.729    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1015.794 ±       19.694  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      7310.459 ±      167.053    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         4.780 ±       41.156    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        15.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                           128  thrpt    5     63980.292 ±     2052.614   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      2616.622 ±       83.916  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     64368.007 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.008 ±        0.011  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.199 ±        0.268    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      2654.962 ±      585.010  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     65321.232 ±    15037.776    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        39.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        33.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                             128  thrpt    5    177856.349 ±     9178.979   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       621.068 ±       32.087  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      5496.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       606.693 ±      580.377  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      5365.596 ±     5094.030    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         9.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                                      128  thrpt    5    540335.984 ±    19490.085   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       546.516 ±       19.873  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       538.019 ±      709.862  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1570.072 ±     2101.949    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.387 ±        3.328    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         8.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        33.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    477038.188 ±    25761.166   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       366.100 ±       19.850  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       336.353 ±        0.235  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1110.026 ±       61.118    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         5.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        14.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    497543.445 ±      296.566   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                          128  thrpt    5    293347.058 ±     5372.796   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       805.193 ±       15.098  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      4320.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.018 ±        0.157  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.097 ±        0.839    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       809.489 ±      723.674  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4343.394 ±     3889.091    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±        6.438  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         5.720 ±       34.573    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        12.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        41.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                         128  thrpt    5      8666.463 ±      208.818   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1108.370 ±       26.975  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    201280.062 ±        0.117    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.016 ±        0.090  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         2.842 ±       16.361    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1152.129 ±      713.136  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    209280.255 ±   131089.153    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        5.561  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       145.232 ±     1009.835    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5        17.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        33.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      8786.313 ±      263.713   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       984.395 ±       29.899  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    176336.048 ±        0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.017 ±        0.101  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         2.988 ±       18.135    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       946.457 ±      572.306  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    169640.326 ±   104800.724    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       167.745 ±     1203.640    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        39.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5    195601.519 ±     4703.757   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5      1272.547 ±       31.354  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     10240.002 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.022 ±        0.169  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.177 ±        1.369    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1290.169 ±      578.712  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     10385.083 ±     4763.710    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         4.316 ±       37.158    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5        19.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        28.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      7061.592 ±      279.876   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1315.106 ±       52.284  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    293112.060 ±        0.010    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.025 ±        0.193  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         5.671 ±       43.157    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1356.669 ±       27.559  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    302388.392 ±     5978.946    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       178.785 ±     1539.396    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        20.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        37.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     22230.871 ±      503.995   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       933.674 ±       21.540  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     66089.618 ±       45.183    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.012 ±        0.081  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.872 ±        5.711    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       947.233 ±      587.612  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     67098.196 ±    42703.756    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        47.220 ±      406.582    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        35.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     25588.753 ±      527.608   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       984.511 ±       20.327  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     60552.017 ±        0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.026 ±        0.140  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         1.591 ±        8.612    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1014.762 ±       23.008  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     62413.340 ±     1458.624    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.800 ±        6.885  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        49.066 ±      422.471    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        39.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    876271.677 ±    14004.949   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1581.256 ±       24.478  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      2840.000 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.029 ±        0.224  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.052 ±        0.400    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1563.739 ±      710.892  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      2808.811 ±     1287.041    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.428 ±       12.292    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        23.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        25.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    617431.944 ±      288.121   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     23985.558 ±     1142.488   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1043.368 ±       49.517  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     68470.206 ±       32.660    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.031 ±        0.181  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         2.039 ±       11.875    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1014.633 ±       23.438  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     66589.230 ±     2020.824    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        52.385 ±      451.052    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        38.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                             128  thrpt    5     25881.864 ±     1216.710   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1320.830 ±       62.029  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     80320.021 ±        0.039    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.008 ±        0.036  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.476 ±        2.218    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1289.456 ±      578.075  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     78466.480 ±    36848.286    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        40.635 ±      349.876    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        19.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        30.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                                      128  thrpt    5     26663.939 ±      933.816   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1217.672 ±       42.729  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     71888.224 ±        1.798    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.013 ±        0.072  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.744 ±        4.305    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1220.382 ±      722.698  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     72052.727 ±    42735.344    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        47.826 ±      411.793    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        35.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                                     128  thrpt    5    347980.885 ±    10953.941   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       905.661 ±       28.522  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.004 ±        0.027  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.016 ±        0.123    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.324 ±      587.286  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4291.406 ±     2710.775    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.533 ±        4.590  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         2.407 ±       20.726    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5        14.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        30.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                          128  thrpt    5     15562.059 ±      638.138   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1601.988 ±       66.084  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    162024.028 ±        0.011    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.018 ±        0.104  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.846 ±       10.642    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1630.419 ±      579.354  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    164995.478 ±    62504.908    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        95.573 ±      822.915    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        24.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        34.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                            128  thrpt    5     53829.399 ±     1372.698   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1305.717 ±       33.666  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     38176.008 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.019 ±        0.108  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.564 ±        3.158    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1289.512 ±      592.709  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     37706.884 ±    17469.841    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        19.440 ±      167.385    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        19.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        31.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                                     128  thrpt    5     98778.536 ±     5840.177   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1029.840 ±       60.811  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     16408.004 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.036 ±        0.303  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.566 ±        4.827    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1015.492 ±       24.370  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     16181.649 ±      762.577    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.933 ±        6.691  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        14.846 ±      106.540    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        36.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1460737.499 ±    63217.744   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1566.638 ±       66.886  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1688.000 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.015 ±        0.099  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.017 ±        0.106    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1563.385 ±      730.212  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1684.679 ±      790.449    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.852 ±        7.335    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        23.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        25.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5    829510.288 ±      351.059   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                         128  thrpt    5     59547.086 ±     1873.838   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1384.980 ±       44.042  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     36608.007 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.042 ±        0.346  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.113 ±        9.258    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.460 ±       27.167  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     35881.896 ±      977.385    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        21.369 ±      183.993    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        32.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                             128  thrpt    5     13850.219 ±      381.407   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1236.172 ±       34.084  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5    140480.037 ±        0.042    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.013 ±        0.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.469 ±        7.715    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1288.971 ±      577.421  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    146504.803 ±    66362.587    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        91.545 ±      788.233    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        19.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        33.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                                      128  thrpt    5     13714.127 ±      235.545   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1108.216 ±       19.342  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5    127184.032 ±        0.012    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.021 ±        0.183  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         2.428 ±       20.908    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1083.619 ±      589.772  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    124343.555 ±    66937.366    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        91.519 ±      788.004    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                                     128  thrpt    5    403671.349 ±    13404.058   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1050.552 ±       34.565  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.005 ±        0.027  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.019 ±        0.106    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1017.441 ±       15.731  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3967.115 ±      133.752    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.533 ±        4.589  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         2.106 ±       18.131    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5        15.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        25.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                          128  thrpt    5     10566.673 ±      357.393   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1458.991 ±       49.827  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    217320.593 ±        4.769    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.020 ±        0.157  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         2.975 ±       23.138    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1493.505 ±      696.260  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    222637.303 ±   110481.102    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       120.468 ±     1037.268    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        22.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                            128  thrpt    5     36450.006 ±     2070.850   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1133.212 ±       64.289  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     48929.616 ±       13.816    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.006 ±        0.055  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.277 ±        2.385    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1084.594 ±      589.436  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     46869.083 ±    26777.993    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        29.052 ±      250.147    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        31.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                                     128  thrpt    5     44625.434 ±     1464.931   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1183.884 ±       39.322  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     41752.009 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.039 ±        0.213  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.378 ±        7.460    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1152.436 ±      713.955  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     40648.802 ±    25318.578    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        32.999 ±      236.758    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        34.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1704345.076 ±    20837.977   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1550.569 ±       19.382  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1432.000 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.032 ±        0.199  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.030 ±        0.185    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1563.399 ±      730.339  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1443.636 ±      666.185    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.866 ±        7.453    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        23.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        25.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1827217.186 ±     4606.740   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                         128  thrpt    5     34256.170 ±     1983.757   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1036.352 ±       60.270  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     47617.732 ±       14.805    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.021 ±        0.108  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.954 ±        4.945    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1014.693 ±       23.721  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     46627.868 ±     1743.507    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        36.802 ±      316.875    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        15.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        37.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                                  128  thrpt    5     76285.935 ±     1494.575   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1308.565 ±       25.513  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     27000.005 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.018 ±        0.123  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.368 ±        2.548    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1357.431 ±       22.806  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     28008.376 ±      166.193    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        13.799 ±      118.817    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        20.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        30.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                            128  thrpt    5    336742.892 ±      896.889   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       674.352 ±        1.750  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5      3152.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       667.287 ±        1.023  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      3118.982 ±       10.706    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         0.623 ±        5.360    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                                  128  thrpt    5        10.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                                   128  thrpt    5        47.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                           128  thrpt    5    224473.989 ±    11136.626   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       497.415 ±       24.582  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      3488.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       537.902 ±      709.544  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      3769.737 ±     4945.637    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         0.942 ±        8.109    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        31.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                          128  thrpt    5    453978.153 ±     4749.165   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       572.263 ±        6.098  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1984.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       539.289 ±      710.960  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1870.782 ±     2478.332    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        23.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                               128  thrpt    5     64560.110 ±     1182.553   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2880.796 ±       52.636  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     70232.006 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.010 ±        0.011  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.252 ±        0.264    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2859.141 ±      717.681  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     69721.442 ±    18719.749    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        42.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        36.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                                 128  thrpt    5    221463.195 ±     7286.013   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1562.372 ±       51.662  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     11104.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.018 ±        0.132  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.127 ±        0.933    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1563.086 ±      732.286  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     11103.960 ±     4994.582    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.807 ±       41.393    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        23.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        29.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                           128  thrpt    5    678244.340 ±    40889.339   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       530.976 ±       31.847  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       534.028 ±      703.891  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1242.523 ±     1674.610    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                                 128  thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                                  128  thrpt    5        38.000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                          128  thrpt    5    454199.504 ±     4768.879   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       466.346 ±        5.038  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1616.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       470.945 ±      709.313  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1633.140 ±     2474.741    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        28.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    646140.055 ±     7870.414   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       505.779 ±        6.217  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       471.080 ±      709.009  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1147.053 ±     1720.963    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.324 ±        2.786    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        21.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    689407.468 ±     1095.676   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                              128  thrpt    5     27136.536 ±     1477.631   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1391.252 ±       74.944  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     80692.653 ±       27.239    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.030 ±        0.224  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.712 ±       13.001    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1357.504 ±       26.251  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     78743.352 ±     2792.767    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        46.349 ±      399.082    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        20.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        34.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                                        128  thrpt    5      6642.768 ±      177.608   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1022.516 ±       27.823  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5    242280.062 ±        0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.013 ±        0.061  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         3.065 ±       14.503    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1083.261 ±      576.648  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    256791.046 ±   141247.157    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.932 ±        5.317  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       222.267 ±     1268.968    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                              128  thrpt    5        16.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                               128  thrpt    5        35.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                                 128  thrpt    5      6532.151 ±      156.550   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       941.441 ±       22.306  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5    226864.064 ±        0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.020 ±        0.171  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         4.763 ±       41.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       945.537 ±      570.766  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5    227958.925 ±   140021.878    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5       225.986 ±     1945.809    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        43.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                                128  thrpt    5    148358.608 ±     2198.097   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1437.148 ±       21.451  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     15248.003 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.016 ±        0.118  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.169 ±        1.252    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1427.368 ±      591.137  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     15142.392 ±     6172.085    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         5.685 ±       48.951    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        21.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        25.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                                     128  thrpt    5      6115.587 ±      374.506   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1112.296 ±       68.288  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5    286280.069 ±        0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.016 ±        0.134  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         4.041 ±       34.237    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.454 ±      598.436  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    279415.777 ±   174204.359    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       204.368 ±     1759.667    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        16.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        38.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                                       128  thrpt    5     17883.266 ±      225.115   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       811.432 ±        9.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     71413.777 ±       85.439    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.027 ±        0.235  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         2.412 ±       20.766    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       810.253 ±      718.038  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     71351.355 ±    64118.891    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        58.866 ±      506.852    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                             128  thrpt    5        12.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        37.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                                128  thrpt    5     20386.254 ±      810.576   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       863.939 ±       34.349  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     66696.022 ±        0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.023 ±        0.128  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         1.772 ±        9.983    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       877.570 ±      713.980  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     67745.936 ±    54989.901    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.066 ±        6.439  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        83.045 ±      503.594    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        40.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                               128  thrpt    5    605063.742 ±    26229.629   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1371.840 ±       59.377  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      3568.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.017 ±        0.142  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.045 ±        0.370    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1426.217 ±      594.984  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      3710.228 ±     1575.211    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.799 ±        5.562  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         2.075 ±       14.484    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5        21.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        29.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    484355.654 ±    16262.545   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                                    128  thrpt    5     18685.717 ±      583.899   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       861.564 ±       27.198  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     72568.293 ±       28.242    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.042 ±        0.226  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         3.554 ±       18.895    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       876.989 ±      703.377  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     73948.663 ±    60918.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        67.292 ±      579.404    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        42.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                            128  thrpt    5     10731.201 ±      274.125   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1078.010 ±       28.073  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5    158112.046 ±        0.053    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.016 ±        0.096  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         2.284 ±       14.123    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1083.766 ±      583.388  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    159026.188 ±    88288.061    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        98.347 ±      846.798    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        16.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        32.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                                     128  thrpt    5     11179.671 ±     1042.210   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1023.292 ±       96.001  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5    144069.370 ±       67.918    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.011 ±        0.059  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.488 ±        8.216    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1014.643 ±       23.403  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    142909.776 ±    11726.975    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       111.383 ±      959.039    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        15.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        40.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                                    128  thrpt    5    251781.761 ±     5734.869   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1456.256 ±       33.224  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      9104.002 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.023 ±        0.133  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.145 ±        0.830    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1494.900 ±      703.972  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      9350.502 ±     4593.466    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         4.183 ±       36.019    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        22.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        26.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                         128  thrpt    5     10600.050 ±      364.169   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1326.707 ±       45.453  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5    197000.114 ±        0.635    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.004 ±        0.026  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.577 ±        3.928    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1288.292 ±      575.885  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    191395.589 ±    88739.074    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       158.785 ±     1164.624    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        39.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                           128  thrpt    5     29194.518 ±      779.145   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1007.481 ±       26.299  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     54316.951 ±       41.060    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.015 ±        0.085  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.831 ±        4.586    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       947.554 ±      574.570  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     51108.781 ±    31494.740    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        5.561  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        43.095 ±      299.537    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        33.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                                    128  thrpt    5     78496.517 ±     4076.875   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1249.531 ±       65.262  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     25056.005 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.037 ±        0.316  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.744 ±        6.355    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1288.543 ±      576.000  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     25855.287 ±    12069.990    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        16.065 ±      138.321    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        36.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                                   128  thrpt    5    970941.277 ±    15985.082   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1332.475 ±       22.170  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      2160.000 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.005 ±        0.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.008 ±        0.048    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1357.664 ±       26.141  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      2200.838 ±       29.136    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.514 ±       10.855    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        27.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1109781.928 ±    49163.830   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                                        128  thrpt    5     64211.650 ±     1680.064   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1383.993 ±       36.383  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     33928.007 ±        0.002    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.038 ±        0.305  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.945 ±        7.522    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1357.196 ±       27.950  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     33271.937 ±      876.728    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        22.981 ±      164.890    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        20.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        35.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                                128  thrpt    5     18370.109 ±     4640.054   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5       688.111 ±      174.195  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     58960.097 ±       29.507    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       674.169 ±        1.365  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     57972.966 ±    15206.473    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        10.823 ±       93.188    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        10.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        32.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                         128  thrpt    5     14976.272 ±      268.462   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       419.518 ±        7.490  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     44088.029 ±        0.011    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       470.927 ±      709.271  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     49535.440 ±    75159.463    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        28.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                                        128  thrpt    5    101040.726 ±     7546.551   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       253.698 ±       18.942  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3952.004 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       202.619 ±      712.236  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      3179.579 ±    11182.247    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         3.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5         9.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                             128  thrpt    5     13819.188 ±      349.666   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5       872.602 ±       22.012  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     99392.244 ±        1.838    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.013 ±        0.114  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.495 ±       12.870    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       876.876 ±      718.205  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     99909.137 ±    82393.966    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        90.937 ±      782.992    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        13.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        44.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                               128  thrpt    5     56850.193 ±     1187.620   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5      1013.960 ±       21.655  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     28072.007 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.015 ±        0.125  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.424 ±        3.445    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1015.146 ±       21.563  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     28104.880 ±      200.169    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        18.563 ±      159.837    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5        15.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        37.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                                        128  thrpt    5     79252.430 ±     1959.747   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1280.905 ±       31.475  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     25440.005 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.038 ±        0.320  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.759 ±        6.387    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1288.552 ±      576.382  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     25599.886 ±    11706.769    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        15.936 ±      137.210    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        35.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    252703.028 ±     1994.649   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       484.213 ±        3.946  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      3016.002 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       470.916 ±      709.286  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2935.055 ±     4444.162    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        20.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    312674.779 ±      973.008   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                            128  thrpt    5     65894.384 ±     1875.412   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5      1182.687 ±       33.934  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     28248.006 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.032 ±        0.273  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.756 ±        6.485    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1219.803 ±      719.682  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     29139.849 ±    17327.829    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        19.132 ±      164.730    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5        18.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        37.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                                 128  thrpt    5    125330.492 ±     1207.893   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1815.386 ±       17.136  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     22800.003 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.034 ±        0.240  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.434 ±        3.027    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1769.219 ±      587.618  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     22219.662 ±     7344.190    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         8.401 ±       72.339    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        26.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        23.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                           128  thrpt    5    632555.111 ±      788.242   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       350.441 ±        0.564  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5       872.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       333.711 ±        0.210  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       830.372 ±        1.020    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        23.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                          128  thrpt    5    336140.766 ±    22135.130   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       350.232 ±       23.103  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1640.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       336.234 ±        1.213  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1574.838 ±      107.601    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.618 ±        5.320    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        20.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                         128  thrpt    5    767372.488 ±    27108.960   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       265.215 ±        9.382  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       544.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       269.626 ±      580.390  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       554.177 ±     1193.104    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5        12.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                              128  thrpt    5     73590.446 ±     1943.816   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      3154.665 ±       84.891  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     67472.006 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.011 ±        0.015  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.243 ±        0.308    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      3131.446 ±      585.393  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     66993.164 ±    14153.529    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        46.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        38.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                                128  thrpt    5    233546.764 ±     8482.518   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5      1216.825 ±       44.247  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      8200.002 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.021 ±        0.119  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.140 ±        0.806    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1220.791 ±      702.077  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      8233.343 ±     4919.895    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5         4.516 ±       38.886    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5        18.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        33.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                          128  thrpt    5   1507546.954 ±    21042.338   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       513.428 ±        7.360  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       467.225 ±      703.729  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       488.264 ±      741.606    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        33.000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                         128  thrpt    5   1494311.707 ±    59638.384   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       873.399 ±       34.968  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.031 ±        0.211  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.033 ±        0.222    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       877.746 ±      706.998  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       925.620 ±      765.864    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.839 ±        7.224    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5        13.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        39.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                                        128  thrpt    5   1616724.888 ±    14327.797   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       550.521 ±        4.855  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       538.549 ±      709.537  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       524.568 ±      693.572    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.260 ±        1.371    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         8.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        24.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5   1810914.813 ±    10987.787   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                             128  thrpt    5     34314.391 ±     1598.375   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1591.091 ±       74.038  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     72977.966 ±       16.827    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.035 ±        0.184  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.629 ±        8.450    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1562.585 ±      707.679  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     71739.711 ±    34917.178    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        37.276 ±      320.958    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        23.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        31.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                                  128  thrpt    5     46076.874 ±      757.420   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       919.909 ±       15.185  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     31424.009 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.012 ±        0.101  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.413 ±        3.433    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       947.036 ±      588.111  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     32356.073 ±    20207.964    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        22.729 ±      195.707    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        31.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                           128  thrpt    5     81505.299 ±     1647.300   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       859.127 ±       17.309  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     16592.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.023 ±        0.122  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.444 ±        2.342    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       877.707 ±      713.590  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     16953.493 ±    13831.796    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        15.444 ±      132.981    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        42.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                          128  thrpt    5    260530.431 ±     6650.968   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       847.497 ±       21.536  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      5120.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.018 ±        0.097  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.106 ±        0.594    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       878.982 ±      714.515  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      5306.860 ±     4242.650    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         4.070 ±       35.045    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        31.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                               128  thrpt    5     23860.989 ±      801.008   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1121.463 ±       37.798  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     73976.171 ±        1.313    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.025 ±        0.210  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         1.667 ±       13.844    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1083.587 ±      590.909  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     71480.924 ±    39030.177    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        52.763 ±      454.305    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        16.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        37.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                                 128  thrpt    5     57911.679 ±     4600.621   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       859.193 ±       67.669  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     23352.007 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.040 ±        0.216  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         1.074 ±        5.796    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       810.889 ±      709.479  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     22018.950 ±    18710.309    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        17.981 ±      154.824    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        34.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                          128  thrpt    5     95647.951 ±     2779.398   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1310.205 ±       37.456  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     21560.000 ±        0.067    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.034 ±        0.287  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.565 ±        4.722    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1356.563 ±       29.075  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     22323.616 ±      684.129    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.933 ±        6.690  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        15.367 ±      110.174    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        20.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        36.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    288390.356 ±     5798.302   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       919.062 ±       18.494  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5016.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.025 ±        0.172  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.133 ±        0.934    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       946.238 ±      571.868  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5166.123 ±     3162.750    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         5.121 ±       36.777    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        32.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    322760.324 ±      148.152   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                              128  thrpt    5     79040.795 ±     3719.504   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1171.483 ±       55.915  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     23328.000 ±        0.081    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.026 ±        0.208  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.504 ±        4.106    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1151.623 ±      709.466  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     22939.618 ±    14307.224    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        16.101 ±      138.632    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        37.000                     ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                             128  thrpt    5     23256.132 ±      909.750   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1211.456 ±       47.827  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     81983.888 ±        1.186    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.024 ±        0.206  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.627 ±       13.862    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1220.728 ±      718.663  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     82651.926 ±    49731.202    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        45.184 ±      389.044    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        18.000                 counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        32.000                     ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                                      128  thrpt    5     26393.507 ±     1049.937   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1033.856 ±       41.940  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     61648.225 ±        1.799    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.026 ±        0.149  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         1.522 ±        8.847    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1082.753 ±      601.013  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     64506.173 ±    33346.344    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±        8.033  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        55.313 ±      476.261    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5        16.000                 counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        40.000                     ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                                     128  thrpt    5    475910.505 ±    14482.143   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1238.467 ±       37.884  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±        0.001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.021 ±        0.164  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.071 ±        0.549    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1289.426 ±      578.229  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4266.426 ±     1973.611    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         2.230 ±       19.205    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5        19.000                 counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        28.000                     ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                                          128  thrpt    5     21152.381 ±      729.890   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1608.203 ±       55.577  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    119672.021 ±        0.008    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.007 ±        0.036  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.488 ±        2.638    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1562.012 ±      705.506  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    116304.485 ±    55028.798    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        70.240 ±      604.784    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        23.000                 counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        34.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                                            128  thrpt    5     69053.026 ±     1556.609   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1461.632 ±       33.033  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     33312.006 ±        0.002    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.026 ±        0.220  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.587 ±        4.988    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1494.424 ±      723.308  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     34044.986 ±    15877.331    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        15.108 ±      130.081    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        22.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        31.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                                     128  thrpt    5    121051.838 ±     2821.729   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1153.608 ±       27.447  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     15000.003 ±        0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.038 ±        0.325  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.486 ±        4.187    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1152.430 ±      735.213  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     14980.438 ±     9422.946    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        10.404 ±       89.582    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5        17.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        34.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1756578.827 ±    27429.092   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1455.337 ±       23.051  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1304.000 ±        0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.029 ±        0.241  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.026 ±        0.215    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1494.743 ±      728.258  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1339.145 ±      645.737    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.721 ±        6.207    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        22.000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        26.000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1968693.779 ±     2927.617   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                                         128  thrpt    5    119814.409 ±     3320.011   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1349.557 ±       37.734  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     17728.004 ±        0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.027 ±        0.230  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.360 ±        3.023    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.567 ±       27.103  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     17833.501 ±      250.708    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        10.522 ±       90.599    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        20.000                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        35.000                     ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                                           128  thrpt    5     33160.015 ±     1774.435   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1190.860 ±       64.046  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     56528.181 ±        1.448    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.025 ±        0.133  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.173 ±        6.305    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1219.639 ±      698.179  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     57992.595 ±    35903.829    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        37.992 ±      327.122    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        18.000                 counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        38.000                     ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                                          128  thrpt    5    663042.264 ±    21894.295   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5      1294.041 ±       42.880  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      3072.001 ±        0.001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.032 ±        0.253  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.076 ±        0.601    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1290.025 ±      600.741  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      3060.143 ±     1342.792    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.579 ±       13.593    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5        19.000                 counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        26.000                     ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                               128  thrpt    5     24578.652 ±     1123.330   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1789.261 ±       82.555  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5    114576.018 ±        0.007    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.004 ±        0.013  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.237 ±        0.844    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1835.500 ±      727.173  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    117497.615 ±    44248.406    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        60.504 ±      520.957    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        27.000                 counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        34.000                     ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                                          128  thrpt    5    348323.476 ±     9975.396   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       968.434 ±       27.288  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      4376.001 ±        0.001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.033 ±        0.186  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.148 ±        0.842    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1014.600 ±       23.511  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4584.651 ±       39.880    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         4.235 ±       30.359    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        15.000                 counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        38.000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2211215.164 ±    57884.868   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1292.422 ±       33.291  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.025 ±        0.201  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.018 ±        0.143    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1289.497 ±      604.047  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       918.210 ±      439.211    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.569 ±        4.897    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        19.000                 counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        26.000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2238853.772 ±     3366.273   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                              128  thrpt    5    224008.608 ±     5449.483   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1448.522 ±       34.933  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     10176.002 ±        0.001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.033 ±        0.256  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.232 ±        1.793    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1426.637 ±      593.083  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     10020.757 ±     4081.865    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         5.674 ±       48.856    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        21.000                 counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        32.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                                128  thrpt    5     75915.798 ±     2136.229   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1426.567 ±       39.827  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     29576.006 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.022 ±        0.140  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.457 ±        2.923    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1425.589 ±      594.842  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     29547.929 ±    11891.387    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        16.704 ±      143.824    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        21.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        31.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                         128  thrpt    5     77808.644 ±     2012.759   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       896.915 ±       23.410  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     18144.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.021 ±        0.130  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.426 ±        2.621    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       944.633 ±      588.701  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     19107.500 ±    11857.835    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±        8.030  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        18.811 ±      161.966    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        14.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        42.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                                        128  thrpt    5     99847.662 ±     6054.183   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5      1051.449 ±       63.946  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     16576.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.029 ±        0.192  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.451 ±        3.005    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1082.691 ±      565.638  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     17068.420 ±     8833.458    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        12.497 ±      107.601    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        16.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        31.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                             128  thrpt    5     42892.459 ±     1288.795   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2001.495 ±       60.617  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     73448.010 ±        0.002    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.026 ±        0.175  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.974 ±        6.514    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1973.161 ±      584.171  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     72427.728 ±    22416.261    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        34.668 ±      298.500    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        29.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        30.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                               128  thrpt    5    129812.104 ±     3470.596   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       575.993 ±       15.142  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      6984.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       605.060 ±      578.131  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      7333.567 ±     6972.216    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.400 ±        1.405  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         4.855 ±       17.067    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         9.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        34.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                                        128  thrpt    5    175356.619 ±     5907.538   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       260.221 ±        8.806  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      2336.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       201.398 ±      707.943  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1814.899 ±     6379.828    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         3.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        13.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    738500.027 ±    14445.089   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       915.889 ±       17.228  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1952.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.027 ±        0.189  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.058 ±        0.401    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       945.855 ±      571.084  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2016.060 ±     1221.908    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.710 ±       14.726    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        14.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    740164.845 ±    21565.451   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                            128  thrpt    5    200861.727 ±     4164.699   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       654.354 ±       13.598  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      5128.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       671.221 ±        1.039  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      5260.314 ±      113.333    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         1.039 ±        8.948    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5        10.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        41.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                            128  thrpt    5    122745.715 ±     2951.969   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1511.781 ±       35.889  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     19384.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.019 ±        0.154  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.245 ±        1.973    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1494.985 ±      727.912  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     19161.505 ±     9034.048    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.800 ±        6.885  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        10.331 ±       88.953    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        22.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                                     128  thrpt    5    164330.645 ±     5034.885   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       876.950 ±       27.065  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.023 ±        0.144  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.222 ±        1.375    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       877.588 ±      706.211  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      8413.553 ±     6917.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         8.928 ±       63.880    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        40.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                                    128  thrpt    5    430185.191 ±     7295.629   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       835.258 ±       13.813  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      3056.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.021 ±        0.126  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.079 ±        0.463    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       810.975 ±      710.326  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      2968.758 ±     2634.985    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         2.454 ±       21.134    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        12.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                         128  thrpt    5     61620.548 ±     1277.354   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2601.407 ±       55.043  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     66448.007 ±        0.002    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.004 ±        0.010  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.096 ±        0.255    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2654.840 ±      586.235  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     67818.888 ±    15381.361    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        39.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        33.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                           128  thrpt    5    182430.579 ±     2081.823   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       627.810 ±        7.141  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      5416.002 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       606.746 ±      580.500  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      5237.145 ±     5044.377    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        30.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                                    128  thrpt    5    292971.643 ±    82885.045   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       288.870 ±       81.759  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1552.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       269.102 ±      579.262  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1400.095 ±     3014.219    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         4.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        16.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   1505986.660 ±    68253.326   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1117.638 ±       51.047  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1168.000 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.024 ±        0.204  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.025 ±        0.214    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1151.612 ±      708.860  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1203.361 ±      733.618    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.961 ±        6.890    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        17.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        29.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1596990.519 ±    10388.544   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                                        128  thrpt    5    307902.378 ±     9075.822   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       837.300 ±       24.809  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5      4280.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.012 ±        0.103  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.062 ±        0.533    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       809.345 ±      707.360  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4136.657 ±     3601.732    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.199 ±        7.566  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         6.123 ±       38.663    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        12.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        42.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                         128  thrpt    5      4575.232 ±       37.591   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5       900.736 ±        6.434  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    309840.093 ±        0.015    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.032 ±        0.279  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5        11.136 ±       95.886    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       940.574 ±      574.452  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    323520.117 ±   197003.839    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.199 ±       10.324  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       412.825 ±     3554.549    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        43.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      4614.902 ±       99.946   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       803.356 ±       17.497  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    273960.093 ±        0.015    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.008 ±        0.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         2.632 ±       22.659    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       803.436 ±      695.052  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    274209.817 ±   242087.228    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.332 ±       10.096  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       453.813 ±     3442.655    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        55.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5     29390.100 ±      565.861   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       481.775 ±        9.114  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     25800.015 ±        0.006    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       468.550 ±      706.228  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     25116.266 ±    38159.266    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        14.259 ±       75.186    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         7.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        27.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      3946.207 ±      136.437   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1005.325 ±       34.840  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    400992.108 ±        0.018    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.006 ±        0.048  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         2.216 ±       19.080    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       942.046 ±      592.745  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    375641.651 ±   233426.687    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.332 ±       10.095  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       532.752 ±     4043.572    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        47.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     14227.631 ±      408.414   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       792.195 ±       21.756  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     87627.347 ±      114.086    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.045 ±        0.390  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         4.975 ±       42.834    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       822.539 ±      678.530  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     90937.241 ±    73811.631    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.199 ±        8.961  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       133.641 ±     1000.460    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        47.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     16159.262 ±      412.898   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       837.032 ±       21.557  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     81536.027 ±        0.057    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.016 ±        0.139  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         1.558 ±       13.413    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       804.670 ±      701.171  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     78420.022 ±    69119.261    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.332 ±       11.470  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5       130.072 ±     1119.960    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        51.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    275944.804 ±    18266.703   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       973.344 ±       64.159  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      5552.002 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.017 ±        0.150  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.102 ±        0.874    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       943.412 ±      565.822  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      5380.132 ±     3196.674    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.332 ±       10.097  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         7.594 ±       57.593    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        37.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    315942.854 ±     9274.588   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     14693.445 ±      703.222   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       834.982 ±       40.000  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     89446.905 ±       41.992    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.050 ±        0.435  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         5.345 ±       46.025    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       871.423 ±      717.726  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     93362.774 ±    77012.741    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.332 ±       10.099  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       141.377 ±     1071.953    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        53.000                     ms
[info] BitSetBenchmark.readJsoniterScala                                                                                128  thrpt    5    882624.080 ±     2061.640   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                                 128  thrpt    5        35.886 ±        0.081  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                            128  thrpt    5        64.000 ±        0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                                      128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.readPlayJson                                                                                     128  thrpt    5     67120.597 ±     1387.256   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                      128  thrpt    5      3028.779 ±       61.391  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                 128  thrpt    5     71024.006 ±        0.002    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.008 ±        0.015  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.195 ±        0.341    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      3063.293 ±        1.993  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     71834.977 ±     1483.079    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                                           128  thrpt    5        45.000                 counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                                            128  thrpt    5        37.000                     ms
[info] BitSetBenchmark.writeJacksonScala                                                                                128  thrpt    5    998538.803 ±    13205.256   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                                 128  thrpt    5       573.539 ±        7.861  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                            128  thrpt    5       904.000 ±        0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       537.553 ±      709.383  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5       847.532 ±     1121.156    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.266 ±        1.405  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5         0.419 ±        2.208    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                                      128  thrpt    5         8.000                 counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                                       128  thrpt    5        32.000                     ms
[info] BitSetBenchmark.writeJsoniterScala                                                                               128  thrpt    5    674916.986 ±   123630.859   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                128  thrpt    5       181.805 ±       33.320  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                           128  thrpt    5       424.001 ±        0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       201.946 ±      709.870  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5       461.731 ±     1623.054    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                                     128  thrpt    5         3.000                 counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                                      128  thrpt    5         9.000                     ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                                       128  thrpt    5    903400.048 ±    12379.507   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                        128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                   128  thrpt    5        ≈ 10⁻³                   B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                             128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.writePlayJson                                                                                    128  thrpt    5     38754.036 ±     2217.239   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                                     128  thrpt    5      1626.435 ±       93.265  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                128  thrpt    5     66062.842 ±       10.066    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         128  thrpt    5         0.014 ±        0.069  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    128  thrpt    5         0.569 ±        2.850    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1562.890 ±      732.147  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5     63441.103 ±    27972.252    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                        128  thrpt    5         0.932 ±        8.028  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                   128  thrpt    5        38.419 ±      330.803    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                                          128  thrpt    5        23.000                 counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                                           128  thrpt    5        29.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                                 N/A  thrpt    5    649580.228 ±     4978.680   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      2079.983 ±       16.358  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5      5040.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.032 ±        0.242  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.078 ±        0.588    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2041.519 ±        6.076  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      4946.810 ±       24.548    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         1.620 ±       13.946    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        30.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        27.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                           N/A  thrpt    5   5219343.279 ±   506872.584   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       318.395 ±       30.834  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5        96.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       333.768 ±        0.141  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       100.687 ±        9.876    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        24.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                          N/A  thrpt    5    777736.324 ±    32918.500   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       964.627 ±       40.858  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1952.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.044 ±        0.318  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         0.088 ±        0.640    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       945.556 ±      589.233  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5      1914.466 ±     1214.887    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.199 ±        6.124  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         2.423 ±       12.338    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5        14.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        45.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                         N/A  thrpt    5   7334100.569 ±   351424.342   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       335.501 ±       16.064  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        72.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       337.051 ±        0.224  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5        72.341 ±        3.410    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        13.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                              N/A  thrpt    5    257520.205 ±    10972.009   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1415.061 ±       61.337  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5      8648.002 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.012 ±        0.064  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.075 ±        0.395    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1423.883 ±      572.169  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      8704.545 ±     3607.759    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         1.066 ±        7.823  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         6.545 ±       48.034    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        21.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        43.000                     ms
[info] GeoJSONBenchmark.readCirce                                                                                       N/A  thrpt    5      3606.771 ±      105.114   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      1703.567 ±       49.939  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5    743312.115 ±        0.014    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.290 ±        0.400  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5       126.271 ±      171.801    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1699.777 ±       17.886  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5    741683.309 ±    16506.278    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.799 ±        6.883  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5       352.364 ±     3033.959    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        25.000                 counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        32.000                     ms
[info] GeoJSONBenchmark.readJacksonScala                                                                                N/A  thrpt    5      4768.318 ±       61.365   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1971.305 ±       25.211  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5    650536.088 ±        0.014    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.019 ±        0.024  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         6.222 ±        7.795    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1972.288 ±      581.390  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    650874.299 ±   192505.637    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.932 ±        8.029  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       308.275 ±     2654.342    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        29.000                 counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        33.000                     ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                               N/A  thrpt    5     41614.044 ±      502.446   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5       692.420 ±        7.628  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5     26184.010 ±        0.001    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       742.761 ±      579.709  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5     28094.718 ±    22131.429    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.533 ±        4.588  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5        20.140 ±      173.413    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5        11.000                 counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        32.000                     ms
[info] GeoJSONBenchmark.writeCirce                                                                                      N/A  thrpt    5      4012.834 ±      124.993   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5       738.190 ±       23.126  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5    289544.105 ±        0.019    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.008 ±        0.067  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         3.027 ±       26.063    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5       742.016 ±      578.669  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5    291062.306 ±   227212.437    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5       260.645 ±     2244.235    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5        11.000                 counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        37.000                     ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                               N/A  thrpt    5      4469.357 ±      247.151   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5       473.066 ±       25.853  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5    166581.391 ±        2.774    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       469.447 ±      706.244  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5    165185.055 ±   246716.499    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.400 ±        1.405  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5       140.009 ±      492.159    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5         7.000                 counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        32.000                     ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5      6465.639 ±      241.414   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       172.943 ±        6.432  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5     42096.065 ±        0.013    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       201.838 ±      709.489  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5     49356.659 ±   173511.466    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         3.000                 counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5         9.000                     ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5      6543.703 ±      411.032   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5       127.194 ±        7.991  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5     30592.062 ±        0.004    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       134.713 ±      710.303  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     32347.571 ±   170559.416    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5         2.000                 counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                             N/A  thrpt    5         6.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                                 N/A  thrpt    5      7314.580 ±      244.244   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      1703.442 ±       57.362  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5    366544.058 ±        0.009    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.094 ±        0.181  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5        20.261 ±       39.277    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1699.747 ±       17.163  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    365768.998 ±    11614.829    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       144.075 ±     1240.527    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        25.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        30.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                           N/A  thrpt    5     11288.443 ±      228.836   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       260.190 ±        5.343  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5     36280.037 ±        0.006    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       266.938 ±      574.603  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     37277.561 ±    80246.239    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        20.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                          N/A  thrpt    5     13395.586 ±      721.194   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       340.365 ±       18.357  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5     39992.031 ±        0.004    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       335.698 ±        0.159  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     39449.992 ±     2167.401    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        23.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                         N/A  thrpt    5     22506.534 ±      809.940   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       421.806 ±       15.019  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     29496.020 ±        0.007    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       404.485 ±      580.579  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     28272.251 ±    40329.956    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        17.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                              N/A  thrpt    5      2133.571 ±       98.201   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1355.623 ±       62.498  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5   1000009.237 ±        8.978    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.025 ±        0.127  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5        18.249 ±       92.632    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1355.401 ±       32.485  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5    999902.528 ±    23266.887    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.933 ±        8.030  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5       689.205 ±     5934.262    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        20.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        41.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                                N/A  thrpt    5      7272.480 ±      117.126   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5      1434.894 ±       22.778  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5    310552.058 ±        0.010    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.016 ±        0.085  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         3.454 ±       18.411    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1389.532 ±      274.732  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    300770.966 ±    62866.906    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.799 ±        5.560  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       173.853 ±     1209.734    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5        21.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        32.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                          N/A  thrpt    5     53722.295 ±      878.795   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           N/A  thrpt    5       502.153 ±        8.190  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      N/A  thrpt    5     14712.008 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       466.928 ±      704.746  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     13694.818 ±    20853.983    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         3.891 ±       33.504    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                                N/A  thrpt    5         7.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                                 N/A  thrpt    5        33.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                         N/A  thrpt    5     37432.603 ±     1661.210   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5       557.269 ±       24.813  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     23431.868 ±        0.262    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       536.985 ±      707.486  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     22624.939 ±    30301.614    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         5.710 ±       49.163    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        37.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5     71904.571 ±     8615.187   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       540.614 ±       64.660  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5     11832.006 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       538.310 ±      709.786  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5     11812.225 ±    15906.414    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        24.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5     96057.282 ±     1621.175   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.004 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                             N/A  thrpt    5      5004.855 ±      126.292   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                              N/A  thrpt    5      1448.669 ±       36.621  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         N/A  thrpt    5    455567.953 ±        2.996    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.034 ±        0.099  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5        10.565 ±       31.283    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1424.580 ±      597.617  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5    447956.692 ±   185759.883    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.932 ±        8.027  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5       293.660 ±     2528.501    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                                   N/A  thrpt    5        21.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                                    N/A  thrpt    5        39.000                     ms
[info] IntBenchmark.readCirce                                                                                           N/A  thrpt    5   4760930.424 ±   150825.332   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      2952.320 ±       92.521  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5       976.000 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.002 ±        0.005  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5         0.001 ±        0.002    B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      2995.383 ±      586.311  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5       990.366 ±      203.069    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        44.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        40.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                                     N/A  thrpt    5  35885361.712 ±  8790492.128   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                                      N/A  thrpt    5       364.788 ±       89.258  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5       333.711 ±        0.130  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        14.688 ±        3.898    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                           N/A  thrpt    5         5.000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                            N/A  thrpt    5        23.000                     ms
[info] IntBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   7272855.470 ±   105273.850   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      2735.256 ±       39.613  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5       592.000 ±        0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.002 ±        0.009  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5        ≈ 10⁻³                   B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      2790.868 ±      586.128  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5       603.981 ±      121.179    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5        41.000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        34.000                     ms
[info] IntBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5  35332774.664 ±    75718.434   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                                      N/A  thrpt    5  26358199.283 ±  6847280.302   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                                       N/A  thrpt    5       937.669 ±      243.638  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                                  N/A  thrpt    5        56.000 ±        0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.016 ±        0.085  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         0.001 ±        0.005    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5       947.587 ±      574.804  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5        56.577 ±       32.363    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5         0.041 ±        0.353    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                            N/A  thrpt    5        14.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                             N/A  thrpt    5        27.000                     ms
[info] IntBenchmark.readPlayJson                                                                                        N/A  thrpt    5   5978281.237 ±    81110.235   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      2886.505 ±       37.969  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5       760.000 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.003 ±        0.007  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5         0.001 ±        0.002    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      2859.009 ±      717.582  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5       752.795 ±      191.243    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        42.000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        36.000                     ms
[info] IntBenchmark.writeCirce                                                                                          N/A  thrpt    5  20657852.013 ±  1690119.025   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      1890.009 ±      153.525  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5       144.000 ±        0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.026 ±        0.206  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.002 ±        0.015    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      1904.788 ±      712.297  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5       145.037 ±       48.504    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         0.049 ±        0.424    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        28.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        26.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                                    N/A  thrpt    5  54566426.918 ±  2867980.918   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                     N/A  thrpt    5      1664.113 ±       87.964  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                                N/A  thrpt    5        48.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.123 ±        1.044  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.004 ±        0.030    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1693.403 ±       56.168  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5        48.848 ±        1.021    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.332 ±       11.471  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.038 ±        0.331    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                          N/A  thrpt    5        25.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                           N/A  thrpt    5        47.000                     ms
[info] IntBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5  10797040.365 ±   336726.373   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5      2140.330 ±       66.750  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       312.000 ±        0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.018 ±        0.138  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.003 ±        0.020    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      2177.583 ±      712.206  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       317.486 ±      106.510    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.933 ±        8.029  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         0.137 ±        1.182    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5        32.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5  41803587.867 ± 15747281.652   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       849.893 ±      320.022  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        32.000 ±        0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       N/A  thrpt    5         0.035 ±        0.203  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  N/A  thrpt    5         0.001 ±        0.009    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       809.828 ±      700.613  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        30.392 ±       20.197    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         0.799 ±        5.560  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         0.032 ±        0.226    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5        12.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        29.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5  49762737.848 ±    77237.677   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                                     N/A  thrpt    5  40126957.769 ±   693727.831   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                                      N/A  thrpt    5      2039.816 ±       35.841  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        80.000 ±        0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.004 ±        0.026  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      2042.527 ±        1.263  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        80.108 ±        1.383    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                           N/A  thrpt    5        30.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                            N/A  thrpt    5        23.000                     ms
[info] IntBenchmark.writePlayJson                                                                                       N/A  thrpt    5   2103349.000 ±    52481.353   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5      1688.957 ±       42.484  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      1264.000 ±        0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.039 ±        0.318  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.029 ±        0.240    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1631.233 ±      581.376  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      1220.545 ±      422.293    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.799 ±        6.881  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         0.603 ±        5.194    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5        24.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        28.000                     ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5    137410.933 ±     1543.635   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      2520.611 ±       26.868  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5     28872.003 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.002 ±        0.004  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.023 ±        0.050    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      2518.792 ±      717.371  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     28847.890 ±     7988.308    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        37.000                 counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        28.000                     ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     21824.636 ±      659.728   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1725.444 ±       52.519  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    124440.044 ±        0.197    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.007 ±        0.015  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.499 ±        1.126    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1699.109 ±       23.133  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5    122544.633 ±     2571.597    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.932 ±        8.029  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        68.020 ±      585.672    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        25.000                 counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        33.000                     ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    131484.532 ±     5129.120   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1460.933 ±       57.065  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     17488.003 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.026 ±        0.217  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.309 ±        2.569    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1493.366 ±      695.536  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     17892.848 ±     8961.270    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.066 ±        9.176  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        12.967 ±      111.646    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5        22.000                 counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        37.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5    490559.059 ±    13449.898   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1014.731 ±       27.739  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      3256.001 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.030 ±        0.184  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.097 ±        0.588    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1014.827 ±       22.990  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3256.340 ±       36.186    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.933 ±        6.689  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         2.994 ±       21.439    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5        15.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        30.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    537562.932 ±     4677.113   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5       524.586 ±        4.341  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5      1536.001 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        128  thrpt    5       538.183 ±      709.475  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      1576.499 ±     2085.758    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5         8.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    128  thrpt    5        24.000                     ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5     44232.736 ±      630.814   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       755.645 ±       10.668  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     26888.010 ±        0.002    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       740.311 ±      577.610  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     26354.081 ±    20899.400    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±        6.437  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        37.910 ±      228.918    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        11.000                 counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        45.000                     ms
[info] ListOfBooleansBenchmark.readCirce                                                                                128  thrpt    5    364961.199 ±    10009.367   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      2476.470 ±       67.168  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     10680.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.002 ±        0.006  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.008 ±        0.024    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2518.833 ±      718.778  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     10865.480 ±     3266.736    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        37.000                 counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        30.000                     ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                         128  thrpt    5    382557.766 ±     7426.687   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5      1013.017 ±       20.177  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      4168.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.010 ±        0.083  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.042 ±        0.341    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1014.562 ±       24.131  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      4174.343 ±       22.965    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.932 ±        8.029  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         3.847 ±       33.127    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        15.000                 counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        41.000                     ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                                        128  thrpt    5    424168.462 ±    12895.720   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       836.550 ±       25.629  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3104.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.025 ±        0.156  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.092 ±        0.579    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       810.958 ±      710.110  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      3008.888 ±     2629.397    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         2.474 ±       21.303    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        12.000                 counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        29.000                     ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                             128  thrpt    5     95664.326 ±      659.719   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      3463.514 ±       25.488  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     56984.004 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.002 ±        0.004  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.029 ±        0.073    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      3471.847 ±      586.610  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     57119.438 ±     9445.324    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        51.000                 counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        43.000                     ms
[info] ListOfBooleansBenchmark.writeCirce                                                                               128  thrpt    5    293547.777 ±    59252.642   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       447.596 ±       90.432  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      2400.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       471.878 ±      710.994  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      2509.683 ±     3464.374    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         7.000                 counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        23.000                     ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                                        128  thrpt    5    596053.591 ±     9087.883   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       436.292 ±        6.714  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1152.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       403.000 ±      579.196  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1065.182 ±     1550.106    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.354 ±        3.047    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         6.000                 counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        26.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                                       128  thrpt    5   2409681.681 ±    84495.290   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1114.527 ±       38.945  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       728.000 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.018 ±        0.153  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.012 ±        0.100    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1151.638 ±      709.743  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       752.932 ±      484.520    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.522 ±        4.491    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        17.000                 counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        29.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5   2470950.942 ±     3424.988   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                 counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                            128  thrpt    5    401778.642 ±     5544.382   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       577.915 ±        7.786  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      2264.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       605.452 ±      578.959  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2371.867 ±     2267.955    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         9.000                 counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        35.000                     ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                                           128  thrpt    5     38330.266 ±      687.401   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1291.869 ±       23.365  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     53040.011 ±        0.002    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.021 ±        0.170  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.886 ±        7.007    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1289.601 ±      578.055  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     52954.296 ±    23971.098    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±        5.736  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        27.484 ±      236.647    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        19.000                 counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        30.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                                    128  thrpt    5     52667.701 ±      858.321   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       948.744 ±       15.857  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     28352.008 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.024 ±        0.207  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.720 ±        6.195    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       946.283 ±      589.049  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     28292.428 ±    17919.568    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.199 ±        8.958  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        35.988 ±      269.078    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5        14.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        40.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                                   128  thrpt    5     71806.244 ±     8281.632   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1101.207 ±      127.513  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     24136.006 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.024 ±        0.199  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.511 ±        4.309    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1084.632 ±      589.743  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     23771.791 ±    12470.275    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.666 ±        5.736  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        14.451 ±      124.427    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5        16.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        28.000                     ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                                        128  thrpt    5     19046.110 ±      712.445   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      1373.720 ±       52.243  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    113520.054 ±        0.267    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.014 ±        0.067  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.124 ±        5.477    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1424.510 ±      598.578  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    117680.997 ±    47350.509    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.066 ±        7.821  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        88.172 ±      646.310    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        21.000                 counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        40.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                                   128  thrpt    5    144292.949 ±     6463.415   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1328.960 ±       59.109  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     14496.003 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.030 ±        0.249  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.329 ±        2.722    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1356.243 ±       31.046  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     14795.160 ±      734.954    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.933 ±        6.690  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        10.208 ±       73.276    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5        20.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        39.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                                  128  thrpt    5    492024.396 ±     6980.567   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       542.632 ±        7.741  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      1736.001 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       538.298 ±      709.919  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1722.079 ±     2270.458    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±        1.147  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.424 ±        3.648    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         8.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        24.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5    498077.314 ±    10363.834   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         5.063 ±        0.106  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.001 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                                       128  thrpt    5     60727.267 ±     1674.847   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1089.084 ±       29.904  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     28224.007 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.013 ±        0.069  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.332 ±        1.799    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1083.183 ±      600.015  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     28056.953 ±    14950.061    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.933 ±        6.689  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        24.051 ±      172.241    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        16.000                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        40.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                               N/A  thrpt    5   2007894.583 ±    48271.104   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                                N/A  thrpt    5      2837.590 ±       67.722  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                           N/A  thrpt    5      2224.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.001 ±        0.004  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.001 ±        0.003    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      2859.561 ±      718.429  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5      2241.160 ±      555.628    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                                     N/A  thrpt    5        42.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                                      N/A  thrpt    5        33.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                         N/A  thrpt    5    845940.736 ±    81813.546   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                          N/A  thrpt    5       537.419 ±       51.923  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1000.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       533.906 ±      703.798  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       995.367 ±     1330.965    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                               N/A  thrpt    5         8.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                                N/A  thrpt    5        37.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                                        N/A  thrpt    5    287311.184 ±    25332.002   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                         N/A  thrpt    5       553.451 ±       48.796  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5      3032.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       537.390 ±      708.939  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      2952.390 ±     3984.692    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.400 ±        1.405  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         2.206 ±        7.760    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                              N/A  thrpt    5         8.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                               N/A  thrpt    5        34.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                                       N/A  thrpt    5    746257.835 ±    19139.991   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                                        N/A  thrpt    5       561.342 ±       14.654  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1184.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       606.662 ±      580.436  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5      1278.991 ±     1216.438    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                             N/A  thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                              N/A  thrpt    5        23.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                                   N/A  thrpt    5   4154008.449 ±   270069.293   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                                    N/A  thrpt    5      1330.201 ±       86.528  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                               N/A  thrpt    5       504.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'                        N/A  thrpt    5         0.018 ±        0.145  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   N/A  thrpt    5         0.007 ±        0.057    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5      1290.175 ±      579.286  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       488.966 ±      222.689    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.666 ±        5.736  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.260 ±        2.235    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                         N/A  thrpt    5        19.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                          N/A  thrpt    5        24.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                             N/A  thrpt    5   8124811.178 ±   303021.982   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                              N/A  thrpt    5       660.734 ±       24.728  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                         N/A  thrpt    5       128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       674.087 ±        0.277  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5       130.597 ±        4.937    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                                   N/A  thrpt    5        10.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                                    N/A  thrpt    5        26.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                            N/A  thrpt    5    175264.969 ±     6739.269   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                             N/A  thrpt    5      1190.912 ±       46.109  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        N/A  thrpt    5     10696.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 N/A  thrpt    5         0.024 ±        0.162  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            N/A  thrpt    5         0.216 ±        1.447    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5      1150.242 ±      712.004  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     10332.003 ±     6418.215    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         1.066 ±        7.822  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         9.538 ±       69.848    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                                  N/A  thrpt    5        17.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                                   N/A  thrpt    5        44.000                     ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                                         128  thrpt    5    908718.426 ±    25596.715   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5        50.809 ±        1.403  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5        88.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5        68.229 ±      587.476  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       119.592 ±     1029.725    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         1.000                 counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         2.000                     ms
[info] MutableBitSetBenchmark.readPlayJson                                                                              128  thrpt    5     58917.815 ±     1208.298   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      2737.065 ±       55.759  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     73120.007 ±        0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.004 ±        0.010  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.109 ±        0.260    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2722.912 ±        1.246  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     72743.553 ±     1493.014    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        40.000                 counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        33.000                     ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                                         128  thrpt    5   1032589.685 ±    23219.837   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       577.335 ±       12.932  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       880.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       605.354 ±      578.889  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       922.954 ±      885.495    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.205 ±        1.767    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         9.000                 counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        37.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                                        128  thrpt    5   1486133.958 ±     4994.629   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       415.451 ±        1.254  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       440.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       403.660 ±      579.367  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       427.547 ±      614.257    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.141 ±        1.214    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                 counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        18.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    957847.363 ±     5015.185   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5         9.738 ±        0.048  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        16.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.writePlayJson                                                                             128  thrpt    5     38105.192 ±     2146.304   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1606.596 ±       90.546  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     66350.805 ±       10.382    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.013 ±        0.072  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.537 ±        3.048    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1563.590 ±      731.408  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     64548.545 ±    28967.252    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.883  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        33.840 ±      291.377    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        23.000                 counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        30.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                              128  thrpt    5    227506.367 ±     3440.407   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       890.520 ±       13.887  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      6160.002 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.021 ±        0.150  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.146 ±        1.040    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       879.104 ±      708.671  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      6084.555 ±     4975.365    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.666 ±        5.738  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         4.605 ±       39.652    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        13.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        30.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                                   128  thrpt    5     23349.946 ±      790.143   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      1293.681 ±       44.376  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     87200.031 ±        0.101    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.016 ±        0.133  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         1.047 ±        8.956    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1288.125 ±      604.275  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     86777.926 ±    39019.882    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.066 ±        7.822  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        72.464 ±      531.667    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        19.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        39.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                              128  thrpt    5    130895.395 ±     6242.010   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1600.617 ±       66.692  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     19245.853 ±      119.249    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.015 ±        0.116  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.178 ±        1.383    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1630.438 ±      579.356  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     19613.186 ±     7318.718    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.933 ±        8.030  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        11.462 ±       98.690    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5        24.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        35.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                             128  thrpt    5    339672.250 ±     5505.351   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1617.796 ±       26.915  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      7496.001 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  128  thrpt    5         0.038 ±        0.272  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             128  thrpt    5         0.176 ±        1.268    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1631.478 ±      580.602  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      7561.330 ±     2774.152    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.799 ±        6.882  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         3.722 ±       32.051    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5        24.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        26.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    399117.860 ±    11751.549   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5      1367.586 ±       40.611  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5      5392.001 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.034 ±        0.285  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.133 ±        1.127    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                128  thrpt    5      1357.934 ±       25.691  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5      5354.051 ±       74.939    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                         128  thrpt    5         0.800 ±        6.884  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5         3.160 ±       27.207    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5        20.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                            128  thrpt    5        27.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                                  128  thrpt    5     52921.367 ±     1779.622   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1193.218 ±       39.868  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     35488.008 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.015 ±        0.129  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.444 ±        3.819    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1219.030 ±      719.578  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     36258.934 ±    21463.623    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.066 ±        7.824  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        31.936 ±      234.237    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        18.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        42.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                                    128  thrpt    5     58843.789 ±     1285.471   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1322.691 ±       29.711  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     35376.007 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.022 ±        0.155  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.589 ±        4.173    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1357.605 ±       23.836  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     36310.307 ±      670.128    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±        5.734  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        17.960 ±      154.638    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                          128  thrpt    5        20.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                           128  thrpt    5        30.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                             128  thrpt    5     96156.210 ±     4272.470   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       478.497 ±       21.204  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      7832.004 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       470.820 ±      708.655  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      7703.802 ±    11555.634    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         2.176 ±       18.738    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         7.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        30.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                                            128  thrpt    5    167890.972 ±    14617.114   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       691.298 ±       60.412  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      6480.002 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       741.599 ±      580.762  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      6944.640 ±     5177.674    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5         6.491 ±       55.886    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5        11.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        32.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                                 128  thrpt    5     21614.315 ±      771.331   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      1213.667 ±       43.825  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     88368.020 ±        0.009    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.015 ±        0.122  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         1.112 ±        8.974    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1219.225 ±      720.226  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     88808.728 ±    53416.666    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.199 ±        8.958  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        87.695 ±      654.904    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        18.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        41.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                                            128  thrpt    5    160952.679 ±     2836.343   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1035.832 ±       18.914  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     10128.003 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 128  thrpt    5         0.012 ±        0.068  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            128  thrpt    5         0.116 ±        0.660    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5      1081.861 ±      560.417  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5     10576.422 ±     5406.609    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         1.199 ±        7.565  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5        11.773 ±       74.383    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5        16.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        43.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                                           128  thrpt    5    523068.854 ±     7821.342   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       582.279 ±        8.580  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1752.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       538.657 ±      709.893  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      1621.918 ±     2150.200    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.266 ±        1.405  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         0.803 ±        4.235    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         8.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        24.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5    561208.891 ±     9668.396   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        11.409 ±        0.197  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        32.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                                128  thrpt    5     58720.661 ±     2468.761   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1054.169 ±       43.837  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     28256.007 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.019 ±        0.113  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.517 ±        3.030    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1082.015 ±      563.394  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     29014.972 ±    15554.708    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.066 ±        6.689  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        28.670 ±      179.816    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        16.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        43.000                     ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                              128  thrpt    5     77317.880 ±     1691.664   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1351.043 ±       29.461  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     27504.005 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.024 ±        0.192  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.491 ±        3.900    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1358.137 ±       22.018  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     27648.636 ±      248.531    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        13.516 ±      116.374    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        20.000                 counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        28.000                     ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                                       128  thrpt    5    150384.604 ±     2131.610   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       642.795 ±        9.095  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      6728.003 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       672.319 ±        1.679  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      7037.094 ±       97.335    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.400 ±        1.405  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         4.186 ±       14.715    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5        10.000                 counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        44.000                     ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                                      128  thrpt    5    208148.082 ±    18721.570   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       741.642 ±       66.316  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      5608.002 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.020 ±        0.176  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.156 ±        1.344    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       742.159 ±      578.769  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      5607.022 ±     4178.362    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         5.098 ±       43.895    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        11.000                 counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        34.000                     ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                                           128  thrpt    5     41166.381 ±     1231.037   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1707.115 ±       51.643  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     65264.010 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.010 ±        0.075  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.402 ±        2.905    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1700.423 ±       14.294  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     65010.813 ±     1675.033    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.882  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        30.829 ±      265.448    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        25.000                 counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        28.000                     ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                             128  thrpt    5    258685.169 ±     9185.145   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5      1217.556 ±       43.429  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      7408.002 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.019 ±        0.102  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.114 ±        0.617    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1220.725 ±      702.166  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      7425.405 ±     4204.789    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.734  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         4.043 ±       34.808    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5        18.000                 counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        33.000                     ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                                      128  thrpt    5    500172.487 ±    12579.606   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       401.679 ±        9.964  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1264.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       403.390 ±      578.345  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1268.790 ±     1807.872    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±        1.405  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.839 ±        4.421    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         6.000                 counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        26.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    589691.275 ±    19043.110   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       311.711 ±       10.215  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       832.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       336.774 ±        1.303  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       898.948 ±       28.461    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.266 ±        1.405  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.713 ±        3.759    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         5.000                 counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        14.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    644420.768 ±    10229.613   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                                          128  thrpt    5     29969.204 ±     1398.790   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1493.246 ±       69.112  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     78419.328 ±       27.334    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.043 ±        0.355  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         2.241 ±       18.568    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1493.744 ±      698.082  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     78506.151 ±    38924.831    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.883  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        42.906 ±      369.430    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        22.000                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        34.000                     ms
[info] PrimitivesBenchmark.readCirce                                                                                    N/A  thrpt    5    629624.825 ±    19193.167   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1920.034 ±       59.459  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4800.001 ±        0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.026 ±        0.198  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.066 ±        0.499    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1904.681 ±      725.565  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4760.132 ±     1737.277    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.681 ±       14.472    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        28.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        27.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                                             N/A  thrpt    5   1355599.100 ±    24360.341   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5      1026.842 ±       17.643  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5      1192.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.043 ±        0.295  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5         0.050 ±        0.342    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1081.544 ±      574.326  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      1256.012 ±      687.274    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         1.198 ±        7.561  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         1.399 ±        8.837    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5        16.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                            N/A  thrpt    5   7502732.712 ±    54886.506   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       228.809 ±        1.780  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        48.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       269.627 ±      580.393  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        56.598 ±      121.833    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         4.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5        11.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                                 N/A  thrpt    5    206190.085 ±     7051.615   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1436.012 ±       49.189  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5     10960.002 ±        0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.035 ±        0.249  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.271 ±        1.925    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1424.728 ±      597.538  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5     10869.682 ±     4325.331    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.933 ±        8.031  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         7.212 ±       62.095    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5        21.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        40.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                                   N/A  thrpt    5    857859.865 ±    23190.236   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                                    N/A  thrpt    5      1295.046 ±       34.716  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2376.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.035 ±        0.302  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.065 ±        0.552    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1288.666 ±      598.196  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2363.588 ±     1071.840    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.800 ±        6.884  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.480 ±       12.746    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                         N/A  thrpt    5        19.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                          N/A  thrpt    5        33.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                            N/A  thrpt    5   2142561.855 ±   128298.598   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       882.145 ±       53.221  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5       648.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 N/A  thrpt    5         0.024 ±        0.205  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            N/A  thrpt    5         0.017 ±        0.148    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       875.552 ±      701.046  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5       644.339 ±      538.796    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         0.932 ±        8.029  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         0.702 ±        6.043    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5        13.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        45.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5   5744760.197 ±    64574.515   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       642.415 ±        6.864  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5       176.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       605.533 ±      579.464  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       165.971 ±      159.714    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         9.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        27.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5   5743102.340 ±    65119.914   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5       350.255 ±        3.984  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5        96.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       403.744 ±      578.954  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       110.739 ±      160.192    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.036 ±        0.314    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5         6.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                          N/A  thrpt    5        17.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                                N/A  thrpt    5    293058.313 ±    12863.351   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                                 N/A  thrpt    5      1693.547 ±       74.592  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            N/A  thrpt    5      9096.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.043 ±        0.364  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.230 ±        1.951    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1697.248 ±       39.417  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      9116.347 ±      201.758    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.932 ±        8.028  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         5.110 ±       43.999    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                                      N/A  thrpt    5        25.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                                       N/A  thrpt    5        38.000                     ms
[info] SetOfIntsBenchmark.readCirce                                                                                     128  thrpt    5     55481.341 ±      797.078   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                      128  thrpt    5      1586.153 ±       22.783  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                                 128  thrpt    5     44992.007 ±        0.001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.013 ±        0.076  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.372 ±        2.147    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      1563.909 ±      728.664  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     44349.733 ±    20225.784    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                         128  thrpt    5         0.666 ±        5.736  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                    128  thrpt    5        19.017 ±      163.745    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                                           128  thrpt    5        23.000                 counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                                            128  thrpt    5        25.000                     ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                              128  thrpt    5     81354.149 ±     1969.622   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                               128  thrpt    5      1252.790 ±       30.612  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          128  thrpt    5     24240.005 ±        0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.014 ±        0.100  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.263 ±        1.942    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1220.437 ±      715.516  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     23626.628 ±    14204.175    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.881  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        15.454 ±      133.066    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                                    128  thrpt    5        18.000                 counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                                     128  thrpt    5        40.000                     ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                             128  thrpt    5    107445.535 ±     9743.146   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                              128  thrpt    5      1578.357 ±      143.566  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         128  thrpt    5     23120.004 ±        0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.032 ±        0.164  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.478 ±        2.482    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1563.782 ±      728.899  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     22882.658 ±     9503.862    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.735  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        10.153 ±       87.420    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                                   128  thrpt    5        23.000                 counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                                    128  thrpt    5        27.000                     ms
[info] SetOfIntsBenchmark.readPlayJson                                                                                  128  thrpt    5     40770.057 ±     1081.562   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                   128  thrpt    5      2143.980 ±       56.296  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              128  thrpt    5     82760.010 ±        0.001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.025 ±        0.173  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.955 ±        6.649    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2178.689 ±      717.598  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     84103.457 ±    27809.299    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                                        128  thrpt    5        32.000                 counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                                         128  thrpt    5        27.000                     ms
[info] SetOfIntsBenchmark.writeCirce                                                                                    128  thrpt    5    241367.142 ±    10542.070   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                     128  thrpt    5      1148.400 ±       50.364  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                128  thrpt    5      7488.002 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         128  thrpt    5         0.020 ±        0.168  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    128  thrpt    5         0.129 ±        1.100    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1152.723 ±      711.499  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5      7519.114 ±     4719.137    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                        128  thrpt    5         0.666 ±        5.736  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                   128  thrpt    5         4.411 ±       37.977    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                                          128  thrpt    5        17.000                 counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                                           128  thrpt    5        32.000                     ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                             128  thrpt    5    470606.003 ±     5156.129   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       418.599 ±        4.618  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      1400.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       402.851 ±      578.017  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1347.990 ±     1945.840    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                                   128  thrpt    5         6.000                 counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                                    128  thrpt    5        26.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                                            128  thrpt    5    799241.170 ±    34673.099   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       430.620 ±       18.753  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5       848.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       471.062 ±      710.016  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       930.993 ±     1444.154    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±        1.147  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         0.260 ±        2.238    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                  128  thrpt    5         7.000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                   128  thrpt    5        21.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                    128  thrpt    5    630327.933 ±     7164.032   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     128  thrpt    5         6.408 ±        0.073  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                128  thrpt    5        16.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          128  thrpt    5           ≈ 0                 counts
[info] SetOfIntsBenchmark.writePlayJson                                                                                 128  thrpt    5     29949.630 ±     1096.905   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                  128  thrpt    5      1492.252 ±       54.708  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     78419.302 ±       27.382    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.034 ±        0.288  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         1.764 ±       15.093    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1493.523 ±      695.772  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     78529.494 ±    38196.261    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.932 ±        8.028  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        49.541 ±      426.565    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                                       128  thrpt    5        22.000                 counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                                        128  thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                            128  thrpt    5   4833183.067 ±   139570.357   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      3562.346 ±      102.230  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5      1160.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.004 ±        0.006  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.001 ±        0.002    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3540.205 ±      717.247  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      1152.913 ±      242.428    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        52.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        51.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                                      128  thrpt    5   7687966.461 ±   230374.536   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                       128  thrpt    5       820.689 ±       24.476  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  128  thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.096 ±        0.826  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.020 ±        0.169    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       802.722 ±      695.295  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       164.216 ±      139.776    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.732 ±        7.391  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.353 ±        1.500    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                            128  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                             128  thrpt    5        56.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                                     128  thrpt    5   3839441.602 ±    71810.936   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      2165.990 ±       40.617  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5       888.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.030 ±        0.234  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.012 ±        0.096    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      2178.231 ±      716.906  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       893.139 ±      300.348    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        32.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                                    128  thrpt    5   7514548.922 ±   866032.413   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       802.030 ±       92.418  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.015 ±        0.133  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.003 ±        0.029    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       810.321 ±      722.043  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       170.329 ±      163.400    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.066 ±        6.437  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.224 ±        1.362    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        29.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                         128  thrpt    5   4686022.693 ±   114597.225   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2524.688 ±       60.604  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5       848.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.002 ±        0.004  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.001 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2586.885 ±      718.750  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       869.062 ±      251.541    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        38.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        31.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                           128  thrpt    5   3322431.353 ±    99445.440   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       793.690 ±       24.005  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5       376.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.036 ±        0.312  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.017 ±        0.147    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       808.909 ±      703.825  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       383.178 ±      332.443    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         0.378 ±        3.254    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        37.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                                     128  thrpt    5   7255523.475 ±    52256.148   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       700.694 ±        5.027  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       666.910 ±        1.208  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       144.672 ±        0.980    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.400 ±        1.405  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.087 ±        0.305    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                           128  thrpt    5        10.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                            128  thrpt    5        51.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                                    128  thrpt    5   3198995.782 ±    73389.171   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       992.040 ±       23.101  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5       488.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.080 ±        0.668  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.040 ±        0.330    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       946.703 ±      592.776  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       465.696 ±      291.333    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±        8.031  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.461 ±        3.971    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        14.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        35.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   9640082.122 ±   956390.306   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       931.030 ±       91.816  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.026 ±        0.225  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.004 ±        0.038    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       946.873 ±      590.630  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       155.012 ±      105.356    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±        6.688  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.151 ±        1.086    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        14.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        30.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   8082527.101 ±    40111.591   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                                        128  thrpt    5   3137389.951 ±   206485.550   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1004.796 ±       66.261  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5       504.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.035 ±        0.295  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.017 ±        0.146    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1013.850 ±      940.501  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       508.065 ±      456.820    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.932 ±        8.029  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.467 ±        4.024    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        15.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        36.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                         128  thrpt    5    701649.357 ±    11397.392   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1230.448 ±       20.030  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      2760.001 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.013 ±        0.090  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.030 ±        0.204    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1220.772 ±      702.136  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      2739.295 ±     1604.382    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±        5.736  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.502 ±       12.935    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                               128  thrpt    5        18.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                                128  thrpt    5        30.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                                   128  thrpt    5   1847331.051 ±    22745.150   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    128  thrpt    5       516.452 ±        6.414  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               128  thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              128  thrpt    5       467.217 ±      703.789  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       398.448 ±      605.111    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                         128  thrpt    5         7.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                          128  thrpt    5        33.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                                  128  thrpt    5   1144682.285 ±    25244.835   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       791.252 ±       17.241  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      1088.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.015 ±        0.126  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.020 ±        0.172    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       808.911 ±      704.243  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1113.356 ±      992.589    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         1.107 ±        9.530    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5        12.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        42.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                                 128  thrpt    5   2439141.186 ±   106842.661   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       681.921 ±       29.626  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       674.148 ±        0.500  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       435.030 ±       19.351    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        26.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                                      128  thrpt    5   1135733.175 ±    22557.924   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5       808.174 ±       15.453  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5      1120.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.046 ±        0.393  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.063 ±        0.545    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       808.935 ±      718.239  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1121.254 ±      999.549    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.800 ±        6.884  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         1.110 ±        9.553    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        12.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        43.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                                        128  thrpt    5   1731953.177 ±    59682.184   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5      1452.660 ±       49.985  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      1320.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.020 ±        0.160  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.018 ±        0.147    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1493.822 ±      703.157  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1357.877 ±      656.186    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.736  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.612 ±        5.272    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        22.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        32.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                                  128  thrpt    5   2873396.097 ±    38798.025   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   128  thrpt    5       744.863 ±        9.972  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              128  thrpt    5       408.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             128  thrpt    5       734.209 ±      574.794  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       402.243 ±      317.146    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.799 ±        6.883  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.438 ±        3.774    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                        128  thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                         128  thrpt    5        51.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                                 128  thrpt    5   2397951.843 ±    56444.305   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1133.501 ±       26.987  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       744.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.030 ±        0.252  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.019 ±        0.164    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1083.624 ±      590.340  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       710.923 ±      373.039    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.799 ±        6.883  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.521 ±        4.482    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5        16.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        36.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                                128  thrpt    5   2887340.731 ±   100520.005   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       748.435 ±       25.772  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       408.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.009 ±        0.078  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.005 ±        0.043    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       808.630 ±      714.118  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       440.977 ±      392.618    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.199 ±        6.123  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.657 ±        3.366    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        12.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        34.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   3001050.813 ±    17854.983   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                                     128  thrpt    5   2392029.059 ±    73220.994   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1154.891 ±       35.796  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5       760.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.027 ±        0.229  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.018 ±        0.150    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1151.539 ±      709.683  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       758.417 ±      485.865    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.880  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.532 ±        4.577    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        17.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        34.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                                    N/A  thrpt    5     10998.223 ±     2185.488   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1594.227 ±      309.996  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5    228146.115 ±      933.167    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.031 ±        0.084  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         4.281 ±       11.599    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1561.751 ±      726.743  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5    223442.174 ±    91474.941    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5        96.616 ±      831.895    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        23.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        53.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                             N/A  thrpt    5     14404.716 ±      279.437   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5       203.627 ±        3.885  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5     22249.612 ±       33.684    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       201.414 ±      707.997  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5     22080.066 ±    77615.290    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5         3.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                            N/A  thrpt    5     36574.394 ±      739.195   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       338.702 ±        6.887  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     14576.012 ±        0.006    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       337.036 ±        0.147  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     14504.633 ±      292.529    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         5.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                                 N/A  thrpt    5      2941.834 ±      824.517   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5       963.885 ±      269.608  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5    515508.928 ±      385.272    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.012 ±        0.082  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         6.361 ±       42.290    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1011.891 ±       25.062  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    543626.399 ±   162455.784    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.933 ±        8.032  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       481.946 ±     4149.697    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5        15.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        88.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                            N/A  thrpt    5     53916.385 ±     1091.823   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       688.499 ±       14.145  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     20100.008 ±        0.094    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       737.055 ±      576.809  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     21520.791 ±    16927.208    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         0.799 ±        6.883  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5        23.132 ±      199.174    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5        11.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        53.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5     85577.339 ±     2440.079   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       561.112 ±       16.110  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5     10320.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       605.490 ±      579.269  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     11140.713 ±    10711.733    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         9.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        27.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5     90701.225 ±     2423.099   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5        11.063 ±        0.289  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5       192.004 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.readCirce                                                                              128  thrpt    5    341517.990 ±    11316.681   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1829.810 ±       61.021  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      8432.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.024 ±        0.178  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.109 ±        0.826    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1837.587 ±      720.952  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      8469.418 ±     3387.088    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         3.097 ±       26.669    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        27.000                 counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        24.000                     ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                                       128  thrpt    5    384422.901 ±     5704.189   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       468.919 ±        6.998  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1920.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       470.769 ±      708.694  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1929.759 ±     2932.194    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±        1.147  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.548 ±        4.723    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         7.000                 counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        30.000                     ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5   1098208.827 ±    20962.582   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       574.897 ±       11.079  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       824.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       606.628 ±      580.317  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       870.092 ±      839.561    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         9.000                 counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        26.000                     ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     97376.286 ±     2973.598   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      3385.739 ±      103.713  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     54720.004 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.002 ±        0.002  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.039 ±        0.037    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      3404.141 ±        1.899  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     55020.200 ±     1685.534    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        50.000                 counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        40.000                     ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                             128  thrpt    5    321851.458 ±     4535.305   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       505.517 ±        6.932  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      2472.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       471.908 ±      711.194  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      2307.108 ±     3469.937    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         7.000                 counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        23.000                     ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    676885.845 ±    33558.705   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       516.088 ±       25.797  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1200.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       537.824 ±      707.994  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1248.970 ±     1625.552    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±        1.405  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.615 ±        3.245    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         8.000                 counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        35.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5   1956798.895 ±    33918.839   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       905.057 ±       16.100  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       728.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.019 ±        0.133  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.016 ±        0.107    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       946.252 ±      589.111  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       760.946 ±      469.317    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.066 ±        6.438  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.857 ±        5.179    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5        14.000                 counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        31.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5   2066347.063 ±     2208.269   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5    377415.942 ±     3488.723   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       563.911 ±        5.250  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      2352.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       605.401 ±      579.149  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      2526.142 ±     2429.525    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         9.000                 counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        35.000                     ms
[info] Benchmark result is saved to jdk10.json
[success] Total time: 5636 s, completed Apr 27, 2018 12:50:24 AM
