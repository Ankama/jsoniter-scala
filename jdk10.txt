[info] Loading settings from idea.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed May 7, 2018 2:33:57 AM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:987:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1073:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:445:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:453:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:964:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.25.3-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.25.3-SNAPSHOT.jar ...
[info] Compiling 57 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("geometry");
[info]       private[this] val r1: Array[String] = Array("coordinates");
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d8(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d11(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d14(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d6(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.geoJSONCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e5(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e8(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e14(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e6(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.geoJSONCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:65:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:66:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:70:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:71:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:72:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:73:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:74:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:75:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:76:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.3-SNAPSHOT.jar ...
[info] Compiling 49 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 421 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 617 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.25.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/jdk-10/bin/java -prof gc -rf json -rff jdk10.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 01:10:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293000.295 ops/s
[info] # Warmup Iteration   2: 641757.702 ops/s
[info] # Warmup Iteration   3: 640513.871 ops/s
[info] # Warmup Iteration   4: 646539.692 ops/s
[info] # Warmup Iteration   5: 644605.215 ops/s
[info] Iteration   1: 646555.184 ops/s
[info]                  ·gc.alloc.rate:            1718.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3301.555 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 641164.991 ops/s
[info]                  ·gc.alloc.rate:                   1704.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4993.967 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.176 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 650325.992 ops/s
[info]                  ·gc.alloc.rate:                                  1728.757 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.176 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.427 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3298.433 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 652125.986 ops/s
[info]                  ·gc.alloc.rate:                                  1733.751 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4184.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4934.176 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 656836.110 ops/s
[info]                  ·gc.alloc.rate:            1745.827 MB/sec
[info]                  ·gc.alloc.rate.norm:       4184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4898.687 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   649401.652 ±(99.9%) 22739.392 ops/s [Average]
[info]   (min, avg, max) = (641164.991, 649401.652, 656836.110), stdev = 5905.348
[info]   CI (99.9%): [626662.261, 672141.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1726.286 ±(99.9%) 60.283 MB/sec [Average]
[info]   (min, avg, max) = (1704.398, 1726.286, 1745.827), stdev = 15.655
[info]   CI (99.9%): [1666.003, 1786.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4184.001, 4184.001, 4184.001), stdev = 0.001
[info]   CI (99.9%): [4184.001, 4184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.304 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.176), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.085 ±(99.9%) 0.735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.427), stdev = 0.191
[info]   CI (99.9%): [≈ 0, 0.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1768.411 ±(99.9%) 1437.383 MB/sec [Average]
[info]   (min, avg, max) = (1356.208, 1768.411, 2044.607), stdev = 373.284
[info]   CI (99.9%): [331.028, 3205.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4285.363 ±(99.9%) 3466.197 B/op [Average]
[info]   (min, avg, max) = (3298.433, 4285.363, 4993.967), stdev = 900.160
[info]   CI (99.9%): [819.167, 7751.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.635 ±(99.9%) 14.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.635, 8.176), stdev = 3.656
[info]   CI (99.9%): [≈ 0, 15.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 12.000), stdev = 4.506
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.24% complete, ETA 01:52:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 341668.407 ops/s
[info] # Warmup Iteration   2: 1407965.869 ops/s
[info] # Warmup Iteration   3: 1415191.781 ops/s
[info] # Warmup Iteration   4: 1411474.796 ops/s
[info] # Warmup Iteration   5: 1428258.479 ops/s
[info] Iteration   1: 1432298.646 ops/s
[info]                  ·gc.alloc.rate:            1019.092 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 743.700 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1411506.338 ops/s
[info]                  ·gc.alloc.rate:            1004.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1509.205 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1432535.473 ops/s
[info]                  ·gc.alloc.rate:            1019.473 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 743.558 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1422774.769 ops/s
[info]                  ·gc.alloc.rate:                   1012.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1498.040 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1432842.482 ops/s
[info]                  ·gc.alloc.rate:            1019.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 744.150 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1426391.541 ±(99.9%) 35963.177 ops/s [Average]
[info]   (min, avg, max) = (1411506.338, 1426391.541, 1432842.482), stdev = 9339.523
[info]   CI (99.9%): [1390428.365, 1462354.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1014.932 ±(99.9%) 25.877 MB/sec [Average]
[info]   (min, avg, max) = (1004.181, 1014.932, 1019.494), stdev = 6.720
[info]   CI (99.9%): [989.055, 1040.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.634 ±(99.9%) 1427.177 MB/sec [Average]
[info]   (min, avg, max) = (676.695, 947.634, 1354.146), stdev = 370.633
[info]   CI (99.9%): [≈ 0, 2374.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1047.731 ±(99.9%) 1602.597 B/op [Average]
[info]   (min, avg, max) = (743.558, 1047.731, 1509.205), stdev = 416.189
[info]   CI (99.9%): [≈ 0, 2650.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.147 ±(99.9%) 1.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.737), stdev = 0.330
[info]   CI (99.9%): [≈ 0, 1.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.47% complete, ETA 01:51:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2249757.992 ops/s
[info] # Warmup Iteration   2: 3312803.500 ops/s
[info] # Warmup Iteration   3: 3222445.220 ops/s
[info] # Warmup Iteration   4: 3256239.851 ops/s
[info] # Warmup Iteration   5: 3343510.140 ops/s
[info] Iteration   1: 3344089.911 ops/s
[info]                  ·gc.alloc.rate:      220.941 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3292508.252 ops/s
[info]                  ·gc.alloc.rate:            217.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      679.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 324.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 3155051.246 ops/s
[info]                  ·gc.alloc.rate:      208.460 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3323580.707 ops/s
[info]                  ·gc.alloc.rate:      219.598 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3241267.281 ops/s
[info]                  ·gc.alloc.rate:            214.228 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 329.609 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3271299.479 ±(99.9%) 291336.082 ops/s [Average]
[info]   (min, avg, max) = (3155051.246, 3271299.479, 3344089.911), stdev = 75659.055
[info]   CI (99.9%): [2979963.398, 3562635.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   216.174 ±(99.9%) 19.244 MB/sec [Average]
[info]   (min, avg, max) = (208.460, 216.174, 220.941), stdev = 4.998
[info]   CI (99.9%): [196.931, 235.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.598 ±(99.9%) 1432.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.598, 679.034), stdev = 371.901
[info]   CI (99.9%): [≈ 0, 1703.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   130.816 ±(99.9%) 689.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 130.816, 329.609), stdev = 179.137
[info]   CI (99.9%): [≈ 0, 820.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.71% complete, ETA 01:51:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27128.590 ops/s
[info] # Warmup Iteration   2: 154184.465 ops/s
[info] # Warmup Iteration   3: 151682.418 ops/s
[info] # Warmup Iteration   4: 157320.428 ops/s
[info] # Warmup Iteration   5: 158087.625 ops/s
[info] Iteration   1: 153366.705 ops/s
[info]                  ·gc.alloc.rate:                   1229.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              12616.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13896.980 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.836 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 158360.302 ops/s
[info]                  ·gc.alloc.rate:            1269.164 MB/sec
[info]                  ·gc.alloc.rate.norm:       12616.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13459.409 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 158372.457 ops/s
[info]                  ·gc.alloc.rate:            1269.532 MB/sec
[info]                  ·gc.alloc.rate.norm:       12616.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13452.194 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 158566.134 ops/s
[info]                  ·gc.alloc.rate:                   1270.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              12616.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13435.399 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 46.283 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 158065.468 ops/s
[info]                  ·gc.alloc.rate:                                  1266.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12616.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.932 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.818 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13570.923 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   157346.213 ±(99.9%) 8593.835 ops/s [Average]
[info]   (min, avg, max) = (153366.705, 157346.213, 158566.134), stdev = 2231.792
[info]   CI (99.9%): [148752.378, 165940.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1261.254 ±(99.9%) 68.219 MB/sec [Average]
[info]   (min, avg, max) = (1229.670, 1261.254, 1270.983), stdev = 17.716
[info]   CI (99.9%): [1193.035, 1329.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12616.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12616.003, 12616.003, 12616.003), stdev = 0.001
[info]   CI (99.9%): [12616.002, 12616.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.186 ±(99.9%) 1.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.186, 0.932), stdev = 0.417
[info]   CI (99.9%): [≈ 0, 1.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.712 ±(99.9%) 15.367 MB/sec [Average]
[info]   (min, avg, max) = (1353.532, 1355.712, 1362.818), stdev = 3.991
[info]   CI (99.9%): [1340.346, 1371.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   13562.981 ±(99.9%) 747.899 B/op [Average]
[info]   (min, avg, max) = (13435.399, 13562.981, 13896.980), stdev = 194.227
[info]   CI (99.9%): [12815.082, 14310.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   10.624 ±(99.9%) 77.601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.624, 46.283), stdev = 20.153
[info]   CI (99.9%): [≈ 0, 88.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 11.000), stdev = 2.702
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0.94% complete, ETA 01:51:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 198903.360 ops/s
[info] # Warmup Iteration   2: 489515.410 ops/s
[info] # Warmup Iteration   3: 500593.268 ops/s
[info] # Warmup Iteration   4: 502114.113 ops/s
[info] # Warmup Iteration   5: 501133.513 ops/s
[info] Iteration   1: 500091.028 ops/s
[info]                  ·gc.alloc.rate:            1446.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       4552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4268.376 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 501653.526 ops/s
[info]                  ·gc.alloc.rate:            1450.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       4552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4255.036 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 505642.393 ops/s
[info]                  ·gc.alloc.rate:            1462.228 MB/sec
[info]                  ·gc.alloc.rate.norm:       4552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4221.282 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 505337.435 ops/s
[info]                  ·gc.alloc.rate:                                  1461.633 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4552.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6356.565 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                10.373 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 507726.690 ops/s
[info]                  ·gc.alloc.rate:            1468.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       4552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4224.807 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   504090.215 ±(99.9%) 12042.072 ops/s [Average]
[info]   (min, avg, max) = (500091.028, 504090.215, 507726.690), stdev = 3127.288
[info]   CI (99.9%): [492048.143, 516132.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1457.908 ±(99.9%) 34.549 MB/sec [Average]
[info]   (min, avg, max) = (1446.428, 1457.908, 1468.337), stdev = 8.972
[info]   CI (99.9%): [1423.359, 1492.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4552.001, 4552.001, 4552.001), stdev = 0.001
[info]   CI (99.9%): [4552.001, 4552.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.182), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.113 ±(99.9%) 0.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.566), stdev = 0.253
[info]   CI (99.9%): [≈ 0, 1.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.484 ±(99.9%) 1176.625 MB/sec [Average]
[info]   (min, avg, max) = (1355.992, 1494.484, 2041.073), stdev = 305.566
[info]   CI (99.9%): [317.860, 2671.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4665.213 ±(99.9%) 3641.572 B/op [Average]
[info]   (min, avg, max) = (4221.282, 4665.213, 6356.565), stdev = 945.705
[info]   CI (99.9%): [1023.642, 8306.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.075 ±(99.9%) 17.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.075, 10.373), stdev = 4.639
[info]   CI (99.9%): [≈ 0, 19.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 8.000), stdev = 2.510
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.18% complete, ETA 01:50:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ce803297/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 409100.676 ops/s
[info] # Warmup Iteration   2: 1698621.804 ops/s
[info] # Warmup Iteration   3: 1715506.940 ops/s
[info] # Warmup Iteration   4: 1733600.196 ops/s
[info] # Warmup Iteration   5: 1721866.789 ops/s
[info] Iteration   1: 1717460.582 ops/s
[info]                  ·gc.alloc.rate:            663.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 620.237 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1727405.687 ops/s
[info]                  ·gc.alloc.rate:            667.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 616.668 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1713877.802 ops/s
[info]                  ·gc.alloc.rate:            662.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 621.534 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1728371.840 ops/s
[info]                  ·gc.alloc.rate:            667.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 616.321 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1743123.242 ops/s
[info]                  ·gc.alloc.rate:            673.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       608.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 611.091 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1726047.831 ±(99.9%) 43932.156 ops/s [Average]
[info]   (min, avg, max) = (1713877.802, 1726047.831, 1743123.242), stdev = 11409.041
[info]   CI (99.9%): [1682115.675, 1769979.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   666.712 ±(99.9%) 16.917 MB/sec [Average]
[info]   (min, avg, max) = (662.001, 666.712, 673.275), stdev = 4.393
[info]   CI (99.9%): [649.795, 683.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   608.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (608.000, 608.000, 608.000), stdev = 0.001
[info]   CI (99.9%): [608.000, 608.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.744 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (676.697, 676.744, 676.790), stdev = 0.039
[info]   CI (99.9%): [676.595, 676.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   617.170 ±(99.9%) 15.686 B/op [Average]
[info]   (min, avg, max) = (611.091, 617.170, 621.534), stdev = 4.074
[info]   CI (99.9%): [601.484, 632.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.41% complete, ETA 01:50:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8189448.842 ops/s
[info] # Warmup Iteration   2: 5810766.458 ops/s
[info] # Warmup Iteration   3: 5843896.277 ops/s
[info] # Warmup Iteration   4: 6024691.055 ops/s
[info] # Warmup Iteration   5: 5996497.330 ops/s
[info] Iteration   1: 6027998.791 ops/s
[info]                  ·gc.alloc.rate:      306.322 MB/sec
[info]                  ·gc.alloc.rate.norm: 80.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5988070.179 ops/s
[info]                  ·gc.alloc.rate:            304.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 178.238 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 6024884.398 ops/s
[info]                  ·gc.alloc.rate:      306.192 MB/sec
[info]                  ·gc.alloc.rate.norm: 80.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5998521.459 ops/s
[info]                  ·gc.alloc.rate:            304.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 177.744 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5970612.746 ops/s
[info]                  ·gc.alloc.rate:      303.455 MB/sec
[info]                  ·gc.alloc.rate.norm: 80.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   6002017.515 ±(99.9%) 94142.753 ops/s [Average]
[info]   (min, avg, max) = (5970612.746, 6002017.515, 6027998.791), stdev = 24448.574
[info]   CI (99.9%): [5907874.762, 6096160.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   305.028 ±(99.9%) 4.721 MB/sec [Average]
[info]   (min, avg, max) = (303.455, 305.028, 306.322), stdev = 1.226
[info]   CI (99.9%): [300.307, 309.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.068 ±(99.9%) 1429.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.068, 678.070), stdev = 371.175
[info]   CI (99.9%): [≈ 0, 1700.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   71.196 ±(99.9%) 375.399 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.196, 178.238), stdev = 97.490
[info]   CI (99.9%): [≈ 0, 446.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.65% complete, ETA 01:50:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9169133.036 ops/s
[info] # Warmup Iteration   2: 7492380.437 ops/s
[info] # Warmup Iteration   3: 7446085.558 ops/s
[info] # Warmup Iteration   4: 7446284.254 ops/s
[info] # Warmup Iteration   5: 7422766.651 ops/s
[info] Iteration   1: 7197283.172 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7548124.879 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7548788.021 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7550373.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7571255.493 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   7483165.096 ±(99.9%) 616498.675 ops/s [Average]
[info]   (min, avg, max) = (7197283.172, 7483165.096, 7571255.493), stdev = 160102.748
[info]   CI (99.9%): [6866666.421, 8099663.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.88% complete, ETA 01:49:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69278.253 ops/s
[info] # Warmup Iteration   2: 291922.242 ops/s
[info] # Warmup Iteration   3: 293490.622 ops/s
[info] # Warmup Iteration   4: 302572.381 ops/s
[info] # Warmup Iteration   5: 303672.883 ops/s
[info] Iteration   1: 298855.002 ops/s
[info]                  ·gc.alloc.rate:            1026.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       5408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3564.246 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 302706.153 ops/s
[info]                  ·gc.alloc.rate:                   1039.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              5408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7041.305 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 300559.996 ops/s
[info]                  ·gc.alloc.rate:                   1032.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              5408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7091.643 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 304617.572 ops/s
[info]                  ·gc.alloc.rate:            1046.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       5408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3496.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 291617.423 ops/s
[info]                  ·gc.alloc.rate:                   1001.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              5408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7308.866 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.595 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   299671.229 ±(99.9%) 19252.931 ops/s [Average]
[info]   (min, avg, max) = (291617.423, 299671.229, 304617.572), stdev = 4999.925
[info]   CI (99.9%): [280418.298, 318924.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1029.543 ±(99.9%) 65.972 MB/sec [Average]
[info]   (min, avg, max) = (1001.956, 1029.543, 1046.579), stdev = 17.133
[info]   CI (99.9%): [963.571, 1095.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5408.001, 5408.001, 5408.002), stdev = 0.001
[info]   CI (99.9%): [5408.001, 5408.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.096 ±(99.9%) 1428.455 MB/sec [Average]
[info]   (min, avg, max) = (676.720, 1083.096, 1354.134), stdev = 370.965
[info]   CI (99.9%): [≈ 0, 2511.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5700.577 ±(99.9%) 7638.371 B/op [Average]
[info]   (min, avg, max) = (3496.825, 5700.577, 7308.866), stdev = 1983.661
[info]   CI (99.9%): [≈ 0, 13338.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.109 ±(99.9%) 7.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.109, 3.595), stdev = 1.926
[info]   CI (99.9%): [≈ 0, 9.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.12% complete, ETA 01:49:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 814395.216 ops/s
[info] # Warmup Iteration   2: 1392791.562 ops/s
[info] # Warmup Iteration   3: 1404790.514 ops/s
[info] # Warmup Iteration   4: 1412930.330 ops/s
[info] # Warmup Iteration   5: 1383516.917 ops/s
[info] Iteration   1: 1406387.283 ops/s
[info]                  ·gc.alloc.rate:                                  2172.633 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2280.335 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.727 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 1405566.221 ops/s
[info]                  ·gc.alloc.rate:                                  2171.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3052.223 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1409146.618 ops/s
[info]                  ·gc.alloc.rate:            2177.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       2432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2283.281 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1432801.584 ops/s
[info]                  ·gc.alloc.rate:                                  2213.738 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2245.617 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1435085.622 ops/s
[info]                  ·gc.alloc.rate:                                  2217.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2242.108 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1417797.466 ±(99.9%) 57070.021 ops/s [Average]
[info]   (min, avg, max) = (1405566.221, 1417797.466, 1435085.622), stdev = 14820.903
[info]   CI (99.9%): [1360727.445, 1474867.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2190.512 ±(99.9%) 88.160 MB/sec [Average]
[info]   (min, avg, max) = (2171.430, 2190.512, 2217.117), stdev = 22.895
[info]   CI (99.9%): [2102.351, 2278.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2432.000, 2432.000, 2432.000), stdev = 0.001
[info]   CI (99.9%): [2432.000, 2432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.025 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.981 ±(99.9%) 1175.839 MB/sec [Average]
[info]   (min, avg, max) = (2037.142, 2178.981, 2725.201), stdev = 305.362
[info]   CI (99.9%): [1003.141, 3354.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2420.713 ±(99.9%) 1361.350 B/op [Average]
[info]   (min, avg, max) = (2242.108, 2420.713, 3052.223), stdev = 353.538
[info]   CI (99.9%): [1059.363, 3782.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.745 ±(99.9%) 6.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.745, 3.727), stdev = 1.667
[info]   CI (99.9%): [≈ 0, 7.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.775
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.35% complete, ETA 01:49:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.964 ops/s
[info] # Warmup Iteration   2: 9177542.522 ops/s
[info] # Warmup Iteration   3: 9199101.883 ops/s
[info] # Warmup Iteration   4: 9611322.685 ops/s
[info] # Warmup Iteration   5: 9333002.164 ops/s
[info] Iteration   1: 9699092.684 ops/s
[info]                  ·gc.alloc.rate:            1183.173 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 219.003 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 9623527.272 ops/s
[info]                  ·gc.alloc.rate:            1173.976 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 220.724 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 9395123.350 ops/s
[info]                  ·gc.alloc.rate:            1146.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 113.041 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 9612720.496 ops/s
[info]                  ·gc.alloc.rate:            1172.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 220.961 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 9450828.047 ops/s
[info]                  ·gc.alloc.rate:                   1153.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        224.757 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9556258.370 ±(99.9%) 491597.573 ops/s [Average]
[info]   (min, avg, max) = (9395123.350, 9556258.370, 9699092.684), stdev = 127666.329
[info]   CI (99.9%): [9064660.797, 10047855.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1165.815 ±(99.9%) 59.697 MB/sec [Average]
[info]   (min, avg, max) = (1146.003, 1165.815, 1183.173), stdev = 15.503
[info]   CI (99.9%): [1106.119, 1225.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1214.692 ±(99.9%) 1162.338 MB/sec [Average]
[info]   (min, avg, max) = (674.717, 1214.692, 1350.127), stdev = 301.856
[info]   CI (99.9%): [52.354, 2377.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   199.697 ±(99.9%) 186.709 B/op [Average]
[info]   (min, avg, max) = (113.041, 199.697, 224.757), stdev = 48.488
[info]   CI (99.9%): [12.988, 386.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.133 ±(99.9%) 1.146 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.200, 11.000), stdev = 2.387
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.59% complete, ETA 01:49:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 694307.811 ops/s
[info] # Warmup Iteration   2: 2166653.799 ops/s
[info] # Warmup Iteration   3: 2162848.321 ops/s
[info] # Warmup Iteration   4: 2180450.364 ops/s
[info] # Warmup Iteration   5: 2138567.395 ops/s
[info] Iteration   1: 2186350.894 ops/s
[info]                  ·gc.alloc.rate:                   1533.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        974.793 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.479 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 2123205.487 ops/s
[info]                  ·gc.alloc.rate:                   1489.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.851 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1505.552 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 2186978.146 ops/s
[info]                  ·gc.alloc.rate:                                  1533.846 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       977.964 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.876 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2163647.040 ops/s
[info]                  ·gc.alloc.rate:                                  1517.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.171 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       991.416 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2149770.912 ops/s
[info]                  ·gc.alloc.rate:                                  1508.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       997.795 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2161990.496 ±(99.9%) 103218.645 ops/s [Average]
[info]   (min, avg, max) = (2123205.487, 2161990.496, 2186978.146), stdev = 26805.554
[info]   CI (99.9%): [2058771.851, 2265209.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1516.507 ±(99.9%) 72.249 MB/sec [Average]
[info]   (min, avg, max) = (1489.195, 1516.507, 1533.846), stdev = 18.763
[info]   CI (99.9%): [1444.258, 1588.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.290 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.171), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.947 ±(99.9%) 1155.815 MB/sec [Average]
[info]   (min, avg, max) = (1354.029, 1493.947, 2030.851), stdev = 300.162
[info]   CI (99.9%): [338.132, 2649.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1089.504 ±(99.9%) 896.314 B/op [Average]
[info]   (min, avg, max) = (974.793, 1089.504, 1505.552), stdev = 232.770
[info]   CI (99.9%): [193.190, 1985.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.770 ±(99.9%) 4.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 2.876), stdev = 1.202
[info]   CI (99.9%): [≈ 0, 5.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 14.000), stdev = 4.037
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.82% complete, ETA 01:48:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9400731.228 ops/s
[info] # Warmup Iteration   2: 10229600.976 ops/s
[info] # Warmup Iteration   3: 10410381.101 ops/s
[info] # Warmup Iteration   4: 10427725.808 ops/s
[info] # Warmup Iteration   5: 10394837.783 ops/s
[info] Iteration   1: 10417568.872 ops/s
[info]                  ·gc.alloc.rate:            1323.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 204.899 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 10409747.493 ops/s
[info]                  ·gc.alloc.rate:            1322.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205.048 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 10352840.223 ops/s
[info]                  ·gc.alloc.rate:            1316.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 206.173 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 9880800.696 ops/s
[info]                  ·gc.alloc.rate:                                  1255.443 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       216.566 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.531 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 9731753.633 ops/s
[info]                  ·gc.alloc.rate:                                  1236.886 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       220.405 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10158542.183 ±(99.9%) 1258458.924 ops/s [Average]
[info]   (min, avg, max) = (9731753.633, 10158542.183, 10417568.872), stdev = 326817.786
[info]   CI (99.9%): [8900083.259, 11417001.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1290.942 ±(99.9%) 159.806 MB/sec [Average]
[info]   (min, avg, max) = (1236.886, 1290.942, 1323.572), stdev = 41.501
[info]   CI (99.9%): [1131.136, 1450.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.095), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.005 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1358.262 ±(99.9%) 11.679 MB/sec [Average]
[info]   (min, avg, max) = (1355.992, 1358.262, 1363.081), stdev = 3.033
[info]   CI (99.9%): [1346.584, 1369.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   210.618 ±(99.9%) 28.209 B/op [Average]
[info]   (min, avg, max) = (204.899, 210.618, 220.405), stdev = 7.326
[info]   CI (99.9%): [182.409, 238.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.106 ±(99.9%) 0.914 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.106, 0.531), stdev = 0.237
[info]   CI (99.9%): [≈ 0, 1.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.06% complete, ETA 01:48:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100239.066 ops/s
[info] # Warmup Iteration   2: 584149.792 ops/s
[info] # Warmup Iteration   3: 600160.644 ops/s
[info] # Warmup Iteration   4: 599266.632 ops/s
[info] # Warmup Iteration   5: 604189.874 ops/s
[info] Iteration   1: 598086.333 ops/s
[info]                  ·gc.alloc.rate:            1538.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3563.693 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 593376.488 ops/s
[info]                  ·gc.alloc.rate:                   1525.832 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5387.126 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 600895.660 ops/s
[info]                  ·gc.alloc.rate:                   1545.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3559.155 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 606596.412 ops/s
[info]                  ·gc.alloc.rate:                                  1560.039 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4048.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.144 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.373 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3536.169 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 598800.599 ops/s
[info]                  ·gc.alloc.rate:            1540.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       4048.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3582.206 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   599551.098 ±(99.9%) 18495.010 ops/s [Average]
[info]   (min, avg, max) = (593376.488, 599551.098, 606596.412), stdev = 4803.095
[info]   CI (99.9%): [581056.089, 618046.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1541.981 ±(99.9%) 47.651 MB/sec [Average]
[info]   (min, avg, max) = (1525.832, 1541.981, 1560.039), stdev = 12.375
[info]   CI (99.9%): [1494.330, 1589.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4048.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4048.001, 4048.001, 4048.001), stdev = 0.001
[info]   CI (99.9%): [4048.001, 4048.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.373), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.901 ±(99.9%) 1155.349 MB/sec [Average]
[info]   (min, avg, max) = (1354.623, 1493.901, 2030.595), stdev = 300.041
[info]   CI (99.9%): [338.551, 2649.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   3925.670 ±(99.9%) 3146.527 B/op [Average]
[info]   (min, avg, max) = (3536.169, 3925.670, 5387.126), stdev = 817.143
[info]   CI (99.9%): [779.142, 7072.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.800 ±(99.9%) 17.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.800, 10.468), stdev = 4.551
[info]   CI (99.9%): [≈ 0, 20.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 19.000), stdev = 6.618
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.29% complete, ETA 01:48:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 841670.108 ops/s
[info] # Warmup Iteration   2: 1759746.431 ops/s
[info] # Warmup Iteration   3: 1748124.038 ops/s
[info] # Warmup Iteration   4: 1759422.334 ops/s
[info] # Warmup Iteration   5: 1753188.036 ops/s
[info] Iteration   1: 1766884.332 ops/s
[info]                  ·gc.alloc.rate:            1535.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1208.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1767944.124 ops/s
[info]                  ·gc.alloc.rate:            1536.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1207.363 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1777068.369 ops/s
[info]                  ·gc.alloc.rate:                   1544.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1201.159 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.950 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1787785.251 ops/s
[info]                  ·gc.alloc.rate:                                  1553.577 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1368.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1799.788 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1796543.904 ops/s
[info]                  ·gc.alloc.rate:            1561.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       1368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1194.032 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1779245.196 ±(99.9%) 49365.705 ops/s [Average]
[info]   (min, avg, max) = (1766884.332, 1779245.196, 1796543.904), stdev = 12820.117
[info]   CI (99.9%): [1729879.490, 1828610.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1546.475 ±(99.9%) 42.576 MB/sec [Average]
[info]   (min, avg, max) = (1535.659, 1546.475, 1561.539), stdev = 11.057
[info]   CI (99.9%): [1503.899, 1589.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1368.000, 1368.000, 1368.000), stdev = 0.001
[info]   CI (99.9%): [1368.000, 1368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.297 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.172), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.152), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1495.158 ±(99.9%) 1181.347 MB/sec [Average]
[info]   (min, avg, max) = (1356.151, 1495.158, 2043.939), stdev = 306.792
[info]   CI (99.9%): [313.811, 2676.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1322.086 ±(99.9%) 1028.519 B/op [Average]
[info]   (min, avg, max) = (1194.032, 1322.086, 1799.788), stdev = 267.103
[info]   CI (99.9%): [293.567, 2350.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.590 ±(99.9%) 5.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.590, 2.950), stdev = 1.319
[info]   CI (99.9%): [≈ 0, 5.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.53% complete, ETA 01:48:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.983 ops/s
[info] # Warmup Iteration   2: 16809018.042 ops/s
[info] # Warmup Iteration   3: 16709677.398 ops/s
[info] # Warmup Iteration   4: 17009277.021 ops/s
[info] # Warmup Iteration   5: 17204782.073 ops/s
[info] Iteration   1: 17453772.921 ops/s
[info]                  ·gc.alloc.rate:      532.323 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16753775.782 ops/s
[info]                  ·gc.alloc.rate:            511.080 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63.391 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 16673620.369 ops/s
[info]                  ·gc.alloc.rate:            508.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.886 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63.697 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 16729950.540 ops/s
[info]                  ·gc.alloc.rate:            510.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63.481 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 17142252.940 ops/s
[info]                  ·gc.alloc.rate:      522.862 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   16950674.510 ±(99.9%) 1297354.863 ops/s [Average]
[info]   (min, avg, max) = (16673620.369, 16950674.510, 17453772.921), stdev = 336918.938
[info]   CI (99.9%): [15653319.647, 18248029.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   517.027 ±(99.9%) 39.465 MB/sec [Average]
[info]   (min, avg, max) = (508.573, 517.027, 532.323), stdev = 10.249
[info]   CI (99.9%): [477.561, 556.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.944 ±(99.9%) 1423.434 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.944, 674.954), stdev = 369.661
[info]   CI (99.9%): [≈ 0, 1828.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   38.114 ±(99.9%) 133.976 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.114, 63.697), stdev = 34.793
[info]   CI (99.9%): [≈ 0, 172.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 8.000), stdev = 3.507
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.76% complete, ETA 01:47:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ce803297/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1213625.071 ops/s
[info] # Warmup Iteration   2: 4195090.383 ops/s
[info] # Warmup Iteration   3: 4243142.241 ops/s
[info] # Warmup Iteration   4: 4224585.814 ops/s
[info] # Warmup Iteration   5: 4225945.718 ops/s
[info] Iteration   1: 4215216.741 ops/s
[info]                  ·gc.alloc.rate:            1156.860 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 505.391 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 4225103.728 ops/s
[info]                  ·gc.alloc.rate:            1159.513 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 252.107 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4204106.173 ops/s
[info]                  ·gc.alloc.rate:            1154.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 506.724 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 4213476.494 ops/s
[info]                  ·gc.alloc.rate:            1156.732 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 505.593 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 4243484.508 ops/s
[info]                  ·gc.alloc.rate:                   1164.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        251.007 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.482 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4220277.529 ±(99.9%) 57606.536 ops/s [Average]
[info]   (min, avg, max) = (4204106.173, 4220277.529, 4243484.508), stdev = 14960.234
[info]   CI (99.9%): [4162670.993, 4277884.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1158.387 ±(99.9%) 15.152 MB/sec [Average]
[info]   (min, avg, max) = (1154.245, 1158.387, 1164.587), stdev = 3.935
[info]   CI (99.9%): [1143.235, 1173.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.883 ±(99.9%) 1427.903 MB/sec [Average]
[info]   (min, avg, max) = (676.666, 1082.883, 1353.896), stdev = 370.822
[info]   CI (99.9%): [≈ 0, 2510.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   404.165 ±(99.9%) 536.442 B/op [Average]
[info]   (min, avg, max) = (251.007, 404.165, 506.724), stdev = 139.312
[info]   CI (99.9%): [≈ 0, 940.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.296 ±(99.9%) 2.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.296, 1.482), stdev = 0.663
[info]   CI (99.9%): [≈ 0, 2.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.00% complete, ETA 01:47:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15237490.505 ops/s
[info] # Warmup Iteration   2: 20975989.411 ops/s
[info] # Warmup Iteration   3: 21043997.379 ops/s
[info] # Warmup Iteration   4: 21648146.215 ops/s
[info] # Warmup Iteration   5: 21598584.266 ops/s
[info] Iteration   1: 21729324.039 ops/s
[info]                  ·gc.alloc.rate:                   662.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        49.070 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 21448939.605 ops/s
[info]                  ·gc.alloc.rate:            654.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.760 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 21529891.670 ops/s
[info]                  ·gc.alloc.rate:            656.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.523 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 21818815.158 ops/s
[info]                  ·gc.alloc.rate:                   665.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48.868 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.048 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 21732683.058 ops/s
[info]                  ·gc.alloc.rate:            662.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49.110 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21651930.706 ±(99.9%) 597966.705 ops/s [Average]
[info]   (min, avg, max) = (21448939.605, 21651930.706, 21818815.158), stdev = 155290.054
[info]   CI (99.9%): [21053964.001, 22249897.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   660.298 ±(99.9%) 18.294 MB/sec [Average]
[info]   (min, avg, max) = (654.101, 660.298, 665.354), stdev = 4.751
[info]   CI (99.9%): [642.005, 678.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.687 ±(99.9%) 1.396 MB/sec [Average]
[info]   (min, avg, max) = (677.355, 677.687, 678.086), stdev = 0.363
[info]   CI (99.9%): [676.291, 679.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   49.266 ±(99.9%) 1.404 B/op [Average]
[info]   (min, avg, max) = (48.868, 49.266, 49.760), stdev = 0.365
[info]   CI (99.9%): [47.863, 50.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.019 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.048), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.24% complete, ETA 01:47:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15290182.463 ops/s
[info] # Warmup Iteration   2: 19813273.773 ops/s
[info] # Warmup Iteration   3: 19537086.274 ops/s
[info] # Warmup Iteration   4: 20663585.918 ops/s
[info] # Warmup Iteration   5: 20617379.061 ops/s
[info] Iteration   1: 19993206.566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20611319.663 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 20680240.509 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20653460.363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20659381.800 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   20519521.780 ±(99.9%) 1137025.184 ops/s [Average]
[info]   (min, avg, max) = (19993206.566, 20519521.780, 20680240.509), stdev = 295281.830
[info]   CI (99.9%): [19382496.596, 21656546.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.47% complete, ETA 01:47:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241616.890 ops/s
[info] # Warmup Iteration   2: 1229175.231 ops/s
[info] # Warmup Iteration   3: 1234600.628 ops/s
[info] # Warmup Iteration   4: 1224735.263 ops/s
[info] # Warmup Iteration   5: 1225753.409 ops/s
[info] Iteration   1: 1226898.731 ops/s
[info]                  ·gc.alloc.rate:            1816.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2028.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2599.697 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 1249064.201 ops/s
[info]                  ·gc.alloc.rate:                                  1847.171 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1711.439 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.875 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1259828.728 ops/s
[info]                  ·gc.alloc.rate:                                  1863.604 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2328.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2553.898 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1257544.408 ops/s
[info]                  ·gc.alloc.rate:            1860.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2558.617 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1262910.340 ops/s
[info]                  ·gc.alloc.rate:            1868.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1698.356 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1251249.282 ±(99.9%) 56031.159 ops/s [Average]
[info]   (min, avg, max) = (1226898.731, 1251249.282, 1262910.340), stdev = 14551.114
[info]   CI (99.9%): [1195218.123, 1307280.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1851.086 ±(99.9%) 81.054 MB/sec [Average]
[info]   (min, avg, max) = (1816.146, 1851.086, 1868.297), stdev = 21.049
[info]   CI (99.9%): [1770.032, 1932.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.000, 2328.000, 2328.000), stdev = 0.001
[info]   CI (99.9%): [2328.000, 2328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.182), stdev = 0.080
[info]   CI (99.9%): [≈ 0, 0.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.051 ±(99.9%) 0.383 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.228), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.595 ±(99.9%) 1431.344 MB/sec [Average]
[info]   (min, avg, max) = (1357.956, 1767.595, 2044.487), stdev = 371.715
[info]   CI (99.9%): [336.251, 3198.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2224.401 ±(99.9%) 1827.504 B/op [Average]
[info]   (min, avg, max) = (1698.356, 2224.401, 2599.697), stdev = 474.597
[info]   CI (99.9%): [396.898, 4051.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.175 ±(99.9%) 10.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.175, 5.875), stdev = 2.628
[info]   CI (99.9%): [≈ 0, 11.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 14.000), stdev = 4.615
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.71% complete, ETA 01:46:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282151.256 ops/s
[info] # Warmup Iteration   2: 352622.861 ops/s
[info] # Warmup Iteration   3: 354665.401 ops/s
[info] # Warmup Iteration   4: 354754.323 ops/s
[info] # Warmup Iteration   5: 354648.514 ops/s
[info] Iteration   1: 358613.012 ops/s
[info]                  ·gc.alloc.rate:                   1974.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8928.704 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.618 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 360532.080 ops/s
[info]                  ·gc.alloc.rate:                                  1984.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.475 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8924.855 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 361257.021 ops/s
[info]                  ·gc.alloc.rate:                                  1988.534 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.283 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8906.897 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 360208.224 ops/s
[info]                  ·gc.alloc.rate:                                  1982.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8932.510 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 360948.025 ops/s
[info]                  ·gc.alloc.rate:                                  1986.752 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8914.348 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   360311.672 ±(99.9%) 3966.049 ops/s [Average]
[info]   (min, avg, max) = (358613.012, 360311.672, 361257.021), stdev = 1029.970
[info]   CI (99.9%): [356345.624, 364277.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1983.430 ±(99.9%) 20.788 MB/sec [Average]
[info]   (min, avg, max) = (1974.613, 1983.430, 1988.534), stdev = 5.399
[info]   CI (99.9%): [1962.642, 2004.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.100 ±(99.9%) 0.808 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.475), stdev = 0.210
[info]   CI (99.9%): [≈ 0, 0.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.366 ±(99.9%) 15.984 MB/sec [Average]
[info]   (min, avg, max) = (2034.941, 2042.366, 2044.289), stdev = 4.151
[info]   CI (99.9%): [2026.382, 2058.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8921.463 ±(99.9%) 40.786 B/op [Average]
[info]   (min, avg, max) = (8906.897, 8921.463, 8932.510), stdev = 10.592
[info]   CI (99.9%): [8880.677, 8962.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.924 ±(99.9%) 25.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.924, 14.618), stdev = 6.537
[info]   CI (99.9%): [≈ 0, 28.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 11.000), stdev = 3.130
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4.94% complete, ETA 01:46:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222006.595 ops/s
[info] # Warmup Iteration   2: 419570.689 ops/s
[info] # Warmup Iteration   3: 422071.031 ops/s
[info] # Warmup Iteration   4: 424084.523 ops/s
[info] # Warmup Iteration   5: 426561.157 ops/s
[info] Iteration   1: 424404.981 ops/s
[info]                  ·gc.alloc.rate:            578.096 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2512.255 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 424895.760 ops/s
[info]                  ·gc.alloc.rate:                   578.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2506.908 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.467 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 423991.205 ops/s
[info]                  ·gc.alloc.rate:            577.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2514.642 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 423583.729 ops/s
[info]                  ·gc.alloc.rate:            576.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2514.583 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 423900.622 ops/s
[info]                  ·gc.alloc.rate:                   577.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2512.661 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   424155.259 ±(99.9%) 1953.137 ops/s [Average]
[info]   (min, avg, max) = (423583.729, 424155.259, 424895.760), stdev = 507.224
[info]   CI (99.9%): [422202.122, 426108.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   577.726 ±(99.9%) 2.650 MB/sec [Average]
[info]   (min, avg, max) = (576.943, 577.726, 578.714), stdev = 0.688
[info]   CI (99.9%): [575.076, 580.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.001, 2144.001, 2144.001), stdev = 0.001
[info]   CI (99.9%): [2144.001, 2144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.944 ±(99.9%) 1.446 MB/sec [Average]
[info]   (min, avg, max) = (676.665, 676.944, 677.390), stdev = 0.375
[info]   CI (99.9%): [675.498, 678.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2512.210 ±(99.9%) 12.155 B/op [Average]
[info]   (min, avg, max) = (2506.908, 2512.210, 2514.642), stdev = 3.157
[info]   CI (99.9%): [2500.054, 2524.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.988 ±(99.9%) 5.210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.988, 2.473), stdev = 1.353
[info]   CI (99.9%): [≈ 0, 6.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.18% complete, ETA 01:46:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 990102.770 ops/s
[info] # Warmup Iteration   2: 1054697.039 ops/s
[info] # Warmup Iteration   3: 1063811.374 ops/s
[info] # Warmup Iteration   4: 1063188.434 ops/s
[info] # Warmup Iteration   5: 1058626.888 ops/s
[info] Iteration   1: 1062830.268 ops/s
[info]                  ·gc.alloc.rate:            707.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1004.158 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1067207.070 ops/s
[info]                  ·gc.alloc.rate:            710.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1000.063 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1065358.579 ops/s
[info]                  ·gc.alloc.rate:            709.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1001.797 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1061567.729 ops/s
[info]                  ·gc.alloc.rate:            706.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1005.352 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1060622.084 ops/s
[info]                  ·gc.alloc.rate:            706.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1006.281 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1063517.146 ±(99.9%) 10485.465 ops/s [Average]
[info]   (min, avg, max) = (1060622.084, 1063517.146, 1067207.070), stdev = 2723.042
[info]   CI (99.9%): [1053031.681, 1074002.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   708.119 ±(99.9%) 6.935 MB/sec [Average]
[info]   (min, avg, max) = (706.144, 708.119, 710.553), stdev = 1.801
[info]   CI (99.9%): [701.184, 715.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.067 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (678.033, 678.067, 678.145), stdev = 0.045
[info]   CI (99.9%): [677.894, 678.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1003.530 ±(99.9%) 9.874 B/op [Average]
[info]   (min, avg, max) = (1000.063, 1003.530, 1006.281), stdev = 2.564
[info]   CI (99.9%): [993.656, 1013.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.41% complete, ETA 01:46:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61582.849 ops/s
[info] # Warmup Iteration   2: 96379.103 ops/s
[info] # Warmup Iteration   3: 98792.945 ops/s
[info] # Warmup Iteration   4: 99599.960 ops/s
[info] # Warmup Iteration   5: 100706.160 ops/s
[info] Iteration   1: 100940.418 ops/s
[info]                  ·gc.alloc.rate:            3495.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       54496.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53125.718 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 100641.451 ops/s
[info]                  ·gc.alloc.rate:                                  3484.024 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53283.524 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 100902.666 ops/s
[info]                  ·gc.alloc.rate:                                  3494.627 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3408.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53145.195 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 100375.952 ops/s
[info]                  ·gc.alloc.rate:                                  3476.582 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54496.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3408.205 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53424.171 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 100218.756 ops/s
[info]                  ·gc.alloc.rate:            3469.444 MB/sec
[info]                  ·gc.alloc.rate.norm:       54496.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53503.579 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   100615.849 ±(99.9%) 1222.993 ops/s [Average]
[info]   (min, avg, max) = (100218.756, 100615.849, 100940.418), stdev = 317.607
[info]   CI (99.9%): [99392.856, 101838.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3484.045 ±(99.9%) 43.616 MB/sec [Average]
[info]   (min, avg, max) = (3469.444, 3484.045, 3495.549), stdev = 11.327
[info]   CI (99.9%): [3440.429, 3527.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54496.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54496.004, 54496.004, 54496.004), stdev = 0.001
[info]   CI (99.9%): [54496.004, 54496.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.056), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3407.327 ±(99.9%) 3.413 MB/sec [Average]
[info]   (min, avg, max) = (3406.262, 3407.327, 3408.205), stdev = 0.886
[info]   CI (99.9%): [3403.914, 3410.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   53296.437 ±(99.9%) 642.635 B/op [Average]
[info]   (min, avg, max) = (53125.718, 53296.437, 53503.579), stdev = 166.890
[info]   CI (99.9%): [52653.802, 53939.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.65% complete, ETA 01:45:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259203.981 ops/s
[info] # Warmup Iteration   2: 321397.810 ops/s
[info] # Warmup Iteration   3: 330939.223 ops/s
[info] # Warmup Iteration   4: 337366.005 ops/s
[info] # Warmup Iteration   5: 329237.250 ops/s
[info] Iteration   1: 335422.607 ops/s
[info]                  ·gc.alloc.rate:            513.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3181.898 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 335076.717 ops/s
[info]                  ·gc.alloc.rate:            512.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3185.240 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 336659.768 ops/s
[info]                  ·gc.alloc.rate:      515.041 MB/sec
[info]                  ·gc.alloc.rate.norm: 2408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 335120.950 ops/s
[info]                  ·gc.alloc.rate:            512.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3184.613 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 335973.642 ops/s
[info]                  ·gc.alloc.rate:            513.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3176.690 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   335650.737 ±(99.9%) 2572.037 ops/s [Average]
[info]   (min, avg, max) = (335076.717, 335650.737, 336659.768), stdev = 667.950
[info]   CI (99.9%): [333078.699, 338222.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   513.507 ±(99.9%) 3.880 MB/sec [Average]
[info]   (min, avg, max) = (512.677, 513.507, 515.041), stdev = 1.008
[info]   CI (99.9%): [509.627, 517.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2408.001, 2408.001, 2408.001), stdev = 0.001
[info]   CI (99.9%): [2408.001, 2408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.463 ±(99.9%) 1167.692 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.463, 678.155), stdev = 303.246
[info]   CI (99.9%): [≈ 0, 1710.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2545.688 ±(99.9%) 5479.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2545.688, 3185.240), stdev = 1423.087
[info]   CI (99.9%): [≈ 0, 8025.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.88% complete, ETA 01:45:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354850.956 ops/s
[info] # Warmup Iteration   2: 626927.690 ops/s
[info] # Warmup Iteration   3: 631826.858 ops/s
[info] # Warmup Iteration   4: 627866.128 ops/s
[info] # Warmup Iteration   5: 620103.583 ops/s
[info] Iteration   1: 634376.178 ops/s
[info]                  ·gc.alloc.rate:      467.505 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 629614.207 ops/s
[info]                  ·gc.alloc.rate:            463.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1691.872 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 628026.702 ops/s
[info]                  ·gc.alloc.rate:            462.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1696.128 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 628022.004 ops/s
[info]                  ·gc.alloc.rate:      462.818 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 603505.897 ops/s
[info]                  ·gc.alloc.rate:            444.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1764.902 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   624708.998 ±(99.9%) 46729.040 ops/s [Average]
[info]   (min, avg, max) = (603505.897, 624708.998, 634376.178), stdev = 12135.383
[info]   CI (99.9%): [577979.957, 671438.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   460.381 ±(99.9%) 34.464 MB/sec [Average]
[info]   (min, avg, max) = (444.742, 460.381, 467.505), stdev = 8.950
[info]   CI (99.9%): [425.917, 494.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.034 ±(99.9%) 1427.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.034, 676.761), stdev = 370.656
[info]   CI (99.9%): [≈ 0, 1833.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1030.580 ±(99.9%) 3624.354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1030.580, 1764.902), stdev = 941.233
[info]   CI (99.9%): [≈ 0, 4654.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.12% complete, ETA 01:45:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2472833.768 ops/s
[info] # Warmup Iteration   2: 2634651.186 ops/s
[info] # Warmup Iteration   3: 2685995.873 ops/s
[info] # Warmup Iteration   4: 2789692.719 ops/s
[info] # Warmup Iteration   5: 2775630.034 ops/s
[info] Iteration   1: 2792493.534 ops/s
[info]                  ·gc.alloc.rate:                   1291.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        764.016 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.375 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2795561.641 ops/s
[info]                  ·gc.alloc.rate:            1293.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 381.397 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2790148.587 ops/s
[info]                  ·gc.alloc.rate:                   1290.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        764.290 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.376 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2784146.577 ops/s
[info]                  ·gc.alloc.rate:                   1287.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        766.333 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.259 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2779483.488 ops/s
[info]                  ·gc.alloc.rate:                                  1285.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.165 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       771.699 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2788366.765 ±(99.9%) 25006.513 ops/s [Average]
[info]   (min, avg, max) = (2779483.488, 2788366.765, 2795561.641), stdev = 6494.112
[info]   CI (99.9%): [2763360.253, 2813373.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1289.708 ±(99.9%) 11.094 MB/sec [Average]
[info]   (min, avg, max) = (1285.904, 1289.708, 1293.036), stdev = 2.881
[info]   CI (99.9%): [1278.613, 1300.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.285 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.165), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.161 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1221.226 ±(99.9%) 1170.663 MB/sec [Average]
[info]   (min, avg, max) = (677.417, 1221.226, 1363.091), stdev = 304.017
[info]   CI (99.9%): [50.563, 2391.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   689.547 ±(99.9%) 663.422 B/op [Average]
[info]   (min, avg, max) = (381.397, 689.547, 771.699), stdev = 172.289
[info]   CI (99.9%): [26.125, 1352.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.602 ±(99.9%) 3.640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.602, 2.259), stdev = 0.945
[info]   CI (99.9%): [≈ 0, 4.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 8.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.35% complete, ETA 01:45:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2684205.767 ops/s
[info] # Warmup Iteration   2: 2991510.571 ops/s
[info] # Warmup Iteration   3: 3006225.366 ops/s
[info] # Warmup Iteration   4: 3000520.974 ops/s
[info] # Warmup Iteration   5: 2883136.982 ops/s
[info] Iteration   1: 2958710.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2998314.944 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2998185.595 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2999979.978 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3000010.163 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2991040.319 ±(99.9%) 69672.747 ops/s [Average]
[info]   (min, avg, max) = (2958710.915, 2991040.319, 3000010.163), stdev = 18093.791
[info]   CI (99.9%): [2921367.572, 3060713.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.59% complete, ETA 01:45:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318437.055 ops/s
[info] # Warmup Iteration   2: 399793.117 ops/s
[info] # Warmup Iteration   3: 418357.554 ops/s
[info] # Warmup Iteration   4: 407243.538 ops/s
[info] # Warmup Iteration   5: 409611.168 ops/s
[info] Iteration   1: 394616.649 ops/s
[info]                  ·gc.alloc.rate:            567.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2702.084 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 418704.044 ops/s
[info]                  ·gc.alloc.rate:      602.347 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 415471.481 ops/s
[info]                  ·gc.alloc.rate:            597.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2566.137 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 416321.307 ops/s
[info]                  ·gc.alloc.rate:            598.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2560.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 414892.866 ops/s
[info]                  ·gc.alloc.rate:            596.865 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2569.748 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   412001.269 ±(99.9%) 37837.287 ops/s [Average]
[info]   (min, avg, max) = (394616.649, 412001.269, 418704.044), stdev = 9826.223
[info]   CI (99.9%): [374163.982, 449838.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   592.670 ±(99.9%) 54.168 MB/sec [Average]
[info]   (min, avg, max) = (567.789, 592.670, 602.347), stdev = 14.067
[info]   CI (99.9%): [538.502, 646.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.954 ±(99.9%) 1166.597 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.954, 677.656), stdev = 302.962
[info]   CI (99.9%): [≈ 0, 1708.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2079.793 ±(99.9%) 4482.706 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2079.793, 2702.084), stdev = 1164.144
[info]   CI (99.9%): [≈ 0, 6562.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 4.000), stdev = 1.789
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6.82% complete, ETA 01:44:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15820.721 ops/s
[info] # Warmup Iteration   2: 19767.197 ops/s
[info] # Warmup Iteration   3: 19790.162 ops/s
[info] # Warmup Iteration   4: 19784.290 ops/s
[info] # Warmup Iteration   5: 19803.678 ops/s
[info] Iteration   1: 19627.050 ops/s
[info]                  ·gc.alloc.rate:            1228.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       98480.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108751.502 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 19867.553 ops/s
[info]                  ·gc.alloc.rate:            1243.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       98480.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107432.605 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 19856.163 ops/s
[info]                  ·gc.alloc.rate:            1242.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       98480.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 107497.519 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 19808.488 ops/s
[info]                  ·gc.alloc.rate:                   1239.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        107752.523 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 264.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 19952.563 ops/s
[info]                  ·gc.alloc.rate:                                  1248.735 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.661 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53747.532 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19822.363 ±(99.9%) 465.579 ops/s [Average]
[info]   (min, avg, max) = (19627.050, 19822.363, 19952.563), stdev = 120.909
[info]   CI (99.9%): [19356.785, 20287.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1240.322 ±(99.9%) 29.307 MB/sec [Average]
[info]   (min, avg, max) = (1228.140, 1240.322, 1248.735), stdev = 7.611
[info]   CI (99.9%): [1211.015, 1269.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480.027 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (98480.020, 98480.027, 98480.053), stdev = 0.014
[info]   CI (99.9%): [98479.973, 98480.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.532 ±(99.9%) 13.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.532, 7.661), stdev = 3.426
[info]   CI (99.9%): [≈ 0, 14.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.189 ±(99.9%) 1161.671 MB/sec [Average]
[info]   (min, avg, max) = (681.523, 1221.189, 1356.235), stdev = 301.682
[info]   CI (99.9%): [59.518, 2382.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   97036.336 ±(99.9%) 93204.697 B/op [Average]
[info]   (min, avg, max) = (53747.532, 97036.336, 108751.502), stdev = 24204.964
[info]   CI (99.9%): [3831.640, 190241.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.924 ±(99.9%) 455.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.924, 264.618), stdev = 118.341
[info]   CI (99.9%): [≈ 0, 508.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.06% complete, ETA 01:44:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20085.899 ops/s
[info] # Warmup Iteration   2: 33860.564 ops/s
[info] # Warmup Iteration   3: 34001.488 ops/s
[info] # Warmup Iteration   4: 34343.338 ops/s
[info] # Warmup Iteration   5: 34737.906 ops/s
[info] Iteration   1: 34565.741 ops/s
[info]                  ·gc.alloc.rate:            866.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61693.430 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 34484.804 ops/s
[info]                  ·gc.alloc.rate:            864.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30919.159 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 34731.370 ops/s
[info]                  ·gc.alloc.rate:                   870.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30669.120 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.186 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 34806.062 ops/s
[info]                  ·gc.alloc.rate:            872.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30633.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 34666.942 ops/s
[info]                  ·gc.alloc.rate:            869.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61511.943 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   34650.984 ±(99.9%) 493.303 ops/s [Average]
[info]   (min, avg, max) = (34484.804, 34650.984, 34806.062), stdev = 128.109
[info]   CI (99.9%): [34157.681, 35144.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   868.650 ±(99.9%) 12.652 MB/sec [Average]
[info]   (min, avg, max) = (864.318, 868.650, 872.534), stdev = 3.286
[info]   CI (99.9%): [855.998, 881.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39456.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (39456.012, 39456.012, 39456.013), stdev = 0.001
[info]   CI (99.9%): [39456.010, 39456.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.305 ±(99.9%) 1429.676 MB/sec [Average]
[info]   (min, avg, max) = (676.740, 948.305, 1355.302), stdev = 371.282
[info]   CI (99.9%): [≈ 0, 2377.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   43085.364 ±(99.9%) 65092.850 B/op [Average]
[info]   (min, avg, max) = (30633.166, 43085.364, 61693.430), stdev = 16904.406
[info]   CI (99.9%): [≈ 0, 108178.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.037 ±(99.9%) 51.982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.037, 30.186), stdev = 13.500
[info]   CI (99.9%): [≈ 0, 58.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.29% complete, ETA 01:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37881.041 ops/s
[info] # Warmup Iteration   2: 42008.401 ops/s
[info] # Warmup Iteration   3: 42480.053 ops/s
[info] # Warmup Iteration   4: 42652.254 ops/s
[info] # Warmup Iteration   5: 42739.692 ops/s
[info] Iteration   1: 42677.931 ops/s
[info]                  ·gc.alloc.rate:      573.268 MB/sec
[info]                  ·gc.alloc.rate.norm: 21144.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 42508.901 ops/s
[info]                  ·gc.alloc.rate:            571.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25106.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 42477.771 ops/s
[info]                  ·gc.alloc.rate:            570.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25125.347 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 42528.082 ops/s
[info]                  ·gc.alloc.rate:            571.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25094.632 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 42665.111 ops/s
[info]                  ·gc.alloc.rate:            573.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25015.827 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   42571.559 ±(99.9%) 358.542 ops/s [Average]
[info]   (min, avg, max) = (42477.771, 42571.559, 42677.931), stdev = 93.112
[info]   CI (99.9%): [42213.017, 42930.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   571.876 ±(99.9%) 4.903 MB/sec [Average]
[info]   (min, avg, max) = (570.577, 571.876, 573.268), stdev = 1.273
[info]   CI (99.9%): [566.973, 576.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21144.010, 21144.010, 21144.010), stdev = 0.001
[info]   CI (99.9%): [21144.010, 21144.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.453 ±(99.9%) 1167.672 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.453, 678.181), stdev = 303.241
[info]   CI (99.9%): [≈ 0, 1710.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   20068.449 ±(99.9%) 43199.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20068.449, 25125.347), stdev = 11218.681
[info]   CI (99.9%): [≈ 0, 63267.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.53% complete, ETA 01:44:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13429.130 ops/s
[info] # Warmup Iteration   2: 24008.284 ops/s
[info] # Warmup Iteration   3: 24299.402 ops/s
[info] # Warmup Iteration   4: 24465.526 ops/s
[info] # Warmup Iteration   5: 24404.251 ops/s
[info] Iteration   1: 24510.704 ops/s
[info]                  ·gc.alloc.rate:            1298.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86999.942 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 24671.469 ops/s
[info]                  ·gc.alloc.rate:            1307.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86432.306 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 24722.266 ops/s
[info]                  ·gc.alloc.rate:            1309.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       83400.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86254.037 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 24906.596 ops/s
[info]                  ·gc.alloc.rate:                                  1319.681 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.297 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85866.050 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                252.547 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 24769.408 ops/s
[info]                  ·gc.alloc.rate:                                  1312.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.630 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86598.309 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   24716.089 ±(99.9%) 555.842 ops/s [Average]
[info]   (min, avg, max) = (24510.704, 24716.089, 24906.596), stdev = 144.350
[info]   CI (99.9%): [24160.247, 25271.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1309.641 ±(99.9%) 29.175 MB/sec [Average]
[info]   (min, avg, max) = (1298.993, 1309.641, 1319.681), stdev = 7.577
[info]   CI (99.9%): [1280.466, 1338.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.017, 83400.018), stdev = 0.001
[info]   CI (99.9%): [83400.015, 83400.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.785 ±(99.9%) 10.655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.785, 6.297), stdev = 2.767
[info]   CI (99.9%): [≈ 0, 12.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.197 ±(99.9%) 14.033 MB/sec [Average]
[info]   (min, avg, max) = (1354.606, 1357.197, 1362.954), stdev = 3.644
[info]   CI (99.9%): [1343.164, 1371.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86430.129 ±(99.9%) 1613.334 B/op [Average]
[info]   (min, avg, max) = (85866.050, 86430.129, 86999.942), stdev = 418.978
[info]   CI (99.9%): [84816.795, 88043.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.509 ±(99.9%) 434.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.509, 252.547), stdev = 112.943
[info]   CI (99.9%): [≈ 0, 485.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 9.000), stdev = 2.608
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.76% complete, ETA 01:43:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17578.205 ops/s
[info] # Warmup Iteration   2: 27448.024 ops/s
[info] # Warmup Iteration   3: 27722.173 ops/s
[info] # Warmup Iteration   4: 27799.251 ops/s
[info] # Warmup Iteration   5: 27810.391 ops/s
[info] Iteration   1: 27955.638 ops/s
[info]                  ·gc.alloc.rate:                   1588.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              89408.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        114491.704 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.501 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 27913.123 ops/s
[info]                  ·gc.alloc.rate:            1585.570 MB/sec
[info]                  ·gc.alloc.rate.norm:       89408.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76470.404 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 27947.667 ops/s
[info]                  ·gc.alloc.rate:                                  1587.771 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.230 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76564.955 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                187.567 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 28042.553 ops/s
[info]                  ·gc.alloc.rate:                                  1593.389 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89408.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       114734.731 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 28057.258 ops/s
[info]                  ·gc.alloc.rate:            1593.729 MB/sec
[info]                  ·gc.alloc.rate.norm:       89408.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76451.660 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27983.248 ±(99.9%) 243.081 ops/s [Average]
[info]   (min, avg, max) = (27913.123, 27983.248, 28057.258), stdev = 63.127
[info]   CI (99.9%): [27740.167, 28226.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1589.721 ±(99.9%) 14.021 MB/sec [Average]
[info]   (min, avg, max) = (1585.570, 1589.721, 1593.729), stdev = 3.641
[info]   CI (99.9%): [1575.700, 1603.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89408.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (89408.015, 89408.015, 89408.016), stdev = 0.001
[info]   CI (99.9%): [89408.013, 89408.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.108), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.653 ±(99.9%) 10.141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.653, 6.036), stdev = 2.633
[info]   CI (99.9%): [≈ 0, 11.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.413 ±(99.9%) 1433.638 MB/sec [Average]
[info]   (min, avg, max) = (1356.133, 1631.413, 2044.750), stdev = 372.311
[info]   CI (99.9%): [197.774, 3065.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   91742.691 ±(99.9%) 80393.975 B/op [Average]
[info]   (min, avg, max) = (76451.660, 91742.691, 114734.731), stdev = 20878.060
[info]   CI (99.9%): [11348.716, 172136.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   45.014 ±(99.9%) 313.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.014, 187.567), stdev = 81.328
[info]   CI (99.9%): [≈ 0, 358.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 12.000), stdev = 3.768
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.00% complete, ETA 01:43:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12352.224 ops/s
[info] # Warmup Iteration   2: 27949.525 ops/s
[info] # Warmup Iteration   3: 28409.906 ops/s
[info] # Warmup Iteration   4: 28402.567 ops/s
[info] # Warmup Iteration   5: 28219.713 ops/s
[info] Iteration   1: 28086.858 ops/s
[info]                  ·gc.alloc.rate:            1511.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       84720.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75922.098 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 28454.602 ops/s
[info]                  ·gc.alloc.rate:                   1531.342 MB/sec
[info]                  ·gc.alloc.rate.norm:              84720.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        74903.549 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.844 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 28426.799 ops/s
[info]                  ·gc.alloc.rate:                                  1530.027 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75198.595 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                258.161 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 28905.024 ops/s
[info]                  ·gc.alloc.rate:                                  1555.784 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.862 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       111313.723 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 28954.630 ops/s
[info]                  ·gc.alloc.rate:                                  1558.442 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84720.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74081.025 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28565.583 ±(99.9%) 1398.125 ops/s [Average]
[info]   (min, avg, max) = (28086.858, 28565.583, 28954.630), stdev = 363.089
[info]   CI (99.9%): [27167.458, 29963.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1537.481 ±(99.9%) 75.228 MB/sec [Average]
[info]   (min, avg, max) = (1511.809, 1537.481, 1558.442), stdev = 19.536
[info]   CI (99.9%): [1462.253, 1612.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84720.015 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (84720.014, 84720.015, 84720.016), stdev = 0.001
[info]   CI (99.9%): [84720.012, 84720.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.205 ±(99.9%) 6.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.205, 4.018), stdev = 1.759
[info]   CI (99.9%): [≈ 0, 7.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.734 ±(99.9%) 1182.726 MB/sec [Average]
[info]   (min, avg, max) = (1353.906, 1494.734, 2044.146), stdev = 307.150
[info]   CI (99.9%): [312.009, 2677.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   82283.798 ±(99.9%) 62540.712 B/op [Average]
[info]   (min, avg, max) = (74081.025, 82283.798, 111313.723), stdev = 16241.624
[info]   CI (99.9%): [19743.086, 144824.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   59.001 ±(99.9%) 433.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59.001, 258.161), stdev = 112.471
[info]   CI (99.9%): [≈ 0, 492.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.24% complete, ETA 01:43:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23650.345 ops/s
[info] # Warmup Iteration   2: 29016.294 ops/s
[info] # Warmup Iteration   3: 30356.001 ops/s
[info] # Warmup Iteration   4: 30128.822 ops/s
[info] # Warmup Iteration   5: 30371.967 ops/s
[info] Iteration   1: 30265.849 ops/s
[info]                  ·gc.alloc.rate:            1562.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       81224.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2033.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105720.127 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 30440.881 ops/s
[info]                  ·gc.alloc.rate:            1571.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       81224.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70052.013 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 30410.472 ops/s
[info]                  ·gc.alloc.rate:                                  1569.308 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.779 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70325.642 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                206.840 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 30264.147 ops/s
[info]                  ·gc.alloc.rate:                                  1561.664 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106316.024 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 30437.719 ops/s
[info]                  ·gc.alloc.rate:                                  1570.723 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70467.614 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   30363.813 ±(99.9%) 350.328 ops/s [Average]
[info]   (min, avg, max) = (30264.147, 30363.813, 30440.881), stdev = 90.979
[info]   CI (99.9%): [30013.485, 30714.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1566.975 ±(99.9%) 18.218 MB/sec [Average]
[info]   (min, avg, max) = (1561.664, 1566.975, 1571.148), stdev = 4.731
[info]   CI (99.9%): [1548.757, 1585.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.014, 81224.014), stdev = 0.001
[info]   CI (99.9%): [81224.012, 81224.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.079), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.581 ±(99.9%) 8.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.581, 4.091), stdev = 2.152
[info]   CI (99.9%): [≈ 0, 9.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1630.744 ±(99.9%) 1433.822 MB/sec [Average]
[info]   (min, avg, max) = (1355.043, 1630.744, 2044.099), stdev = 372.359
[info]   CI (99.9%): [196.922, 3064.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   84576.284 ±(99.9%) 75377.479 B/op [Average]
[info]   (min, avg, max) = (70052.013, 84576.284, 106316.024), stdev = 19575.292
[info]   CI (99.9%): [9198.804, 159953.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   41.368 ±(99.9%) 356.191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.368, 206.840), stdev = 92.502
[info]   CI (99.9%): [≈ 0, 397.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 11.000), stdev = 3.033
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.47% complete, ETA 01:43:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23842.604 ops/s
[info] # Warmup Iteration   2: 30781.194 ops/s
[info] # Warmup Iteration   3: 30834.176 ops/s
[info] # Warmup Iteration   4: 30750.567 ops/s
[info] # Warmup Iteration   5: 30975.189 ops/s
[info] Iteration   1: 30915.238 ops/s
[info]                  ·gc.alloc.rate:                   1535.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        103467.186 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 33.913 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 31026.393 ops/s
[info]                  ·gc.alloc.rate:            1540.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       78168.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68762.960 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 31079.249 ops/s
[info]                  ·gc.alloc.rate:                                  1543.614 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.750 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68812.168 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                202.389 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 31095.842 ops/s
[info]                  ·gc.alloc.rate:                                  1544.215 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.317 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68981.271 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 30942.642 ops/s
[info]                  ·gc.alloc.rate:                                  1536.744 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       103986.808 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   31011.872 ±(99.9%) 310.045 ops/s [Average]
[info]   (min, avg, max) = (30915.238, 31011.872, 31095.842), stdev = 80.518
[info]   CI (99.9%): [30701.827, 31321.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1540.093 ±(99.9%) 15.566 MB/sec [Average]
[info]   (min, avg, max) = (1535.159, 1540.093, 1544.215), stdev = 4.042
[info]   CI (99.9%): [1524.528, 1555.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (78168.013, 78168.013, 78168.014), stdev = 0.001
[info]   CI (99.9%): [78168.012, 78168.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.105), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.445 ±(99.9%) 8.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.445, 5.317), stdev = 2.287
[info]   CI (99.9%): [≈ 0, 10.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1630.658 ±(99.9%) 1432.601 MB/sec [Average]
[info]   (min, avg, max) = (1355.357, 1630.658, 2044.328), stdev = 372.042
[info]   CI (99.9%): [198.057, 3063.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   82802.078 ±(99.9%) 73558.099 B/op [Average]
[info]   (min, avg, max) = (68762.960, 82802.078, 103986.808), stdev = 19102.805
[info]   CI (99.9%): [9243.979, 156360.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   47.260 ±(99.9%) 338.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.260, 202.389), stdev = 87.954
[info]   CI (99.9%): [≈ 0, 385.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 11.000), stdev = 3.421
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:42:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4805.292 ops/s
[info] # Warmup Iteration   2: 7830.192 ops/s
[info] # Warmup Iteration   3: 7931.806 ops/s
[info] # Warmup Iteration   4: 8171.845 ops/s
[info] # Warmup Iteration   5: 8175.636 ops/s
[info] Iteration   1: 8132.583 ops/s
[info]                  ·gc.alloc.rate:            1058.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131088.112 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 8141.361 ops/s
[info]                  ·gc.alloc.rate:            1059.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.555 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261886.491 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8220.198 ops/s
[info]                  ·gc.alloc.rate:            1069.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 129701.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 8148.464 ops/s
[info]                  ·gc.alloc.rate:            1060.142 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261661.586 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 8197.434 ops/s
[info]                  ·gc.alloc.rate:            1066.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 130048.999 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8168.008 ±(99.9%) 148.345 ops/s [Average]
[info]   (min, avg, max) = (8132.583, 8168.008, 8220.198), stdev = 38.525
[info]   CI (99.9%): [8019.663, 8316.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1062.645 ±(99.9%) 19.302 MB/sec [Average]
[info]   (min, avg, max) = (1058.005, 1062.645, 1069.395), stdev = 5.013
[info]   CI (99.9%): [1043.344, 1081.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204776.051 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (204776.050, 204776.051, 204776.054), stdev = 0.002
[info]   CI (99.9%): [204776.043, 204776.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   948.229 ±(99.9%) 1428.450 MB/sec [Average]
[info]   (min, avg, max) = (677.286, 948.229, 1354.643), stdev = 370.964
[info]   CI (99.9%): [≈ 0, 2376.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   182877.242 ±(99.9%) 277340.487 B/op [Average]
[info]   (min, avg, max) = (129701.021, 182877.242, 261886.491), stdev = 72024.444
[info]   CI (99.9%): [≈ 0, 460217.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.94% complete, ETA 01:42:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15089.197 ops/s
[info] # Warmup Iteration   2: 19275.685 ops/s
[info] # Warmup Iteration   3: 18707.990 ops/s
[info] # Warmup Iteration   4: 19585.779 ops/s
[info] # Warmup Iteration   5: 19658.351 ops/s
[info] Iteration   1: 19640.937 ops/s
[info]                  ·gc.alloc.rate:            1500.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       120240.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108674.000 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 19617.776 ops/s
[info]                  ·gc.alloc.rate:            1498.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       120240.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108801.383 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 19790.893 ops/s
[info]                  ·gc.alloc.rate:                                  1511.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.462 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       162048.802 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                264.872 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 19981.376 ops/s
[info]                  ·gc.alloc.rate:                                  1526.508 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.351 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107344.466 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19851.198 ops/s
[info]                  ·gc.alloc.rate:                                  1516.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.340 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108052.707 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   19776.436 ±(99.9%) 581.855 ops/s [Average]
[info]   (min, avg, max) = (19617.776, 19776.436, 19981.376), stdev = 151.106
[info]   CI (99.9%): [19194.581, 20358.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1510.750 ±(99.9%) 44.518 MB/sec [Average]
[info]   (min, avg, max) = (1498.744, 1510.750, 1526.508), stdev = 11.561
[info]   CI (99.9%): [1466.233, 1555.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120240.022 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (120240.020, 120240.022, 120240.026), stdev = 0.002
[info]   CI (99.9%): [120240.012, 120240.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.093), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.431 ±(99.9%) 12.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.431, 7.351), stdev = 3.336
[info]   CI (99.9%): [≈ 0, 15.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.012 ±(99.9%) 1167.403 MB/sec [Average]
[info]   (min, avg, max) = (1356.018, 1495.012, 2037.307), stdev = 303.171
[info]   CI (99.9%): [327.609, 2662.415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   118984.272 ±(99.9%) 92726.409 B/op [Average]
[info]   (min, avg, max) = (107344.466, 118984.272, 162048.802), stdev = 24080.754
[info]   CI (99.9%): [26257.862, 211710.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.974 ±(99.9%) 456.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.974, 264.872), stdev = 118.454
[info]   CI (99.9%): [≈ 0, 509.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 8.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.18% complete, ETA 01:42:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25549.910 ops/s
[info] # Warmup Iteration   2: 38688.611 ops/s
[info] # Warmup Iteration   3: 39513.646 ops/s
[info] # Warmup Iteration   4: 39190.129 ops/s
[info] # Warmup Iteration   5: 39506.351 ops/s
[info] Iteration   1: 39356.746 ops/s
[info]                  ·gc.alloc.rate:            970.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54182.953 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 39569.089 ops/s
[info]                  ·gc.alloc.rate:            975.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26944.988 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 39544.761 ops/s
[info]                  ·gc.alloc.rate:            975.381 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26934.827 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 39341.293 ops/s
[info]                  ·gc.alloc.rate:                   970.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54175.583 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 39518.475 ops/s
[info]                  ·gc.alloc.rate:            974.726 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26979.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   39466.073 ±(99.9%) 417.722 ops/s [Average]
[info]   (min, avg, max) = (39341.293, 39466.073, 39569.089), stdev = 108.481
[info]   CI (99.9%): [39048.350, 39883.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   973.454 ±(99.9%) 10.090 MB/sec [Average]
[info]   (min, avg, max) = (970.341, 973.454, 975.905), stdev = 2.620
[info]   CI (99.9%): [963.364, 983.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38824.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38824.010, 38824.010, 38824.010), stdev = 0.001
[info]   CI (99.9%): [38824.010, 38824.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.076 ±(99.9%) 1428.715 MB/sec [Average]
[info]   (min, avg, max) = (676.688, 948.076, 1355.016), stdev = 371.033
[info]   CI (99.9%): [≈ 0, 2376.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   37843.485 ±(99.9%) 57422.616 B/op [Average]
[info]   (min, avg, max) = (26934.827, 37843.485, 54182.953), stdev = 14912.471
[info]   CI (99.9%): [≈ 0, 95266.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.330 ±(99.9%) 45.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.330, 26.648), stdev = 11.917
[info]   CI (99.9%): [≈ 0, 51.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.41% complete, ETA 01:42:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50209.066 ops/s
[info] # Warmup Iteration   2: 54370.832 ops/s
[info] # Warmup Iteration   3: 55115.632 ops/s
[info] # Warmup Iteration   4: 55211.316 ops/s
[info] # Warmup Iteration   5: 55148.512 ops/s
[info] Iteration   1: 55138.558 ops/s
[info]                  ·gc.alloc.rate:            712.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19355.401 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 55036.962 ops/s
[info]                  ·gc.alloc.rate:            711.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19391.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 54231.288 ops/s
[info]                  ·gc.alloc.rate:            700.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19680.132 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 55186.713 ops/s
[info]                  ·gc.alloc.rate:            713.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.097 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19338.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 55206.352 ops/s
[info]                  ·gc.alloc.rate:            713.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19332.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   54959.974 ±(99.9%) 1588.729 ops/s [Average]
[info]   (min, avg, max) = (54231.288, 54959.974, 55206.352), stdev = 412.588
[info]   CI (99.9%): [53371.245, 56548.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   710.115 ±(99.9%) 20.593 MB/sec [Average]
[info]   (min, avg, max) = (700.659, 710.115, 713.253), stdev = 5.348
[info]   CI (99.9%): [689.522, 730.708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.008, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.078 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (678.037, 678.078, 678.149), stdev = 0.045
[info]   CI (99.9%): [677.904, 678.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19419.457 ±(99.9%) 568.056 B/op [Average]
[info]   (min, avg, max) = (19332.265, 19419.457, 19680.132), stdev = 147.522
[info]   CI (99.9%): [18851.400, 19987.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.65% complete, ETA 01:41:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13009.598 ops/s
[info] # Warmup Iteration   2: 29795.513 ops/s
[info] # Warmup Iteration   3: 29988.813 ops/s
[info] # Warmup Iteration   4: 30043.443 ops/s
[info] # Warmup Iteration   5: 30089.234 ops/s
[info] Iteration   1: 30048.953 ops/s
[info]                  ·gc.alloc.rate:                   2006.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              105128.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106553.241 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 244.228 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 30456.400 ops/s
[info]                  ·gc.alloc.rate:                                  2034.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.521 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105645.899 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30300.428 ops/s
[info]                  ·gc.alloc.rate:                                  2024.178 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.528 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106189.729 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 30276.860 ops/s
[info]                  ·gc.alloc.rate:                                  2022.312 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106273.893 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 30442.109 ops/s
[info]                  ·gc.alloc.rate:                                  2034.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.168 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2045.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105694.477 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   30304.950 ±(99.9%) 632.999 ops/s [Average]
[info]   (min, avg, max) = (30048.953, 30304.950, 30456.400), stdev = 164.388
[info]   CI (99.9%): [29671.951, 30937.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2024.331 ±(99.9%) 42.886 MB/sec [Average]
[info]   (min, avg, max) = (2006.972, 2024.331, 2034.105), stdev = 11.137
[info]   CI (99.9%): [1981.445, 2067.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105128.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (105128.013, 105128.014, 105128.015), stdev = 0.001
[info]   CI (99.9%): [105128.012, 105128.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.498 ±(99.9%) 2.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.498, 1.521), stdev = 0.603
[info]   CI (99.9%): [≈ 0, 2.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2042.466 ±(99.9%) 17.887 MB/sec [Average]
[info]   (min, avg, max) = (2034.181, 2042.466, 2045.065), stdev = 4.645
[info]   CI (99.9%): [2024.579, 2060.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   106071.448 ±(99.9%) 1504.091 B/op [Average]
[info]   (min, avg, max) = (105645.899, 106071.448, 106553.241), stdev = 390.608
[info]   CI (99.9%): [104567.357, 107575.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   48.846 ±(99.9%) 420.576 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48.846, 244.228), stdev = 109.222
[info]   CI (99.9%): [≈ 0, 469.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 15.000), stdev = 4.868
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.88% complete, ETA 01:41:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17416.309 ops/s
[info] # Warmup Iteration   2: 31531.580 ops/s
[info] # Warmup Iteration   3: 32161.710 ops/s
[info] # Warmup Iteration   4: 31995.309 ops/s
[info] # Warmup Iteration   5: 31911.801 ops/s
[info] Iteration   1: 32063.986 ops/s
[info]                  ·gc.alloc.rate:            1816.229 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.640 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66439.240 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 32102.665 ops/s
[info]                  ·gc.alloc.rate:                                  1818.207 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.692 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99995.008 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                228.597 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 32252.540 ops/s
[info]                  ·gc.alloc.rate:                                  1827.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.490 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99754.487 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 32259.385 ops/s
[info]                  ·gc.alloc.rate:            1826.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       89144.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66492.685 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 32296.389 ops/s
[info]                  ·gc.alloc.rate:                                  1828.960 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89144.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99624.783 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   32194.993 ±(99.9%) 401.218 ops/s [Average]
[info]   (min, avg, max) = (32063.986, 32194.993, 32296.389), stdev = 104.195
[info]   CI (99.9%): [31793.775, 32596.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1823.553 ±(99.9%) 22.609 MB/sec [Average]
[info]   (min, avg, max) = (1816.229, 1823.553, 1828.960), stdev = 5.871
[info]   CI (99.9%): [1800.944, 1846.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.013 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (89144.013, 89144.013, 89144.014), stdev = 0.001
[info]   CI (99.9%): [89144.011, 89144.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.096), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.240 ±(99.9%) 7.832 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.240, 4.692), stdev = 2.034
[info]   CI (99.9%): [≈ 0, 9.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1768.960 ±(99.9%) 1443.972 MB/sec [Average]
[info]   (min, avg, max) = (1353.640, 1768.960, 2044.891), stdev = 374.995
[info]   CI (99.9%): [324.988, 3212.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   86461.241 ±(99.9%) 70288.118 B/op [Average]
[info]   (min, avg, max) = (66439.240, 86461.241, 99995.008), stdev = 18253.601
[info]   CI (99.9%): [16173.123, 156749.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   45.719 ±(99.9%) 393.658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.719, 228.597), stdev = 102.232
[info]   CI (99.9%): [≈ 0, 439.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.881
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.12% complete, ETA 01:41:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38032.770 ops/s
[info] # Warmup Iteration   2: 45949.043 ops/s
[info] # Warmup Iteration   3: 45815.265 ops/s
[info] # Warmup Iteration   4: 45852.433 ops/s
[info] # Warmup Iteration   5: 45915.577 ops/s
[info] Iteration   1: 45707.643 ops/s
[info]                  ·gc.alloc.rate:                   1756.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70004.461 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.937 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 45957.492 ops/s
[info]                  ·gc.alloc.rate:                                  1766.070 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.720 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.572 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46559.275 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                114.060 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 46103.583 ops/s
[info]                  ·gc.alloc.rate:                                  1771.559 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69786.822 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 46035.113 ops/s
[info]                  ·gc.alloc.rate:            1768.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       60480.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69891.403 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 46048.409 ops/s
[info]                  ·gc.alloc.rate:                                  1769.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60480.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46581.117 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   45970.448 ±(99.9%) 600.314 ops/s [Average]
[info]   (min, avg, max) = (45707.643, 45970.448, 46103.583), stdev = 155.900
[info]   CI (99.9%): [45370.134, 46570.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1766.373 ±(99.9%) 23.280 MB/sec [Average]
[info]   (min, avg, max) = (1756.138, 1766.373, 1771.559), stdev = 6.046
[info]   CI (99.9%): [1743.092, 1789.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (60480.009, 60480.009, 60480.010), stdev = 0.001
[info]   CI (99.9%): [60480.008, 60480.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.229 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.138), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.169 ±(99.9%) 7.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.169, 4.720), stdev = 2.038
[info]   CI (99.9%): [≈ 0, 9.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1768.634 ±(99.9%) 1432.509 MB/sec [Average]
[info]   (min, avg, max) = (1359.572, 1768.634, 2044.171), stdev = 372.018
[info]   CI (99.9%): [336.125, 3201.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   60564.616 ±(99.9%) 49193.259 B/op [Average]
[info]   (min, avg, max) = (46559.275, 60564.616, 70004.461), stdev = 12775.333
[info]   CI (99.9%): [11371.356, 109757.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   27.399 ±(99.9%) 190.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.399, 114.060), stdev = 49.452
[info]   CI (99.9%): [≈ 0, 217.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.35% complete, ETA 01:41:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38391.317 ops/s
[info] # Warmup Iteration   2: 45588.331 ops/s
[info] # Warmup Iteration   3: 45051.751 ops/s
[info] # Warmup Iteration   4: 45478.459 ops/s
[info] # Warmup Iteration   5: 45072.585 ops/s
[info] Iteration   1: 44737.397 ops/s
[info]                  ·gc.alloc.rate:                   1640.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        71522.046 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 44781.127 ops/s
[info]                  ·gc.alloc.rate:                   1643.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47619.978 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 140.472 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 45293.851 ops/s
[info]                  ·gc.alloc.rate:                                  1661.596 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.134 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.662 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.408 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71037.720 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 45771.311 ops/s
[info]                  ·gc.alloc.rate:            1678.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       57736.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46861.940 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 45685.928 ops/s
[info]                  ·gc.alloc.rate:                                  1675.807 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57736.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.160 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70426.746 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   45253.923 ±(99.9%) 1872.863 ops/s [Average]
[info]   (min, avg, max) = (44737.397, 45253.923, 45771.311), stdev = 486.377
[info]   CI (99.9%): [43381.060, 47126.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1660.122 ±(99.9%) 68.215 MB/sec [Average]
[info]   (min, avg, max) = (1640.985, 1660.122, 1678.986), stdev = 17.715
[info]   CI (99.9%): [1591.907, 1728.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57736.009, 57736.009, 57736.009), stdev = 0.001
[info]   CI (99.9%): [57736.009, 57736.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.134), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.940 ±(99.9%) 8.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.940, 4.662), stdev = 2.081
[info]   CI (99.9%): [≈ 0, 8.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1767.894 ±(99.9%) 1437.315 MB/sec [Average]
[info]   (min, avg, max) = (1355.324, 1767.894, 2044.408), stdev = 373.266
[info]   CI (99.9%): [330.579, 3205.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   61493.686 ±(99.9%) 50133.251 B/op [Average]
[info]   (min, avg, max) = (46861.940, 61493.686, 71522.046), stdev = 13019.446
[info]   CI (99.9%): [11360.435, 111626.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   32.781 ±(99.9%) 235.082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.781, 140.472), stdev = 61.050
[info]   CI (99.9%): [≈ 0, 267.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10.59% complete, ETA 01:40:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320844.989 ops/s
[info] # Warmup Iteration   2: 380514.082 ops/s
[info] # Warmup Iteration   3: 379762.810 ops/s
[info] # Warmup Iteration   4: 384350.509 ops/s
[info] # Warmup Iteration   5: 379969.194 ops/s
[info] Iteration   1: 382342.232 ops/s
[info]                  ·gc.alloc.rate:                   1933.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8374.437 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.711 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 384290.816 ops/s
[info]                  ·gc.alloc.rate:                                  1943.299 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.442 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8372.676 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 386102.302 ops/s
[info]                  ·gc.alloc.rate:                                  1952.735 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8333.432 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 384487.393 ops/s
[info]                  ·gc.alloc.rate:                                  1944.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8368.038 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 384379.020 ops/s
[info]                  ·gc.alloc.rate:                                  1943.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8370.302 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   384320.353 ±(99.9%) 5137.587 ops/s [Average]
[info]   (min, avg, max) = (382342.232, 384320.353, 386102.302), stdev = 1334.215
[info]   CI (99.9%): [379182.766, 389457.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1943.550 ±(99.9%) 26.432 MB/sec [Average]
[info]   (min, avg, max) = (1933.391, 1943.550, 1952.735), stdev = 6.864
[info]   CI (99.9%): [1917.118, 1969.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.108), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.095 ±(99.9%) 0.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.442), stdev = 0.195
[info]   CI (99.9%): [≈ 0, 0.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2042.128 ±(99.9%) 17.388 MB/sec [Average]
[info]   (min, avg, max) = (2034.053, 2042.128, 2044.344), stdev = 4.516
[info]   CI (99.9%): [2024.740, 2059.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8363.777 ±(99.9%) 65.979 B/op [Average]
[info]   (min, avg, max) = (8333.432, 8363.777, 8374.437), stdev = 17.135
[info]   CI (99.9%): [8297.798, 8429.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.742 ±(99.9%) 23.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.742, 13.711), stdev = 6.132
[info]   CI (99.9%): [≈ 0, 26.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 11.000), stdev = 3.271
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10.82% complete, ETA 01:40:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120953.108 ops/s
[info] # Warmup Iteration   2: 1515634.506 ops/s
[info] # Warmup Iteration   3: 1489699.499 ops/s
[info] # Warmup Iteration   4: 1479248.720 ops/s
[info] # Warmup Iteration   5: 1493403.329 ops/s
[info] Iteration   1: 1478659.089 ops/s
[info]                  ·gc.alloc.rate:            465.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 718.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1463963.156 ops/s
[info]                  ·gc.alloc.rate:            461.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 725.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1495227.710 ops/s
[info]                  ·gc.alloc.rate:      471.172 MB/sec
[info]                  ·gc.alloc.rate.norm: 496.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1486063.096 ops/s
[info]                  ·gc.alloc.rate:            468.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 714.648 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1486672.091 ops/s
[info]                  ·gc.alloc.rate:            468.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 714.354 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1482117.029 ±(99.9%) 45141.736 ops/s [Average]
[info]   (min, avg, max) = (1463963.156, 1482117.029, 1495227.710), stdev = 11723.165
[info]   CI (99.9%): [1436975.293, 1527258.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   467.083 ±(99.9%) 14.028 MB/sec [Average]
[info]   (min, avg, max) = (461.466, 467.083, 471.172), stdev = 3.643
[info]   CI (99.9%): [453.055, 481.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.838 ±(99.9%) 1162.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.838, 674.958), stdev = 301.779
[info]   CI (99.9%): [≈ 0, 1701.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   574.540 ±(99.9%) 1236.860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 574.540, 725.469), stdev = 321.209
[info]   CI (99.9%): [≈ 0, 1811.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.06% complete, ETA 01:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367744.893 ops/s
[info] # Warmup Iteration   2: 578983.787 ops/s
[info] # Warmup Iteration   3: 584323.608 ops/s
[info] # Warmup Iteration   4: 564494.665 ops/s
[info] # Warmup Iteration   5: 581844.598 ops/s
[info] Iteration   1: 582681.859 ops/s
[info]                  ·gc.alloc.rate:            494.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1829.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 585470.800 ops/s
[info]                  ·gc.alloc.rate:      496.900 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 583060.218 ops/s
[info]                  ·gc.alloc.rate:            494.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1828.711 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 581428.656 ops/s
[info]                  ·gc.alloc.rate:            493.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1833.790 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 582260.646 ops/s
[info]                  ·gc.alloc.rate:            494.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1831.148 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   582980.436 ±(99.9%) 5847.259 ops/s [Average]
[info]   (min, avg, max) = (581428.656, 582980.436, 585470.800), stdev = 1518.515
[info]   CI (99.9%): [577133.177, 588827.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   494.799 ±(99.9%) 4.920 MB/sec [Average]
[info]   (min, avg, max) = (493.475, 494.799, 496.900), stdev = 1.278
[info]   CI (99.9%): [489.878, 499.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.887 ±(99.9%) 1166.454 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.887, 677.430), stdev = 302.924
[info]   CI (99.9%): [≈ 0, 1708.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1464.701 ±(99.9%) 3152.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1464.701, 1833.790), stdev = 818.795
[info]   CI (99.9%): [≈ 0, 4617.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.29% complete, ETA 01:40:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1640712.651 ops/s
[info] # Warmup Iteration   2: 1724562.708 ops/s
[info] # Warmup Iteration   3: 1639493.083 ops/s
[info] # Warmup Iteration   4: 1750379.789 ops/s
[info] # Warmup Iteration   5: 1673192.448 ops/s
[info] Iteration   1: 1741920.115 ops/s
[info]                  ·gc.alloc.rate:      336.405 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1666534.931 ops/s
[info]                  ·gc.alloc.rate:            322.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 640.428 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1748219.157 ops/s
[info]                  ·gc.alloc.rate:      337.615 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1724274.017 ops/s
[info]                  ·gc.alloc.rate:            333.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 618.978 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1743567.577 ops/s
[info]                  ·gc.alloc.rate:      336.736 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1724903.159 ±(99.9%) 130422.893 ops/s [Average]
[info]   (min, avg, max) = (1666534.931, 1724903.159, 1748219.157), stdev = 33870.411
[info]   CI (99.9%): [1594480.267, 1855326.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   333.157 ±(99.9%) 24.901 MB/sec [Average]
[info]   (min, avg, max) = (322.021, 333.157, 337.615), stdev = 6.467
[info]   CI (99.9%): [308.256, 358.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.287 ±(99.9%) 1430.417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.287, 678.391), stdev = 371.475
[info]   CI (99.9%): [≈ 0, 1701.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   251.881 ±(99.9%) 1328.418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 251.881, 640.428), stdev = 344.986
[info]   CI (99.9%): [≈ 0, 1580.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11.53% complete, ETA 01:39:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54058.128 ops/s
[info] # Warmup Iteration   2: 92590.219 ops/s
[info] # Warmup Iteration   3: 92625.253 ops/s
[info] # Warmup Iteration   4: 93012.036 ops/s
[info] # Warmup Iteration   5: 94450.141 ops/s
[info] Iteration   1: 94092.723 ops/s
[info]                  ·gc.alloc.rate:                                  3417.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.855 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56990.854 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 93194.230 ops/s
[info]                  ·gc.alloc.rate:                                  3385.074 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57539.895 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 93700.075 ops/s
[info]                  ·gc.alloc.rate:                                  3403.620 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57227.398 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 93065.231 ops/s
[info]                  ·gc.alloc.rate:                                  3380.246 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57621.494 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 93109.080 ops/s
[info]                  ·gc.alloc.rate:            3382.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       57176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57594.268 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   93432.268 ±(99.9%) 1726.091 ops/s [Average]
[info]   (min, avg, max) = (93065.231, 93432.268, 94092.723), stdev = 448.260
[info]   CI (99.9%): [91706.176, 95158.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3393.782 ±(99.9%) 63.163 MB/sec [Average]
[info]   (min, avg, max) = (3380.246, 3393.782, 3417.923), stdev = 16.403
[info]   CI (99.9%): [3330.620, 3456.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.028), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3406.705 ±(99.9%) 0.441 MB/sec [Average]
[info]   (min, avg, max) = (3406.584, 3406.705, 3406.855), stdev = 0.115
[info]   CI (99.9%): [3406.264, 3407.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57394.782 ±(99.9%) 1060.547 B/op [Average]
[info]   (min, avg, max) = (56990.854, 57394.782, 57621.494), stdev = 275.421
[info]   CI (99.9%): [56334.235, 58455.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.000, 9.000), stdev = 1.414
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.76% complete, ETA 01:39:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 252820.395 ops/s
[info] # Warmup Iteration   2: 320401.245 ops/s
[info] # Warmup Iteration   3: 318349.710 ops/s
[info] # Warmup Iteration   4: 327899.016 ops/s
[info] # Warmup Iteration   5: 326749.227 ops/s
[info] Iteration   1: 317215.535 ops/s
[info]                  ·gc.alloc.rate:            493.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3364.433 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 325754.617 ops/s
[info]                  ·gc.alloc.rate:            506.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3276.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 328552.545 ops/s
[info]                  ·gc.alloc.rate:      511.127 MB/sec
[info]                  ·gc.alloc.rate.norm: 2448.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 324293.054 ops/s
[info]                  ·gc.alloc.rate:            504.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3291.065 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 325222.401 ops/s
[info]                  ·gc.alloc.rate:            505.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       2448.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3281.676 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   324207.630 ±(99.9%) 16245.646 ops/s [Average]
[info]   (min, avg, max) = (317215.535, 324207.630, 328552.545), stdev = 4218.943
[info]   CI (99.9%): [307961.985, 340453.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   504.273 ±(99.9%) 25.508 MB/sec [Average]
[info]   (min, avg, max) = (493.327, 504.273, 511.127), stdev = 6.624
[info]   CI (99.9%): [478.764, 529.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2448.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2448.001, 2448.001, 2448.001), stdev = 0.001
[info]   CI (99.9%): [2448.001, 2448.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.466 ±(99.9%) 1167.699 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.466, 678.288), stdev = 303.248
[info]   CI (99.9%): [≈ 0, 1710.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2642.698 ±(99.9%) 5690.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2642.698, 3364.433), stdev = 1477.743
[info]   CI (99.9%): [≈ 0, 8332.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.00% complete, ETA 01:39:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116478.657 ops/s
[info] # Warmup Iteration   2: 1201495.013 ops/s
[info] # Warmup Iteration   3: 1210778.504 ops/s
[info] # Warmup Iteration   4: 1224382.496 ops/s
[info] # Warmup Iteration   5: 1233699.808 ops/s
[info] Iteration   1: 1225700.710 ops/s
[info]                  ·gc.alloc.rate:            566.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 866.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1213336.775 ops/s
[info]                  ·gc.alloc.rate:            561.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 875.303 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1222448.916 ops/s
[info]                  ·gc.alloc.rate:      565.465 MB/sec
[info]                  ·gc.alloc.rate.norm: 728.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1213587.359 ops/s
[info]                  ·gc.alloc.rate:            561.314 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 875.087 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1229721.042 ops/s
[info]                  ·gc.alloc.rate:            568.760 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 863.635 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1220958.960 ±(99.9%) 28159.534 ops/s [Average]
[info]   (min, avg, max) = (1213336.775, 1220958.960, 1229721.042), stdev = 7312.941
[info]   CI (99.9%): [1192799.427, 1249118.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   564.724 ±(99.9%) 13.008 MB/sec [Average]
[info]   (min, avg, max) = (561.191, 564.724, 568.760), stdev = 3.378
[info]   CI (99.9%): [551.716, 577.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.782 ±(99.9%) 1161.922 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.782, 674.741), stdev = 301.747
[info]   CI (99.9%): [≈ 0, 1701.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   696.099 ±(99.9%) 1498.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 696.099, 875.303), stdev = 389.166
[info]   CI (99.9%): [≈ 0, 2194.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.24% complete, ETA 01:39:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 662816.469 ops/s
[info] # Warmup Iteration   2: 961170.494 ops/s
[info] # Warmup Iteration   3: 965961.957 ops/s
[info] # Warmup Iteration   4: 967967.857 ops/s
[info] # Warmup Iteration   5: 970118.915 ops/s
[info] Iteration   1: 967573.036 ops/s
[info]                  ·gc.alloc.rate:            683.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.568 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1101.940 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 969216.501 ops/s
[info]                  ·gc.alloc.rate:                   684.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1099.002 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.082 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 969939.021 ops/s
[info]                  ·gc.alloc.rate:            685.350 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1099.235 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 963317.981 ops/s
[info]                  ·gc.alloc.rate:            680.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1106.818 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 963675.494 ops/s
[info]                  ·gc.alloc.rate:            680.876 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1106.450 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   966744.407 ±(99.9%) 11893.763 ops/s [Average]
[info]   (min, avg, max) = (963317.981, 966744.407, 969939.021), stdev = 3088.772
[info]   CI (99.9%): [954850.644, 978638.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   683.084 ±(99.9%) 8.472 MB/sec [Average]
[info]   (min, avg, max) = (680.641, 683.084, 685.350), stdev = 2.200
[info]   CI (99.9%): [674.612, 691.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.358 ±(99.9%) 1.224 MB/sec [Average]
[info]   (min, avg, max) = (676.795, 677.358, 677.568), stdev = 0.318
[info]   CI (99.9%): [676.135, 678.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1102.689 ±(99.9%) 14.571 B/op [Average]
[info]   (min, avg, max) = (1099.002, 1102.689, 1106.818), stdev = 3.784
[info]   CI (99.9%): [1088.118, 1117.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.216 ±(99.9%) 1.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.216, 1.082), stdev = 0.484
[info]   CI (99.9%): [≈ 0, 2.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.47% complete, ETA 01:38:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2235685.507 ops/s
[info] # Warmup Iteration   2: 2416189.498 ops/s
[info] # Warmup Iteration   3: 2548228.317 ops/s
[info] # Warmup Iteration   4: 2521240.856 ops/s
[info] # Warmup Iteration   5: 2475710.609 ops/s
[info] Iteration   1: 2473513.812 ops/s
[info]                  ·gc.alloc.rate:                   1144.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        862.526 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.424 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2512086.000 ops/s
[info]                  ·gc.alloc.rate:            1162.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 424.857 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 2522667.611 ops/s
[info]                  ·gc.alloc.rate:            1166.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 845.753 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 2524879.937 ops/s
[info]                  ·gc.alloc.rate:                   1167.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        844.578 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.415 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2530873.476 ops/s
[info]                  ·gc.alloc.rate:                   1170.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        421.702 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2512804.167 ±(99.9%) 88520.002 ops/s [Average]
[info]   (min, avg, max) = (2473513.812, 2512804.167, 2530873.476), stdev = 22988.363
[info]   CI (99.9%): [2424284.165, 2601324.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1162.421 ±(99.9%) 40.741 MB/sec [Average]
[info]   (min, avg, max) = (1144.254, 1162.421, 1170.538), stdev = 10.580
[info]   CI (99.9%): [1121.681, 1203.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.570 ±(99.9%) 1428.482 MB/sec [Average]
[info]   (min, avg, max) = (678.047, 1084.570, 1355.748), stdev = 370.972
[info]   CI (99.9%): [≈ 0, 2513.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   679.883 ±(99.9%) 902.423 B/op [Average]
[info]   (min, avg, max) = (421.702, 679.883, 862.526), stdev = 234.356
[info]   CI (99.9%): [≈ 0, 1582.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.582 ±(99.9%) 3.306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.582, 2.071), stdev = 0.858
[info]   CI (99.9%): [≈ 0, 3.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 12.71% complete, ETA 01:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2293013.851 ops/s
[info] # Warmup Iteration   2: 2523582.107 ops/s
[info] # Warmup Iteration   3: 2533332.285 ops/s
[info] # Warmup Iteration   4: 2533891.542 ops/s
[info] # Warmup Iteration   5: 2481414.969 ops/s
[info] Iteration   1: 2534866.504 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2533711.464 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2535563.886 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2533964.600 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2534641.038 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2534549.498 ±(99.9%) 2844.178 ops/s [Average]
[info]   (min, avg, max) = (2533711.464, 2534549.498, 2535563.886), stdev = 738.624
[info]   CI (99.9%): [2531705.320, 2537393.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:38:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310545.266 ops/s
[info] # Warmup Iteration   2: 398551.263 ops/s
[info] # Warmup Iteration   3: 411387.764 ops/s
[info] # Warmup Iteration   4: 408853.793 ops/s
[info] # Warmup Iteration   5: 415386.658 ops/s
[info] Iteration   1: 416107.622 ops/s
[info]                  ·gc.alloc.rate:            486.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2562.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 418173.289 ops/s
[info]                  ·gc.alloc.rate:      488.809 MB/sec
[info]                  ·gc.alloc.rate.norm: 1840.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 414999.172 ops/s
[info]                  ·gc.alloc.rate:            485.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2569.222 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 415523.586 ops/s
[info]                  ·gc.alloc.rate:            485.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2565.945 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 413772.713 ops/s
[info]                  ·gc.alloc.rate:      483.677 MB/sec
[info]                  ·gc.alloc.rate.norm: 1840.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   415715.276 ±(99.9%) 6244.358 ops/s [Average]
[info]   (min, avg, max) = (413772.713, 415715.276, 418173.289), stdev = 1621.640
[info]   CI (99.9%): [409470.918, 421959.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   485.944 ±(99.9%) 7.294 MB/sec [Average]
[info]   (min, avg, max) = (483.677, 485.944, 488.809), stdev = 1.894
[info]   CI (99.9%): [478.650, 493.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   406.419 ±(99.9%) 1428.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.419, 677.413), stdev = 371.008
[info]   CI (99.9%): [≈ 0, 1835.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1539.521 ±(99.9%) 5411.641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1539.521, 2569.222), stdev = 1405.386
[info]   CI (99.9%): [≈ 0, 6951.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:37:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115526.663 ops/s
[info] # Warmup Iteration   2: 143047.422 ops/s
[info] # Warmup Iteration   3: 141411.113 ops/s
[info] # Warmup Iteration   4: 144486.182 ops/s
[info] # Warmup Iteration   5: 141364.047 ops/s
[info] Iteration   1: 142629.552 ops/s
[info]                  ·gc.alloc.rate:            1714.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       18920.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14965.586 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 141934.808 ops/s
[info]                  ·gc.alloc.rate:                                  1706.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.488 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22595.373 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                36.933 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 143091.584 ops/s
[info]                  ·gc.alloc.rate:                                  1719.950 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.263 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14990.647 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 142801.784 ops/s
[info]                  ·gc.alloc.rate:                                  1716.647 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22531.628 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 143290.402 ops/s
[info]                  ·gc.alloc.rate:            1722.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       18920.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14968.996 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   142749.626 ±(99.9%) 2010.502 ops/s [Average]
[info]   (min, avg, max) = (141934.808, 142749.626, 143290.402), stdev = 522.121
[info]   CI (99.9%): [140739.124, 144760.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1715.872 ±(99.9%) 24.179 MB/sec [Average]
[info]   (min, avg, max) = (1706.105, 1715.872, 1722.392), stdev = 6.279
[info]   CI (99.9%): [1691.692, 1740.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.003, 18920.003, 18920.003), stdev = 0.001
[info]   CI (99.9%): [18920.002, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.152 ±(99.9%) 0.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.152, 0.488), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 0.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1632.659 ±(99.9%) 1435.210 MB/sec [Average]
[info]   (min, avg, max) = (1355.972, 1632.659, 2044.336), stdev = 372.719
[info]   CI (99.9%): [197.449, 3067.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18010.446 ±(99.9%) 16004.906 B/op [Average]
[info]   (min, avg, max) = (14965.586, 18010.446, 22595.373), stdev = 4156.423
[info]   CI (99.9%): [2005.541, 34015.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   7.387 ±(99.9%) 63.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.387, 36.933), stdev = 16.517
[info]   CI (99.9%): [≈ 0, 70.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 8.000), stdev = 2.490
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.41% complete, ETA 01:37:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 242246.098 ops/s
[info] # Warmup Iteration   2: 369052.426 ops/s
[info] # Warmup Iteration   3: 366951.356 ops/s
[info] # Warmup Iteration   4: 370634.168 ops/s
[info] # Warmup Iteration   5: 361789.610 ops/s
[info] Iteration   1: 370774.541 ops/s
[info]                  ·gc.alloc.rate:      314.682 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 366319.965 ops/s
[info]                  ·gc.alloc.rate:            310.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2910.652 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 370465.241 ops/s
[info]                  ·gc.alloc.rate:      314.443 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 368438.526 ops/s
[info]                  ·gc.alloc.rate:            312.721 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2893.805 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 369901.316 ops/s
[info]                  ·gc.alloc.rate:      313.948 MB/sec
[info]                  ·gc.alloc.rate.norm: 1336.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   369179.918 ±(99.9%) 7059.473 ops/s [Average]
[info]   (min, avg, max) = (366319.965, 369179.918, 370774.541), stdev = 1833.323
[info]   CI (99.9%): [362120.444, 376239.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   313.339 ±(99.9%) 5.997 MB/sec [Average]
[info]   (min, avg, max) = (310.904, 313.339, 314.682), stdev = 1.557
[info]   CI (99.9%): [307.342, 319.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.941 ±(99.9%) 1428.593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.941, 677.359), stdev = 371.001
[info]   CI (99.9%): [≈ 0, 1699.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1160.891 ±(99.9%) 6121.088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1160.891, 2910.652), stdev = 1589.627
[info]   CI (99.9%): [≈ 0, 7281.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.65% complete, ETA 01:37:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 780004.291 ops/s
[info] # Warmup Iteration   2: 818465.438 ops/s
[info] # Warmup Iteration   3: 821049.684 ops/s
[info] # Warmup Iteration   4: 818766.815 ops/s
[info] # Warmup Iteration   5: 802701.728 ops/s
[info] Iteration   1: 834045.569 ops/s
[info]                  ·gc.alloc.rate:      161.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 833887.561 ops/s
[info]                  ·gc.alloc.rate:      161.085 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 834364.491 ops/s
[info]                  ·gc.alloc.rate:      161.154 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 807520.481 ops/s
[info]                  ·gc.alloc.rate:            155.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1321.689 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 805050.918 ops/s
[info]                  ·gc.alloc.rate:      155.473 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   822973.804 ±(99.9%) 58761.030 ops/s [Average]
[info]   (min, avg, max) = (805050.918, 822973.804, 834364.491), stdev = 15260.053
[info]   CI (99.9%): [764212.773, 881734.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   158.947 ±(99.9%) 11.412 MB/sec [Average]
[info]   (min, avg, max) = (155.473, 158.947, 161.154), stdev = 2.964
[info]   CI (99.9%): [147.536, 170.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.001, 304.001), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.594 ±(99.9%) 1167.503 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.594, 677.969), stdev = 303.197
[info]   CI (99.9%): [≈ 0, 1303.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   264.338 ±(99.9%) 2276.028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 264.338, 1321.689), stdev = 591.077
[info]   CI (99.9%): [≈ 0, 2540.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.88% complete, ETA 01:37:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43161.022 ops/s
[info] # Warmup Iteration   2: 75984.219 ops/s
[info] # Warmup Iteration   3: 76769.901 ops/s
[info] # Warmup Iteration   4: 77727.318 ops/s
[info] # Warmup Iteration   5: 78500.110 ops/s
[info] Iteration   1: 78590.243 ops/s
[info]                  ·gc.alloc.rate:                                  3346.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.161 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68234.880 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 78886.326 ops/s
[info]                  ·gc.alloc.rate:            3359.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       67016.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54382.421 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 78273.566 ops/s
[info]                  ·gc.alloc.rate:                                  3332.475 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68509.430 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 79269.164 ops/s
[info]                  ·gc.alloc.rate:                                  3375.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67016.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67649.638 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 79127.128 ops/s
[info]                  ·gc.alloc.rate:            3368.695 MB/sec
[info]                  ·gc.alloc.rate.norm:       67016.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67769.307 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   78829.285 ±(99.9%) 1553.942 ops/s [Average]
[info]   (min, avg, max) = (78273.566, 78829.285, 79269.164), stdev = 403.554
[info]   CI (99.9%): [77275.344, 80383.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3356.315 ±(99.9%) 66.509 MB/sec [Average]
[info]   (min, avg, max) = (3332.475, 3356.315, 3375.280), stdev = 17.272
[info]   CI (99.9%): [3289.806, 3422.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67016.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67016.005, 67016.005, 67016.006), stdev = 0.001
[info]   CI (99.9%): [67016.005, 67016.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.013 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.048 ±(99.9%) 0.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.161), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3270.649 ±(99.9%) 1172.815 MB/sec [Average]
[info]   (min, avg, max) = (2725.806, 3270.649, 3407.193), stdev = 304.576
[info]   CI (99.9%): [2097.833, 4443.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65309.135 ±(99.9%) 23558.685 B/op [Average]
[info]   (min, avg, max) = (54382.421, 65309.135, 68509.430), stdev = 6118.116
[info]   CI (99.9%): [41750.450, 88867.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 12.000), stdev = 3.194
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.12% complete, ETA 01:36:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205789.156 ops/s
[info] # Warmup Iteration   2: 260486.626 ops/s
[info] # Warmup Iteration   3: 262517.867 ops/s
[info] # Warmup Iteration   4: 261880.948 ops/s
[info] # Warmup Iteration   5: 251627.252 ops/s
[info] Iteration   1: 263776.696 ops/s
[info]                  ·gc.alloc.rate:            1162.451 MB/sec
[info]                  ·gc.alloc.rate.norm:       6936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4046.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 262344.774 ops/s
[info]                  ·gc.alloc.rate:            1156.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       6936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8136.458 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 262241.219 ops/s
[info]                  ·gc.alloc.rate:            1155.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       6936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8139.343 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 263338.126 ops/s
[info]                  ·gc.alloc.rate:            1160.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       6936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4052.875 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 261868.297 ops/s
[info]                  ·gc.alloc.rate:                   1153.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              6936.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8151.245 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.018 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   262713.822 ±(99.9%) 3100.855 ops/s [Average]
[info]   (min, avg, max) = (261868.297, 262713.822, 263776.696), stdev = 805.282
[info]   CI (99.9%): [259612.967, 265814.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1157.659 ±(99.9%) 13.772 MB/sec [Average]
[info]   (min, avg, max) = (1153.907, 1157.659, 1162.451), stdev = 3.577
[info]   CI (99.9%): [1143.887, 1171.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6936.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6936.002, 6936.002, 6936.002), stdev = 0.001
[info]   CI (99.9%): [6936.001, 6936.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1084.876 ±(99.9%) 1430.004 MB/sec [Average]
[info]   (min, avg, max) = (678.008, 1084.876, 1356.129), stdev = 371.368
[info]   CI (99.9%): [≈ 0, 2514.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6505.210 ±(99.9%) 8632.188 B/op [Average]
[info]   (min, avg, max) = (4046.131, 6505.210, 8151.245), stdev = 2241.752
[info]   CI (99.9%): [≈ 0, 15137.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.004 ±(99.9%) 34.472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.004, 20.018), stdev = 8.952
[info]   CI (99.9%): [≈ 0, 38.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.35% complete, ETA 01:36:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1150984.648 ops/s
[info] # Warmup Iteration   2: 1861364.226 ops/s
[info] # Warmup Iteration   3: 1840667.511 ops/s
[info] # Warmup Iteration   4: 1843816.612 ops/s
[info] # Warmup Iteration   5: 1887524.184 ops/s
[info] Iteration   1: 1884869.599 ops/s
[info]                  ·gc.alloc.rate:            967.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 565.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1881517.447 ops/s
[info]                  ·gc.alloc.rate:            965.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1133.369 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 1887180.571 ops/s
[info]                  ·gc.alloc.rate:            968.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 564.971 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1868738.095 ops/s
[info]                  ·gc.alloc.rate:            959.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1141.017 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1887124.748 ops/s
[info]                  ·gc.alloc.rate:            968.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 565.004 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1881886.092 ±(99.9%) 29663.835 ops/s [Average]
[info]   (min, avg, max) = (1868738.095, 1881886.092, 1887180.571), stdev = 7703.604
[info]   CI (99.9%): [1852222.257, 1911549.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   966.008 ±(99.9%) 15.196 MB/sec [Average]
[info]   (min, avg, max) = (959.260, 966.008, 968.794), stdev = 3.946
[info]   CI (99.9%): [950.812, 981.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.299 ±(99.9%) 1428.697 MB/sec [Average]
[info]   (min, avg, max) = (677.278, 948.299, 1354.862), stdev = 371.028
[info]   CI (99.9%): [≈ 0, 2376.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   794.005 ±(99.9%) 1206.400 B/op [Average]
[info]   (min, avg, max) = (564.971, 794.005, 1141.017), stdev = 313.298
[info]   CI (99.9%): [≈ 0, 2000.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.59% complete, ETA 01:36:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1981296.543 ops/s
[info] # Warmup Iteration   2: 2151725.679 ops/s
[info] # Warmup Iteration   3: 2236439.471 ops/s
[info] # Warmup Iteration   4: 2226977.595 ops/s
[info] # Warmup Iteration   5: 2228682.426 ops/s
[info] Iteration   1: 2204012.033 ops/s
[info]                  ·gc.alloc.rate:                   593.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        483.781 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.476 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2234994.933 ops/s
[info]                  ·gc.alloc.rate:            602.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 477.530 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 2237501.640 ops/s
[info]                  ·gc.alloc.rate:                   603.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        475.745 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2244306.661 ops/s
[info]                  ·gc.alloc.rate:      604.601 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2230860.127 ops/s
[info]                  ·gc.alloc.rate:            600.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 478.414 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2230335.079 ±(99.9%) 59699.183 ops/s [Average]
[info]   (min, avg, max) = (2204012.033, 2230335.079, 2244306.661), stdev = 15503.688
[info]   CI (99.9%): [2170635.896, 2290034.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   600.893 ±(99.9%) 16.401 MB/sec [Average]
[info]   (min, avg, max) = (593.652, 600.893, 604.601), stdev = 4.259
[info]   CI (99.9%): [584.492, 617.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.062 ±(99.9%) 1166.832 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.062, 678.236), stdev = 303.023
[info]   CI (99.9%): [≈ 0, 1708.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   383.094 ±(99.9%) 824.719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 383.094, 483.781), stdev = 214.177
[info]   CI (99.9%): [≈ 0, 1207.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.189 ±(99.9%) 0.995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.189, 0.476), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 14.82% complete, ETA 01:36:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2294641.304 ops/s
[info] # Warmup Iteration   2: 2513497.751 ops/s
[info] # Warmup Iteration   3: 2515506.638 ops/s
[info] # Warmup Iteration   4: 2522013.216 ops/s
[info] # Warmup Iteration   5: 2519720.892 ops/s
[info] Iteration   1: 2521904.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2520815.715 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2522668.798 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2518904.205 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2522360.105 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2521330.751 ±(99.9%) 5881.854 ops/s [Average]
[info]   (min, avg, max) = (2518904.205, 2521330.751, 2522668.798), stdev = 1527.499
[info]   CI (99.9%): [2515448.896, 2527212.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.06% complete, ETA 01:35:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25731.057 ops/s
[info] # Warmup Iteration   2: 39550.171 ops/s
[info] # Warmup Iteration   3: 38732.869 ops/s
[info] # Warmup Iteration   4: 39735.484 ops/s
[info] # Warmup Iteration   5: 40075.745 ops/s
[info] Iteration   1: 39865.319 ops/s
[info]                  ·gc.alloc.rate:            1686.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       66608.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80238.905 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 39947.835 ops/s
[info]                  ·gc.alloc.rate:                   1691.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              66608.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53380.142 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 157.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 40226.785 ops/s
[info]                  ·gc.alloc.rate:                                  1702.470 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.190 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79984.087 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 40340.479 ops/s
[info]                  ·gc.alloc.rate:                                  1707.045 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53170.748 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 40178.164 ops/s
[info]                  ·gc.alloc.rate:                                  1700.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66608.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80079.623 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   40111.716 ±(99.9%) 764.227 ops/s [Average]
[info]   (min, avg, max) = (39865.319, 40111.716, 40340.479), stdev = 198.467
[info]   CI (99.9%): [39347.489, 40875.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1697.598 ±(99.9%) 31.966 MB/sec [Average]
[info]   (min, avg, max) = (1686.994, 1697.598, 1707.045), stdev = 8.301
[info]   CI (99.9%): [1665.632, 1729.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66608.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66608.010, 66608.010, 66608.011), stdev = 0.001
[info]   CI (99.9%): [66608.009, 66608.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.190), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.507 ±(99.9%) 12.759 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.507, 7.435), stdev = 3.313
[info]   CI (99.9%): [≈ 0, 14.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.761 ±(99.9%) 1437.155 MB/sec [Average]
[info]   (min, avg, max) = (1355.248, 1767.761, 2044.357), stdev = 373.224
[info]   CI (99.9%): [330.606, 3204.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69370.701 ±(99.9%) 56578.897 B/op [Average]
[info]   (min, avg, max) = (53170.748, 69370.701, 80238.905), stdev = 14693.360
[info]   CI (99.9%): [12791.804, 125949.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   31.493 ±(99.9%) 271.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.493, 157.464), stdev = 70.420
[info]   CI (99.9%): [≈ 0, 302.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 4.669
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15.29% complete, ETA 01:35:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180861.886 ops/s
[info] # Warmup Iteration   2: 214916.289 ops/s
[info] # Warmup Iteration   3: 220258.173 ops/s
[info] # Warmup Iteration   4: 218052.336 ops/s
[info] # Warmup Iteration   5: 219087.080 ops/s
[info] Iteration   1: 219640.947 ops/s
[info]                  ·gc.alloc.rate:                                  2261.426 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.519 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14648.809 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 219989.798 ops/s
[info]                  ·gc.alloc.rate:                                  2264.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14625.441 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 219523.111 ops/s
[info]                  ·gc.alloc.rate:                                  2259.251 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19542.332 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 219898.395 ops/s
[info]                  ·gc.alloc.rate:            2263.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       16200.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14631.559 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 218847.576 ops/s
[info]                  ·gc.alloc.rate:                                  2252.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14701.678 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   219579.965 ±(99.9%) 1735.681 ops/s [Average]
[info]   (min, avg, max) = (218847.576, 219579.965, 219989.798), stdev = 450.751
[info]   CI (99.9%): [217844.284, 221315.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2260.207 ±(99.9%) 17.324 MB/sec [Average]
[info]   (min, avg, max) = (2252.906, 2260.207, 2264.230), stdev = 4.499
[info]   CI (99.9%): [2242.883, 2277.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16200.002, 16200.002, 16200.002), stdev = 0.001
[info]   CI (99.9%): [16200.002, 16200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.126 ±(99.9%) 0.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.519), stdev = 0.220
[info]   CI (99.9%): [≈ 0, 0.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2180.611 ±(99.9%) 1172.640 MB/sec [Average]
[info]   (min, avg, max) = (2044.100, 2180.611, 2725.372), stdev = 304.531
[info]   CI (99.9%): [1007.971, 3353.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   15629.964 ±(99.9%) 8422.459 B/op [Average]
[info]   (min, avg, max) = (14625.441, 15629.964, 19542.332), stdev = 2187.286
[info]   CI (99.9%): [7207.505, 24052.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.53% complete, ETA 01:35:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189602.454 ops/s
[info] # Warmup Iteration   2: 286578.620 ops/s
[info] # Warmup Iteration   3: 297119.600 ops/s
[info] # Warmup Iteration   4: 297443.058 ops/s
[info] # Warmup Iteration   5: 297257.961 ops/s
[info] Iteration   1: 297253.706 ops/s
[info]                  ·gc.alloc.rate:            1438.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7173.838 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 293423.942 ops/s
[info]                  ·gc.alloc.rate:            1420.043 MB/sec
[info]                  ·gc.alloc.rate.norm:       7616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10901.229 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 298426.902 ops/s
[info]                  ·gc.alloc.rate:                                  1443.950 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.457 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7166.628 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.078 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 301542.467 ops/s
[info]                  ·gc.alloc.rate:                                  1458.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.228 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7113.681 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 299658.822 ops/s
[info]                  ·gc.alloc.rate:                                  1450.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7158.590 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   298061.168 ±(99.9%) 11705.192 ops/s [Average]
[info]   (min, avg, max) = (293423.942, 298061.168, 301542.467), stdev = 3039.801
[info]   CI (99.9%): [286355.976, 309766.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1442.337 ±(99.9%) 56.286 MB/sec [Average]
[info]   (min, avg, max) = (1420.043, 1442.337, 1458.979), stdev = 14.617
[info]   CI (99.9%): [1386.051, 1498.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.001), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.137 ±(99.9%) 0.787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.137, 0.457), stdev = 0.204
[info]   CI (99.9%): [≈ 0, 0.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1494.439 ±(99.9%) 1158.484 MB/sec [Average]
[info]   (min, avg, max) = (1354.933, 1494.439, 2032.590), stdev = 300.855
[info]   CI (99.9%): [335.955, 2652.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7902.793 ±(99.9%) 6454.990 B/op [Average]
[info]   (min, avg, max) = (7113.681, 7902.793, 10901.229), stdev = 1676.340
[info]   CI (99.9%): [1447.803, 14357.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.216 ±(99.9%) 36.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.216, 21.078), stdev = 9.427
[info]   CI (99.9%): [≈ 0, 40.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 13.000), stdev = 4.637
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.76% complete, ETA 01:35:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1220011.505 ops/s
[info] # Warmup Iteration   2: 1237406.459 ops/s
[info] # Warmup Iteration   3: 1246591.036 ops/s
[info] # Warmup Iteration   4: 1099682.377 ops/s
[info] # Warmup Iteration   5: 1085856.726 ops/s
[info] Iteration   1: 1244372.997 ops/s
[info]                  ·gc.alloc.rate:      430.244 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1238950.514 ops/s
[info]                  ·gc.alloc.rate:            428.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 861.440 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1240270.813 ops/s
[info]                  ·gc.alloc.rate:      428.641 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1241782.258 ops/s
[info]                  ·gc.alloc.rate:            429.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 859.452 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1243324.379 ops/s
[info]                  ·gc.alloc.rate:            429.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 858.404 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1241740.192 ±(99.9%) 8476.766 ops/s [Average]
[info]   (min, avg, max) = (1238950.514, 1241740.192, 1244372.997), stdev = 2201.389
[info]   CI (99.9%): [1233263.426, 1250216.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   429.211 ±(99.9%) 3.219 MB/sec [Average]
[info]   (min, avg, max) = (428.169, 429.211, 430.244), stdev = 0.836
[info]   CI (99.9%): [425.991, 432.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.860 ±(99.9%) 1430.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.860, 678.162), stdev = 371.411
[info]   CI (99.9%): [≈ 0, 1837.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   515.859 ±(99.9%) 1813.322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 515.859, 861.440), stdev = 470.914
[info]   CI (99.9%): [≈ 0, 2329.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.00% complete, ETA 01:34:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32862.476 ops/s
[info] # Warmup Iteration   2: 73937.413 ops/s
[info] # Warmup Iteration   3: 73436.281 ops/s
[info] # Warmup Iteration   4: 74380.409 ops/s
[info] # Warmup Iteration   5: 75243.176 ops/s
[info] Iteration   1: 75205.312 ops/s
[info]                  ·gc.alloc.rate:                                  3160.471 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.117 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71304.674 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 75312.396 ops/s
[info]                  ·gc.alloc.rate:                                  3164.441 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56961.952 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 75036.627 ops/s
[info]                  ·gc.alloc.rate:                                  3153.037 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71467.144 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 75456.541 ops/s
[info]                  ·gc.alloc.rate:            3170.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       66144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71066.585 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 75286.868 ops/s
[info]                  ·gc.alloc.rate:            3163.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       66144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56980.864 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   75259.549 ±(99.9%) 593.365 ops/s [Average]
[info]   (min, avg, max) = (75036.627, 75259.549, 75456.541), stdev = 154.095
[info]   CI (99.9%): [74666.184, 75852.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3162.542 ±(99.9%) 25.095 MB/sec [Average]
[info]   (min, avg, max) = (3153.037, 3162.542, 3170.903), stdev = 6.517
[info]   CI (99.9%): [3137.448, 3187.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66144.005, 66144.005, 66144.005), stdev = 0.001
[info]   CI (99.9%): [66144.005, 66144.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.117), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3134.290 ±(99.9%) 1437.453 MB/sec [Average]
[info]   (min, avg, max) = (2725.156, 3134.290, 3407.056), stdev = 373.302
[info]   CI (99.9%): [1696.837, 4571.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65556.244 ±(99.9%) 30181.904 B/op [Average]
[info]   (min, avg, max) = (56961.952, 65556.244, 71467.144), stdev = 7838.145
[info]   CI (99.9%): [35374.340, 95738.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.673
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.24% complete, ETA 01:34:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157536.513 ops/s
[info] # Warmup Iteration   2: 211940.565 ops/s
[info] # Warmup Iteration   3: 213902.789 ops/s
[info] # Warmup Iteration   4: 215795.954 ops/s
[info] # Warmup Iteration   5: 216776.890 ops/s
[info] Iteration   1: 215801.950 ops/s
[info]                  ·gc.alloc.rate:            1831.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       13360.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.463 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14836.483 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 216761.455 ops/s
[info]                  ·gc.alloc.rate:                                  1840.062 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.455 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14819.563 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.183 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 217993.886 ops/s
[info]                  ·gc.alloc.rate:                                  1850.633 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.148 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9839.372 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 217196.822 ops/s
[info]                  ·gc.alloc.rate:            1843.858 MB/sec
[info]                  ·gc.alloc.rate.norm:       13360.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14813.954 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 216038.121 ops/s
[info]                  ·gc.alloc.rate:                                  1833.572 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13360.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14893.139 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   216758.447 ±(99.9%) 3418.326 ops/s [Average]
[info]   (min, avg, max) = (215801.950, 216758.447, 217993.886), stdev = 887.728
[info]   CI (99.9%): [213340.121, 220176.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1840.025 ±(99.9%) 29.406 MB/sec [Average]
[info]   (min, avg, max) = (1831.999, 1840.025, 1850.633), stdev = 7.637
[info]   CI (99.9%): [1810.618, 1869.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13360.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13360.002, 13360.002, 13360.002), stdev = 0.001
[info]   CI (99.9%): [13360.002, 13360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.063), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.121 ±(99.9%) 0.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.455), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 0.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1905.402 ±(99.9%) 1167.763 MB/sec [Average]
[info]   (min, avg, max) = (1362.954, 1905.402, 2044.523), stdev = 303.264
[info]   CI (99.9%): [737.639, 3073.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13840.502 ±(99.9%) 8613.581 B/op [Average]
[info]   (min, avg, max) = (9839.372, 13840.502, 14893.139), stdev = 2236.920
[info]   CI (99.9%): [5226.922, 22454.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.837 ±(99.9%) 41.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.837, 24.183), stdev = 10.815
[info]   CI (99.9%): [≈ 0, 46.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 12.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.47% complete, ETA 01:34:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 730281.570 ops/s
[info] # Warmup Iteration   2: 1177569.012 ops/s
[info] # Warmup Iteration   3: 1179634.407 ops/s
[info] # Warmup Iteration   4: 1173922.812 ops/s
[info] # Warmup Iteration   5: 1177155.551 ops/s
[info] Iteration   1: 1180308.514 ops/s
[info]                  ·gc.alloc.rate:                   689.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        902.449 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.888 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1180828.003 ops/s
[info]                  ·gc.alloc.rate:            690.259 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 902.948 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1180566.816 ops/s
[info]                  ·gc.alloc.rate:            690.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 903.148 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1178512.145 ops/s
[info]                  ·gc.alloc.rate:            688.833 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 904.719 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1172061.912 ops/s
[info]                  ·gc.alloc.rate:            685.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.571 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 909.726 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1178455.478 ±(99.9%) 14200.638 ops/s [Average]
[info]   (min, avg, max) = (1172061.912, 1178455.478, 1180828.003), stdev = 3687.861
[info]   CI (99.9%): [1164254.840, 1192656.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   688.849 ±(99.9%) 8.089 MB/sec [Average]
[info]   (min, avg, max) = (685.223, 688.849, 690.259), stdev = 2.101
[info]   CI (99.9%): [680.761, 696.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.311 ±(99.9%) 1.355 MB/sec [Average]
[info]   (min, avg, max) = (676.693, 677.311, 677.571), stdev = 0.352
[info]   CI (99.9%): [675.957, 678.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   904.598 ±(99.9%) 11.513 B/op [Average]
[info]   (min, avg, max) = (902.449, 904.598, 909.726), stdev = 2.990
[info]   CI (99.9%): [893.085, 916.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.178 ±(99.9%) 1.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.178, 0.888), stdev = 0.397
[info]   CI (99.9%): [≈ 0, 1.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.71% complete, ETA 01:34:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2609350.874 ops/s
[info] # Warmup Iteration   2: 2999872.788 ops/s
[info] # Warmup Iteration   3: 2956258.426 ops/s
[info] # Warmup Iteration   4: 3019027.253 ops/s
[info] # Warmup Iteration   5: 3038355.644 ops/s
[info] Iteration   1: 3046649.429 ops/s
[info]                  ·gc.alloc.rate:            1037.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 350.318 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 3038076.839 ops/s
[info]                  ·gc.alloc.rate:            1034.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 702.601 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 3045495.294 ops/s
[info]                  ·gc.alloc.rate:            1036.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 350.106 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 3021431.995 ops/s
[info]                  ·gc.alloc.rate:            1028.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 705.790 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   5: 3076042.632 ops/s
[info]                  ·gc.alloc.rate:                   1047.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        693.578 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.341 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   3045539.238 ±(99.9%) 76251.939 ops/s [Average]
[info]   (min, avg, max) = (3021431.995, 3045539.238, 3076042.632), stdev = 19802.386
[info]   CI (99.9%): [2969287.299, 3121791.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1037.120 ±(99.9%) 25.961 MB/sec [Average]
[info]   (min, avg, max) = (1028.972, 1037.120, 1047.582), stdev = 6.742
[info]   CI (99.9%): [1011.160, 1063.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.425 ±(99.9%) 1429.797 MB/sec [Average]
[info]   (min, avg, max) = (677.341, 1084.425, 1356.299), stdev = 371.314
[info]   CI (99.9%): [≈ 0, 2514.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   560.479 ±(99.9%) 739.319 B/op [Average]
[info]   (min, avg, max) = (350.106, 560.479, 705.790), stdev = 191.999
[info]   CI (99.9%): [≈ 0, 1299.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.068 ±(99.9%) 0.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.341), stdev = 0.152
[info]   CI (99.9%): [≈ 0, 0.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 12.000), stdev = 3.271
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 16.94% complete, ETA 01:33:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2927602.782 ops/s
[info] # Warmup Iteration   2: 3323607.392 ops/s
[info] # Warmup Iteration   3: 3221862.185 ops/s
[info] # Warmup Iteration   4: 3221489.222 ops/s
[info] # Warmup Iteration   5: 3218506.318 ops/s
[info] Iteration   1: 3054691.558 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3211386.451 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3211768.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3212282.253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3212381.776 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3180502.043 ±(99.9%) 270820.985 ops/s [Average]
[info]   (min, avg, max) = (3054691.558, 3180502.043, 3212381.776), stdev = 70331.350
[info]   CI (99.9%): [2909681.058, 3451323.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17.18% complete, ETA 01:33:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156254.060 ops/s
[info] # Warmup Iteration   2: 278757.847 ops/s
[info] # Warmup Iteration   3: 282934.140 ops/s
[info] # Warmup Iteration   4: 280437.745 ops/s
[info] # Warmup Iteration   5: 279411.987 ops/s
[info] Iteration   1: 278008.645 ops/s
[info]                  ·gc.alloc.rate:                                  2268.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.298 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11573.495 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 285420.198 ops/s
[info]                  ·gc.alloc.rate:                                  2328.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.162 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15030.346 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 284572.718 ops/s
[info]                  ·gc.alloc.rate:            2321.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       12840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.216 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11306.226 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 284132.642 ops/s
[info]                  ·gc.alloc.rate:                                  2318.026 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15098.786 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 281390.137 ops/s
[info]                  ·gc.alloc.rate:                                  2295.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11434.012 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   282704.868 ±(99.9%) 11661.071 ops/s [Average]
[info]   (min, avg, max) = (278008.645, 282704.868, 285420.198), stdev = 3028.343
[info]   CI (99.9%): [271043.797, 294365.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2306.220 ±(99.9%) 94.707 MB/sec [Average]
[info]   (min, avg, max) = (2268.093, 2306.220, 2328.029), stdev = 24.595
[info]   CI (99.9%): [2211.513, 2400.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12840.001, 12840.001, 12840.001), stdev = 0.001
[info]   CI (99.9%): [12840.001, 12840.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.053), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.071 ±(99.9%) 0.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.298), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2316.726 ±(99.9%) 1436.845 MB/sec [Average]
[info]   (min, avg, max) = (2044.071, 2316.726, 2725.808), stdev = 373.144
[info]   CI (99.9%): [879.881, 3753.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12888.573 ±(99.9%) 7658.144 B/op [Average]
[info]   (min, avg, max) = (11306.226, 12888.573, 15098.786), stdev = 1988.796
[info]   CI (99.9%): [5230.429, 20546.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:33:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19292.996 ops/s
[info] # Warmup Iteration   2: 25794.716 ops/s
[info] # Warmup Iteration   3: 26254.901 ops/s
[info] # Warmup Iteration   4: 26051.501 ops/s
[info] # Warmup Iteration   5: 26029.498 ops/s
[info] Iteration   1: 26286.195 ops/s
[info]                  ·gc.alloc.rate:            1505.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       90144.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81202.721 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 26146.830 ops/s
[info]                  ·gc.alloc.rate:            1497.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       90144.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81631.199 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 26438.742 ops/s
[info]                  ·gc.alloc.rate:                                  1514.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             90144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.957 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       121302.197 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                198.271 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 26542.011 ops/s
[info]                  ·gc.alloc.rate:                                  1520.028 MB/sec
[info]                  ·gc.alloc.rate.norm:                             90144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.570 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80814.649 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 26552.566 ops/s
[info]                  ·gc.alloc.rate:                                  1520.763 MB/sec
[info]                  ·gc.alloc.rate.norm:                             90144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80781.177 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26393.269 ±(99.9%) 671.836 ops/s [Average]
[info]   (min, avg, max) = (26146.830, 26393.269, 26552.566), stdev = 174.474
[info]   CI (99.9%): [25721.433, 27065.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1511.546 ±(99.9%) 38.391 MB/sec [Average]
[info]   (min, avg, max) = (1497.510, 1511.546, 1520.763), stdev = 9.970
[info]   CI (99.9%): [1473.154, 1549.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   90144.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (90144.015, 90144.016, 90144.017), stdev = 0.001
[info]   CI (99.9%): [90144.013, 90144.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.203 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.100), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.331 ±(99.9%) 12.080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.331, 5.957), stdev = 3.137
[info]   CI (99.9%): [≈ 0, 14.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.008 ±(99.9%) 1167.460 MB/sec [Average]
[info]   (min, avg, max) = (1356.092, 1495.008, 2037.330), stdev = 303.186
[info]   CI (99.9%): [327.547, 2662.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   89146.388 ±(99.9%) 69230.535 B/op [Average]
[info]   (min, avg, max) = (80781.177, 89146.388, 121302.197), stdev = 17978.950
[info]   CI (99.9%): [19915.854, 158376.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   39.654 ±(99.9%) 341.435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39.654, 198.271), stdev = 88.669
[info]   CI (99.9%): [≈ 0, 381.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 17.65% complete, ETA 01:33:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2795.597 ops/s
[info] # Warmup Iteration   2: 94731.690 ops/s
[info] # Warmup Iteration   3: 95139.380 ops/s
[info] # Warmup Iteration   4: 95347.915 ops/s
[info] # Warmup Iteration   5: 94780.599 ops/s
[info] Iteration   1: 95363.470 ops/s
[info]                  ·gc.alloc.rate:            858.888 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11136.702 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 95431.229 ops/s
[info]                  ·gc.alloc.rate:            859.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11128.768 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 95464.527 ops/s
[info]                  ·gc.alloc.rate:            859.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11124.572 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 95253.667 ops/s
[info]                  ·gc.alloc.rate:                   857.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22286.945 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.006 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 95041.769 ops/s
[info]                  ·gc.alloc.rate:            856.144 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11174.427 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   95310.932 ±(99.9%) 657.296 ops/s [Average]
[info]   (min, avg, max) = (95041.769, 95310.932, 95464.527), stdev = 170.698
[info]   CI (99.9%): [94653.637, 95968.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   858.415 ±(99.9%) 5.635 MB/sec [Average]
[info]   (min, avg, max) = (856.144, 858.415, 859.781), stdev = 1.463
[info]   CI (99.9%): [852.781, 864.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.005), stdev = 0.001
[info]   CI (99.9%): [14176.004, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   809.535 ±(99.9%) 1160.542 MB/sec [Average]
[info]   (min, avg, max) = (674.677, 809.535, 1348.676), stdev = 301.389
[info]   CI (99.9%): [≈ 0, 1970.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   13370.283 ±(99.9%) 19193.938 B/op [Average]
[info]   (min, avg, max) = (11124.572, 13370.283, 22286.945), stdev = 4984.605
[info]   CI (99.9%): [≈ 0, 32564.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   2.201 ±(99.9%) 18.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.201, 11.006), stdev = 4.922
[info]   CI (99.9%): [≈ 0, 21.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.88% complete, ETA 01:32:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35993.984 ops/s
[info] # Warmup Iteration   2: 59513.226 ops/s
[info] # Warmup Iteration   3: 58294.785 ops/s
[info] # Warmup Iteration   4: 59387.724 ops/s
[info] # Warmup Iteration   5: 60329.284 ops/s
[info] Iteration   1: 59879.916 ops/s
[info]                  ·gc.alloc.rate:                   989.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35593.318 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.508 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 59207.280 ops/s
[info]                  ·gc.alloc.rate:                   978.258 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17990.969 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.708 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 58907.775 ops/s
[info]                  ·gc.alloc.rate:            973.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36199.524 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 58091.351 ops/s
[info]                  ·gc.alloc.rate:            960.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18353.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 60166.095 ops/s
[info]                  ·gc.alloc.rate:            994.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17721.380 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   59250.483 ±(99.9%) 3162.123 ops/s [Average]
[info]   (min, avg, max) = (58091.351, 59250.483, 60166.095), stdev = 821.193
[info]   CI (99.9%): [56088.360, 62412.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   979.009 ±(99.9%) 52.005 MB/sec [Average]
[info]   (min, avg, max) = (960.002, 979.009, 994.094), stdev = 13.505
[info]   CI (99.9%): [927.004, 1031.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.007), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.055 ±(99.9%) 1428.244 MB/sec [Average]
[info]   (min, avg, max) = (676.707, 948.055, 1354.707), stdev = 370.910
[info]   CI (99.9%): [≈ 0, 2376.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25171.830 ±(99.9%) 37717.385 B/op [Average]
[info]   (min, avg, max) = (17721.380, 25171.830, 36199.524), stdev = 9795.085
[info]   CI (99.9%): [≈ 0, 62889.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.043 ±(99.9%) 37.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.043, 17.708), stdev = 9.644
[info]   CI (99.9%): [≈ 0, 44.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.12% complete, ETA 01:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113156.510 ops/s
[info] # Warmup Iteration   2: 127661.521 ops/s
[info] # Warmup Iteration   3: 129053.517 ops/s
[info] # Warmup Iteration   4: 129126.698 ops/s
[info] # Warmup Iteration   5: 128475.706 ops/s
[info] Iteration   1: 129102.016 ops/s
[info]                  ·gc.alloc.rate:            831.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8266.671 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 129045.953 ops/s
[info]                  ·gc.alloc.rate:            831.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.181 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8270.514 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 128254.428 ops/s
[info]                  ·gc.alloc.rate:            826.511 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8321.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 128900.635 ops/s
[info]                  ·gc.alloc.rate:            830.682 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8279.559 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 128663.833 ops/s
[info]                  ·gc.alloc.rate:            829.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16590.129 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   128793.373 ±(99.9%) 1330.849 ops/s [Average]
[info]   (min, avg, max) = (128254.428, 128793.373, 129102.016), stdev = 345.617
[info]   CI (99.9%): [127462.524, 130124.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   830.105 ±(99.9%) 8.603 MB/sec [Average]
[info]   (min, avg, max) = (826.511, 830.105, 831.978), stdev = 2.234
[info]   CI (99.9%): [821.502, 838.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10144.003, 10144.003), stdev = 0.001
[info]   CI (99.9%): [10144.003, 10144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.780 ±(99.9%) 1168.655 MB/sec [Average]
[info]   (min, avg, max) = (678.004, 813.780, 1356.690), stdev = 303.496
[info]   CI (99.9%): [≈ 0, 1982.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9945.677 ±(99.9%) 14302.931 B/op [Average]
[info]   (min, avg, max) = (8266.671, 9945.677, 16590.129), stdev = 3714.426
[info]   CI (99.9%): [≈ 0, 24248.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.35% complete, ETA 01:32:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15147.793 ops/s
[info] # Warmup Iteration   2: 31888.651 ops/s
[info] # Warmup Iteration   3: 32650.747 ops/s
[info] # Warmup Iteration   4: 32938.089 ops/s
[info] # Warmup Iteration   5: 32603.918 ops/s
[info] Iteration   1: 33070.962 ops/s
[info]                  ·gc.alloc.rate:            1727.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       82216.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64479.958 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 32965.648 ops/s
[info]                  ·gc.alloc.rate:                                  1721.755 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.952 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97218.756 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                190.812 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 33202.463 ops/s
[info]                  ·gc.alloc.rate:                                  1734.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.644 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64600.617 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 33186.225 ops/s
[info]                  ·gc.alloc.rate:                                  1734.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96950.554 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 33378.618 ops/s
[info]                  ·gc.alloc.rate:                                  1743.539 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64261.989 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33160.783 ±(99.9%) 596.484 ops/s [Average]
[info]   (min, avg, max) = (32965.648, 33160.783, 33378.618), stdev = 154.905
[info]   CI (99.9%): [32564.300, 33757.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1732.302 ±(99.9%) 31.415 MB/sec [Average]
[info]   (min, avg, max) = (1721.755, 1732.302, 1743.539), stdev = 8.158
[info]   CI (99.9%): [1700.887, 1763.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82216.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82216.012, 82216.012, 82216.013), stdev = 0.001
[info]   CI (99.9%): [82216.011, 82216.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.144 ±(99.9%) 6.608 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.144, 3.952), stdev = 1.716
[info]   CI (99.9%): [≈ 0, 7.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1632.288 ±(99.9%) 1434.891 MB/sec [Average]
[info]   (min, avg, max) = (1354.998, 1632.288, 2044.983), stdev = 372.637
[info]   CI (99.9%): [197.398, 3067.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77502.375 ±(99.9%) 68837.029 B/op [Average]
[info]   (min, avg, max) = (64261.989, 77502.375, 97218.756), stdev = 17876.758
[info]   CI (99.9%): [8665.346, 146339.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   38.162 ±(99.9%) 328.590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.162, 190.812), stdev = 85.334
[info]   CI (99.9%): [≈ 0, 366.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.742
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.59% complete, ETA 01:31:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26957.412 ops/s
[info] # Warmup Iteration   2: 38438.455 ops/s
[info] # Warmup Iteration   3: 39656.709 ops/s
[info] # Warmup Iteration   4: 39361.036 ops/s
[info] # Warmup Iteration   5: 39649.032 ops/s
[info] Iteration   1: 39951.510 ops/s
[info]                  ·gc.alloc.rate:      447.592 MB/sec
[info]                  ·gc.alloc.rate.norm: 17632.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38589.363 ops/s
[info]                  ·gc.alloc.rate:            432.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27657.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 39757.764 ops/s
[info]                  ·gc.alloc.rate:            445.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26844.643 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 39951.415 ops/s
[info]                  ·gc.alloc.rate:      447.614 MB/sec
[info]                  ·gc.alloc.rate.norm: 17632.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 39768.454 ops/s
[info]                  ·gc.alloc.rate:            445.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       17632.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26837.893 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39603.701 ±(99.9%) 2213.397 ops/s [Average]
[info]   (min, avg, max) = (38589.363, 39603.701, 39951.510), stdev = 574.812
[info]   CI (99.9%): [37390.304, 41817.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   443.663 ±(99.9%) 24.723 MB/sec [Average]
[info]   (min, avg, max) = (432.352, 443.663, 447.614), stdev = 6.420
[info]   CI (99.9%): [418.940, 468.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   17632.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17632.010, 17632.011, 17632.011), stdev = 0.001
[info]   CI (99.9%): [17632.009, 17632.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   406.835 ±(99.9%) 1430.083 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.835, 678.173), stdev = 371.388
[info]   CI (99.9%): [≈ 0, 1836.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16267.911 ±(99.9%) 57198.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16267.911, 27657.021), stdev = 14854.237
[info]   CI (99.9%): [≈ 0, 73466.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.82% complete, ETA 01:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23644.732 ops/s
[info] # Warmup Iteration   2: 41401.468 ops/s
[info] # Warmup Iteration   3: 39772.819 ops/s
[info] # Warmup Iteration   4: 41464.572 ops/s
[info] # Warmup Iteration   5: 41277.770 ops/s
[info] Iteration   1: 40990.481 ops/s
[info]                  ·gc.alloc.rate:            370.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26011.069 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 41429.703 ops/s
[info]                  ·gc.alloc.rate:      374.148 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 40974.770 ops/s
[info]                  ·gc.alloc.rate:            370.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26020.589 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 41553.368 ops/s
[info]                  ·gc.alloc.rate:      375.259 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 41443.889 ops/s
[info]                  ·gc.alloc.rate:            374.352 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25726.184 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   41278.442 ±(99.9%) 1056.254 ops/s [Average]
[info]   (min, avg, max) = (40974.770, 41278.442, 41553.368), stdev = 274.306
[info]   CI (99.9%): [40222.188, 42334.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   372.827 ±(99.9%) 9.421 MB/sec [Average]
[info]   (min, avg, max) = (370.054, 372.827, 375.259), stdev = 2.447
[info]   CI (99.9%): [363.407, 382.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.474 ±(99.9%) 1428.813 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.474, 677.582), stdev = 371.058
[info]   CI (99.9%): [≈ 0, 1835.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15551.568 ±(99.9%) 54667.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15551.568, 26020.589), stdev = 14197.067
[info]   CI (99.9%): [≈ 0, 70219.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.06% complete, ETA 01:31:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35727.341 ops/s
[info] # Warmup Iteration   2: 43661.289 ops/s
[info] # Warmup Iteration   3: 44160.896 ops/s
[info] # Warmup Iteration   4: 44343.664 ops/s
[info] # Warmup Iteration   5: 44526.090 ops/s
[info] Iteration   1: 44303.208 ops/s
[info]                  ·gc.alloc.rate:            389.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24065.756 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44515.152 ops/s
[info]                  ·gc.alloc.rate:      391.191 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 44458.420 ops/s
[info]                  ·gc.alloc.rate:            390.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23982.409 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 44450.957 ops/s
[info]                  ·gc.alloc.rate:            390.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23986.185 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 44701.342 ops/s
[info]                  ·gc.alloc.rate:      392.967 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   44485.816 ±(99.9%) 553.420 ops/s [Average]
[info]   (min, avg, max) = (44303.208, 44485.816, 44701.342), stdev = 143.721
[info]   CI (99.9%): [43932.396, 45039.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   390.970 ±(99.9%) 5.076 MB/sec [Average]
[info]   (min, avg, max) = (389.311, 390.970, 392.967), stdev = 1.318
[info]   CI (99.9%): [385.895, 396.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.448 ±(99.9%) 1428.721 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.448, 677.468), stdev = 371.034
[info]   CI (99.9%): [≈ 0, 1835.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14406.870 ±(99.9%) 50642.340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14406.870, 24065.756), stdev = 13151.655
[info]   CI (99.9%): [≈ 0, 65049.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 19.29% complete, ETA 01:31:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35595.938 ops/s
[info] # Warmup Iteration   2: 44985.748 ops/s
[info] # Warmup Iteration   3: 43371.785 ops/s
[info] # Warmup Iteration   4: 45084.511 ops/s
[info] # Warmup Iteration   5: 44817.431 ops/s
[info] Iteration   1: 44979.794 ops/s
[info]                  ·gc.alloc.rate:      343.836 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 44750.766 ops/s
[info]                  ·gc.alloc.rate:            342.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23826.481 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44947.399 ops/s
[info]                  ·gc.alloc.rate:      343.559 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 44817.594 ops/s
[info]                  ·gc.alloc.rate:            342.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23790.336 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 45025.168 ops/s
[info]                  ·gc.alloc.rate:      344.180 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   44904.144 ±(99.9%) 444.313 ops/s [Average]
[info]   (min, avg, max) = (44750.766, 44904.144, 45025.168), stdev = 115.387
[info]   CI (99.9%): [44459.831, 45348.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   343.274 ±(99.9%) 3.238 MB/sec [Average]
[info]   (min, avg, max) = (342.210, 343.274, 344.180), stdev = 0.841
[info]   CI (99.9%): [340.036, 346.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   271.008 ±(99.9%) 1428.945 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.008, 677.663), stdev = 371.092
[info]   CI (99.9%): [≈ 0, 1699.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   9523.363 ±(99.9%) 50213.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9523.363, 23826.481), stdev = 13040.408
[info]   CI (99.9%): [≈ 0, 59737.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.53% complete, ETA 01:30:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14499.939 ops/s
[info] # Warmup Iteration   2: 20824.484 ops/s
[info] # Warmup Iteration   3: 19747.686 ops/s
[info] # Warmup Iteration   4: 19967.749 ops/s
[info] # Warmup Iteration   5: 19902.499 ops/s
[info] Iteration   1: 19874.582 ops/s
[info]                  ·gc.alloc.rate:            745.488 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53700.089 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 20072.019 ops/s
[info]                  ·gc.alloc.rate:            752.856 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53170.471 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 19965.469 ops/s
[info]                  ·gc.alloc.rate:            748.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53455.374 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 19918.044 ops/s
[info]                  ·gc.alloc.rate:            747.356 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53581.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 19972.777 ops/s
[info]                  ·gc.alloc.rate:            749.126 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53433.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19960.578 ±(99.9%) 284.246 ops/s [Average]
[info]   (min, avg, max) = (19874.582, 19960.578, 20072.019), stdev = 73.818
[info]   CI (99.9%): [19676.332, 20244.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   748.749 ±(99.9%) 10.476 MB/sec [Average]
[info]   (min, avg, max) = (745.488, 748.749, 752.856), stdev = 2.721
[info]   CI (99.9%): [738.273, 759.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040.022 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (59040.020, 59040.022, 59040.026), stdev = 0.002
[info]   CI (99.9%): [59040.014, 59040.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   678.081 ±(99.9%) 0.408 MB/sec [Average]
[info]   (min, avg, max) = (677.994, 678.081, 678.260), stdev = 0.106
[info]   CI (99.9%): [677.673, 678.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   53468.277 ±(99.9%) 761.867 B/op [Average]
[info]   (min, avg, max) = (53170.471, 53468.277, 53700.089), stdev = 197.854
[info]   CI (99.9%): [52706.411, 54230.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.76% complete, ETA 01:30:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11321.952 ops/s
[info] # Warmup Iteration   2: 18191.796 ops/s
[info] # Warmup Iteration   3: 18607.314 ops/s
[info] # Warmup Iteration   4: 18392.503 ops/s
[info] # Warmup Iteration   5: 17928.529 ops/s
[info] Iteration   1: 18404.528 ops/s
[info]                  ·gc.alloc.rate:            522.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57934.579 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18455.162 ops/s
[info]                  ·gc.alloc.rate:            523.879 MB/sec
[info]                  ·gc.alloc.rate.norm:       44678.250 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57774.504 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 18517.922 ops/s
[info]                  ·gc.alloc.rate:      525.664 MB/sec
[info]                  ·gc.alloc.rate.norm: 44680.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18430.269 ops/s
[info]                  ·gc.alloc.rate:            523.176 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57852.861 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 18443.305 ops/s
[info]                  ·gc.alloc.rate:            523.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 57812.089 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   18450.237 ±(99.9%) 162.705 ops/s [Average]
[info]   (min, avg, max) = (18404.528, 18450.237, 18517.922), stdev = 42.254
[info]   CI (99.9%): [18287.532, 18612.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   523.735 ±(99.9%) 4.663 MB/sec [Average]
[info]   (min, avg, max) = (522.402, 523.735, 525.664), stdev = 1.211
[info]   CI (99.9%): [519.072, 528.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44679.669 ±(99.9%) 3.054 B/op [Average]
[info]   (min, avg, max) = (44678.250, 44679.669, 44680.028), stdev = 0.793
[info]   CI (99.9%): [44676.615, 44682.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.935 ±(99.9%) 1166.555 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.935, 677.440), stdev = 302.951
[info]   CI (99.9%): [≈ 0, 1708.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   46274.807 ±(99.9%) 99610.273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46274.807, 57934.579), stdev = 25868.472
[info]   CI (99.9%): [≈ 0, 145885.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.00% complete, ETA 01:30:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70290.210 ops/s
[info] # Warmup Iteration   2: 74563.856 ops/s
[info] # Warmup Iteration   3: 74786.501 ops/s
[info] # Warmup Iteration   4: 73992.408 ops/s
[info] # Warmup Iteration   5: 74675.024 ops/s
[info] Iteration   1: 74714.356 ops/s
[info]                  ·gc.alloc.rate:      194.449 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 74420.844 ops/s
[info]                  ·gc.alloc.rate:            193.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      679.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14369.265 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 74565.604 ops/s
[info]                  ·gc.alloc.rate:      194.056 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74459.952 ops/s
[info]                  ·gc.alloc.rate:      193.780 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74796.547 ops/s
[info]                  ·gc.alloc.rate:      194.670 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   74591.461 ±(99.9%) 621.605 ops/s [Average]
[info]   (min, avg, max) = (74420.844, 74591.461, 74796.547), stdev = 161.429
[info]   CI (99.9%): [73969.856, 75213.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   194.141 ±(99.9%) 1.569 MB/sec [Average]
[info]   (min, avg, max) = (193.752, 194.141, 194.670), stdev = 0.407
[info]   CI (99.9%): [192.572, 195.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.006, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.941 ±(99.9%) 1170.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.941, 679.703), stdev = 303.972
[info]   CI (99.9%): [≈ 0, 1306.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2873.853 ±(99.9%) 24744.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2873.853, 14369.265), stdev = 6426.131
[info]   CI (99.9%): [≈ 0, 27618.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20.24% complete, ETA 01:30:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9241.366 ops/s
[info] # Warmup Iteration   2: 15247.754 ops/s
[info] # Warmup Iteration   3: 15791.492 ops/s
[info] # Warmup Iteration   4: 15840.771 ops/s
[info] # Warmup Iteration   5: 15768.981 ops/s
[info] Iteration   1: 16016.074 ops/s
[info]                  ·gc.alloc.rate:            1038.385 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133142.118 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 16061.825 ops/s
[info]                  ·gc.alloc.rate:            1041.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66376.310 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 16000.878 ops/s
[info]                  ·gc.alloc.rate:            1037.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133266.907 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 16110.185 ops/s
[info]                  ·gc.alloc.rate:            1044.889 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 132357.179 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 16070.881 ops/s
[info]                  ·gc.alloc.rate:            1042.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       102064.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66343.274 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16051.968 ±(99.9%) 169.413 ops/s [Average]
[info]   (min, avg, max) = (16000.878, 16051.968, 16110.185), stdev = 43.996
[info]   CI (99.9%): [15882.556, 16221.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1040.854 ±(99.9%) 11.536 MB/sec [Average]
[info]   (min, avg, max) = (1037.449, 1040.854, 1044.889), stdev = 2.996
[info]   CI (99.9%): [1029.318, 1052.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102064.027 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (102064.025, 102064.027, 102064.032), stdev = 0.003
[info]   CI (99.9%): [102064.016, 102064.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.776 ±(99.9%) 1428.685 MB/sec [Average]
[info]   (min, avg, max) = (677.282, 1083.776, 1355.017), stdev = 371.025
[info]   CI (99.9%): [≈ 0, 2512.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   106297.158 ±(99.9%) 140391.896 B/op [Average]
[info]   (min, avg, max) = (66343.274, 106297.158, 133266.907), stdev = 36459.330
[info]   CI (99.9%): [≈ 0, 246689.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.47% complete, ETA 01:29:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41886.399 ops/s
[info] # Warmup Iteration   2: 57285.422 ops/s
[info] # Warmup Iteration   3: 59498.133 ops/s
[info] # Warmup Iteration   4: 58729.060 ops/s
[info] # Warmup Iteration   5: 57048.888 ops/s
[info] Iteration   1: 58520.154 ops/s
[info]                  ·gc.alloc.rate:            886.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18237.039 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 59646.543 ops/s
[info]                  ·gc.alloc.rate:            903.997 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17893.428 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 59247.694 ops/s
[info]                  ·gc.alloc.rate:            897.688 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36027.215 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 59191.294 ops/s
[info]                  ·gc.alloc.rate:            896.773 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18030.343 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 59654.359 ops/s
[info]                  ·gc.alloc.rate:            903.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       23848.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17890.729 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   59252.009 ±(99.9%) 1782.206 ops/s [Average]
[info]   (min, avg, max) = (58520.154, 59252.009, 59654.359), stdev = 462.833
[info]   CI (99.9%): [57469.802, 61034.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   897.834 ±(99.9%) 27.100 MB/sec [Average]
[info]   (min, avg, max) = (886.792, 897.834, 903.997), stdev = 7.038
[info]   CI (99.9%): [870.734, 924.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23848.007, 23848.007, 23848.007), stdev = 0.001
[info]   CI (99.9%): [23848.006, 23848.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.739 ±(99.9%) 1167.556 MB/sec [Average]
[info]   (min, avg, max) = (678.007, 813.739, 1356.138), stdev = 303.211
[info]   CI (99.9%): [≈ 0, 1981.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21615.751 ±(99.9%) 31026.528 B/op [Average]
[info]   (min, avg, max) = (17890.729, 21615.751, 36027.215), stdev = 8057.491
[info]   CI (99.9%): [≈ 0, 52642.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.71% complete, ETA 01:29:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55569.724 ops/s
[info] # Warmup Iteration   2: 88605.937 ops/s
[info] # Warmup Iteration   3: 88746.892 ops/s
[info] # Warmup Iteration   4: 89010.205 ops/s
[info] # Warmup Iteration   5: 88919.423 ops/s
[info] Iteration   1: 87442.014 ops/s
[info]                  ·gc.alloc.rate:            1036.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12193.441 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 87261.360 ops/s
[info]                  ·gc.alloc.rate:                   1035.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.543 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24424.324 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.014 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 88900.191 ops/s
[info]                  ·gc.alloc.rate:            1054.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11993.497 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 88311.149 ops/s
[info]                  ·gc.alloc.rate:            1047.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24146.404 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 89018.954 ops/s
[info]                  ·gc.alloc.rate:            1055.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11976.794 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   88186.734 ±(99.9%) 3121.168 ops/s [Average]
[info]   (min, avg, max) = (87261.360, 88186.734, 89018.954), stdev = 810.557
[info]   CI (99.9%): [85065.566, 91307.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1045.823 ±(99.9%) 36.866 MB/sec [Average]
[info]   (min, avg, max) = (1035.083, 1045.823, 1055.559), stdev = 9.574
[info]   CI (99.9%): [1008.957, 1082.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.005, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.357 ±(99.9%) 1428.682 MB/sec [Average]
[info]   (min, avg, max) = (677.337, 948.357, 1355.045), stdev = 371.024
[info]   CI (99.9%): [≈ 0, 2377.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16946.892 ±(99.9%) 25800.626 B/op [Average]
[info]   (min, avg, max) = (11976.794, 16946.892, 24424.324), stdev = 6700.341
[info]   CI (99.9%): [≈ 0, 42747.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.403 ±(99.9%) 20.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.403, 12.014), stdev = 5.373
[info]   CI (99.9%): [≈ 0, 23.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.94% complete, ETA 01:29:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190014.826 ops/s
[info] # Warmup Iteration   2: 206960.064 ops/s
[info] # Warmup Iteration   3: 202058.818 ops/s
[info] # Warmup Iteration   4: 210927.435 ops/s
[info] # Warmup Iteration   5: 208382.959 ops/s
[info] Iteration   1: 209830.631 ops/s
[info]                  ·gc.alloc.rate:      332.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 207982.765 ops/s
[info]                  ·gc.alloc.rate:            329.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.070 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5131.677 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 207334.008 ops/s
[info]                  ·gc.alloc.rate:      328.740 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 208568.623 ops/s
[info]                  ·gc.alloc.rate:            330.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5117.089 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 210648.784 ops/s
[info]                  ·gc.alloc.rate:      334.026 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   208872.962 ±(99.9%) 5210.521 ops/s [Average]
[info]   (min, avg, max) = (207334.008, 208872.962, 210648.784), stdev = 1353.156
[info]   CI (99.9%): [203662.441, 214083.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   331.196 ±(99.9%) 8.274 MB/sec [Average]
[info]   (min, avg, max) = (328.740, 331.196, 334.026), stdev = 2.149
[info]   CI (99.9%): [322.922, 339.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.212 ±(99.9%) 1430.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.212, 678.070), stdev = 371.373
[info]   CI (99.9%): [≈ 0, 1701.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2049.753 ±(99.9%) 10807.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2049.753, 5131.677), stdev = 2806.745
[info]   CI (99.9%): [≈ 0, 12857.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 21.18% complete, ETA 01:29:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213421.861 ops/s
[info] # Warmup Iteration   2: 239381.444 ops/s
[info] # Warmup Iteration   3: 240366.575 ops/s
[info] # Warmup Iteration   4: 240111.109 ops/s
[info] # Warmup Iteration   5: 240005.860 ops/s
[info] Iteration   1: 240625.394 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 240456.187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 240576.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 239012.274 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 241213.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   240376.803 ±(99.9%) 3146.024 ops/s [Average]
[info]   (min, avg, max) = (239012.274, 240376.803, 241213.495), stdev = 817.012
[info]   CI (99.9%): [237230.779, 243522.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.41% complete, ETA 01:28:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49272.524 ops/s
[info] # Warmup Iteration   2: 69824.838 ops/s
[info] # Warmup Iteration   3: 68285.736 ops/s
[info] # Warmup Iteration   4: 69991.746 ops/s
[info] # Warmup Iteration   5: 69734.537 ops/s
[info] Iteration   1: 69692.144 ops/s
[info]                  ·gc.alloc.rate:            1086.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       24544.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30598.008 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 69894.564 ops/s
[info]                  ·gc.alloc.rate:            1089.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       24544.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15254.578 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 69691.906 ops/s
[info]                  ·gc.alloc.rate:            1086.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       24544.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30598.008 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 69419.130 ops/s
[info]                  ·gc.alloc.rate:            1082.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       24544.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30716.549 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 69926.182 ops/s
[info]                  ·gc.alloc.rate:            1090.454 MB/sec
[info]                  ·gc.alloc.rate.norm:       24544.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15247.380 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   69724.785 ±(99.9%) 781.968 ops/s [Average]
[info]   (min, avg, max) = (69419.130, 69724.785, 69926.182), stdev = 203.075
[info]   CI (99.9%): [68942.817, 70506.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1087.192 ±(99.9%) 12.147 MB/sec [Average]
[info]   (min, avg, max) = (1082.489, 1087.192, 1090.454), stdev = 3.155
[info]   CI (99.9%): [1075.045, 1099.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24544.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24544.006, 24544.006, 24544.006), stdev = 0.001
[info]   CI (99.9%): [24544.005, 24544.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.756 ±(99.9%) 1428.560 MB/sec [Average]
[info]   (min, avg, max) = (677.289, 1083.756, 1354.723), stdev = 370.993
[info]   CI (99.9%): [≈ 0, 2512.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   24482.905 ±(99.9%) 32452.056 B/op [Average]
[info]   (min, avg, max) = (15247.380, 24482.905, 30716.549), stdev = 8427.696
[info]   CI (99.9%): [≈ 0, 56934.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.65% complete, ETA 01:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18517.936 ops/s
[info] # Warmup Iteration   2: 26446.244 ops/s
[info] # Warmup Iteration   3: 26375.497 ops/s
[info] # Warmup Iteration   4: 27166.774 ops/s
[info] # Warmup Iteration   5: 27337.129 ops/s
[info] Iteration   1: 27478.002 ops/s
[info]                  ·gc.alloc.rate:            571.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38840.387 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 27496.714 ops/s
[info]                  ·gc.alloc.rate:            571.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38813.554 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 27557.516 ops/s
[info]                  ·gc.alloc.rate:            573.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38727.655 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 27558.974 ops/s
[info]                  ·gc.alloc.rate:            573.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38726.250 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 27535.290 ops/s
[info]                  ·gc.alloc.rate:            572.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38758.591 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27525.299 ±(99.9%) 140.507 ops/s [Average]
[info]   (min, avg, max) = (27478.002, 27525.299, 27558.974), stdev = 36.489
[info]   CI (99.9%): [27384.792, 27665.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   572.483 ±(99.9%) 2.952 MB/sec [Average]
[info]   (min, avg, max) = (571.485, 572.483, 573.184), stdev = 0.766
[info]   CI (99.9%): [569.532, 575.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.015, 32736.016), stdev = 0.001
[info]   CI (99.9%): [32736.013, 32736.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   678.061 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (678.023, 678.061, 678.126), stdev = 0.040
[info]   CI (99.9%): [677.907, 678.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   38773.288 ±(99.9%) 198.547 B/op [Average]
[info]   (min, avg, max) = (38726.250, 38773.288, 38840.387), stdev = 51.562
[info]   CI (99.9%): [38574.741, 38971.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.88% complete, ETA 01:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17119.666 ops/s
[info] # Warmup Iteration   2: 28229.875 ops/s
[info] # Warmup Iteration   3: 27428.439 ops/s
[info] # Warmup Iteration   4: 28262.228 ops/s
[info] # Warmup Iteration   5: 27187.156 ops/s
[info] Iteration   1: 28122.920 ops/s
[info]                  ·gc.alloc.rate:                   369.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37875.185 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.279 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28320.795 ops/s
[info]                  ·gc.alloc.rate:      372.244 MB/sec
[info]                  ·gc.alloc.rate.norm: 20688.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28214.114 ops/s
[info]                  ·gc.alloc.rate:            370.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.455 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37790.205 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 28378.034 ops/s
[info]                  ·gc.alloc.rate:      372.937 MB/sec
[info]                  ·gc.alloc.rate.norm: 20688.014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 28265.466 ops/s
[info]                  ·gc.alloc.rate:            371.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37722.030 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28260.266 ±(99.9%) 378.041 ops/s [Average]
[info]   (min, avg, max) = (28122.920, 28260.266, 28378.034), stdev = 98.176
[info]   CI (99.9%): [27882.225, 28638.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   371.454 ±(99.9%) 4.885 MB/sec [Average]
[info]   (min, avg, max) = (369.649, 371.454, 372.937), stdev = 1.269
[info]   CI (99.9%): [366.569, 376.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20688.015 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (20688.014, 20688.015, 20688.016), stdev = 0.001
[info]   CI (99.9%): [20688.012, 20688.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.344 ±(99.9%) 1428.356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.344, 677.519), stdev = 370.940
[info]   CI (99.9%): [≈ 0, 1834.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22677.484 ±(99.9%) 79714.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22677.484, 37875.185), stdev = 20701.687
[info]   CI (99.9%): [≈ 0, 102392.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.456 ±(99.9%) 64.196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.456, 37.279), stdev = 16.672
[info]   CI (99.9%): [≈ 0, 71.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.12% complete, ETA 01:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104468.021 ops/s
[info] # Warmup Iteration   2: 114568.773 ops/s
[info] # Warmup Iteration   3: 120525.180 ops/s
[info] # Warmup Iteration   4: 119568.829 ops/s
[info] # Warmup Iteration   5: 119723.340 ops/s
[info] Iteration   1: 119598.111 ops/s
[info]                  ·gc.alloc.rate:            466.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.192 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8923.976 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 118998.905 ops/s
[info]                  ·gc.alloc.rate:      464.630 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 119514.332 ops/s
[info]                  ·gc.alloc.rate:            466.487 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8930.248 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 119470.165 ops/s
[info]                  ·gc.alloc.rate:            466.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8933.237 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 119451.977 ops/s
[info]                  ·gc.alloc.rate:      466.255 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   119406.698 ±(99.9%) 904.282 ops/s [Average]
[info]   (min, avg, max) = (118998.905, 119406.698, 119598.111), stdev = 234.839
[info]   CI (99.9%): [118502.416, 120310.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   466.121 ±(99.9%) 3.364 MB/sec [Average]
[info]   (min, avg, max) = (464.630, 466.121, 466.923), stdev = 0.874
[info]   CI (99.9%): [462.756, 469.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.845 ±(99.9%) 1430.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.845, 678.192), stdev = 371.397
[info]   CI (99.9%): [≈ 0, 1836.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5357.492 ±(99.9%) 18832.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5357.492, 8933.237), stdev = 4890.700
[info]   CI (99.9%): [≈ 0, 24189.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.35% complete, ETA 01:27:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9285.383 ops/s
[info] # Warmup Iteration   2: 21259.639 ops/s
[info] # Warmup Iteration   3: 21559.285 ops/s
[info] # Warmup Iteration   4: 21488.785 ops/s
[info] # Warmup Iteration   5: 21679.262 ops/s
[info] Iteration   1: 21253.468 ops/s
[info]                  ·gc.alloc.rate:                   1173.466 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        100280.130 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 21510.405 ops/s
[info]                  ·gc.alloc.rate:                   1187.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99086.874 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.739 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 21429.161 ops/s
[info]                  ·gc.alloc.rate:                   1183.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99452.065 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 21652.184 ops/s
[info]                  ·gc.alloc.rate:            1195.495 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49194.367 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 21575.568 ops/s
[info]                  ·gc.alloc.rate:                   1191.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99075.369 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 340.131 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21484.157 ±(99.9%) 588.784 ops/s [Average]
[info]   (min, avg, max) = (21253.468, 21484.157, 21652.184), stdev = 152.905
[info]   CI (99.9%): [20895.373, 22072.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1186.163 ±(99.9%) 32.551 MB/sec [Average]
[info]   (min, avg, max) = (1173.466, 1186.163, 1195.495), stdev = 8.453
[info]   CI (99.9%): [1153.612, 1218.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86904.020 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (86904.019, 86904.020, 86904.024), stdev = 0.002
[info]   CI (99.9%): [86904.012, 86904.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.364 ±(99.9%) 1168.055 MB/sec [Average]
[info]   (min, avg, max) = (676.742, 1219.364, 1358.091), stdev = 303.340
[info]   CI (99.9%): [51.309, 2387.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   89417.761 ±(99.9%) 86604.416 B/op [Average]
[info]   (min, avg, max) = (49194.367, 89417.761, 100280.130), stdev = 22490.892
[info]   CI (99.9%): [2813.345, 176022.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.254 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.662), stdev = 1.884
[info]   CI (99.9%): [≈ 0, 8.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   97.423 ±(99.9%) 528.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97.423, 340.131), stdev = 137.327
[info]   CI (99.9%): [≈ 0, 626.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 9.400, 15.000), stdev = 3.647
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.59% complete, ETA 01:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133968.003 ops/s
[info] # Warmup Iteration   2: 171671.967 ops/s
[info] # Warmup Iteration   3: 177096.395 ops/s
[info] # Warmup Iteration   4: 176620.972 ops/s
[info] # Warmup Iteration   5: 177035.888 ops/s
[info] Iteration   1: 177516.861 ops/s
[info]                  ·gc.alloc.rate:            619.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6012.179 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 177443.096 ops/s
[info]                  ·gc.alloc.rate:            619.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6014.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 176150.731 ops/s
[info]                  ·gc.alloc.rate:            615.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.155 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6058.862 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 177708.449 ops/s
[info]                  ·gc.alloc.rate:            620.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6005.786 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 178758.725 ops/s
[info]                  ·gc.alloc.rate:      624.156 MB/sec
[info]                  ·gc.alloc.rate.norm: 5496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   177515.572 ±(99.9%) 3576.477 ops/s [Average]
[info]   (min, avg, max) = (176150.731, 177515.572, 178758.725), stdev = 928.800
[info]   CI (99.9%): [173939.096, 181092.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   619.890 ±(99.9%) 12.364 MB/sec [Average]
[info]   (min, avg, max) = (615.155, 619.890, 624.156), stdev = 3.211
[info]   CI (99.9%): [607.526, 632.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.508 ±(99.9%) 1167.790 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.508, 678.220), stdev = 303.271
[info]   CI (99.9%): [≈ 0, 1710.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4818.276 ±(99.9%) 10372.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4818.276, 6058.862), stdev = 2693.580
[info]   CI (99.9%): [≈ 0, 15190.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.82% complete, ETA 01:27:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183180.240 ops/s
[info] # Warmup Iteration   2: 280411.935 ops/s
[info] # Warmup Iteration   3: 274361.642 ops/s
[info] # Warmup Iteration   4: 277467.271 ops/s
[info] # Warmup Iteration   5: 278100.097 ops/s
[info] Iteration   1: 277760.045 ops/s
[info]                  ·gc.alloc.rate:            280.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3838.643 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 279581.654 ops/s
[info]                  ·gc.alloc.rate:      282.754 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 279404.245 ops/s
[info]                  ·gc.alloc.rate:            282.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3816.060 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 281666.046 ops/s
[info]                  ·gc.alloc.rate:      284.857 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 280345.286 ops/s
[info]                  ·gc.alloc.rate:            283.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.589 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3803.226 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   279751.455 ±(99.9%) 5490.847 ops/s [Average]
[info]   (min, avg, max) = (277760.045, 279751.455, 281666.046), stdev = 1425.955
[info]   CI (99.9%): [274260.609, 285242.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   282.947 ±(99.9%) 5.581 MB/sec [Average]
[info]   (min, avg, max) = (280.921, 282.947, 284.857), stdev = 1.449
[info]   CI (99.9%): [277.366, 288.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.454 ±(99.9%) 1428.743 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.454, 677.589), stdev = 371.040
[info]   CI (99.9%): [≈ 0, 1835.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2291.586 ±(99.9%) 8055.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2291.586, 3838.643), stdev = 2091.960
[info]   CI (99.9%): [≈ 0, 10346.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.06% complete, ETA 01:26:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 438270.241 ops/s
[info] # Warmup Iteration   2: 462651.468 ops/s
[info] # Warmup Iteration   3: 462977.206 ops/s
[info] # Warmup Iteration   4: 461936.431 ops/s
[info] # Warmup Iteration   5: 480395.793 ops/s
[info] Iteration   1: 470750.325 ops/s
[info]                  ·gc.alloc.rate:            361.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2267.191 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 458264.371 ops/s
[info]                  ·gc.alloc.rate:      351.763 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 465764.630 ops/s
[info]                  ·gc.alloc.rate:            357.417 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2289.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 479652.206 ops/s
[info]                  ·gc.alloc.rate:      368.082 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 471779.385 ops/s
[info]                  ·gc.alloc.rate:            362.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2260.001 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   469242.183 ±(99.9%) 30422.901 ops/s [Average]
[info]   (min, avg, max) = (458264.371, 469242.183, 479652.206), stdev = 7900.731
[info]   CI (99.9%): [438819.283, 499665.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   360.122 ±(99.9%) 23.237 MB/sec [Average]
[info]   (min, avg, max) = (351.763, 360.122, 368.082), stdev = 6.035
[info]   CI (99.9%): [336.885, 383.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.553 ±(99.9%) 1429.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.553, 678.064), stdev = 371.131
[info]   CI (99.9%): [≈ 0, 1835.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1363.290 ±(99.9%) 4792.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1363.290, 2289.256), stdev = 1244.554
[info]   CI (99.9%): [≈ 0, 6155.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 23.29% complete, ETA 01:26:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442724.541 ops/s
[info] # Warmup Iteration   2: 497680.451 ops/s
[info] # Warmup Iteration   3: 499836.347 ops/s
[info] # Warmup Iteration   4: 499917.187 ops/s
[info] # Warmup Iteration   5: 500171.822 ops/s
[info] Iteration   1: 498398.377 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 499538.352 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 500116.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 499956.516 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 500124.151 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   499626.793 ±(99.9%) 2798.541 ops/s [Average]
[info]   (min, avg, max) = (498398.377, 499626.793, 500124.151), stdev = 726.772
[info]   CI (99.9%): [496828.252, 502425.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.53% complete, ETA 01:26:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156709.171 ops/s
[info] # Warmup Iteration   2: 267305.475 ops/s
[info] # Warmup Iteration   3: 275509.474 ops/s
[info] # Warmup Iteration   4: 276391.904 ops/s
[info] # Warmup Iteration   5: 279589.310 ops/s
[info] Iteration   1: 280079.480 ops/s
[info]                  ·gc.alloc.rate:            771.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3806.878 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 278110.707 ops/s
[info]                  ·gc.alloc.rate:            766.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3833.895 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 278690.368 ops/s
[info]                  ·gc.alloc.rate:            767.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3825.863 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 280599.767 ops/s
[info]                  ·gc.alloc.rate:            772.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3799.689 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 279873.711 ops/s
[info]                  ·gc.alloc.rate:            771.023 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3809.694 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   279470.807 ±(99.9%) 3976.767 ops/s [Average]
[info]   (min, avg, max) = (278110.707, 279470.807, 280599.767), stdev = 1032.754
[info]   CI (99.9%): [275494.039, 283447.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   769.934 ±(99.9%) 10.985 MB/sec [Average]
[info]   (min, avg, max) = (766.216, 769.934, 772.999), stdev = 2.853
[info]   CI (99.9%): [758.950, 780.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   677.450 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (677.388, 677.450, 677.551), stdev = 0.070
[info]   CI (99.9%): [677.181, 677.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   3815.204 ±(99.9%) 54.570 B/op [Average]
[info]   (min, avg, max) = (3799.689, 3815.204, 3833.895), stdev = 14.172
[info]   CI (99.9%): [3760.633, 3869.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.76% complete, ETA 01:26:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28987.275 ops/s
[info] # Warmup Iteration   2: 35867.880 ops/s
[info] # Warmup Iteration   3: 36255.236 ops/s
[info] # Warmup Iteration   4: 36045.005 ops/s
[info] # Warmup Iteration   5: 36656.822 ops/s
[info] Iteration   1: 36149.902 ops/s
[info]                  ·gc.alloc.rate:            1612.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       70200.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59046.928 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 36730.961 ops/s
[info]                  ·gc.alloc.rate:                   1638.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87167.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 142.710 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 36843.416 ops/s
[info]                  ·gc.alloc.rate:                                  1643.241 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.176 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.501 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58217.864 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 36934.357 ops/s
[info]                  ·gc.alloc.rate:                                  1647.527 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.372 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87111.682 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36977.718 ops/s
[info]                  ·gc.alloc.rate:            1649.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       70200.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58008.504 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   36727.271 ±(99.9%) 1295.080 ops/s [Average]
[info]   (min, avg, max) = (36149.902, 36727.271, 36977.718), stdev = 336.328
[info]   CI (99.9%): [35432.191, 38022.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1638.121 ±(99.9%) 58.198 MB/sec [Average]
[info]   (min, avg, max) = (1612.218, 1638.121, 1649.436), stdev = 15.114
[info]   CI (99.9%): [1579.924, 1696.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (70200.011, 70200.011, 70200.012), stdev = 0.001
[info]   CI (99.9%): [70200.010, 70200.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.176), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.575 ±(99.9%) 12.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.575, 7.501), stdev = 3.317
[info]   CI (99.9%): [≈ 0, 14.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1632.076 ±(99.9%) 1431.488 MB/sec [Average]
[info]   (min, avg, max) = (1356.075, 1632.076, 2044.428), stdev = 371.753
[info]   CI (99.9%): [200.588, 3063.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   69910.449 ±(99.9%) 60580.957 B/op [Average]
[info]   (min, avg, max) = (58008.504, 69910.449, 87167.268), stdev = 15732.682
[info]   CI (99.9%): [9329.492, 130491.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.542 ±(99.9%) 245.755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.542, 142.710), stdev = 63.822
[info]   CI (99.9%): [≈ 0, 274.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 11.000), stdev = 3.507
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24.00% complete, ETA 01:25:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23745.379 ops/s
[info] # Warmup Iteration   2: 305613.262 ops/s
[info] # Warmup Iteration   3: 304482.572 ops/s
[info] # Warmup Iteration   4: 305638.476 ops/s
[info] # Warmup Iteration   5: 305570.981 ops/s
[info] Iteration   1: 303340.790 ops/s
[info]                  ·gc.alloc.rate:            314.513 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3504.574 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 305446.923 ops/s
[info]                  ·gc.alloc.rate:      316.703 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 298693.180 ops/s
[info]                  ·gc.alloc.rate:            309.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3555.613 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 306816.002 ops/s
[info]                  ·gc.alloc.rate:      318.158 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 305321.039 ops/s
[info]                  ·gc.alloc.rate:            316.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3478.359 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   303923.587 ±(99.9%) 12227.886 ops/s [Average]
[info]   (min, avg, max) = (298693.180, 303923.587, 306816.002), stdev = 3175.543
[info]   CI (99.9%): [291695.701, 316151.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   315.143 ±(99.9%) 12.589 MB/sec [Average]
[info]   (min, avg, max) = (309.775, 315.143, 318.158), stdev = 3.269
[info]   CI (99.9%): [302.554, 327.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   405.000 ±(99.9%) 1423.633 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 405.000, 675.389), stdev = 369.713
[info]   CI (99.9%): [≈ 0, 1828.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   2107.709 ±(99.9%) 7409.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2107.709, 3555.613), stdev = 1924.267
[info]   CI (99.9%): [≈ 0, 9517.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.24% complete, ETA 01:25:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62931.203 ops/s
[info] # Warmup Iteration   2: 96803.126 ops/s
[info] # Warmup Iteration   3: 97354.063 ops/s
[info] # Warmup Iteration   4: 98765.656 ops/s
[info] # Warmup Iteration   5: 98202.775 ops/s
[info] Iteration   1: 97010.512 ops/s
[info]                  ·gc.alloc.rate:            1071.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21982.227 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 98845.434 ops/s
[info]                  ·gc.alloc.rate:            1092.322 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10786.335 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 98122.631 ops/s
[info]                  ·gc.alloc.rate:            1084.290 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.894 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21732.477 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 98821.323 ops/s
[info]                  ·gc.alloc.rate:            1091.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10789.063 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 98377.807 ops/s
[info]                  ·gc.alloc.rate:                   1087.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21675.935 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 63.941 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   98235.542 ±(99.9%) 2887.209 ops/s [Average]
[info]   (min, avg, max) = (97010.512, 98235.542, 98845.434), stdev = 749.799
[info]   CI (99.9%): [95348.333, 101122.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1085.541 ±(99.9%) 32.214 MB/sec [Average]
[info]   (min, avg, max) = (1071.804, 1085.541, 1092.322), stdev = 8.366
[info]   CI (99.9%): [1053.327, 1117.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.005), stdev = 0.001
[info]   CI (99.9%): [17392.004, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.924 ±(99.9%) 1429.005 MB/sec [Average]
[info]   (min, avg, max) = (677.345, 1083.924, 1355.254), stdev = 371.108
[info]   CI (99.9%): [≈ 0, 2512.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17393.207 ±(99.9%) 23223.533 B/op [Average]
[info]   (min, avg, max) = (10786.335, 17393.207, 21982.227), stdev = 6031.078
[info]   CI (99.9%): [≈ 0, 40616.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.788 ±(99.9%) 110.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.788, 63.941), stdev = 28.595
[info]   CI (99.9%): [≈ 0, 122.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.47% complete, ETA 01:25:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 396660.133 ops/s
[info] # Warmup Iteration   2: 415030.164 ops/s
[info] # Warmup Iteration   3: 409421.446 ops/s
[info] # Warmup Iteration   4: 421814.164 ops/s
[info] # Warmup Iteration   5: 420987.129 ops/s
[info] Iteration   1: 420476.824 ops/s
[info]                  ·gc.alloc.rate:      273.548 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 420251.626 ops/s
[info]                  ·gc.alloc.rate:      273.390 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 418594.099 ops/s
[info]                  ·gc.alloc.rate:            272.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2549.726 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 421047.938 ops/s
[info]                  ·gc.alloc.rate:      273.908 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 418356.236 ops/s
[info]                  ·gc.alloc.rate:            272.155 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2551.121 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   419745.345 ±(99.9%) 4613.998 ops/s [Average]
[info]   (min, avg, max) = (418356.236, 419745.345, 421047.938), stdev = 1198.241
[info]   CI (99.9%): [415131.347, 424359.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   273.060 ±(99.9%) 3.024 MB/sec [Average]
[info]   (min, avg, max) = (272.155, 273.060, 273.908), stdev = 0.785
[info]   CI (99.9%): [270.035, 276.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.207 ±(99.9%) 1429.998 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.207, 678.026), stdev = 371.366
[info]   CI (99.9%): [≈ 0, 1701.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1020.169 ±(99.9%) 5379.059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1020.169, 2551.121), stdev = 1396.925
[info]   CI (99.9%): [≈ 0, 6399.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.71% complete, ETA 01:25:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20366.166 ops/s
[info] # Warmup Iteration   2: 37373.582 ops/s
[info] # Warmup Iteration   3: 37513.326 ops/s
[info] # Warmup Iteration   4: 37482.028 ops/s
[info] # Warmup Iteration   5: 37264.787 ops/s
[info] Iteration   1: 37669.483 ops/s
[info]                  ·gc.alloc.rate:                                  2011.450 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85078.346 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                166.984 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 38023.528 ops/s
[info]                  ·gc.alloc.rate:                                  2030.511 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.607 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84619.504 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 37936.126 ops/s
[info]                  ·gc.alloc.rate:                                  2025.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84811.294 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 37664.180 ops/s
[info]                  ·gc.alloc.rate:                                  2011.165 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.246 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85425.918 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 37434.192 ops/s
[info]                  ·gc.alloc.rate:                                  1998.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85950.689 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   37745.502 ±(99.9%) 909.074 ops/s [Average]
[info]   (min, avg, max) = (37434.192, 37745.502, 38023.528), stdev = 236.084
[info]   CI (99.9%): [36836.427, 38654.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2015.533 ±(99.9%) 48.545 MB/sec [Average]
[info]   (min, avg, max) = (1998.959, 2015.533, 2030.511), stdev = 12.607
[info]   CI (99.9%): [1966.988, 2064.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84048.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (84048.011, 84048.011, 84048.012), stdev = 0.001
[info]   CI (99.9%): [84048.010, 84048.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.023, 0.068), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.972 ±(99.9%) 4.677 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.972, 2.821), stdev = 1.215
[info]   CI (99.9%): [≈ 0, 5.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2042.550 ±(99.9%) 13.874 MB/sec [Average]
[info]   (min, avg, max) = (2036.108, 2042.550, 2044.318), stdev = 3.603
[info]   CI (99.9%): [2028.676, 2056.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85177.150 ±(99.9%) 2032.861 B/op [Average]
[info]   (min, avg, max) = (84619.504, 85177.150, 85950.689), stdev = 527.927
[info]   CI (99.9%): [83144.290, 87210.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   33.397 ±(99.9%) 287.557 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.397, 166.984), stdev = 74.678
[info]   CI (99.9%): [≈ 0, 320.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 10.000), stdev = 2.683
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24.94% complete, ETA 01:24:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69383.654 ops/s
[info] # Warmup Iteration   2: 88830.437 ops/s
[info] # Warmup Iteration   3: 90908.888 ops/s
[info] # Warmup Iteration   4: 90699.614 ops/s
[info] # Warmup Iteration   5: 90553.102 ops/s
[info] Iteration   1: 91218.704 ops/s
[info]                  ·gc.alloc.rate:      440.431 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 90145.059 ops/s
[info]                  ·gc.alloc.rate:            435.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11839.249 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 90295.444 ops/s
[info]                  ·gc.alloc.rate:            436.058 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.153 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11819.454 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 90159.332 ops/s
[info]                  ·gc.alloc.rate:      435.318 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 90247.820 ops/s
[info]                  ·gc.alloc.rate:            435.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       7600.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11825.608 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   90413.272 ±(99.9%) 1750.246 ops/s [Average]
[info]   (min, avg, max) = (90145.059, 90413.272, 91218.704), stdev = 454.533
[info]   CI (99.9%): [88663.026, 92163.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   436.596 ±(99.9%) 8.333 MB/sec [Average]
[info]   (min, avg, max) = (435.318, 436.596, 440.431), stdev = 2.164
[info]   CI (99.9%): [428.263, 444.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7600.004, 7600.005, 7600.005), stdev = 0.001
[info]   CI (99.9%): [7600.004, 7600.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   406.896 ±(99.9%) 1430.296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.896, 678.286), stdev = 371.443
[info]   CI (99.9%): [≈ 0, 1837.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7096.862 ±(99.9%) 24946.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7096.862, 11839.249), stdev = 6478.523
[info]   CI (99.9%): [≈ 0, 32043.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 2.191
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.18% complete, ETA 01:24:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4899.611 ops/s
[info] # Warmup Iteration   2: 112043.703 ops/s
[info] # Warmup Iteration   3: 111607.277 ops/s
[info] # Warmup Iteration   4: 113429.807 ops/s
[info] # Warmup Iteration   5: 112784.500 ops/s
[info] Iteration   1: 113998.097 ops/s
[info]                  ·gc.alloc.rate:      348.858 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 112908.609 ops/s
[info]                  ·gc.alloc.rate:            345.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9406.143 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 113050.153 ops/s
[info]                  ·gc.alloc.rate:      345.963 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 112193.641 ops/s
[info]                  ·gc.alloc.rate:            343.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9466.077 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 113911.898 ops/s
[info]                  ·gc.alloc.rate:      348.552 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   113212.479 ±(99.9%) 2896.378 ops/s [Average]
[info]   (min, avg, max) = (112193.641, 113212.479, 113998.097), stdev = 752.180
[info]   CI (99.9%): [110316.102, 116108.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   346.431 ±(99.9%) 8.918 MB/sec [Average]
[info]   (min, avg, max) = (343.268, 346.431, 348.858), stdev = 2.316
[info]   CI (99.9%): [337.513, 355.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   269.907 ±(99.9%) 1423.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.907, 674.825), stdev = 369.585
[info]   CI (99.9%): [≈ 0, 1693.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3774.444 ±(99.9%) 19901.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3774.444, 9466.077), stdev = 5168.414
[info]   CI (99.9%): [≈ 0, 23676.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.41% complete, ETA 01:24:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66982.698 ops/s
[info] # Warmup Iteration   2: 100159.873 ops/s
[info] # Warmup Iteration   3: 99604.333 ops/s
[info] # Warmup Iteration   4: 100072.321 ops/s
[info] # Warmup Iteration   5: 98891.212 ops/s
[info] Iteration   1: 99725.733 ops/s
[info]                  ·gc.alloc.rate:      329.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 99112.593 ops/s
[info]                  ·gc.alloc.rate:            327.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10757.826 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 100188.877 ops/s
[info]                  ·gc.alloc.rate:      331.032 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 99743.429 ops/s
[info]                  ·gc.alloc.rate:            329.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10689.887 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 100058.226 ops/s
[info]                  ·gc.alloc.rate:      330.544 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   99765.772 ±(99.9%) 1603.104 ops/s [Average]
[info]   (min, avg, max) = (99112.593, 99765.772, 100188.877), stdev = 416.321
[info]   CI (99.9%): [98162.668, 101368.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   329.590 ±(99.9%) 5.389 MB/sec [Average]
[info]   (min, avg, max) = (327.395, 329.590, 331.032), stdev = 1.399
[info]   CI (99.9%): [324.202, 334.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.955 ±(99.9%) 1428.670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.955, 677.459), stdev = 371.021
[info]   CI (99.9%): [≈ 0, 1699.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4289.543 ±(99.9%) 22617.710 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4289.543, 10757.826), stdev = 5873.747
[info]   CI (99.9%): [≈ 0, 26907.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 5.000), stdev = 2.490
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.65% complete, ETA 01:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105060.583 ops/s
[info] # Warmup Iteration   2: 115404.573 ops/s
[info] # Warmup Iteration   3: 117569.140 ops/s
[info] # Warmup Iteration   4: 116974.954 ops/s
[info] # Warmup Iteration   5: 117424.367 ops/s
[info] Iteration   1: 116552.143 ops/s
[info]                  ·gc.alloc.rate:                   356.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9148.010 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.995 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 117438.661 ops/s
[info]                  ·gc.alloc.rate:      359.355 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 116268.617 ops/s
[info]                  ·gc.alloc.rate:            355.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9179.131 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 117375.955 ops/s
[info]                  ·gc.alloc.rate:      359.141 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 116841.828 ops/s
[info]                  ·gc.alloc.rate:            357.610 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9125.074 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   116895.441 ±(99.9%) 1963.090 ops/s [Average]
[info]   (min, avg, max) = (116268.617, 116895.441, 117438.661), stdev = 509.808
[info]   CI (99.9%): [114932.351, 118858.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   357.692 ±(99.9%) 6.052 MB/sec [Average]
[info]   (min, avg, max) = (355.720, 357.692, 359.355), stdev = 1.572
[info]   CI (99.9%): [351.639, 363.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.003, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.598 ±(99.9%) 1429.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.598, 677.990), stdev = 371.172
[info]   CI (99.9%): [≈ 0, 1835.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5490.443 ±(99.9%) 19299.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5490.443, 9179.131), stdev = 5012.103
[info]   CI (99.9%): [≈ 0, 24790.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.799 ±(99.9%) 15.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.799, 8.995), stdev = 4.023
[info]   CI (99.9%): [≈ 0, 17.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25.88% complete, ETA 01:23:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104303.576 ops/s
[info] # Warmup Iteration   2: 114977.330 ops/s
[info] # Warmup Iteration   3: 113254.865 ops/s
[info] # Warmup Iteration   4: 117030.993 ops/s
[info] # Warmup Iteration   5: 116915.718 ops/s
[info] Iteration   1: 116985.705 ops/s
[info]                  ·gc.alloc.rate:            265.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9123.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 117128.837 ops/s
[info]                  ·gc.alloc.rate:      266.134 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 116641.754 ops/s
[info]                  ·gc.alloc.rate:                   264.984 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9141.031 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 117143.467 ops/s
[info]                  ·gc.alloc.rate:      266.116 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 117456.058 ops/s
[info]                  ·gc.alloc.rate:      266.892 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   117071.164 ±(99.9%) 1136.419 ops/s [Average]
[info]   (min, avg, max) = (116641.754, 117071.164, 117456.058), stdev = 295.124
[info]   CI (99.9%): [115934.746, 118207.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   265.987 ±(99.9%) 2.651 MB/sec [Average]
[info]   (min, avg, max) = (264.984, 265.987, 266.892), stdev = 0.688
[info]   CI (99.9%): [263.336, 268.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.003, 3576.003), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   271.097 ±(99.9%) 1429.416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.097, 678.129), stdev = 371.215
[info]   CI (99.9%): [≈ 0, 1700.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3652.830 ±(99.9%) 19260.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3652.830, 9141.031), stdev = 5001.847
[info]   CI (99.9%): [≈ 0, 22913.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   1.798 ±(99.9%) 15.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.798, 8.988), stdev = 4.020
[info]   CI (99.9%): [≈ 0, 17.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 4.000), stdev = 2.191
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:23:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5464.892 ops/s
[info] # Warmup Iteration   2: 8409.353 ops/s
[info] # Warmup Iteration   3: 8460.627 ops/s
[info] # Warmup Iteration   4: 8610.421 ops/s
[info] # Warmup Iteration   5: 8597.454 ops/s
[info] Iteration   1: 8604.477 ops/s
[info]                  ·gc.alloc.rate:            1426.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       260904.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248071.199 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 8592.306 ops/s
[info]                  ·gc.alloc.rate:            1424.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       260904.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248417.586 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 8482.601 ops/s
[info]                  ·gc.alloc.rate:                   1406.107 MB/sec
[info]                  ·gc.alloc.rate.norm:              260904.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        377457.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 617.973 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 8615.686 ops/s
[info]                  ·gc.alloc.rate:                                  1428.071 MB/sec
[info]                  ·gc.alloc.rate.norm:                             260904.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.218 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248971.393 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8622.745 ops/s
[info]                  ·gc.alloc.rate:            1429.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       260904.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 248769.306 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   8583.563 ±(99.9%) 221.824 ops/s [Average]
[info]   (min, avg, max) = (8482.601, 8583.563, 8622.745), stdev = 57.607
[info]   CI (99.9%): [8361.739, 8805.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1422.810 ±(99.9%) 36.655 MB/sec [Average]
[info]   (min, avg, max) = (1406.107, 1422.810, 1429.235), stdev = 9.519
[info]   CI (99.9%): [1386.155, 1459.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   260904.057 ±(99.9%) 0.063 B/op [Average]
[info]   (min, avg, max) = (260904.047, 260904.057, 260904.086), stdev = 0.016
[info]   CI (99.9%): [260903.993, 260904.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.044 ±(99.9%) 34.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.044, 20.218), stdev = 9.042
[info]   CI (99.9%): [≈ 0, 38.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.418 ±(99.9%) 1162.114 MB/sec [Average]
[info]   (min, avg, max) = (1356.148, 1494.418, 2034.257), stdev = 301.797
[info]   CI (99.9%): [332.303, 2656.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   274337.436 ±(99.9%) 221978.080 B/op [Average]
[info]   (min, avg, max) = (248071.199, 274337.436, 377457.697), stdev = 57647.002
[info]   CI (99.9%): [52359.357, 496315.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   123.595 ±(99.9%) 1064.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 123.595, 617.973), stdev = 276.366
[info]   CI (99.9%): [≈ 0, 1187.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 11.000), stdev = 3.435
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.35% complete, ETA 01:23:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4479.608 ops/s
[info] # Warmup Iteration   2: 8330.005 ops/s
[info] # Warmup Iteration   3: 8436.228 ops/s
[info] # Warmup Iteration   4: 8664.769 ops/s
[info] # Warmup Iteration   5: 8662.260 ops/s
[info] Iteration   1: 8657.120 ops/s
[info]                  ·gc.alloc.rate:            1350.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       245560.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246310.611 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 8635.385 ops/s
[info]                  ·gc.alloc.rate:                   1347.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              245560.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        246788.031 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 121.391 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 8637.130 ops/s
[info]                  ·gc.alloc.rate:            1347.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       245560.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 246880.841 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 8589.410 ops/s
[info]                  ·gc.alloc.rate:                                  1339.993 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.300 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248963.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                732.246 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 8610.876 ops/s
[info]                  ·gc.alloc.rate:                                  1343.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       249087.019 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   8625.984 ±(99.9%) 100.927 ops/s [Average]
[info]   (min, avg, max) = (8589.410, 8625.984, 8657.120), stdev = 26.210
[info]   CI (99.9%): [8525.057, 8726.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1345.862 ±(99.9%) 16.276 MB/sec [Average]
[info]   (min, avg, max) = (1339.993, 1345.862, 1350.943), stdev = 4.227
[info]   CI (99.9%): [1329.586, 1362.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245560.048 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (245560.047, 245560.048, 245560.051), stdev = 0.002
[info]   CI (99.9%): [245560.042, 245560.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.141 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.292 ±(99.9%) 25.826 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.292, 15.300), stdev = 6.707
[info]   CI (99.9%): [≈ 0, 30.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.059 ±(99.9%) 13.852 MB/sec [Average]
[info]   (min, avg, max) = (1354.164, 1357.059, 1362.712), stdev = 3.597
[info]   CI (99.9%): [1343.206, 1370.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   247606.015 ±(99.9%) 5060.847 B/op [Average]
[info]   (min, avg, max) = (246310.611, 247606.015, 249087.019), stdev = 1314.286
[info]   CI (99.9%): [242545.168, 252666.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   170.727 ±(99.9%) 1225.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 170.727, 732.246), stdev = 318.269
[info]   CI (99.9%): [≈ 0, 1396.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 9.000), stdev = 2.550
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.59% complete, ETA 01:22:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161527.606 ops/s
[info] # Warmup Iteration   2: 164597.978 ops/s
[info] # Warmup Iteration   3: 170167.719 ops/s
[info] # Warmup Iteration   4: 170745.123 ops/s
[info] # Warmup Iteration   5: 171593.490 ops/s
[info] Iteration   1: 172746.704 ops/s
[info]                  ·gc.alloc.rate:      449.478 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 172313.768 ops/s
[info]                  ·gc.alloc.rate:            448.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6199.732 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 172089.619 ops/s
[info]                  ·gc.alloc.rate:            447.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6207.800 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 173083.897 ops/s
[info]                  ·gc.alloc.rate:      450.406 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 172452.873 ops/s
[info]                  ·gc.alloc.rate:            448.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6194.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   172537.372 ±(99.9%) 1491.511 ops/s [Average]
[info]   (min, avg, max) = (172089.619, 172537.372, 173083.897), stdev = 387.341
[info]   CI (99.9%): [171045.861, 174028.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   448.985 ±(99.9%) 3.774 MB/sec [Average]
[info]   (min, avg, max) = (447.912, 448.985, 450.406), stdev = 0.980
[info]   CI (99.9%): [445.211, 452.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.003), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   407.242 ±(99.9%) 1431.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 407.242, 678.844), stdev = 371.760
[info]   CI (99.9%): [≈ 0, 1838.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3720.482 ±(99.9%) 13078.031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3720.482, 6207.800), stdev = 3396.323
[info]   CI (99.9%): [≈ 0, 16798.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.82% complete, ETA 01:22:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1731.767 ops/s
[info] # Warmup Iteration   2: 4670.024 ops/s
[info] # Warmup Iteration   3: 4608.450 ops/s
[info] # Warmup Iteration   4: 4758.182 ops/s
[info] # Warmup Iteration   5: 4686.723 ops/s
[info] Iteration   1: 4727.857 ops/s
[info]                  ·gc.alloc.rate:                   1255.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              418040.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        225280.866 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 221.733 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4758.164 ops/s
[info]                  ·gc.alloc.rate:            1263.615 MB/sec
[info]                  ·gc.alloc.rate.norm:       418040.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 448162.132 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 4739.265 ops/s
[info]                  ·gc.alloc.rate:            1258.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       418040.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 449768.786 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 4698.535 ops/s
[info]                  ·gc.alloc.rate:                   1247.895 MB/sec
[info]                  ·gc.alloc.rate.norm:              418040.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        453787.997 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1338.608 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 4778.451 ops/s
[info]                  ·gc.alloc.rate:                                  1269.115 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418040.085 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 36.541 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.576 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       448825.627 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4740.455 ±(99.9%) 116.712 ops/s [Average]
[info]   (min, avg, max) = (4698.535, 4740.455, 4778.451), stdev = 30.310
[info]   CI (99.9%): [4623.742, 4857.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1259.004 ±(99.9%) 30.955 MB/sec [Average]
[info]   (min, avg, max) = (1247.895, 1259.004, 1269.115), stdev = 8.039
[info]   CI (99.9%): [1228.050, 1289.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418040.089 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (418040.085, 418040.089, 418040.094), stdev = 0.004
[info]   CI (99.9%): [418040.073, 418040.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   7.308 ±(99.9%) 62.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.308, 36.541), stdev = 16.341
[info]   CI (99.9%): [≈ 0, 70.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.564 ±(99.9%) 1170.907 MB/sec [Average]
[info]   (min, avg, max) = (676.643, 1220.564, 1362.576), stdev = 304.081
[info]   CI (99.9%): [49.657, 2391.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   405165.081 ±(99.9%) 387305.678 B/op [Average]
[info]   (min, avg, max) = (225280.866, 405165.081, 453787.997), stdev = 100582.055
[info]   CI (99.9%): [17859.404, 792470.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   312.068 ±(99.9%) 2240.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 312.068, 1338.608), stdev = 581.830
[info]   CI (99.9%): [≈ 0, 2552.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.06% complete, ETA 01:22:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16249.841 ops/s
[info] # Warmup Iteration   2: 24554.357 ops/s
[info] # Warmup Iteration   3: 25344.161 ops/s
[info] # Warmup Iteration   4: 25292.562 ops/s
[info] # Warmup Iteration   5: 24992.842 ops/s
[info] Iteration   1: 25550.072 ops/s
[info]                  ·gc.alloc.rate:            1324.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       81568.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83541.410 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 25603.128 ops/s
[info]                  ·gc.alloc.rate:            1326.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       81568.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83368.507 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 25487.492 ops/s
[info]                  ·gc.alloc.rate:            1320.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       81568.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.091 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83747.871 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 25478.146 ops/s
[info]                  ·gc.alloc.rate:                   1320.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83774.162 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 205.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 25585.079 ops/s
[info]                  ·gc.alloc.rate:                                  1325.871 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81568.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.181 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83840.185 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   25540.784 ±(99.9%) 216.962 ops/s [Average]
[info]   (min, avg, max) = (25478.146, 25540.784, 25603.128), stdev = 56.344
[info]   CI (99.9%): [25323.822, 25757.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1323.613 ±(99.9%) 11.393 MB/sec [Average]
[info]   (min, avg, max) = (1320.391, 1323.613, 1326.993), stdev = 2.959
[info]   CI (99.9%): [1312.221, 1335.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (81568.016, 81568.016, 81568.017), stdev = 0.001
[info]   CI (99.9%): [81568.014, 81568.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.221 ±(99.9%) 19.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.221, 11.107), stdev = 4.967
[info]   CI (99.9%): [≈ 0, 21.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1357.467 ±(99.9%) 11.496 MB/sec [Average]
[info]   (min, avg, max) = (1356.049, 1357.467, 1362.805), stdev = 2.986
[info]   CI (99.9%): [1345.970, 1368.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   83654.427 ±(99.9%) 750.869 B/op [Average]
[info]   (min, avg, max) = (83368.507, 83654.427, 83840.185), stdev = 194.998
[info]   CI (99.9%): [82903.559, 84405.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.146 ±(99.9%) 354.283 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.146, 205.732), stdev = 92.006
[info]   CI (99.9%): [≈ 0, 395.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.29% complete, ETA 01:22:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15055.696 ops/s
[info] # Warmup Iteration   2: 25511.837 ops/s
[info] # Warmup Iteration   3: 26101.317 ops/s
[info] # Warmup Iteration   4: 26213.099 ops/s
[info] # Warmup Iteration   5: 26203.094 ops/s
[info] Iteration   1: 26392.555 ops/s
[info]                  ·gc.alloc.rate:            1341.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       80016.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40397.068 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 26259.560 ops/s
[info]                  ·gc.alloc.rate:                   1335.026 MB/sec
[info]                  ·gc.alloc.rate.norm:              80016.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        81163.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.923 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 26274.619 ops/s
[info]                  ·gc.alloc.rate:            1335.592 MB/sec
[info]                  ·gc.alloc.rate.norm:       80016.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81159.998 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 26294.876 ops/s
[info]                  ·gc.alloc.rate:                                  1336.768 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.429 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81331.320 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                239.210 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 26469.317 ops/s
[info]                  ·gc.alloc.rate:                                  1345.583 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.646 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81037.489 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   26338.185 ±(99.9%) 345.754 ops/s [Average]
[info]   (min, avg, max) = (26259.560, 26338.185, 26469.317), stdev = 89.791
[info]   CI (99.9%): [25992.431, 26683.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1338.991 ±(99.9%) 17.712 MB/sec [Average]
[info]   (min, avg, max) = (1335.026, 1338.991, 1345.583), stdev = 4.600
[info]   CI (99.9%): [1321.279, 1356.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   80016.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (80016.015, 80016.016, 80016.017), stdev = 0.001
[info]   CI (99.9%): [80016.014, 80016.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.091), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.615 ±(99.9%) 9.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.615, 5.429), stdev = 2.420
[info]   CI (99.9%): [≈ 0, 10.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1221.575 ±(99.9%) 1171.201 MB/sec [Average]
[info]   (min, avg, max) = (677.518, 1221.575, 1362.760), stdev = 304.157
[info]   CI (99.9%): [50.374, 2392.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   73017.842 ±(99.9%) 70219.830 B/op [Average]
[info]   (min, avg, max) = (40397.068, 73017.842, 81331.320), stdev = 18235.867
[info]   CI (99.9%): [2798.013, 143237.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   55.827 ±(99.9%) 400.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.827, 239.210), stdev = 103.962
[info]   CI (99.9%): [≈ 0, 456.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 3.050
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.53% complete, ETA 01:21:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320593.725 ops/s
[info] # Warmup Iteration   2: 348571.317 ops/s
[info] # Warmup Iteration   3: 369311.090 ops/s
[info] # Warmup Iteration   4: 368921.076 ops/s
[info] # Warmup Iteration   5: 368838.880 ops/s
[info] Iteration   1: 368928.879 ops/s
[info]                  ·gc.alloc.rate:                   815.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5783.267 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.842 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 370045.582 ops/s
[info]                  ·gc.alloc.rate:            818.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2881.466 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 369897.841 ops/s
[info]                  ·gc.alloc.rate:                   817.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2882.619 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.834 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 370507.838 ops/s
[info]                  ·gc.alloc.rate:            819.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2880.649 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 371302.301 ops/s
[info]                  ·gc.alloc.rate:            821.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.571 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2871.627 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   370136.488 ±(99.9%) 3346.161 ops/s [Average]
[info]   (min, avg, max) = (368928.879, 370136.488, 371302.301), stdev = 868.987
[info]   CI (99.9%): [366790.327, 373482.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   818.405 ±(99.9%) 7.520 MB/sec [Average]
[info]   (min, avg, max) = (815.819, 818.405, 821.120), stdev = 1.953
[info]   CI (99.9%): [810.885, 825.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.251 ±(99.9%) 1167.825 MB/sec [Average]
[info]   (min, avg, max) = (677.367, 813.251, 1355.775), stdev = 303.280
[info]   CI (99.9%): [≈ 0, 1981.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3459.926 ±(99.9%) 5001.196 B/op [Average]
[info]   (min, avg, max) = (2871.627, 3459.926, 5783.267), stdev = 1298.795
[info]   CI (99.9%): [≈ 0, 8461.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.135 ±(99.9%) 5.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.135, 2.842), stdev = 1.555
[info]   CI (99.9%): [≈ 0, 7.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.76% complete, ETA 01:21:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369720.763 ops/s
[info] # Warmup Iteration   2: 416611.328 ops/s
[info] # Warmup Iteration   3: 402703.881 ops/s
[info] # Warmup Iteration   4: 407638.418 ops/s
[info] # Warmup Iteration   5: 406978.186 ops/s
[info] Iteration   1: 407310.762 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 406819.831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 407389.098 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 407380.937 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 407567.959 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   407293.717 ±(99.9%) 1083.619 ops/s [Average]
[info]   (min, avg, max) = (406819.831, 407293.717, 407567.959), stdev = 281.412
[info]   CI (99.9%): [406210.098, 408377.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.00% complete, ETA 01:21:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16830.806 ops/s
[info] # Warmup Iteration   2: 26312.582 ops/s
[info] # Warmup Iteration   3: 26177.286 ops/s
[info] # Warmup Iteration   4: 26479.912 ops/s
[info] # Warmup Iteration   5: 26374.596 ops/s
[info] Iteration   1: 26037.777 ops/s
[info]                  ·gc.alloc.rate:            1369.980 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81895.465 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 26509.437 ops/s
[info]                  ·gc.alloc.rate:            1394.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80437.623 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 26518.519 ops/s
[info]                  ·gc.alloc.rate:            1395.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       82824.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80413.361 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 26555.235 ops/s
[info]                  ·gc.alloc.rate:                                  1397.236 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.525 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80535.185 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                236.868 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 26365.328 ops/s
[info]                  ·gc.alloc.rate:                                  1387.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.472 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81357.091 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   26397.259 ±(99.9%) 822.478 ops/s [Average]
[info]   (min, avg, max) = (26037.777, 26397.259, 26555.235), stdev = 213.595
[info]   CI (99.9%): [25574.781, 27219.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1388.936 ±(99.9%) 43.340 MB/sec [Average]
[info]   (min, avg, max) = (1369.980, 1388.936, 1397.236), stdev = 11.255
[info]   CI (99.9%): [1345.596, 1432.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82824.015, 82824.016, 82824.017), stdev = 0.001
[info]   CI (99.9%): [82824.014, 82824.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.249 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.125), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.799 ±(99.9%) 14.816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.799, 7.472), stdev = 3.848
[info]   CI (99.9%): [≈ 0, 17.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.067 ±(99.9%) 13.848 MB/sec [Average]
[info]   (min, avg, max) = (1354.602, 1357.067, 1362.721), stdev = 3.596
[info]   CI (99.9%): [1343.219, 1370.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80927.745 ±(99.9%) 2568.507 B/op [Average]
[info]   (min, avg, max) = (80413.361, 80927.745, 81895.465), stdev = 667.033
[info]   CI (99.9%): [78359.238, 83496.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   47.374 ±(99.9%) 407.901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.374, 236.868), stdev = 105.931
[info]   CI (99.9%): [≈ 0, 455.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 9.000), stdev = 2.915
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.24% complete, ETA 01:21:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76361.932 ops/s
[info] # Warmup Iteration   2: 93281.739 ops/s
[info] # Warmup Iteration   3: 96765.860 ops/s
[info] # Warmup Iteration   4: 97155.687 ops/s
[info] # Warmup Iteration   5: 96684.751 ops/s
[info] Iteration   1: 97085.578 ops/s
[info]                  ·gc.alloc.rate:            1581.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       25640.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21986.166 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 96802.820 ops/s
[info]                  ·gc.alloc.rate:            1577.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       25640.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.562 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22050.432 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 96800.536 ops/s
[info]                  ·gc.alloc.rate:                                  1576.808 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.633 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33184.978 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                54.153 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 97504.237 ops/s
[info]                  ·gc.alloc.rate:                                  1588.291 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21999.226 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 97392.377 ops/s
[info]                  ·gc.alloc.rate:            1586.708 MB/sec
[info]                  ·gc.alloc.rate.norm:       25640.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22022.486 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   97117.110 ±(99.9%) 1256.087 ops/s [Average]
[info]   (min, avg, max) = (96800.536, 97117.110, 97504.237), stdev = 326.202
[info]   CI (99.9%): [95861.023, 98373.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1582.228 ±(99.9%) 20.160 MB/sec [Average]
[info]   (min, avg, max) = (1576.808, 1582.228, 1588.291), stdev = 5.235
[info]   CI (99.9%): [1562.068, 1602.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.004, 25640.004, 25640.004), stdev = 0.001
[info]   CI (99.9%): [25640.004, 25640.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.375 ±(99.9%) 2.737 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.633), stdev = 0.711
[info]   CI (99.9%): [≈ 0, 3.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.895 ±(99.9%) 1173.030 MB/sec [Average]
[info]   (min, avg, max) = (1356.503, 1495.895, 2040.809), stdev = 304.632
[info]   CI (99.9%): [322.865, 2668.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   24248.658 ±(99.9%) 19236.335 B/op [Average]
[info]   (min, avg, max) = (21986.166, 24248.658, 33184.978), stdev = 4995.615
[info]   CI (99.9%): [5012.323, 43484.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.831 ±(99.9%) 93.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.831, 54.153), stdev = 24.218
[info]   CI (99.9%): [≈ 0, 104.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28.47% complete, ETA 01:20:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31930.268 ops/s
[info] # Warmup Iteration   2: 460288.286 ops/s
[info] # Warmup Iteration   3: 457422.928 ops/s
[info] # Warmup Iteration   4: 451771.971 ops/s
[info] # Warmup Iteration   5: 461801.557 ops/s
[info] Iteration   1: 454222.521 ops/s
[info]                  ·gc.alloc.rate:            470.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2338.212 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 457991.190 ops/s
[info]                  ·gc.alloc.rate:            474.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2318.901 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 458324.470 ops/s
[info]                  ·gc.alloc.rate:                   475.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2314.939 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 460811.479 ops/s
[info]                  ·gc.alloc.rate:      477.774 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 457885.050 ops/s
[info]                  ·gc.alloc.rate:            474.772 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2319.316 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   457846.942 ±(99.9%) 9066.447 ops/s [Average]
[info]   (min, avg, max) = (454222.521, 457846.942, 460811.479), stdev = 2354.527
[info]   CI (99.9%): [448780.495, 466913.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   474.706 ±(99.9%) 9.377 MB/sec [Average]
[info]   (min, avg, max) = (470.956, 474.706, 477.774), stdev = 2.435
[info]   CI (99.9%): [465.329, 484.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.642 ±(99.9%) 1161.621 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.642, 674.752), stdev = 301.669
[info]   CI (99.9%): [≈ 0, 1701.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1858.274 ±(99.9%) 4000.226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1858.274, 2338.212), stdev = 1038.846
[info]   CI (99.9%): [≈ 0, 5858.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.457 ±(99.9%) 3.939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.457, 2.287), stdev = 1.023
[info]   CI (99.9%): [≈ 0, 4.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.71% complete, ETA 01:20:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169446.978 ops/s
[info] # Warmup Iteration   2: 270086.925 ops/s
[info] # Warmup Iteration   3: 257130.953 ops/s
[info] # Warmup Iteration   4: 267840.267 ops/s
[info] # Warmup Iteration   5: 271107.474 ops/s
[info] Iteration   1: 269696.391 ops/s
[info]                  ·gc.alloc.rate:            386.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3953.429 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 271338.284 ops/s
[info]                  ·gc.alloc.rate:      388.956 MB/sec
[info]                  ·gc.alloc.rate.norm: 2256.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 270102.321 ops/s
[info]                  ·gc.alloc.rate:            387.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3947.487 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 271243.501 ops/s
[info]                  ·gc.alloc.rate:      388.721 MB/sec
[info]                  ·gc.alloc.rate.norm: 2256.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 269900.643 ops/s
[info]                  ·gc.alloc.rate:            386.828 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3950.061 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   270456.228 ±(99.9%) 2988.345 ops/s [Average]
[info]   (min, avg, max) = (269696.391, 270456.228, 271338.284), stdev = 776.064
[info]   CI (99.9%): [267467.883, 273444.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   387.629 ±(99.9%) 4.343 MB/sec [Average]
[info]   (min, avg, max) = (386.518, 387.629, 388.956), stdev = 1.128
[info]   CI (99.9%): [383.286, 391.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.002, 2256.002, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.402 ±(99.9%) 1428.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.402, 677.374), stdev = 370.993
[info]   CI (99.9%): [≈ 0, 1834.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2370.195 ±(99.9%) 8331.574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2370.195, 3953.429), stdev = 2163.683
[info]   CI (99.9%): [≈ 0, 10701.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.94% complete, ETA 01:20:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 576790.834 ops/s
[info] # Warmup Iteration   2: 601680.158 ops/s
[info] # Warmup Iteration   3: 610865.624 ops/s
[info] # Warmup Iteration   4: 608228.925 ops/s
[info] # Warmup Iteration   5: 613343.094 ops/s
[info] Iteration   1: 605601.197 ops/s
[info]                  ·gc.alloc.rate:            393.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1762.380 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 606579.125 ops/s
[info]                  ·gc.alloc.rate:            394.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1759.547 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 612791.501 ops/s
[info]                  ·gc.alloc.rate:      398.682 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 606564.734 ops/s
[info]                  ·gc.alloc.rate:            394.582 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1759.573 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 609304.309 ops/s
[info]                  ·gc.alloc.rate:      396.469 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   608168.173 ±(99.9%) 11284.329 ops/s [Average]
[info]   (min, avg, max) = (605601.197, 608168.173, 612791.501), stdev = 2930.504
[info]   CI (99.9%): [596883.844, 619452.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   395.657 ±(99.9%) 7.450 MB/sec [Average]
[info]   (min, avg, max) = (393.967, 395.657, 398.682), stdev = 1.935
[info]   CI (99.9%): [388.207, 403.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.817 ±(99.9%) 1430.020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.817, 678.046), stdev = 371.372
[info]   CI (99.9%): [≈ 0, 1836.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1056.300 ±(99.9%) 3713.046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1056.300, 1762.380), stdev = 964.266
[info]   CI (99.9%): [≈ 0, 4769.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.18% complete, ETA 01:20:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37018.076 ops/s
[info] # Warmup Iteration   2: 63680.856 ops/s
[info] # Warmup Iteration   3: 64939.353 ops/s
[info] # Warmup Iteration   4: 65105.191 ops/s
[info] # Warmup Iteration   5: 66028.217 ops/s
[info] Iteration   1: 65753.972 ops/s
[info]                  ·gc.alloc.rate:            2879.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       68920.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.571 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65243.028 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 65550.770 ops/s
[info]                  ·gc.alloc.rate:            2870.247 MB/sec
[info]                  ·gc.alloc.rate.norm:       68920.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65448.032 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 66138.542 ops/s
[info]                  ·gc.alloc.rate:                                  2895.894 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64861.352 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 66087.484 ops/s
[info]                  ·gc.alloc.rate:                                  2893.596 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68920.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81142.926 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 65863.928 ops/s
[info]                  ·gc.alloc.rate:            2883.872 MB/sec
[info]                  ·gc.alloc.rate.norm:       68920.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65133.096 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   65878.939 ±(99.9%) 932.185 ops/s [Average]
[info]   (min, avg, max) = (65550.770, 65878.939, 66138.542), stdev = 242.086
[info]   CI (99.9%): [64946.754, 66811.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2884.558 ±(99.9%) 40.587 MB/sec [Average]
[info]   (min, avg, max) = (2870.247, 2884.558, 2895.894), stdev = 10.540
[info]   CI (99.9%): [2843.970, 2925.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68920.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68920.006, 68920.006, 68920.007), stdev = 0.001
[info]   CI (99.9%): [68920.005, 68920.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.009), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.055 ±(99.9%) 0.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.219), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2861.754 ±(99.9%) 1173.197 MB/sec [Average]
[info]   (min, avg, max) = (2725.357, 2861.754, 3406.774), stdev = 304.676
[info]   CI (99.9%): [1688.557, 4034.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68365.687 ±(99.9%) 27516.047 B/op [Average]
[info]   (min, avg, max) = (64861.352, 68365.687, 81142.926), stdev = 7145.830
[info]   CI (99.9%): [40849.640, 95881.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.41% complete, ETA 01:19:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179972.644 ops/s
[info] # Warmup Iteration   2: 246282.931 ops/s
[info] # Warmup Iteration   3: 249644.983 ops/s
[info] # Warmup Iteration   4: 248426.078 ops/s
[info] # Warmup Iteration   5: 249416.553 ops/s
[info] Iteration   1: 248451.608 ops/s
[info]                  ·gc.alloc.rate:            1476.154 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8591.772 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 245590.118 ops/s
[info]                  ·gc.alloc.rate:            1459.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.206 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8691.849 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 247059.329 ops/s
[info]                  ·gc.alloc.rate:                   1467.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8635.721 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.462 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 248894.113 ops/s
[info]                  ·gc.alloc.rate:                                  1478.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9352.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.665 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12927.805 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 248204.006 ops/s
[info]                  ·gc.alloc.rate:            1474.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       9352.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8642.040 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   247639.835 ±(99.9%) 5126.134 ops/s [Average]
[info]   (min, avg, max) = (245590.118, 247639.835, 248894.113), stdev = 1331.241
[info]   CI (99.9%): [242513.701, 252765.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1471.345 ±(99.9%) 30.447 MB/sec [Average]
[info]   (min, avg, max) = (1459.211, 1471.345, 1478.802), stdev = 7.907
[info]   CI (99.9%): [1440.898, 1501.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9352.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9352.002, 9352.002, 9352.002), stdev = 0.001
[info]   CI (99.9%): [9352.002, 9352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.105), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.133 ±(99.9%) 1.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.665), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.955 ±(99.9%) 1182.416 MB/sec [Average]
[info]   (min, avg, max) = (1355.386, 1494.955, 2044.232), stdev = 307.070
[info]   CI (99.9%): [312.539, 2677.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9497.838 ±(99.9%) 7384.528 B/op [Average]
[info]   (min, avg, max) = (8591.772, 9497.838, 12927.805), stdev = 1917.738
[info]   CI (99.9%): [2113.310, 16882.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   5.092 ±(99.9%) 43.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.092, 25.462), stdev = 11.387
[info]   CI (99.9%): [≈ 0, 48.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 29.65% complete, ETA 01:19:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87839.801 ops/s
[info] # Warmup Iteration   2: 980124.949 ops/s
[info] # Warmup Iteration   3: 954246.123 ops/s
[info] # Warmup Iteration   4: 972666.713 ops/s
[info] # Warmup Iteration   5: 956331.924 ops/s
[info] Iteration   1: 964055.849 ops/s
[info]                  ·gc.alloc.rate:            524.342 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1101.674 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 979445.676 ops/s
[info]                  ·gc.alloc.rate:      532.720 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 974548.454 ops/s
[info]                  ·gc.alloc.rate:            529.941 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1089.771 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 974502.301 ops/s
[info]                  ·gc.alloc.rate:            529.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1089.831 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 975859.636 ops/s
[info]                  ·gc.alloc.rate:            530.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1088.318 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   973682.383 ±(99.9%) 22124.327 ops/s [Average]
[info]   (min, avg, max) = (964055.849, 973682.383, 979445.676), stdev = 5745.617
[info]   CI (99.9%): [951558.056, 995806.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   529.545 ±(99.9%) 12.018 MB/sec [Average]
[info]   (min, avg, max) = (524.342, 529.545, 532.720), stdev = 3.121
[info]   CI (99.9%): [517.527, 541.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.807 ±(99.9%) 1161.975 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.807, 674.829), stdev = 301.761
[info]   CI (99.9%): [≈ 0, 1701.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   873.919 ±(99.9%) 1881.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 873.919, 1101.674), stdev = 488.565
[info]   CI (99.9%): [≈ 0, 2755.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.88% complete, ETA 01:19:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 513948.224 ops/s
[info] # Warmup Iteration   2: 812244.563 ops/s
[info] # Warmup Iteration   3: 794288.945 ops/s
[info] # Warmup Iteration   4: 814677.675 ops/s
[info] # Warmup Iteration   5: 810953.018 ops/s
[info] Iteration   1: 784223.045 ops/s
[info]                  ·gc.alloc.rate:            617.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1359.591 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 811165.769 ops/s
[info]                  ·gc.alloc.rate:            638.980 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1314.436 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 815272.932 ops/s
[info]                  ·gc.alloc.rate:            642.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1307.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 815035.224 ops/s
[info]                  ·gc.alloc.rate:            642.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1308.202 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 816921.345 ops/s
[info]                  ·gc.alloc.rate:            643.518 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1305.160 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   808523.663 ±(99.9%) 52936.722 ops/s [Average]
[info]   (min, avg, max) = (784223.045, 808523.663, 816921.345), stdev = 13747.499
[info]   CI (99.9%): [755586.941, 861460.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   636.913 ±(99.9%) 41.624 MB/sec [Average]
[info]   (min, avg, max) = (617.806, 636.913, 643.518), stdev = 10.810
[info]   CI (99.9%): [595.289, 678.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.351 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (677.310, 677.351, 677.390), stdev = 0.034
[info]   CI (99.9%): [677.218, 677.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1319.040 ±(99.9%) 88.266 B/op [Average]
[info]   (min, avg, max) = (1305.160, 1319.040, 1359.591), stdev = 22.922
[info]   CI (99.9%): [1230.774, 1407.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.12% complete, ETA 01:19:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 952659.182 ops/s
[info] # Warmup Iteration   2: 1011531.417 ops/s
[info] # Warmup Iteration   3: 1033812.961 ops/s
[info] # Warmup Iteration   4: 1031859.542 ops/s
[info] # Warmup Iteration   5: 1036985.678 ops/s
[info] Iteration   1: 1041860.188 ops/s
[info]                  ·gc.alloc.rate:      566.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 856.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1023598.539 ops/s
[info]                  ·gc.alloc.rate:                   556.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1041.645 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.024 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1038372.322 ops/s
[info]                  ·gc.alloc.rate:            564.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1027.837 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1038517.429 ops/s
[info]                  ·gc.alloc.rate:            564.770 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1026.642 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1035084.484 ops/s
[info]                  ·gc.alloc.rate:            562.904 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1030.090 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1035486.592 ±(99.9%) 27202.532 ops/s [Average]
[info]   (min, avg, max) = (1023598.539, 1035486.592, 1041860.188), stdev = 7064.411
[info]   CI (99.9%): [1008284.060, 1062689.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   563.152 ±(99.9%) 14.720 MB/sec [Average]
[info]   (min, avg, max) = (556.737, 563.152, 566.645), stdev = 3.823
[info]   CI (99.9%): [548.433, 577.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.057 ±(99.9%) 1166.819 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.057, 678.066), stdev = 303.019
[info]   CI (99.9%): [≈ 0, 1708.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   825.243 ±(99.9%) 1776.545 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 825.243, 1041.645), stdev = 461.363
[info]   CI (99.9%): [≈ 0, 2601.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.205 ±(99.9%) 1.764 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 1.024), stdev = 0.458
[info]   CI (99.9%): [≈ 0, 1.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:18:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 943873.377 ops/s
[info] # Warmup Iteration   2: 1032677.510 ops/s
[info] # Warmup Iteration   3: 1029770.253 ops/s
[info] # Warmup Iteration   4: 1031829.076 ops/s
[info] # Warmup Iteration   5: 1029218.374 ops/s
[info] Iteration   1: 1024066.792 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1031239.549 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1031059.626 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1032005.724 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1030104.812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1029695.301 ±(99.9%) 12392.847 ops/s [Average]
[info]   (min, avg, max) = (1024066.792, 1029695.301, 1032005.724), stdev = 3218.383
[info]   CI (99.9%): [1017302.454, 1042088.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.59% complete, ETA 01:18:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18590.322 ops/s
[info] # Warmup Iteration   2: 29578.998 ops/s
[info] # Warmup Iteration   3: 29472.278 ops/s
[info] # Warmup Iteration   4: 29795.906 ops/s
[info] # Warmup Iteration   5: 29736.724 ops/s
[info] Iteration   1: 29582.835 ops/s
[info]                  ·gc.alloc.rate:            1550.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       82488.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72080.962 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 29571.056 ops/s
[info]                  ·gc.alloc.rate:            1549.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       82488.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2031.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 108165.310 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 29885.246 ops/s
[info]                  ·gc.alloc.rate:                                  1566.252 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82488.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71560.787 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                210.473 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 29848.494 ops/s
[info]                  ·gc.alloc.rate:                                  1564.164 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82488.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.853 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71865.022 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 29550.051 ops/s
[info]                  ·gc.alloc.rate:                                  1548.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82488.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108884.444 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   29687.537 ±(99.9%) 633.980 ops/s [Average]
[info]   (min, avg, max) = (29550.051, 29687.537, 29885.246), stdev = 164.643
[info]   CI (99.9%): [29053.556, 30321.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1555.793 ±(99.9%) 33.297 MB/sec [Average]
[info]   (min, avg, max) = (1548.618, 1555.793, 1566.252), stdev = 8.647
[info]   CI (99.9%): [1522.496, 1589.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82488.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82488.014, 82488.014, 82488.015), stdev = 0.001
[info]   CI (99.9%): [82488.012, 82488.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.111), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.342 ±(99.9%) 12.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.342, 5.853), stdev = 3.172
[info]   CI (99.9%): [≈ 0, 14.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.478 ±(99.9%) 1432.935 MB/sec [Average]
[info]   (min, avg, max) = (1354.721, 1630.478, 2044.180), stdev = 372.129
[info]   CI (99.9%): [197.542, 3063.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   86511.305 ±(99.9%) 77390.272 B/op [Average]
[info]   (min, avg, max) = (71560.787, 86511.305, 108884.444), stdev = 20098.008
[info]   CI (99.9%): [9121.033, 163901.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.095 ±(99.9%) 362.447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.095, 210.473), stdev = 94.126
[info]   CI (99.9%): [≈ 0, 404.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 14.000), stdev = 4.087
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30.82% complete, ETA 01:18:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84071.529 ops/s
[info] # Warmup Iteration   2: 114502.396 ops/s
[info] # Warmup Iteration   3: 116605.069 ops/s
[info] # Warmup Iteration   4: 116859.234 ops/s
[info] # Warmup Iteration   5: 116171.765 ops/s
[info] Iteration   1: 117187.071 ops/s
[info]                  ·gc.alloc.rate:            1446.241 MB/sec
[info]                  ·gc.alloc.rate.norm:       19424.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.207 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18214.789 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 116903.010 ops/s
[info]                  ·gc.alloc.rate:            1442.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       19424.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18259.031 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 113817.136 ops/s
[info]                  ·gc.alloc.rate:                   1405.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18755.003 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 46.058 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 117068.849 ops/s
[info]                  ·gc.alloc.rate:                                  1444.781 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18322.386 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 116773.511 ops/s
[info]                  ·gc.alloc.rate:                                  1441.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18368.821 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   116349.915 ±(99.9%) 5485.651 ops/s [Average]
[info]   (min, avg, max) = (113817.136, 116349.915, 117187.071), stdev = 1424.606
[info]   CI (99.9%): [110864.264, 121835.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1436.000 ±(99.9%) 66.884 MB/sec [Average]
[info]   (min, avg, max) = (1405.127, 1436.000, 1446.241), stdev = 17.370
[info]   CI (99.9%): [1369.116, 1502.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19424.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19424.003, 19424.004, 19424.004), stdev = 0.001
[info]   CI (99.9%): [19424.003, 19424.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.172), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.473 ±(99.9%) 3.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.473, 2.310), stdev = 1.027
[info]   CI (99.9%): [≈ 0, 4.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.963 ±(99.9%) 13.565 MB/sec [Average]
[info]   (min, avg, max) = (1356.207, 1358.963, 1362.842), stdev = 3.523
[info]   CI (99.9%): [1345.398, 1372.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   18384.006 ±(99.9%) 830.168 B/op [Average]
[info]   (min, avg, max) = (18214.789, 18384.006, 18755.003), stdev = 215.592
[info]   CI (99.9%): [17553.839, 19214.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   9.212 ±(99.9%) 79.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.212, 46.058), stdev = 20.598
[info]   CI (99.9%): [≈ 0, 88.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.06% complete, ETA 01:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96667.320 ops/s
[info] # Warmup Iteration   2: 174749.464 ops/s
[info] # Warmup Iteration   3: 177230.638 ops/s
[info] # Warmup Iteration   4: 170842.804 ops/s
[info] # Warmup Iteration   5: 175615.684 ops/s
[info] Iteration   1: 177006.544 ops/s
[info]                  ·gc.alloc.rate:            944.551 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6023.848 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 175672.025 ops/s
[info]                  ·gc.alloc.rate:            937.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12139.446 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 177109.329 ops/s
[info]                  ·gc.alloc.rate:            945.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6020.379 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 176912.762 ops/s
[info]                  ·gc.alloc.rate:            944.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6026.946 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 174344.475 ops/s
[info]                  ·gc.alloc.rate:            930.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12231.202 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   176209.027 ±(99.9%) 4599.362 ops/s [Average]
[info]   (min, avg, max) = (174344.475, 176209.027, 177109.329), stdev = 1194.440
[info]   CI (99.9%): [171609.665, 180808.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   940.344 ±(99.9%) 24.404 MB/sec [Average]
[info]   (min, avg, max) = (930.472, 940.344, 945.107), stdev = 6.338
[info]   CI (99.9%): [915.940, 964.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.002, 8400.002), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.355 ±(99.9%) 1428.761 MB/sec [Average]
[info]   (min, avg, max) = (677.361, 948.355, 1354.856), stdev = 371.045
[info]   CI (99.9%): [≈ 0, 2377.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8488.364 ±(99.9%) 12995.938 B/op [Average]
[info]   (min, avg, max) = (6020.379, 8488.364, 12231.202), stdev = 3375.004
[info]   CI (99.9%): [≈ 0, 21484.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.29% complete, ETA 01:17:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244174.121 ops/s
[info] # Warmup Iteration   2: 255977.161 ops/s
[info] # Warmup Iteration   3: 251243.012 ops/s
[info] # Warmup Iteration   4: 258916.743 ops/s
[info] # Warmup Iteration   5: 258785.757 ops/s
[info] Iteration   1: 258943.044 ops/s
[info]                  ·gc.alloc.rate:            673.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4121.653 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 258881.084 ops/s
[info]                  ·gc.alloc.rate:            673.636 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4122.656 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 253468.387 ops/s
[info]                  ·gc.alloc.rate:            659.678 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4210.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 259106.881 ops/s
[info]                  ·gc.alloc.rate:            674.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4119.013 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 258849.690 ops/s
[info]                  ·gc.alloc.rate:            673.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4122.879 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   257849.817 ±(99.9%) 9439.094 ops/s [Average]
[info]   (min, avg, max) = (253468.387, 257849.817, 259106.881), stdev = 2451.303
[info]   CI (99.9%): [248410.723, 267288.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   671.028 ±(99.9%) 24.459 MB/sec [Average]
[info]   (min, avg, max) = (659.678, 671.028, 674.368), stdev = 6.352
[info]   CI (99.9%): [646.569, 695.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.084 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (678.020, 678.084, 678.156), stdev = 0.065
[info]   CI (99.9%): [677.833, 678.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4139.373 ±(99.9%) 153.579 B/op [Average]
[info]   (min, avg, max) = (4119.013, 4139.373, 4210.667), stdev = 39.884
[info]   CI (99.9%): [3985.795, 4292.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31.53% complete, ETA 01:17:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28547.039 ops/s
[info] # Warmup Iteration   2: 63669.809 ops/s
[info] # Warmup Iteration   3: 63603.831 ops/s
[info] # Warmup Iteration   4: 63468.373 ops/s
[info] # Warmup Iteration   5: 63050.658 ops/s
[info] Iteration   1: 63549.490 ops/s
[info]                  ·gc.alloc.rate:                                  2682.191 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.874 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.612 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67507.442 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 63595.471 ops/s
[info]                  ·gc.alloc.rate:            2683.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       66432.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67460.741 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 63761.365 ops/s
[info]                  ·gc.alloc.rate:            2691.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       66432.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67286.189 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 63620.248 ops/s
[info]                  ·gc.alloc.rate:                                  2685.152 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67435.296 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 63592.981 ops/s
[info]                  ·gc.alloc.rate:                                  2685.200 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67462.863 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   63623.911 ±(99.9%) 311.706 ops/s [Average]
[info]   (min, avg, max) = (63549.490, 63623.911, 63761.365), stdev = 80.949
[info]   CI (99.9%): [63312.205, 63935.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2685.500 ±(99.9%) 13.058 MB/sec [Average]
[info]   (min, avg, max) = (2682.191, 2685.500, 2691.153), stdev = 3.391
[info]   CI (99.9%): [2672.441, 2698.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66432.006, 66432.007, 66432.007), stdev = 0.001
[info]   CI (99.9%): [66432.006, 66432.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.035), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.181 ±(99.9%) 1.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.874), stdev = 0.387
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2725.860 ±(99.9%) 2.245 MB/sec [Average]
[info]   (min, avg, max) = (2725.362, 2725.860, 2726.867), stdev = 0.583
[info]   CI (99.9%): [2723.616, 2728.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67430.506 ±(99.9%) 326.344 B/op [Average]
[info]   (min, avg, max) = (67286.189, 67430.506, 67507.442), stdev = 84.750
[info]   CI (99.9%): [67104.162, 67756.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.76% complete, ETA 01:17:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135256.823 ops/s
[info] # Warmup Iteration   2: 165643.406 ops/s
[info] # Warmup Iteration   3: 168424.527 ops/s
[info] # Warmup Iteration   4: 180270.129 ops/s
[info] # Warmup Iteration   5: 179227.671 ops/s
[info] Iteration   1: 180569.739 ops/s
[info]                  ·gc.alloc.rate:            630.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5910.611 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 181604.887 ops/s
[info]                  ·gc.alloc.rate:            634.224 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.178 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5876.898 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 181340.127 ops/s
[info]                  ·gc.alloc.rate:            633.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5885.517 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 181028.007 ops/s
[info]                  ·gc.alloc.rate:            632.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       5496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5895.464 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 182615.164 ops/s
[info]                  ·gc.alloc.rate:      637.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 5496.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   181431.585 ±(99.9%) 2948.266 ops/s [Average]
[info]   (min, avg, max) = (180569.739, 181431.585, 182615.164), stdev = 765.655
[info]   CI (99.9%): [178483.319, 184379.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   633.551 ±(99.9%) 10.383 MB/sec [Average]
[info]   (min, avg, max) = (630.423, 633.551, 637.645), stdev = 2.696
[info]   CI (99.9%): [623.168, 643.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5496.002, 5496.002, 5496.002), stdev = 0.001
[info]   CI (99.9%): [5496.002, 5496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.490 ±(99.9%) 1167.752 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.490, 678.227), stdev = 303.261
[info]   CI (99.9%): [≈ 0, 1710.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4713.698 ±(99.9%) 10146.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4713.698, 5910.611), stdev = 2635.067
[info]   CI (99.9%): [≈ 0, 14860.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.00% complete, ETA 01:16:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 320136.458 ops/s
[info] # Warmup Iteration   2: 538312.179 ops/s
[info] # Warmup Iteration   3: 539102.650 ops/s
[info] # Warmup Iteration   4: 549214.248 ops/s
[info] # Warmup Iteration   5: 538459.485 ops/s
[info] Iteration   1: 526566.928 ops/s
[info]                  ·gc.alloc.rate:                   532.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2022.856 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.991 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 545284.125 ops/s
[info]                  ·gc.alloc.rate:            551.554 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1955.352 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 542427.300 ops/s
[info]                  ·gc.alloc.rate:            548.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1965.652 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 541845.575 ops/s
[info]                  ·gc.alloc.rate:      548.238 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 543801.089 ops/s
[info]                  ·gc.alloc.rate:            550.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1960.683 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   539985.003 ±(99.9%) 29332.866 ops/s [Average]
[info]   (min, avg, max) = (526566.928, 539985.003, 545284.125), stdev = 7617.652
[info]   CI (99.9%): [510652.137, 569317.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   546.231 ±(99.9%) 29.839 MB/sec [Average]
[info]   (min, avg, max) = (532.556, 546.231, 551.554), stdev = 7.749
[info]   CI (99.9%): [516.392, 576.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.822 ±(99.9%) 1166.313 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.822, 677.613), stdev = 302.888
[info]   CI (99.9%): [≈ 0, 1708.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1580.909 ±(99.9%) 3404.639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1580.909, 2022.856), stdev = 884.174
[info]   CI (99.9%): [≈ 0, 4985.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.398 ±(99.9%) 3.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.398, 1.991), stdev = 0.890
[info]   CI (99.9%): [≈ 0, 3.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 6.000), stdev = 2.345
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.24% complete, ETA 01:16:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427513.814 ops/s
[info] # Warmup Iteration   2: 466412.113 ops/s
[info] # Warmup Iteration   3: 463769.048 ops/s
[info] # Warmup Iteration   4: 480327.880 ops/s
[info] # Warmup Iteration   5: 482967.650 ops/s
[info] Iteration   1: 480262.428 ops/s
[info]                  ·gc.alloc.rate:            368.541 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2220.098 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 482357.534 ops/s
[info]                  ·gc.alloc.rate:      370.214 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 479139.686 ops/s
[info]                  ·gc.alloc.rate:                   367.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2225.296 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.188 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 480975.193 ops/s
[info]                  ·gc.alloc.rate:      369.269 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 476683.019 ops/s
[info]                  ·gc.alloc.rate:            365.828 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2238.982 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   479883.572 ±(99.9%) 8225.557 ops/s [Average]
[info]   (min, avg, max) = (476683.019, 479883.572, 482357.534), stdev = 2136.151
[info]   CI (99.9%): [471658.015, 488109.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   368.306 ±(99.9%) 6.432 MB/sec [Average]
[info]   (min, avg, max) = (365.828, 368.306, 370.214), stdev = 1.670
[info]   CI (99.9%): [361.873, 374.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.534 ±(99.9%) 1429.025 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.534, 678.049), stdev = 371.113
[info]   CI (99.9%): [≈ 0, 1835.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1336.875 ±(99.9%) 4699.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1336.875, 2238.982), stdev = 1220.414
[info]   CI (99.9%): [≈ 0, 6036.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.438 ±(99.9%) 3.768 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.188), stdev = 0.979
[info]   CI (99.9%): [≈ 0, 4.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 4.000), stdev = 1.871
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.47% complete, ETA 01:16:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442565.037 ops/s
[info] # Warmup Iteration   2: 492187.150 ops/s
[info] # Warmup Iteration   3: 492693.495 ops/s
[info] # Warmup Iteration   4: 492617.297 ops/s
[info] # Warmup Iteration   5: 489240.326 ops/s
[info] Iteration   1: 492551.270 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 492835.274 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 492962.356 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 492939.335 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 492874.074 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   492832.462 ±(99.9%) 635.946 ops/s [Average]
[info]   (min, avg, max) = (492551.270, 492832.462, 492962.356), stdev = 165.153
[info]   CI (99.9%): [492196.516, 493468.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.71% complete, ETA 01:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177864.959 ops/s
[info] # Warmup Iteration   2: 304002.805 ops/s
[info] # Warmup Iteration   3: 301661.704 ops/s
[info] # Warmup Iteration   4: 307919.907 ops/s
[info] # Warmup Iteration   5: 307188.534 ops/s
[info] Iteration   1: 307420.255 ops/s
[info]                  ·gc.alloc.rate:            847.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3464.958 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 306419.207 ops/s
[info]                  ·gc.alloc.rate:            844.128 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6952.278 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 308055.714 ops/s
[info]                  ·gc.alloc.rate:            848.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3457.614 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 307706.055 ops/s
[info]                  ·gc.alloc.rate:                   847.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3461.546 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 303694.055 ops/s
[info]                  ·gc.alloc.rate:            836.601 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3510.880 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   306659.057 ±(99.9%) 6800.243 ops/s [Average]
[info]   (min, avg, max) = (303694.055, 306659.057, 308055.714), stdev = 1766.001
[info]   CI (99.9%): [299858.814, 313459.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   844.837 ±(99.9%) 18.915 MB/sec [Average]
[info]   (min, avg, max) = (836.601, 844.837, 848.753), stdev = 4.912
[info]   CI (99.9%): [825.922, 863.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.001), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   812.253 ±(99.9%) 1164.993 MB/sec [Average]
[info]   (min, avg, max) = (676.725, 812.253, 1353.462), stdev = 302.545
[info]   CI (99.9%): [≈ 0, 1977.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4169.455 ±(99.9%) 5990.813 B/op [Average]
[info]   (min, avg, max) = (3457.614, 4169.455, 6952.278), stdev = 1555.795
[info]   CI (99.9%): [≈ 0, 10160.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.681 ±(99.9%) 5.867 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 3.407), stdev = 1.524
[info]   CI (99.9%): [≈ 0, 6.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.94% complete, ETA 01:15:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6109.111 ops/s
[info] # Warmup Iteration   2: 8751.819 ops/s
[info] # Warmup Iteration   3: 9053.337 ops/s
[info] # Warmup Iteration   4: 8938.646 ops/s
[info] # Warmup Iteration   5: 8982.045 ops/s
[info] Iteration   1: 9121.822 ops/s
[info]                  ·gc.alloc.rate:            1166.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 234013.015 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 9142.628 ops/s
[info]                  ·gc.alloc.rate:            1169.192 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233475.584 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 8969.802 ops/s
[info]                  ·gc.alloc.rate:                   1147.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.919 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        238068.358 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 116.872 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 9169.684 ops/s
[info]                  ·gc.alloc.rate:            1172.634 MB/sec
[info]                  ·gc.alloc.rate.norm:       201280.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116381.418 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 9113.114 ops/s
[info]                  ·gc.alloc.rate:                   1165.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        234192.709 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 575.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   9103.410 ±(99.9%) 299.599 ops/s [Average]
[info]   (min, avg, max) = (8969.802, 9103.410, 9169.684), stdev = 77.805
[info]   CI (99.9%): [8803.811, 9403.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1164.273 ±(99.9%) 38.150 MB/sec [Average]
[info]   (min, avg, max) = (1147.237, 1164.273, 1172.634), stdev = 9.908
[info]   CI (99.9%): [1126.123, 1202.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201280.046 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (201280.044, 201280.046, 201280.049), stdev = 0.002
[info]   CI (99.9%): [201280.038, 201280.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1220.757 ±(99.9%) 1168.273 MB/sec [Average]
[info]   (min, avg, max) = (678.025, 1220.757, 1356.919), stdev = 303.397
[info]   CI (99.9%): [52.484, 2389.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   211226.217 ±(99.9%) 204281.729 B/op [Average]
[info]   (min, avg, max) = (116381.418, 211226.217, 238068.358), stdev = 53051.316
[info]   CI (99.9%): [6944.488, 415507.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   138.400 ±(99.9%) 960.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 138.400, 575.129), stdev = 249.329
[info]   CI (99.9%): [≈ 0, 1098.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 8.000), stdev = 1.643
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.18% complete, ETA 01:15:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5347.332 ops/s
[info] # Warmup Iteration   2: 8974.253 ops/s
[info] # Warmup Iteration   3: 9238.957 ops/s
[info] # Warmup Iteration   4: 9190.512 ops/s
[info] # Warmup Iteration   5: 9252.430 ops/s
[info] Iteration   1: 9190.155 ops/s
[info]                  ·gc.alloc.rate:            1029.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       176304.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 232028.240 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 9190.363 ops/s
[info]                  ·gc.alloc.rate:            1029.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       176304.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 232003.001 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 9210.592 ops/s
[info]                  ·gc.alloc.rate:            1031.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       176334.574 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115737.117 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 9064.771 ops/s
[info]                  ·gc.alloc.rate:                   1015.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              176336.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        235111.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 115.648 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 9218.119 ops/s
[info]                  ·gc.alloc.rate:            1032.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       176336.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 115649.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9174.800 ±(99.9%) 241.564 ops/s [Average]
[info]   (min, avg, max) = (9064.771, 9174.800, 9218.119), stdev = 62.733
[info]   CI (99.9%): [8933.236, 9416.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1027.746 ±(99.9%) 26.911 MB/sec [Average]
[info]   (min, avg, max) = (1015.541, 1027.746, 1032.734), stdev = 6.989
[info]   CI (99.9%): [1000.836, 1054.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   176322.953 ±(99.9%) 66.493 B/op [Average]
[info]   (min, avg, max) = (176304.048, 176322.953, 176336.049), stdev = 17.268
[info]   CI (99.9%): [176256.460, 176389.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.550 ±(99.9%) 1428.120 MB/sec [Average]
[info]   (min, avg, max) = (677.232, 1083.550, 1354.627), stdev = 370.878
[info]   CI (99.9%): [≈ 0, 2511.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   186105.801 ±(99.9%) 247558.134 B/op [Average]
[info]   (min, avg, max) = (115649.256, 186105.801, 235111.394), stdev = 64290.061
[info]   CI (99.9%): [≈ 0, 433663.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   23.130 ±(99.9%) 199.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.130, 115.648), stdev = 51.719
[info]   CI (99.9%): [≈ 0, 222.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 10.000), stdev = 2.408
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.41% complete, ETA 01:15:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 179992.514 ops/s
[info] # Warmup Iteration   2: 194267.222 ops/s
[info] # Warmup Iteration   3: 197483.023 ops/s
[info] # Warmup Iteration   4: 197906.242 ops/s
[info] # Warmup Iteration   5: 197678.832 ops/s
[info] Iteration   1: 196831.309 ops/s
[info]                  ·gc.alloc.rate:            1280.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10855.199 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 196344.547 ops/s
[info]                  ·gc.alloc.rate:            1277.360 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10882.174 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 197702.873 ops/s
[info]                  ·gc.alloc.rate:            1286.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5403.664 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 197146.010 ops/s
[info]                  ·gc.alloc.rate:                   1282.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10837.802 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 197201.049 ops/s
[info]                  ·gc.alloc.rate:                                  1282.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.792 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10877.036 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   197045.158 ±(99.9%) 1928.833 ops/s [Average]
[info]   (min, avg, max) = (196344.547, 197045.158, 197702.873), stdev = 500.912
[info]   CI (99.9%): [195116.325, 198973.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1281.936 ±(99.9%) 12.344 MB/sec [Average]
[info]   (min, avg, max) = (1277.360, 1281.936, 1286.117), stdev = 3.206
[info]   CI (99.9%): [1269.593, 1294.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.002, 10240.002, 10240.002), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.158 ±(99.9%) 1.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.158, 0.792), stdev = 0.354
[info]   CI (99.9%): [≈ 0, 1.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1222.797 ±(99.9%) 1171.272 MB/sec [Average]
[info]   (min, avg, max) = (678.686, 1222.797, 1362.709), stdev = 304.176
[info]   CI (99.9%): [51.525, 2394.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9771.175 ±(99.9%) 9401.645 B/op [Average]
[info]   (min, avg, max) = (5403.664, 9771.175, 10882.174), stdev = 2441.577
[info]   CI (99.9%): [369.530, 19172.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.254 ±(99.9%) 36.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.254, 21.271), stdev = 9.513
[info]   CI (99.9%): [≈ 0, 40.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.65% complete, ETA 01:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3501.030 ops/s
[info] # Warmup Iteration   2: 6941.162 ops/s
[info] # Warmup Iteration   3: 7099.351 ops/s
[info] # Warmup Iteration   4: 7063.501 ops/s
[info] # Warmup Iteration   5: 7047.014 ops/s
[info] Iteration   1: 7078.779 ops/s
[info]                  ·gc.alloc.rate:            1318.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       293112.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 301200.902 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 7066.998 ops/s
[info]                  ·gc.alloc.rate:            1315.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       293112.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 301712.206 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 7081.123 ops/s
[info]                  ·gc.alloc.rate:            1318.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       293112.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 301115.853 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 7113.105 ops/s
[info]                  ·gc.alloc.rate:                                  1324.566 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293112.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.334 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       300645.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                884.252 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 7050.784 ops/s
[info]                  ·gc.alloc.rate:                                  1313.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293115.719 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.446 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.579 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       304180.703 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7078.158 ±(99.9%) 88.320 ops/s [Average]
[info]   (min, avg, max) = (7050.784, 7078.158, 7113.105), stdev = 22.936
[info]   CI (99.9%): [6989.838, 7166.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1318.054 ±(99.9%) 16.393 MB/sec [Average]
[info]   (min, avg, max) = (1313.013, 1318.054, 1324.566), stdev = 4.257
[info]   CI (99.9%): [1301.661, 1334.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293112.791 ±(99.9%) 6.304 B/op [Average]
[info]   (min, avg, max) = (293112.057, 293112.791, 293115.719), stdev = 1.637
[info]   CI (99.9%): [293106.487, 293119.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.078), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.356 ±(99.9%) 28.902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.356, 17.334), stdev = 7.506
[info]   CI (99.9%): [≈ 0, 33.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.975 ±(99.9%) 13.824 MB/sec [Average]
[info]   (min, avg, max) = (1354.515, 1356.975, 1362.579), stdev = 3.590
[info]   CI (99.9%): [1343.151, 1370.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   301771.097 ±(99.9%) 5387.591 B/op [Average]
[info]   (min, avg, max) = (300645.824, 301771.097, 304180.703), stdev = 1399.140
[info]   CI (99.9%): [296383.506, 307158.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   176.850 ±(99.9%) 1522.736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 176.850, 884.252), stdev = 395.450
[info]   CI (99.9%): [≈ 0, 1699.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.400, 11.000), stdev = 3.362
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.88% complete, ETA 01:14:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15616.705 ops/s
[info] # Warmup Iteration   2: 22326.374 ops/s
[info] # Warmup Iteration   3: 21694.379 ops/s
[info] # Warmup Iteration   4: 21949.388 ops/s
[info] # Warmup Iteration   5: 21870.704 ops/s
[info] Iteration   1: 22279.842 ops/s
[info]                  ·gc.alloc.rate:            935.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       66084.742 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47902.099 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 22350.095 ops/s
[info]                  ·gc.alloc.rate:            938.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95499.921 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 22473.005 ops/s
[info]                  ·gc.alloc.rate:            943.600 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47488.672 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 22480.450 ops/s
[info]                  ·gc.alloc.rate:            944.166 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 94947.776 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 22285.768 ops/s
[info]                  ·gc.alloc.rate:            935.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       66080.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47889.204 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22373.832 ±(99.9%) 377.065 ops/s [Average]
[info]   (min, avg, max) = (22279.842, 22373.832, 22480.450), stdev = 97.923
[info]   CI (99.9%): [21996.767, 22750.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   939.438 ±(99.9%) 16.243 MB/sec [Average]
[info]   (min, avg, max) = (935.391, 939.438, 944.166), stdev = 4.218
[info]   CI (99.9%): [923.195, 955.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66080.964 ±(99.9%) 8.133 B/op [Average]
[info]   (min, avg, max) = (66080.018, 66080.964, 66084.742), stdev = 2.112
[info]   CI (99.9%): [66072.831, 66089.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   949.397 ±(99.9%) 1430.517 MB/sec [Average]
[info]   (min, avg, max) = (678.026, 949.397, 1356.635), stdev = 371.501
[info]   CI (99.9%): [≈ 0, 2379.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   66745.534 ±(99.9%) 100110.154 B/op [Average]
[info]   (min, avg, max) = (47488.672, 66745.534, 95499.921), stdev = 25998.289
[info]   CI (99.9%): [≈ 0, 166855.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 8.000), stdev = 2.490
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.12% complete, ETA 01:14:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14274.019 ops/s
[info] # Warmup Iteration   2: 24601.342 ops/s
[info] # Warmup Iteration   3: 24911.325 ops/s
[info] # Warmup Iteration   4: 24674.492 ops/s
[info] # Warmup Iteration   5: 24955.992 ops/s
[info] Iteration   1: 25131.494 ops/s
[info]                  ·gc.alloc.rate:                   966.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        42383.562 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.716 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25000.895 ops/s
[info]                  ·gc.alloc.rate:            961.722 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85291.673 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 25130.455 ops/s
[info]                  ·gc.alloc.rate:            966.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42425.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 24784.306 ops/s
[info]                  ·gc.alloc.rate:            953.411 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 86038.307 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 25073.749 ops/s
[info]                  ·gc.alloc.rate:            964.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.291 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42520.008 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25024.180 ±(99.9%) 555.846 ops/s [Average]
[info]   (min, avg, max) = (24784.306, 25024.180, 25131.494), stdev = 144.351
[info]   CI (99.9%): [24468.334, 25580.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   962.638 ±(99.9%) 21.410 MB/sec [Average]
[info]   (min, avg, max) = (953.411, 962.638, 966.771), stdev = 5.560
[info]   CI (99.9%): [941.228, 984.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.017 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (60552.016, 60552.017, 60552.018), stdev = 0.001
[info]   CI (99.9%): [60552.015, 60552.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.139 ±(99.9%) 1429.035 MB/sec [Average]
[info]   (min, avg, max) = (676.695, 948.139, 1354.700), stdev = 371.116
[info]   CI (99.9%): [≈ 0, 2377.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   59731.766 ±(99.9%) 91164.804 B/op [Average]
[info]   (min, avg, max) = (42383.562, 59731.766, 86038.307), stdev = 23675.210
[info]   CI (99.9%): [≈ 0, 150896.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.343 ±(99.9%) 71.838 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.343, 41.716), stdev = 18.656
[info]   CI (99.9%): [≈ 0, 80.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.35% complete, ETA 01:14:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 773941.484 ops/s
[info] # Warmup Iteration   2: 893535.691 ops/s
[info] # Warmup Iteration   3: 907396.752 ops/s
[info] # Warmup Iteration   4: 886688.403 ops/s
[info] # Warmup Iteration   5: 903816.883 ops/s
[info] Iteration   1: 903718.955 ops/s
[info]                  ·gc.alloc.rate:                   1630.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3540.605 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 899582.307 ops/s
[info]                  ·gc.alloc.rate:                   1623.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2371.653 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.993 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 890801.261 ops/s
[info]                  ·gc.alloc.rate:                                  1607.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2407.890 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 889353.519 ops/s
[info]                  ·gc.alloc.rate:                                  1605.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3617.852 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 890907.962 ops/s
[info]                  ·gc.alloc.rate:            1607.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2407.768 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   894872.801 ±(99.9%) 24595.470 ops/s [Average]
[info]   (min, avg, max) = (889353.519, 894872.801, 903718.955), stdev = 6387.365
[info]   CI (99.9%): [870277.331, 919468.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1614.679 ±(99.9%) 44.011 MB/sec [Average]
[info]   (min, avg, max) = (1605.000, 1614.679, 1630.503), stdev = 11.430
[info]   CI (99.9%): [1570.668, 1658.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.000, 2840.000, 2840.000), stdev = 0.001
[info]   CI (99.9%): [2840.000, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.670 ±(99.9%) 1430.782 MB/sec [Average]
[info]   (min, avg, max) = (1355.471, 1631.670, 2044.595), stdev = 371.570
[info]   CI (99.9%): [200.887, 3062.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2869.154 ±(99.9%) 2498.876 B/op [Average]
[info]   (min, avg, max) = (2371.653, 2869.154, 3617.852), stdev = 648.950
[info]   CI (99.9%): [370.278, 5368.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.631 ±(99.9%) 11.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.631, 6.993), stdev = 3.039
[info]   CI (99.9%): [≈ 0, 13.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 11.000), stdev = 3.647
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.59% complete, ETA 01:13:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 565929.100 ops/s
[info] # Warmup Iteration   2: 617762.662 ops/s
[info] # Warmup Iteration   3: 615904.371 ops/s
[info] # Warmup Iteration   4: 615960.610 ops/s
[info] # Warmup Iteration   5: 615549.960 ops/s
[info] Iteration   1: 615605.513 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 616009.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 615930.069 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 615580.081 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 615920.978 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   615809.193 ±(99.9%) 772.862 ops/s [Average]
[info]   (min, avg, max) = (615580.081, 615809.193, 616009.326), stdev = 200.710
[info]   CI (99.9%): [615036.331, 616582.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.82% complete, ETA 01:13:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15399.139 ops/s
[info] # Warmup Iteration   2: 22916.329 ops/s
[info] # Warmup Iteration   3: 22310.662 ops/s
[info] # Warmup Iteration   4: 22720.165 ops/s
[info] # Warmup Iteration   5: 22813.421 ops/s
[info] Iteration   1: 22305.679 ops/s
[info]                  ·gc.alloc.rate:            941.126 MB/sec
[info]                  ·gc.alloc.rate.norm:       66418.374 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.599 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95598.547 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 22584.615 ops/s
[info]                  ·gc.alloc.rate:            953.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.550 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47208.898 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 22649.443 ops/s
[info]                  ·gc.alloc.rate:            955.706 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47073.444 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 22375.063 ops/s
[info]                  ·gc.alloc.rate:            944.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95299.535 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 22593.912 ops/s
[info]                  ·gc.alloc.rate:            953.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       66416.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47190.096 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   22501.742 ±(99.9%) 582.922 ops/s [Average]
[info]   (min, avg, max) = (22305.679, 22501.742, 22649.443), stdev = 151.383
[info]   CI (99.9%): [21918.820, 23084.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   949.574 ±(99.9%) 24.530 MB/sec [Average]
[info]   (min, avg, max) = (941.126, 949.574, 955.706), stdev = 6.370
[info]   CI (99.9%): [925.043, 974.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66416.490 ±(99.9%) 4.056 B/op [Average]
[info]   (min, avg, max) = (66416.018, 66416.490, 66418.374), stdev = 1.053
[info]   CI (99.9%): [66412.434, 66420.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   948.424 ±(99.9%) 1428.867 MB/sec [Average]
[info]   (min, avg, max) = (677.370, 948.424, 1355.226), stdev = 371.072
[info]   CI (99.9%): [≈ 0, 2377.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66474.104 ±(99.9%) 101851.996 B/op [Average]
[info]   (min, avg, max) = (47073.444, 66474.104, 95598.547), stdev = 26450.640
[info]   CI (99.9%): [≈ 0, 168326.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.06% complete, ETA 01:13:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18139.010 ops/s
[info] # Warmup Iteration   2: 25313.303 ops/s
[info] # Warmup Iteration   3: 25141.974 ops/s
[info] # Warmup Iteration   4: 25516.332 ops/s
[info] # Warmup Iteration   5: 25552.678 ops/s
[info] Iteration   1: 25746.997 ops/s
[info]                  ·gc.alloc.rate:            1313.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       80320.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41490.271 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 25621.005 ops/s
[info]                  ·gc.alloc.rate:                   1307.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              80320.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        83306.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.917 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 25681.829 ops/s
[info]                  ·gc.alloc.rate:            1310.815 MB/sec
[info]                  ·gc.alloc.rate.norm:       80320.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 83152.930 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 25174.755 ops/s
[info]                  ·gc.alloc.rate:                   1284.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              80320.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        84788.941 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 208.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 25701.880 ops/s
[info]                  ·gc.alloc.rate:                                  1311.534 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80320.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.265 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83455.343 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   25585.293 ±(99.9%) 900.748 ops/s [Average]
[info]   (min, avg, max) = (25174.755, 25585.293, 25746.997), stdev = 233.921
[info]   CI (99.9%): [24684.545, 26486.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1305.780 ±(99.9%) 45.575 MB/sec [Average]
[info]   (min, avg, max) = (1284.947, 1305.780, 1313.754), stdev = 11.836
[info]   CI (99.9%): [1260.205, 1351.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   80320.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (80320.016, 80320.016, 80320.017), stdev = 0.001
[info]   CI (99.9%): [80320.014, 80320.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.653 ±(99.9%) 14.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.653, 8.265), stdev = 3.696
[info]   CI (99.9%): [≈ 0, 15.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1222.267 ±(99.9%) 1170.253 MB/sec [Average]
[info]   (min, avg, max) = (678.635, 1222.267, 1362.731), stdev = 303.911
[info]   CI (99.9%): [52.014, 2392.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   75238.836 ±(99.9%) 72689.623 B/op [Average]
[info]   (min, avg, max) = (41490.271, 75238.836, 84788.941), stdev = 18877.264
[info]   CI (99.9%): [2549.214, 147928.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   49.828 ±(99.9%) 347.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.828, 208.224), stdev = 90.301
[info]   CI (99.9%): [≈ 0, 397.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 8.000), stdev = 1.817
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.29% complete, ETA 01:13:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14465.913 ops/s
[info] # Warmup Iteration   2: 26385.882 ops/s
[info] # Warmup Iteration   3: 26237.803 ops/s
[info] # Warmup Iteration   4: 26455.106 ops/s
[info] # Warmup Iteration   5: 26318.857 ops/s
[info] Iteration   1: 26620.118 ops/s
[info]                  ·gc.alloc.rate:            1215.739 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40052.649 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 26507.532 ops/s
[info]                  ·gc.alloc.rate:            1211.130 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80443.691 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 26416.084 ops/s
[info]                  ·gc.alloc.rate:                   1206.515 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80684.115 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 39.687 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 26467.942 ops/s
[info]                  ·gc.alloc.rate:                   1208.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.863 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        80568.283 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 237.665 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 26586.493 ops/s
[info]                  ·gc.alloc.rate:                                  1214.249 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.185 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80677.892 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   26519.634 ±(99.9%) 322.791 ops/s [Average]
[info]   (min, avg, max) = (26416.084, 26519.634, 26620.118), stdev = 83.828
[info]   CI (99.9%): [26196.843, 26842.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1211.305 ±(99.9%) 14.552 MB/sec [Average]
[info]   (min, avg, max) = (1206.515, 1211.305, 1215.739), stdev = 3.779
[info]   CI (99.9%): [1196.753, 1225.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.016 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (71888.015, 71888.016, 71888.017), stdev = 0.001
[info]   CI (99.9%): [71888.014, 71888.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.195 ±(99.9%) 18.903 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.195, 10.977), stdev = 4.909
[info]   CI (99.9%): [≈ 0, 21.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.870 ±(99.9%) 1170.036 MB/sec [Average]
[info]   (min, avg, max) = (677.353, 1220.870, 1362.718), stdev = 303.855
[info]   CI (99.9%): [50.833, 2390.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   72485.326 ±(99.9%) 69814.801 B/op [Average]
[info]   (min, avg, max) = (40052.649, 72485.326, 80684.115), stdev = 18130.682
[info]   CI (99.9%): [2670.525, 142300.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   55.470 ±(99.9%) 397.730 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 55.470, 237.665), stdev = 103.289
[info]   CI (99.9%): [≈ 0, 453.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 9.000), stdev = 2.828
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.53% complete, ETA 01:12:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 328792.312 ops/s
[info] # Warmup Iteration   2: 346873.266 ops/s
[info] # Warmup Iteration   3: 334707.932 ops/s
[info] # Warmup Iteration   4: 333063.358 ops/s
[info] # Warmup Iteration   5: 348849.823 ops/s
[info] Iteration   1: 348705.340 ops/s
[info]                  ·gc.alloc.rate:            907.331 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3063.673 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 345834.860 ops/s
[info]                  ·gc.alloc.rate:            899.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6178.259 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 335893.420 ops/s
[info]                  ·gc.alloc.rate:            874.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3180.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 342228.647 ops/s
[info]                  ·gc.alloc.rate:            890.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3121.546 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 341085.123 ops/s
[info]                  ·gc.alloc.rate:            887.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6264.082 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   342749.478 ±(99.9%) 18769.544 ops/s [Average]
[info]   (min, avg, max) = (335893.420, 342749.478, 348705.340), stdev = 4874.391
[info]   CI (99.9%): [323979.934, 361519.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   891.886 ±(99.9%) 48.770 MB/sec [Average]
[info]   (min, avg, max) = (874.061, 891.886, 907.331), stdev = 12.665
[info]   CI (99.9%): [843.117, 940.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   950.169 ±(99.9%) 1431.507 MB/sec [Average]
[info]   (min, avg, max) = (678.654, 950.169, 1357.440), stdev = 371.758
[info]   CI (99.9%): [≈ 0, 2381.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4361.620 ±(99.9%) 6539.562 B/op [Average]
[info]   (min, avg, max) = (3063.673, 4361.620, 6264.082), stdev = 1698.304
[info]   CI (99.9%): [≈ 0, 10901.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.76% complete, ETA 01:12:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8066.774 ops/s
[info] # Warmup Iteration   2: 15241.141 ops/s
[info] # Warmup Iteration   3: 15936.485 ops/s
[info] # Warmup Iteration   4: 15856.633 ops/s
[info] # Warmup Iteration   5: 15790.787 ops/s
[info] Iteration   1: 15913.775 ops/s
[info]                  ·gc.alloc.rate:            1586.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       156904.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.810 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133995.325 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 15800.273 ops/s
[info]                  ·gc.alloc.rate:                   1574.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              156904.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2031.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        202442.914 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 398.118 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 15962.603 ops/s
[info]                  ·gc.alloc.rate:                                  1591.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             156904.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       134372.197 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 15982.948 ops/s
[info]                  ·gc.alloc.rate:                                  1593.684 MB/sec
[info]                  ·gc.alloc.rate.norm:                             156904.026 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.969 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       134204.085 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 15994.121 ops/s
[info]                  ·gc.alloc.rate:            1594.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       156904.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 201155.128 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   15930.744 ±(99.9%) 304.831 ops/s [Average]
[info]   (min, avg, max) = (15800.273, 15930.744, 15994.121), stdev = 79.164
[info]   CI (99.9%): [15625.913, 16235.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1588.169 ±(99.9%) 31.049 MB/sec [Average]
[info]   (min, avg, max) = (1574.904, 1588.169, 1594.602), stdev = 8.063
[info]   CI (99.9%): [1557.121, 1619.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   156904.027 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (156904.026, 156904.027, 156904.034), stdev = 0.004
[info]   CI (99.9%): [156904.012, 156904.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.113), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.614 ±(99.9%) 18.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.614, 11.104), stdev = 4.822
[info]   CI (99.9%): [≈ 0, 21.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.392 ±(99.9%) 1429.996 MB/sec [Average]
[info]   (min, avg, max) = (1354.810, 1631.392, 2044.323), stdev = 371.365
[info]   CI (99.9%): [201.397, 3061.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   161233.930 ±(99.9%) 142603.717 B/op [Average]
[info]   (min, avg, max) = (133995.325, 161233.930, 202442.914), stdev = 37033.732
[info]   CI (99.9%): [18630.213, 303837.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   79.624 ±(99.9%) 685.583 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.624, 398.118), stdev = 178.044
[info]   CI (99.9%): [≈ 0, 765.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.604
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36.00% complete, ETA 01:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36552.747 ops/s
[info] # Warmup Iteration   2: 53333.721 ops/s
[info] # Warmup Iteration   3: 53579.608 ops/s
[info] # Warmup Iteration   4: 54149.672 ops/s
[info] # Warmup Iteration   5: 53725.017 ops/s
[info] Iteration   1: 52677.665 ops/s
[info]                  ·gc.alloc.rate:            1278.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20259.838 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 53022.340 ops/s
[info]                  ·gc.alloc.rate:            1286.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40257.599 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 52838.714 ops/s
[info]                  ·gc.alloc.rate:            1281.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40397.002 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 52327.650 ops/s
[info]                  ·gc.alloc.rate:                   1269.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40791.424 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.175 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 54025.604 ops/s
[info]                  ·gc.alloc.rate:                                  1310.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38176.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.173 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39702.176 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   52978.395 ±(99.9%) 2459.591 ops/s [Average]
[info]   (min, avg, max) = (52327.650, 52978.395, 54025.604), stdev = 638.748
[info]   CI (99.9%): [50518.804, 55437.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1285.186 ±(99.9%) 59.976 MB/sec [Average]
[info]   (min, avg, max) = (1269.162, 1285.186, 1310.709), stdev = 15.576
[info]   CI (99.9%): [1225.210, 1345.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38176.008, 38176.008, 38176.008), stdev = 0.001
[info]   CI (99.9%): [38176.007, 38176.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.173), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.009 ±(99.9%) 8.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.009, 5.045), stdev = 2.256
[info]   CI (99.9%): [≈ 0, 9.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1222.024 ±(99.9%) 1170.406 MB/sec [Average]
[info]   (min, avg, max) = (678.326, 1222.024, 1363.108), stdev = 303.951
[info]   CI (99.9%): [51.617, 2392.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   36281.608 ±(99.9%) 34520.802 B/op [Average]
[info]   (min, avg, max) = (20259.838, 36281.608, 40791.424), stdev = 8964.943
[info]   CI (99.9%): [1760.806, 70802.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.035 ±(99.9%) 172.508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.035, 100.175), stdev = 44.800
[info]   CI (99.9%): [≈ 0, 192.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 9.000), stdev = 2.702
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.24% complete, ETA 01:12:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65040.857 ops/s
[info] # Warmup Iteration   2: 97970.642 ops/s
[info] # Warmup Iteration   3: 98002.414 ops/s
[info] # Warmup Iteration   4: 98206.995 ops/s
[info] # Warmup Iteration   5: 97341.557 ops/s
[info] Iteration   1: 98441.623 ops/s
[info]                  ·gc.alloc.rate:            1026.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10831.032 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 97957.652 ops/s
[info]                  ·gc.alloc.rate:            1021.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21769.077 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 97607.244 ops/s
[info]                  ·gc.alloc.rate:            1017.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10923.786 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 97602.085 ops/s
[info]                  ·gc.alloc.rate:            1017.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21848.690 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 98373.479 ops/s
[info]                  ·gc.alloc.rate:            1025.481 MB/sec
[info]                  ·gc.alloc.rate.norm:       16408.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10838.628 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   97996.416 ±(99.9%) 1550.859 ops/s [Average]
[info]   (min, avg, max) = (97602.085, 97996.416, 98441.623), stdev = 402.753
[info]   CI (99.9%): [96445.558, 99547.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1021.489 ±(99.9%) 16.189 MB/sec [Average]
[info]   (min, avg, max) = (1017.339, 1021.489, 1026.088), stdev = 4.204
[info]   CI (99.9%): [1005.299, 1037.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16408.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16408.004, 16408.004, 16408.004), stdev = 0.001
[info]   CI (99.9%): [16408.004, 16408.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.313 ±(99.9%) 1428.742 MB/sec [Average]
[info]   (min, avg, max) = (677.303, 948.313, 1354.838), stdev = 371.040
[info]   CI (99.9%): [≈ 0, 2377.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15242.243 ±(99.9%) 23083.349 B/op [Average]
[info]   (min, avg, max) = (10831.032, 15242.243, 21848.690), stdev = 5994.672
[info]   CI (99.9%): [≈ 0, 38325.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.47% complete, ETA 01:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1240731.122 ops/s
[info] # Warmup Iteration   2: 1456055.027 ops/s
[info] # Warmup Iteration   3: 1472284.191 ops/s
[info] # Warmup Iteration   4: 1494408.681 ops/s
[info] # Warmup Iteration   5: 1490888.892 ops/s
[info] Iteration   1: 1507467.157 ops/s
[info]                  ·gc.alloc.rate:                   1616.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1415.287 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.695 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1480064.963 ops/s
[info]                  ·gc.alloc.rate:                   1587.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2032.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2161.168 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 1496768.923 ops/s
[info]                  ·gc.alloc.rate:                                  1605.023 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1433.138 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 1503277.509 ops/s
[info]                  ·gc.alloc.rate:                                  1612.442 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1426.878 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1501415.380 ops/s
[info]                  ·gc.alloc.rate:            1610.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.307 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2142.916 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1497798.787 ±(99.9%) 40938.459 ops/s [Average]
[info]   (min, avg, max) = (1480064.963, 1497798.787, 1507467.157), stdev = 10631.588
[info]   CI (99.9%): [1456860.327, 1538737.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1606.435 ±(99.9%) 43.551 MB/sec [Average]
[info]   (min, avg, max) = (1587.660, 1606.435, 1616.729), stdev = 11.310
[info]   CI (99.9%): [1562.884, 1649.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.114), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.027 ±(99.9%) 0.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.120), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.647 ±(99.9%) 1430.293 MB/sec [Average]
[info]   (min, avg, max) = (1355.530, 1631.647, 2044.307), stdev = 371.443
[info]   CI (99.9%): [201.353, 3061.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1715.878 ±(99.9%) 1533.580 B/op [Average]
[info]   (min, avg, max) = (1415.287, 1715.878, 2161.168), stdev = 398.266
[info]   CI (99.9%): [182.297, 3249.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.989 ±(99.9%) 7.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.989, 4.250), stdev = 1.848
[info]   CI (99.9%): [≈ 0, 8.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 13.000), stdev = 4.393
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.71% complete, ETA 01:11:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 733423.219 ops/s
[info] # Warmup Iteration   2: 806471.490 ops/s
[info] # Warmup Iteration   3: 821230.055 ops/s
[info] # Warmup Iteration   4: 828378.553 ops/s
[info] # Warmup Iteration   5: 818956.862 ops/s
[info] Iteration   1: 795638.393 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 828662.715 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 828365.617 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 828410.645 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 828557.693 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   821927.013 ±(99.9%) 56590.065 ops/s [Average]
[info]   (min, avg, max) = (795638.393, 821927.013, 828662.715), stdev = 14696.260
[info]   CI (99.9%): [765336.948, 878517.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.94% complete, ETA 01:11:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40414.820 ops/s
[info] # Warmup Iteration   2: 55491.828 ops/s
[info] # Warmup Iteration   3: 55745.125 ops/s
[info] # Warmup Iteration   4: 55887.893 ops/s
[info] # Warmup Iteration   5: 55866.084 ops/s
[info] Iteration   1: 55557.878 ops/s
[info]                  ·gc.alloc.rate:            1292.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38381.176 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 56202.712 ops/s
[info]                  ·gc.alloc.rate:            1307.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18969.720 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 55903.707 ops/s
[info]                  ·gc.alloc.rate:            1300.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38142.993 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 55963.182 ops/s
[info]                  ·gc.alloc.rate:                   1301.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              36608.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        38105.511 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 112.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 56022.372 ops/s
[info]                  ·gc.alloc.rate:                                  1303.005 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36608.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.223 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.275 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38289.961 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   55929.970 ±(99.9%) 909.542 ops/s [Average]
[info]   (min, avg, max) = (55557.878, 55929.970, 56202.712), stdev = 236.205
[info]   CI (99.9%): [55020.428, 56839.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1300.922 ±(99.9%) 21.279 MB/sec [Average]
[info]   (min, avg, max) = (1292.150, 1300.922, 1307.277), stdev = 5.526
[info]   CI (99.9%): [1279.643, 1322.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36608.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36608.007, 36608.007, 36608.008), stdev = 0.001
[info]   CI (99.9%): [36608.006, 36608.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.223), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.255 ±(99.9%) 10.807 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.255, 6.275), stdev = 2.806
[info]   CI (99.9%): [≈ 0, 12.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.995 ±(99.9%) 1170.181 MB/sec [Average]
[info]   (min, avg, max) = (677.411, 1220.995, 1362.872), stdev = 303.892
[info]   CI (99.9%): [50.814, 2391.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   34377.872 ±(99.9%) 33169.976 B/op [Average]
[info]   (min, avg, max) = (18969.720, 34377.872, 38381.176), stdev = 8614.137
[info]   CI (99.9%): [1207.896, 67547.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   22.481 ±(99.9%) 193.569 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.481, 112.406), stdev = 50.269
[info]   CI (99.9%): [≈ 0, 216.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 14.000), stdev = 3.271
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.18% complete, ETA 01:11:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9854.780 ops/s
[info] # Warmup Iteration   2: 13487.656 ops/s
[info] # Warmup Iteration   3: 13582.836 ops/s
[info] # Warmup Iteration   4: 13477.723 ops/s
[info] # Warmup Iteration   5: 13439.434 ops/s
[info] Iteration   1: 13527.380 ops/s
[info]                  ·gc.alloc.rate:                   1207.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        157867.651 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 77.500 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 13545.056 ops/s
[info]                  ·gc.alloc.rate:            1208.972 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.239 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157592.141 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 13785.481 ops/s
[info]                  ·gc.alloc.rate:                   1230.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77418.797 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 76.050 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13678.353 ops/s
[info]                  ·gc.alloc.rate:            1220.820 MB/sec
[info]                  ·gc.alloc.rate.norm:       140480.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156113.822 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 13719.149 ops/s
[info]                  ·gc.alloc.rate:                                  1224.526 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.311 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       155941.680 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                382.023 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   13651.084 ±(99.9%) 430.445 ops/s [Average]
[info]   (min, avg, max) = (13527.380, 13651.084, 13785.481), stdev = 111.785
[info]   CI (99.9%): [13220.639, 14081.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1218.488 ±(99.9%) 39.008 MB/sec [Average]
[info]   (min, avg, max) = (1207.283, 1218.488, 1230.837), stdev = 10.130
[info]   CI (99.9%): [1179.479, 1257.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140480.033 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (140480.030, 140480.033, 140480.039), stdev = 0.004
[info]   CI (99.9%): [140480.018, 140480.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.005 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.062 ±(99.9%) 0.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.311), stdev = 0.139
[info]   CI (99.9%): [≈ 0, 0.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.450 ±(99.9%) 1169.146 MB/sec [Average]
[info]   (min, avg, max) = (678.316, 1221.450, 1359.301), stdev = 303.623
[info]   CI (99.9%): [52.304, 2390.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   140986.818 ±(99.9%) 136874.912 B/op [Average]
[info]   (min, avg, max) = (77418.797, 140986.818, 157867.651), stdev = 35545.980
[info]   CI (99.9%): [4111.906, 277861.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   107.115 ±(99.9%) 609.946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 107.115, 382.023), stdev = 158.401
[info]   CI (99.9%): [≈ 0, 717.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.41% complete, ETA 01:10:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7814.469 ops/s
[info] # Warmup Iteration   2: 13812.483 ops/s
[info] # Warmup Iteration   3: 13445.625 ops/s
[info] # Warmup Iteration   4: 13957.620 ops/s
[info] # Warmup Iteration   5: 13875.583 ops/s
[info] Iteration   1: 13905.835 ops/s
[info]                  ·gc.alloc.rate:            1123.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153339.822 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 13993.565 ops/s
[info]                  ·gc.alloc.rate:            1130.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76193.326 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 13907.958 ops/s
[info]                  ·gc.alloc.rate:            1123.733 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153317.776 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 13911.477 ops/s
[info]                  ·gc.alloc.rate:            1124.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       127184.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153262.689 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 13975.260 ops/s
[info]                  ·gc.alloc.rate:                   1129.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76291.443 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 450.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   13938.819 ±(99.9%) 162.379 ops/s [Average]
[info]   (min, avg, max) = (13905.835, 13938.819, 13993.565), stdev = 42.169
[info]   CI (99.9%): [13776.441, 14101.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1126.322 ±(99.9%) 12.803 MB/sec [Average]
[info]   (min, avg, max) = (1123.733, 1126.322, 1130.633), stdev = 3.325
[info]   CI (99.9%): [1113.519, 1139.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127184.032 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (127184.029, 127184.032, 127184.037), stdev = 0.003
[info]   CI (99.9%): [127184.020, 127184.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.802 ±(99.9%) 1428.759 MB/sec [Average]
[info]   (min, avg, max) = (677.339, 1083.802, 1354.878), stdev = 371.044
[info]   CI (99.9%): [≈ 0, 2512.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   122481.011 ±(99.9%) 162535.379 B/op [Average]
[info]   (min, avg, max) = (76193.326, 122481.011, 153339.822), stdev = 42209.922
[info]   CI (99.9%): [≈ 0, 285016.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   90.019 ±(99.9%) 775.094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 90.019, 450.097), stdev = 201.290
[info]   CI (99.9%): [≈ 0, 865.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.65% complete, ETA 01:10:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375386.171 ops/s
[info] # Warmup Iteration   2: 406106.928 ops/s
[info] # Warmup Iteration   3: 410999.213 ops/s
[info] # Warmup Iteration   4: 408145.825 ops/s
[info] # Warmup Iteration   5: 409498.642 ops/s
[info] Iteration   1: 407435.862 ops/s
[info]                  ·gc.alloc.rate:            1060.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5244.167 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 410179.145 ops/s
[info]                  ·gc.alloc.rate:            1067.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2604.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 408705.450 ops/s
[info]                  ·gc.alloc.rate:            1063.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5227.874 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 408754.843 ops/s
[info]                  ·gc.alloc.rate:            1063.808 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5227.260 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 410993.604 ops/s
[info]                  ·gc.alloc.rate:            1069.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2599.400 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   409213.781 ±(99.9%) 5352.851 ops/s [Average]
[info]   (min, avg, max) = (407435.862, 409213.781, 410993.604), stdev = 1390.118
[info]   CI (99.9%): [403860.930, 414566.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1064.897 ±(99.9%) 14.360 MB/sec [Average]
[info]   (min, avg, max) = (1060.102, 1064.897, 1069.710), stdev = 3.729
[info]   CI (99.9%): [1050.537, 1079.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1085.962 ±(99.9%) 1431.258 MB/sec [Average]
[info]   (min, avg, max) = (678.727, 1085.962, 1357.617), stdev = 371.693
[info]   CI (99.9%): [≈ 0, 2517.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4180.646 ±(99.9%) 5549.350 B/op [Average]
[info]   (min, avg, max) = (2599.400, 4180.646, 5244.167), stdev = 1441.148
[info]   CI (99.9%): [≈ 0, 9729.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 2.049
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.88% complete, ETA 01:10:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5518.311 ops/s
[info] # Warmup Iteration   2: 9310.757 ops/s
[info] # Warmup Iteration   3: 9949.540 ops/s
[info] # Warmup Iteration   4: 9917.860 ops/s
[info] # Warmup Iteration   5: 9888.011 ops/s
[info] Iteration   1: 9901.541 ops/s
[info]                  ·gc.alloc.rate:            1386.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       220408.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 215369.442 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 9798.534 ops/s
[info]                  ·gc.alloc.rate:            1372.072 MB/sec
[info]                  ·gc.alloc.rate.norm:       220408.893 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 217610.814 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 9827.323 ops/s
[info]                  ·gc.alloc.rate:                   1376.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              220408.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        216990.903 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 640.091 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 9959.889 ops/s
[info]                  ·gc.alloc.rate:                                  1394.893 MB/sec
[info]                  ·gc.alloc.rate.norm:                             220408.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.378 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       215357.006 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 9982.980 ops/s
[info]                  ·gc.alloc.rate:                                  1397.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             220408.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       214860.941 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   9894.053 ±(99.9%) 309.704 ops/s [Average]
[info]   (min, avg, max) = (9798.534, 9894.053, 9982.980), stdev = 80.429
[info]   CI (99.9%): [9584.349, 10203.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1385.567 ±(99.9%) 43.589 MB/sec [Average]
[info]   (min, avg, max) = (1372.072, 1385.567, 1397.917), stdev = 11.320
[info]   CI (99.9%): [1341.978, 1429.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   220408.212 ±(99.9%) 1.466 B/op [Average]
[info]   (min, avg, max) = (220408.041, 220408.212, 220408.893), stdev = 0.381
[info]   CI (99.9%): [220406.747, 220409.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.072), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.909 ±(99.9%) 18.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.909, 11.378), stdev = 4.929
[info]   CI (99.9%): [≈ 0, 21.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1358.046 ±(99.9%) 16.833 MB/sec [Average]
[info]   (min, avg, max) = (1354.653, 1358.046, 1362.927), stdev = 4.372
[info]   CI (99.9%): [1341.213, 1374.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   216037.821 ±(99.9%) 4587.746 B/op [Average]
[info]   (min, avg, max) = (214860.941, 216037.821, 217610.814), stdev = 1191.423
[info]   CI (99.9%): [211450.075, 220625.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   128.018 ±(99.9%) 1102.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 128.018, 640.091), stdev = 286.257
[info]   CI (99.9%): [≈ 0, 1230.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 3.493
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.12% complete, ETA 01:09:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26251.424 ops/s
[info] # Warmup Iteration   2: 37165.628 ops/s
[info] # Warmup Iteration   3: 36824.338 ops/s
[info] # Warmup Iteration   4: 37984.670 ops/s
[info] # Warmup Iteration   5: 38133.428 ops/s
[info] Iteration   1: 38214.099 ops/s
[info]                  ·gc.alloc.rate:            1188.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27928.374 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 37916.157 ops/s
[info]                  ·gc.alloc.rate:            1178.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56292.702 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 37810.317 ops/s
[info]                  ·gc.alloc.rate:            1175.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56454.959 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 37997.932 ops/s
[info]                  ·gc.alloc.rate:            1181.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56174.207 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 37790.185 ops/s
[info]                  ·gc.alloc.rate:                   1174.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28241.669 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 138.712 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   37945.738 ±(99.9%) 661.797 ops/s [Average]
[info]   (min, avg, max) = (37790.185, 37945.738, 38214.099), stdev = 171.867
[info]   CI (99.9%): [37283.941, 38607.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1179.624 ±(99.9%) 20.938 MB/sec [Average]
[info]   (min, avg, max) = (1174.715, 1179.624, 1188.140), stdev = 5.437
[info]   CI (99.9%): [1158.686, 1200.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928.011 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48928.011, 48928.011, 48928.012), stdev = 0.001
[info]   CI (99.9%): [48928.010, 48928.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1084.937 ±(99.9%) 1429.996 MB/sec [Average]
[info]   (min, avg, max) = (678.055, 1084.937, 1356.156), stdev = 371.365
[info]   CI (99.9%): [≈ 0, 2514.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   45018.382 ±(99.9%) 59525.915 B/op [Average]
[info]   (min, avg, max) = (27928.374, 45018.382, 56454.959), stdev = 15458.691
[info]   CI (99.9%): [≈ 0, 104544.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.742 ±(99.9%) 238.870 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.742, 138.712), stdev = 62.034
[info]   CI (99.9%): [≈ 0, 266.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 12.000), stdev = 2.966
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.35% complete, ETA 01:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27683.532 ops/s
[info] # Warmup Iteration   2: 43797.734 ops/s
[info] # Warmup Iteration   3: 42606.099 ops/s
[info] # Warmup Iteration   4: 43969.500 ops/s
[info] # Warmup Iteration   5: 43808.308 ops/s
[info] Iteration   1: 44054.654 ops/s
[info]                  ·gc.alloc.rate:            1168.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48406.799 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 44121.519 ops/s
[info]                  ·gc.alloc.rate:            1170.753 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48332.206 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 44071.218 ops/s
[info]                  ·gc.alloc.rate:                   1169.016 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        48363.243 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.789 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 44304.025 ops/s
[info]                  ·gc.alloc.rate:            1175.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24065.756 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 44182.876 ops/s
[info]                  ·gc.alloc.rate:                                  1172.007 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.320 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48405.672 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                142.370 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   44146.859 ±(99.9%) 389.199 ops/s [Average]
[info]   (min, avg, max) = (44054.654, 44146.859, 44304.025), stdev = 101.074
[info]   CI (99.9%): [43757.659, 44536.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1171.145 ±(99.9%) 10.124 MB/sec [Average]
[info]   (min, avg, max) = (1168.745, 1171.145, 1175.202), stdev = 2.629
[info]   CI (99.9%): [1161.020, 1181.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.464 ±(99.9%) 3.995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.464, 2.320), stdev = 1.038
[info]   CI (99.9%): [≈ 0, 4.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.117 ±(99.9%) 1168.293 MB/sec [Average]
[info]   (min, avg, max) = (677.384, 1220.117, 1358.780), stdev = 303.402
[info]   CI (99.9%): [51.824, 2388.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   43514.735 ±(99.9%) 41865.566 B/op [Average]
[info]   (min, avg, max) = (24065.756, 43514.735, 48406.799), stdev = 10872.355
[info]   CI (99.9%): [1649.169, 85380.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   33.232 ±(99.9%) 238.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.232, 142.370), stdev = 61.873
[info]   CI (99.9%): [≈ 0, 271.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 9.000), stdev = 2.302
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.59% complete, ETA 01:09:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1478301.193 ops/s
[info] # Warmup Iteration   2: 1713937.920 ops/s
[info] # Warmup Iteration   3: 1730490.226 ops/s
[info] # Warmup Iteration   4: 1689565.743 ops/s
[info] # Warmup Iteration   5: 1717187.182 ops/s
[info] Iteration   1: 1705160.656 ops/s
[info]                  ·gc.alloc.rate:                   1551.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1250.589 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.615 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1683573.458 ops/s
[info]                  ·gc.alloc.rate:                   1531.659 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1267.242 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.623 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1676958.873 ops/s
[info]                  ·gc.alloc.rate:                                  1526.014 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1915.570 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.126 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1685070.909 ops/s
[info]                  ·gc.alloc.rate:                                  1532.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1272.979 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 1688168.770 ops/s
[info]                  ·gc.alloc.rate:            1536.001 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1270.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1687786.533 ±(99.9%) 40585.910 ops/s [Average]
[info]   (min, avg, max) = (1676958.873, 1687786.533, 1705160.656), stdev = 10540.032
[info]   CI (99.9%): [1647200.623, 1728372.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1535.571 ±(99.9%) 36.476 MB/sec [Average]
[info]   (min, avg, max) = (1526.014, 1535.571, 1551.231), stdev = 9.473
[info]   CI (99.9%): [1499.095, 1572.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.098), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.092), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.405 ±(99.9%) 1175.241 MB/sec [Average]
[info]   (min, avg, max) = (1354.715, 1495.405, 2041.331), stdev = 305.206
[info]   CI (99.9%): [320.165, 2670.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1395.387 ±(99.9%) 1120.242 B/op [Average]
[info]   (min, avg, max) = (1250.589, 1395.387, 1915.570), stdev = 290.923
[info]   CI (99.9%): [275.145, 2515.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.331), stdev = 1.382
[info]   CI (99.9%): [≈ 0, 6.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.873 ±(99.9%) 4.994 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.873, 3.126), stdev = 1.297
[info]   CI (99.9%): [≈ 0, 5.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.000, 7.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.82% complete, ETA 01:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1623204.481 ops/s
[info] # Warmup Iteration   2: 1819774.035 ops/s
[info] # Warmup Iteration   3: 1746206.495 ops/s
[info] # Warmup Iteration   4: 1813451.522 ops/s
[info] # Warmup Iteration   5: 1805139.355 ops/s
[info] Iteration   1: 1820280.261 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1811237.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1807686.129 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1810593.276 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1773416.215 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1804642.628 ±(99.9%) 69626.061 ops/s [Average]
[info]   (min, avg, max) = (1773416.215, 1804642.628, 1820280.261), stdev = 18081.667
[info]   CI (99.9%): [1735016.568, 1874268.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.06% complete, ETA 01:08:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24358.668 ops/s
[info] # Warmup Iteration   2: 35935.663 ops/s
[info] # Warmup Iteration   3: 35415.461 ops/s
[info] # Warmup Iteration   4: 36129.562 ops/s
[info] # Warmup Iteration   5: 36060.645 ops/s
[info] Iteration   1: 35730.102 ops/s
[info]                  ·gc.alloc.rate:            1080.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59683.884 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 35850.044 ops/s
[info]                  ·gc.alloc.rate:            1083.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29741.237 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 36025.148 ops/s
[info]                  ·gc.alloc.rate:            1089.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59193.572 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 35593.762 ops/s
[info]                  ·gc.alloc.rate:            1076.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.568 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29953.424 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 35375.386 ops/s
[info]                  ·gc.alloc.rate:            1069.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       47592.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60279.339 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   35714.888 ±(99.9%) 952.388 ops/s [Average]
[info]   (min, avg, max) = (35375.386, 35714.888, 36025.148), stdev = 247.332
[info]   CI (99.9%): [34762.500, 36667.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1079.958 ±(99.9%) 28.260 MB/sec [Average]
[info]   (min, avg, max) = (1069.845, 1079.958, 1089.246), stdev = 7.339
[info]   CI (99.9%): [1051.698, 1108.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47592.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (47592.011, 47592.012, 47592.012), stdev = 0.001
[info]   CI (99.9%): [47592.010, 47592.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.890 ±(99.9%) 1428.695 MB/sec [Average]
[info]   (min, avg, max) = (677.333, 1083.890, 1355.050), stdev = 371.027
[info]   CI (99.9%): [≈ 0, 2512.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   47770.291 ±(99.9%) 63019.787 B/op [Average]
[info]   (min, avg, max) = (29741.237, 47770.291, 60279.339), stdev = 16366.039
[info]   CI (99.9%): [≈ 0, 110790.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 12.000), stdev = 3.347
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.29% complete, ETA 01:08:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64638.536 ops/s
[info] # Warmup Iteration   2: 75867.257 ops/s
[info] # Warmup Iteration   3: 76808.595 ops/s
[info] # Warmup Iteration   4: 77062.275 ops/s
[info] # Warmup Iteration   5: 77300.519 ops/s
[info] Iteration   1: 77321.609 ops/s
[info]                  ·gc.alloc.rate:            1326.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27605.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 76294.361 ops/s
[info]                  ·gc.alloc.rate:            1308.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27977.417 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 76916.781 ops/s
[info]                  ·gc.alloc.rate:            1319.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       27000.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27751.212 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 77048.086 ops/s
[info]                  ·gc.alloc.rate:                                  1321.582 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27771.351 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                68.034 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 77416.028 ops/s
[info]                  ·gc.alloc.rate:                                  1328.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.808 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27707.075 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   76999.373 ±(99.9%) 1704.397 ops/s [Average]
[info]   (min, avg, max) = (76294.361, 76999.373, 77416.028), stdev = 442.627
[info]   CI (99.9%): [75294.976, 78703.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1320.880 ±(99.9%) 29.458 MB/sec [Average]
[info]   (min, avg, max) = (1308.795, 1320.880, 1328.349), stdev = 7.650
[info]   CI (99.9%): [1291.422, 1350.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.005, 27000.005, 27000.006), stdev = 0.001
[info]   CI (99.9%): [27000.005, 27000.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.089), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.565 ±(99.9%) 3.169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.565, 1.808), stdev = 0.823
[info]   CI (99.9%): [≈ 0, 3.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.158 ±(99.9%) 11.994 MB/sec [Average]
[info]   (min, avg, max) = (1356.071, 1358.158, 1363.135), stdev = 3.115
[info]   CI (99.9%): [1346.164, 1370.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27762.587 ±(99.9%) 523.733 B/op [Average]
[info]   (min, avg, max) = (27605.880, 27762.587, 27977.417), stdev = 136.012
[info]   CI (99.9%): [27238.854, 28286.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   13.607 ±(99.9%) 117.158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.607, 68.034), stdev = 30.426
[info]   CI (99.9%): [≈ 0, 130.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39.53% complete, ETA 01:08:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31491.135 ops/s
[info] # Warmup Iteration   2: 336049.004 ops/s
[info] # Warmup Iteration   3: 335751.909 ops/s
[info] # Warmup Iteration   4: 338195.151 ops/s
[info] # Warmup Iteration   5: 338685.216 ops/s
[info] Iteration   1: 338737.129 ops/s
[info]                  ·gc.alloc.rate:            678.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3135.279 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 339522.224 ops/s
[info]                  ·gc.alloc.rate:            679.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3128.031 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 338805.464 ops/s
[info]                  ·gc.alloc.rate:            678.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3134.650 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 338941.858 ops/s
[info]                  ·gc.alloc.rate:            678.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3133.272 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 338150.760 ops/s
[info]                  ·gc.alloc.rate:            677.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3140.591 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   338831.487 ±(99.9%) 1888.650 ops/s [Average]
[info]   (min, avg, max) = (338150.760, 338831.487, 339522.224), stdev = 490.476
[info]   CI (99.9%): [336942.837, 340720.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   678.516 ±(99.9%) 3.718 MB/sec [Average]
[info]   (min, avg, max) = (677.178, 678.516, 679.870), stdev = 0.965
[info]   CI (99.9%): [674.799, 682.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.719 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (674.700, 674.719, 674.730), stdev = 0.012
[info]   CI (99.9%): [674.673, 674.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3134.365 ±(99.9%) 17.327 B/op [Average]
[info]   (min, avg, max) = (3128.031, 3134.365, 3140.591), stdev = 4.500
[info]   CI (99.9%): [3117.038, 3151.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.76% complete, ETA 01:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148814.393 ops/s
[info] # Warmup Iteration   2: 238532.677 ops/s
[info] # Warmup Iteration   3: 242312.623 ops/s
[info] # Warmup Iteration   4: 243417.090 ops/s
[info] # Warmup Iteration   5: 241686.482 ops/s
[info] Iteration   1: 242652.264 ops/s
[info]                  ·gc.alloc.rate:            537.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4394.018 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 242677.992 ops/s
[info]                  ·gc.alloc.rate:            537.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4393.583 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 242564.251 ops/s
[info]                  ·gc.alloc.rate:            537.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4395.648 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 243480.133 ops/s
[info]                  ·gc.alloc.rate:      539.604 MB/sec
[info]                  ·gc.alloc.rate.norm: 3488.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 242326.535 ops/s
[info]                  ·gc.alloc.rate:            537.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4399.819 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   242740.235 ±(99.9%) 1679.760 ops/s [Average]
[info]   (min, avg, max) = (242326.535, 242740.235, 243480.133), stdev = 436.228
[info]   CI (99.9%): [241060.475, 244419.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   537.976 ±(99.9%) 3.692 MB/sec [Average]
[info]   (min, avg, max) = (537.054, 537.976, 539.604), stdev = 0.959
[info]   CI (99.9%): [534.284, 541.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.001, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.978 ±(99.9%) 1166.649 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.978, 677.594), stdev = 302.975
[info]   CI (99.9%): [≈ 0, 1708.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3516.614 ±(99.9%) 7569.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3516.614, 4399.819), stdev = 1965.848
[info]   CI (99.9%): [≈ 0, 11086.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.00% complete, ETA 01:07:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 419184.494 ops/s
[info] # Warmup Iteration   2: 440737.295 ops/s
[info] # Warmup Iteration   3: 447400.719 ops/s
[info] # Warmup Iteration   4: 447129.425 ops/s
[info] # Warmup Iteration   5: 452176.964 ops/s
[info] Iteration   1: 448330.822 ops/s
[info]                  ·gc.alloc.rate:      565.267 MB/sec
[info]                  ·gc.alloc.rate.norm: 1984.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 451422.259 ops/s
[info]                  ·gc.alloc.rate:            569.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2364.242 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 453757.277 ops/s
[info]                  ·gc.alloc.rate:            572.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2352.077 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 454491.457 ops/s
[info]                  ·gc.alloc.rate:            572.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2348.212 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 454307.424 ops/s
[info]                  ·gc.alloc.rate:            572.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2349.241 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   452461.847 ±(99.9%) 10068.849 ops/s [Average]
[info]   (min, avg, max) = (448330.822, 452461.847, 454491.457), stdev = 2614.848
[info]   CI (99.9%): [442392.999, 462530.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   570.402 ±(99.9%) 12.557 MB/sec [Average]
[info]   (min, avg, max) = (565.267, 570.402, 572.973), stdev = 3.261
[info]   CI (99.9%): [557.845, 582.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.507 ±(99.9%) 1167.788 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.507, 678.157), stdev = 303.271
[info]   CI (99.9%): [≈ 0, 1710.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1882.754 ±(99.9%) 4052.846 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1882.754, 2364.242), stdev = 1052.511
[info]   CI (99.9%): [≈ 0, 5935.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.24% complete, ETA 01:07:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37049.319 ops/s
[info] # Warmup Iteration   2: 65628.283 ops/s
[info] # Warmup Iteration   3: 64832.707 ops/s
[info] # Warmup Iteration   4: 65332.480 ops/s
[info] # Warmup Iteration   5: 67445.313 ops/s
[info] Iteration   1: 66852.115 ops/s
[info]                  ·gc.alloc.rate:                                  2983.090 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.216 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80215.758 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 66387.212 ops/s
[info]                  ·gc.alloc.rate:                                  2963.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64621.048 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 66390.408 ops/s
[info]                  ·gc.alloc.rate:                                  2962.390 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64615.210 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 66239.404 ops/s
[info]                  ·gc.alloc.rate:                                  2955.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.482 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80955.537 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 66378.111 ops/s
[info]                  ·gc.alloc.rate:                                  2961.808 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70232.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64629.809 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   66449.450 ±(99.9%) 900.399 ops/s [Average]
[info]   (min, avg, max) = (66239.404, 66449.450, 66852.115), stdev = 233.831
[info]   CI (99.9%): [65549.051, 67349.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2965.133 ±(99.9%) 40.509 MB/sec [Average]
[info]   (min, avg, max) = (2955.253, 2965.133, 2983.090), stdev = 10.520
[info]   CI (99.9%): [2924.625, 3005.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70232.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70232.006, 70232.006, 70232.007), stdev = 0.001
[info]   CI (99.9%): [70232.005, 70232.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.005, 0.009), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.112 ±(99.9%) 0.292 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.112, 0.216), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.210 ±(99.9%) 1436.304 MB/sec [Average]
[info]   (min, avg, max) = (2725.473, 2998.210, 3407.148), stdev = 373.003
[info]   CI (99.9%): [1561.907, 4434.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71007.472 ±(99.9%) 33683.702 B/op [Average]
[info]   (min, avg, max) = (64615.210, 71007.472, 80955.537), stdev = 8747.550
[info]   CI (99.9%): [37323.771, 104691.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 14.000), stdev = 3.742
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.47% complete, ETA 01:07:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156372.795 ops/s
[info] # Warmup Iteration   2: 217867.505 ops/s
[info] # Warmup Iteration   3: 218148.586 ops/s
[info] # Warmup Iteration   4: 219862.232 ops/s
[info] # Warmup Iteration   5: 220409.854 ops/s
[info] Iteration   1: 218518.316 ops/s
[info]                  ·gc.alloc.rate:            1544.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       11128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14652.448 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 218977.815 ops/s
[info]                  ·gc.alloc.rate:            1548.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       11128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9747.782 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 219637.614 ops/s
[info]                  ·gc.alloc.rate:                                  1553.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11128.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.351 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9742.362 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                23.867 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 220281.668 ops/s
[info]                  ·gc.alloc.rate:                                  1557.506 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11128.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.757 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9737.681 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 218705.535 ops/s
[info]                  ·gc.alloc.rate:            1546.204 MB/sec
[info]                  ·gc.alloc.rate.norm:       11128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.156 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14711.760 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   219224.189 ±(99.9%) 2801.421 ops/s [Average]
[info]   (min, avg, max) = (218518.316, 219224.189, 220281.668), stdev = 727.520
[info]   CI (99.9%): [216422.768, 222025.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1550.022 ±(99.9%) 19.949 MB/sec [Average]
[info]   (min, avg, max) = (1544.996, 1550.022, 1557.506), stdev = 5.181
[info]   CI (99.9%): [1530.073, 1569.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11128.002, 11128.002, 11128.002), stdev = 0.001
[info]   CI (99.9%): [11128.002, 11128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.222 ±(99.9%) 1.293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.222, 0.757), stdev = 0.336
[info]   CI (99.9%): [≈ 0, 1.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1631.474 ±(99.9%) 1433.447 MB/sec [Average]
[info]   (min, avg, max) = (1356.351, 1631.474, 2044.156), stdev = 372.262
[info]   CI (99.9%): [198.027, 3064.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11718.407 ±(99.9%) 10418.135 B/op [Average]
[info]   (min, avg, max) = (9737.681, 11718.407, 14711.760), stdev = 2705.557
[info]   CI (99.9%): [1300.271, 22136.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.773 ±(99.9%) 41.100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.773, 23.867), stdev = 10.673
[info]   CI (99.9%): [≈ 0, 45.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 13.000), stdev = 3.507
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40.71% complete, ETA 01:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63082.688 ops/s
[info] # Warmup Iteration   2: 686203.967 ops/s
[info] # Warmup Iteration   3: 671555.370 ops/s
[info] # Warmup Iteration   4: 682015.758 ops/s
[info] # Warmup Iteration   5: 665913.539 ops/s
[info] Iteration   1: 665091.675 ops/s
[info]                  ·gc.alloc.rate:            520.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1596.841 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 687113.750 ops/s
[info]                  ·gc.alloc.rate:      537.799 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 684074.376 ops/s
[info]                  ·gc.alloc.rate:            535.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1552.517 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 683462.153 ops/s
[info]                  ·gc.alloc.rate:            535.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1553.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 684219.735 ops/s
[info]                  ·gc.alloc.rate:            535.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1552.182 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   680792.338 ±(99.9%) 34231.651 ops/s [Average]
[info]   (min, avg, max) = (665091.675, 680792.338, 687113.750), stdev = 8889.851
[info]   CI (99.9%): [646560.687, 715023.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   532.871 ±(99.9%) 26.787 MB/sec [Average]
[info]   (min, avg, max) = (520.579, 532.871, 537.799), stdev = 6.956
[info]   CI (99.9%): [506.084, 559.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.798 ±(99.9%) 1161.956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.798, 674.867), stdev = 301.756
[info]   CI (99.9%): [≈ 0, 1701.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1251.091 ±(99.9%) 2694.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1251.091, 1596.841), stdev = 699.641
[info]   CI (99.9%): [≈ 0, 3945.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.94% complete, ETA 01:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304447.805 ops/s
[info] # Warmup Iteration   2: 448664.485 ops/s
[info] # Warmup Iteration   3: 457601.940 ops/s
[info] # Warmup Iteration   4: 453163.701 ops/s
[info] # Warmup Iteration   5: 456733.698 ops/s
[info] Iteration   1: 459290.540 ops/s
[info]                  ·gc.alloc.rate:      471.503 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 457316.172 ops/s
[info]                  ·gc.alloc.rate:            469.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2331.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 456810.127 ops/s
[info]                  ·gc.alloc.rate:            468.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2334.111 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 458879.321 ops/s
[info]                  ·gc.alloc.rate:            471.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2323.634 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 461733.524 ops/s
[info]                  ·gc.alloc.rate:      474.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   458805.937 ±(99.9%) 7460.132 ops/s [Average]
[info]   (min, avg, max) = (456810.127, 458805.937, 461733.524), stdev = 1937.373
[info]   CI (99.9%): [451345.805, 466266.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   471.028 ±(99.9%) 7.852 MB/sec [Average]
[info]   (min, avg, max) = (468.943, 471.028, 474.125), stdev = 2.039
[info]   CI (99.9%): [463.175, 478.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.412 ±(99.9%) 1428.595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.412, 677.403), stdev = 371.002
[info]   CI (99.9%): [≈ 0, 1835.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1397.857 ±(99.9%) 4913.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1397.857, 2334.111), stdev = 1276.069
[info]   CI (99.9%): [≈ 0, 6311.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41.18% complete, ETA 01:06:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 551461.177 ops/s
[info] # Warmup Iteration   2: 602529.246 ops/s
[info] # Warmup Iteration   3: 638767.394 ops/s
[info] # Warmup Iteration   4: 632802.293 ops/s
[info] # Warmup Iteration   5: 633933.856 ops/s
[info] Iteration   1: 637536.906 ops/s
[info]                  ·gc.alloc.rate:            498.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1674.070 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 635324.199 ops/s
[info]                  ·gc.alloc.rate:            497.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1678.242 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 632188.029 ops/s
[info]                  ·gc.alloc.rate:      494.798 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 629081.046 ops/s
[info]                  ·gc.alloc.rate:            492.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1694.824 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 629030.231 ops/s
[info]                  ·gc.alloc.rate:            492.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1695.045 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   632632.082 ±(99.9%) 14546.717 ops/s [Average]
[info]   (min, avg, max) = (629030.231, 632632.082, 637536.906), stdev = 3777.736
[info]   CI (99.9%): [618085.365, 647178.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   495.143 ±(99.9%) 11.349 MB/sec [Average]
[info]   (min, avg, max) = (492.315, 495.143, 498.945), stdev = 2.947
[info]   CI (99.9%): [483.794, 506.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.015 ±(99.9%) 1166.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.015, 677.978), stdev = 302.996
[info]   CI (99.9%): [≈ 0, 1708.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1348.436 ±(99.9%) 2902.841 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1348.436, 1695.045), stdev = 753.859
[info]   CI (99.9%): [≈ 0, 4251.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.41% complete, ETA 01:06:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 610111.558 ops/s
[info] # Warmup Iteration   2: 671309.821 ops/s
[info] # Warmup Iteration   3: 669599.421 ops/s
[info] # Warmup Iteration   4: 675248.703 ops/s
[info] # Warmup Iteration   5: 674964.469 ops/s
[info] Iteration   1: 675311.551 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 675245.331 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 675242.809 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 640121.212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 674164.164 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   668017.013 ±(99.9%) 60076.036 ops/s [Average]
[info]   (min, avg, max) = (640121.212, 668017.013, 675311.551), stdev = 15601.556
[info]   CI (99.9%): [607940.978, 728093.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.65% complete, ETA 01:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18490.284 ops/s
[info] # Warmup Iteration   2: 26952.043 ops/s
[info] # Warmup Iteration   3: 26687.945 ops/s
[info] # Warmup Iteration   4: 27145.615 ops/s
[info] # Warmup Iteration   5: 26984.243 ops/s
[info] Iteration   1: 27094.311 ops/s
[info]                  ·gc.alloc.rate:            1389.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.880 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78704.143 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 27104.198 ops/s
[info]                  ·gc.alloc.rate:            1389.331 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78672.209 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 27074.373 ops/s
[info]                  ·gc.alloc.rate:            1387.834 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 78759.364 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 26882.019 ops/s
[info]                  ·gc.alloc.rate:                                  1377.945 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79561.669 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                234.005 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 26676.722 ops/s
[info]                  ·gc.alloc.rate:                                  1367.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.133 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.865 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80408.774 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   26966.325 ±(99.9%) 715.332 ops/s [Average]
[info]   (min, avg, max) = (26676.722, 26966.325, 27104.198), stdev = 185.769
[info]   CI (99.9%): [26250.992, 27681.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1382.336 ±(99.9%) 36.647 MB/sec [Average]
[info]   (min, avg, max) = (1367.537, 1382.336, 1389.331), stdev = 9.517
[info]   CI (99.9%): [1345.689, 1418.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80688.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (80688.015, 80688.015, 80688.016), stdev = 0.001
[info]   CI (99.9%): [80688.013, 80688.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.241 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.133), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.588 ±(99.9%) 14.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.588, 7.865), stdev = 3.679
[info]   CI (99.9%): [≈ 0, 16.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.135 ±(99.9%) 13.902 MB/sec [Average]
[info]   (min, avg, max) = (1354.621, 1357.135, 1362.804), stdev = 3.610
[info]   CI (99.9%): [1343.233, 1371.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79221.232 ±(99.9%) 2925.148 B/op [Average]
[info]   (min, avg, max) = (78672.209, 79221.232, 80408.774), stdev = 759.652
[info]   CI (99.9%): [76296.084, 82146.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   46.801 ±(99.9%) 402.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.801, 234.005), stdev = 104.650
[info]   CI (99.9%): [≈ 0, 449.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 9.000), stdev = 1.304
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.88% complete, ETA 01:05:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4371.987 ops/s
[info] # Warmup Iteration   2: 6707.866 ops/s
[info] # Warmup Iteration   3: 6747.014 ops/s
[info] # Warmup Iteration   4: 6775.489 ops/s
[info] # Warmup Iteration   5: 6750.002 ops/s
[info] Iteration   1: 6780.538 ops/s
[info]                  ·gc.alloc.rate:            1043.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157394.628 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 6746.015 ops/s
[info]                  ·gc.alloc.rate:            1038.776 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316375.331 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 6777.818 ops/s
[info]                  ·gc.alloc.rate:            1043.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157441.057 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 6751.756 ops/s
[info]                  ·gc.alloc.rate:            1039.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316141.083 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 6774.121 ops/s
[info]                  ·gc.alloc.rate:            1042.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157533.998 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6766.050 ±(99.9%) 61.467 ops/s [Average]
[info]   (min, avg, max) = (6746.015, 6766.050, 6780.538), stdev = 15.963
[info]   CI (99.9%): [6704.582, 6827.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1041.578 ±(99.9%) 9.024 MB/sec [Average]
[info]   (min, avg, max) = (1038.776, 1041.578, 1043.742), stdev = 2.344
[info]   CI (99.9%): [1032.554, 1050.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296.063 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (242296.060, 242296.063, 242296.065), stdev = 0.003
[info]   CI (99.9%): [242296.053, 242296.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   949.269 ±(99.9%) 1430.495 MB/sec [Average]
[info]   (min, avg, max) = (677.913, 949.269, 1356.370), stdev = 371.495
[info]   CI (99.9%): [≈ 0, 2379.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   220977.220 ±(99.9%) 334926.305 B/op [Average]
[info]   (min, avg, max) = (157394.628, 220977.220, 316375.331), stdev = 86979.298
[info]   CI (99.9%): [≈ 0, 555903.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.12% complete, ETA 01:05:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3111.903 ops/s
[info] # Warmup Iteration   2: 6434.274 ops/s
[info] # Warmup Iteration   3: 6732.902 ops/s
[info] # Warmup Iteration   4: 6730.769 ops/s
[info] # Warmup Iteration   5: 6605.740 ops/s
[info] Iteration   1: 6545.010 ops/s
[info]                  ·gc.alloc.rate:            943.291 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162908.920 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 6615.252 ops/s
[info]                  ·gc.alloc.rate:            953.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 322321.835 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 6719.258 ops/s
[info]                  ·gc.alloc.rate:                   968.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        158511.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 156.015 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 6729.392 ops/s
[info]                  ·gc.alloc.rate:            969.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 158431.406 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 6670.395 ops/s
[info]                  ·gc.alloc.rate:            961.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 319664.806 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6655.861 ±(99.9%) 295.611 ops/s [Average]
[info]   (min, avg, max) = (6545.010, 6655.861, 6729.392), stdev = 76.769
[info]   CI (99.9%): [6360.250, 6951.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   959.311 ±(99.9%) 42.818 MB/sec [Average]
[info]   (min, avg, max) = (943.291, 959.311, 969.955), stdev = 11.120
[info]   CI (99.9%): [916.493, 1002.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.064 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (226864.061, 226864.064, 226864.070), stdev = 0.004
[info]   CI (99.9%): [226864.049, 226864.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.134 ±(99.9%) 1428.829 MB/sec [Average]
[info]   (min, avg, max) = (676.706, 948.134, 1354.722), stdev = 371.062
[info]   CI (99.9%): [≈ 0, 2376.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   224367.617 ±(99.9%) 339743.871 B/op [Average]
[info]   (min, avg, max) = (158431.406, 224367.617, 322321.835), stdev = 88230.404
[info]   CI (99.9%): [≈ 0, 564111.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   31.203 ±(99.9%) 268.667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.203, 156.015), stdev = 69.772
[info]   CI (99.9%): [≈ 0, 299.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 10.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.35% complete, ETA 01:05:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136365.496 ops/s
[info] # Warmup Iteration   2: 147349.477 ops/s
[info] # Warmup Iteration   3: 145974.893 ops/s
[info] # Warmup Iteration   4: 152317.823 ops/s
[info] # Warmup Iteration   5: 151832.659 ops/s
[info] Iteration   1: 152076.939 ops/s
[info]                  ·gc.alloc.rate:            1473.045 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14049.676 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 149271.810 ops/s
[info]                  ·gc.alloc.rate:            1446.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1357.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14313.640 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 152068.021 ops/s
[info]                  ·gc.alloc.rate:                   1473.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14050.138 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.576 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 152880.227 ops/s
[info]                  ·gc.alloc.rate:                                  1480.994 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21046.131 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 152037.678 ops/s
[info]                  ·gc.alloc.rate:                                  1472.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14108.259 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   151666.935 ±(99.9%) 5333.915 ops/s [Average]
[info]   (min, avg, max) = (149271.810, 151666.935, 152880.227), stdev = 1385.201
[info]   CI (99.9%): [146333.020, 157000.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1469.241 ±(99.9%) 51.341 MB/sec [Average]
[info]   (min, avg, max) = (1446.208, 1469.241, 1480.994), stdev = 13.333
[info]   CI (99.9%): [1417.900, 1520.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.003, 15248.003, 15248.003), stdev = 0.001
[info]   CI (99.9%): [15248.002, 15248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.255 ±(99.9%) 2.189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.255, 1.272), stdev = 0.568
[info]   CI (99.9%): [≈ 0, 2.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.832 ±(99.9%) 1180.329 MB/sec [Average]
[info]   (min, avg, max) = (1357.280, 1495.832, 2044.149), stdev = 306.528
[info]   CI (99.9%): [315.502, 2676.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15513.569 ±(99.9%) 11916.574 B/op [Average]
[info]   (min, avg, max) = (14049.676, 15513.569, 21046.131), stdev = 3094.696
[info]   CI (99.9%): [3596.995, 27430.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.515 ±(99.9%) 47.488 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.515, 27.576), stdev = 12.333
[info]   CI (99.9%): [≈ 0, 53.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.59% complete, ETA 01:04:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2849.732 ops/s
[info] # Warmup Iteration   2: 6079.013 ops/s
[info] # Warmup Iteration   3: 6009.479 ops/s
[info] # Warmup Iteration   4: 6348.660 ops/s
[info] # Warmup Iteration   5: 6300.130 ops/s
[info] Iteration   1: 6303.446 ops/s
[info]                  ·gc.alloc.rate:            1146.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 338271.782 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 6368.746 ops/s
[info]                  ·gc.alloc.rate:            1158.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 167383.738 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 6232.493 ops/s
[info]                  ·gc.alloc.rate:            1133.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.543 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 342069.540 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 6199.288 ops/s
[info]                  ·gc.alloc.rate:            1127.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       286296.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 343945.103 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 6232.792 ops/s
[info]                  ·gc.alloc.rate:                   1133.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              286296.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        171034.770 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1009.055 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6267.353 ±(99.9%) 262.761 ops/s [Average]
[info]   (min, avg, max) = (6199.288, 6267.353, 6368.746), stdev = 68.238
[info]   CI (99.9%): [6004.592, 6530.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1140.070 ±(99.9%) 47.341 MB/sec [Average]
[info]   (min, avg, max) = (1127.780, 1140.070, 1158.348), stdev = 12.294
[info]   CI (99.9%): [1092.729, 1187.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286296.066 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (286296.064, 286296.066, 286296.071), stdev = 0.003
[info]   CI (99.9%): [286296.055, 286296.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.758 ±(99.9%) 1428.607 MB/sec [Average]
[info]   (min, avg, max) = (677.231, 1083.758, 1354.872), stdev = 371.005
[info]   CI (99.9%): [≈ 0, 2512.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   272540.987 ±(99.9%) 363344.852 B/op [Average]
[info]   (min, avg, max) = (167383.738, 272540.987, 343945.103), stdev = 94359.504
[info]   CI (99.9%): [≈ 0, 635885.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   201.811 ±(99.9%) 1737.653 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 201.811, 1009.055), stdev = 451.263
[info]   CI (99.9%): [≈ 0, 1939.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.82% complete, ETA 01:04:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12934.201 ops/s
[info] # Warmup Iteration   2: 17912.906 ops/s
[info] # Warmup Iteration   3: 17389.071 ops/s
[info] # Warmup Iteration   4: 18095.413 ops/s
[info] # Warmup Iteration   5: 18018.130 ops/s
[info] Iteration   1: 18213.711 ops/s
[info]                  ·gc.alloc.rate:            826.932 MB/sec
[info]                  ·gc.alloc.rate.norm:       71432.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58593.170 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18148.085 ops/s
[info]                  ·gc.alloc.rate:            823.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       71415.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117612.425 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 18280.172 ops/s
[info]                  ·gc.alloc.rate:            829.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       71408.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58381.665 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 18252.218 ops/s
[info]                  ·gc.alloc.rate:            828.147 MB/sec
[info]                  ·gc.alloc.rate.norm:       71408.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58471.208 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 18212.886 ops/s
[info]                  ·gc.alloc.rate:            826.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       71408.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58599.603 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18221.414 ±(99.9%) 191.669 ops/s [Average]
[info]   (min, avg, max) = (18148.085, 18221.414, 18280.172), stdev = 49.776
[info]   CI (99.9%): [18029.746, 18413.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   826.918 ±(99.9%) 8.348 MB/sec [Average]
[info]   (min, avg, max) = (823.698, 826.918, 829.482), stdev = 2.168
[info]   CI (99.9%): [818.570, 835.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71414.220 ±(99.9%) 40.065 B/op [Average]
[info]   (min, avg, max) = (71408.022, 71414.220, 71432.030), stdev = 10.405
[info]   CI (99.9%): [71374.155, 71454.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.846 ±(99.9%) 1168.183 MB/sec [Average]
[info]   (min, avg, max) = (678.111, 813.846, 1356.537), stdev = 303.373
[info]   CI (99.9%): [≈ 0, 1982.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   70331.614 ±(99.9%) 101776.109 B/op [Average]
[info]   (min, avg, max) = (58381.665, 70331.614, 117612.425), stdev = 26430.932
[info]   CI (99.9%): [≈ 0, 172107.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 7.000), stdev = 1.342
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.06% complete, ETA 01:04:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11719.686 ops/s
[info] # Warmup Iteration   2: 20291.358 ops/s
[info] # Warmup Iteration   3: 20555.672 ops/s
[info] # Warmup Iteration   4: 20538.790 ops/s
[info] # Warmup Iteration   5: 20315.329 ops/s
[info] Iteration   1: 20258.502 ops/s
[info]                  ·gc.alloc.rate:            858.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 105261.257 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 20550.199 ops/s
[info]                  ·gc.alloc.rate:            870.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51882.932 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 20567.646 ops/s
[info]                  ·gc.alloc.rate:            871.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51837.536 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 20503.629 ops/s
[info]                  ·gc.alloc.rate:                   868.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.223 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        103942.416 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 51.128 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 20071.658 ops/s
[info]                  ·gc.alloc.rate:            850.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53118.240 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   20390.327 ±(99.9%) 836.498 ops/s [Average]
[info]   (min, avg, max) = (20071.658, 20390.327, 20567.646), stdev = 217.236
[info]   CI (99.9%): [19553.829, 21226.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   864.052 ±(99.9%) 35.607 MB/sec [Average]
[info]   (min, avg, max) = (850.500, 864.052, 871.604), stdev = 9.247
[info]   CI (99.9%): [828.444, 899.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.021, 66696.025), stdev = 0.002
[info]   CI (99.9%): [66696.012, 66696.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.232 ±(99.9%) 1428.057 MB/sec [Average]
[info]   (min, avg, max) = (677.358, 948.232, 1354.758), stdev = 370.862
[info]   CI (99.9%): [≈ 0, 2376.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   73208.476 ±(99.9%) 110384.423 B/op [Average]
[info]   (min, avg, max) = (51837.536, 73208.476, 105261.257), stdev = 28666.484
[info]   CI (99.9%): [≈ 0, 183592.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.226 ±(99.9%) 88.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.226, 51.128), stdev = 22.865
[info]   CI (99.9%): [≈ 0, 98.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.29% complete, ETA 01:04:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 530063.469 ops/s
[info] # Warmup Iteration   2: 594687.959 ops/s
[info] # Warmup Iteration   3: 596190.373 ops/s
[info] # Warmup Iteration   4: 596799.359 ops/s
[info] # Warmup Iteration   5: 595868.163 ops/s
[info] Iteration   1: 603434.276 ops/s
[info]                  ·gc.alloc.rate:                   1368.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3535.590 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 591328.401 ops/s
[info]                  ·gc.alloc.rate:            1340.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3606.205 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 593220.039 ops/s
[info]                  ·gc.alloc.rate:                   1344.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3594.578 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.767 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 596030.411 ops/s
[info]                  ·gc.alloc.rate:                                  1351.414 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3589.869 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.794 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 584054.750 ops/s
[info]                  ·gc.alloc.rate:                                  1324.371 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.302 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3672.695 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   593613.575 ±(99.9%) 27162.417 ops/s [Average]
[info]   (min, avg, max) = (584054.750, 593613.575, 603434.276), stdev = 7053.993
[info]   CI (99.9%): [566451.158, 620775.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1345.934 ±(99.9%) 61.675 MB/sec [Average]
[info]   (min, avg, max) = (1324.371, 1345.934, 1368.385), stdev = 16.017
[info]   CI (99.9%): [1284.259, 1407.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.112), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.080 ±(99.9%) 0.505 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.302), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.751 ±(99.9%) 14.031 MB/sec [Average]
[info]   (min, avg, max) = (1354.607, 1357.751, 1363.231), stdev = 3.644
[info]   CI (99.9%): [1343.720, 1371.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3599.788 ±(99.9%) 188.677 B/op [Average]
[info]   (min, avg, max) = (3535.590, 3599.788, 3672.695), stdev = 48.999
[info]   CI (99.9%): [3411.110, 3788.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 5.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.331), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.460 ±(99.9%) 14.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.460, 8.794), stdev = 3.648
[info]   CI (99.9%): [≈ 0, 16.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 13.000), stdev = 3.742
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 01:03:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 445980.125 ops/s
[info] # Warmup Iteration   2: 490783.108 ops/s
[info] # Warmup Iteration   3: 490510.029 ops/s
[info] # Warmup Iteration   4: 490607.197 ops/s
[info] # Warmup Iteration   5: 465182.910 ops/s
[info] Iteration   1: 464068.138 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 490439.986 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 490136.417 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 490538.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 489955.550 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   485027.816 ±(99.9%) 45126.239 ops/s [Average]
[info]   (min, avg, max) = (464068.138, 485027.816, 490538.989), stdev = 11719.141
[info]   CI (99.9%): [439901.577, 530154.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43.76% complete, ETA 01:03:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13405.258 ops/s
[info] # Warmup Iteration   2: 18267.223 ops/s
[info] # Warmup Iteration   3: 18937.725 ops/s
[info] # Warmup Iteration   4: 19011.832 ops/s
[info] # Warmup Iteration   5: 18903.883 ops/s
[info] Iteration   1: 18999.399 ops/s
[info]                  ·gc.alloc.rate:            876.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       72576.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56117.549 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 18981.458 ops/s
[info]                  ·gc.alloc.rate:            875.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       72561.656 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56170.755 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 18860.520 ops/s
[info]                  ·gc.alloc.rate:            869.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       72560.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56531.053 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 18918.546 ops/s
[info]                  ·gc.alloc.rate:            872.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       72560.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 112709.591 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 18994.320 ops/s
[info]                  ·gc.alloc.rate:            875.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       72560.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56129.364 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   18950.849 ±(99.9%) 230.931 ops/s [Average]
[info]   (min, avg, max) = (18860.520, 18950.849, 18999.399), stdev = 59.972
[info]   CI (99.9%): [18719.918, 19181.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   873.679 ±(99.9%) 10.902 MB/sec [Average]
[info]   (min, avg, max) = (869.469, 873.679, 876.040), stdev = 2.831
[info]   CI (99.9%): [862.777, 884.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72563.550 ±(99.9%) 26.995 B/op [Average]
[info]   (min, avg, max) = (72560.021, 72563.550, 72576.027), stdev = 7.011
[info]   CI (99.9%): [72536.555, 72590.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   812.848 ±(99.9%) 1166.240 MB/sec [Average]
[info]   (min, avg, max) = (677.353, 812.848, 1354.636), stdev = 302.869
[info]   CI (99.9%): [≈ 0, 1979.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67531.663 ±(99.9%) 97251.121 B/op [Average]
[info]   (min, avg, max) = (56117.549, 67531.663, 112709.591), stdev = 25255.807
[info]   CI (99.9%): [≈ 0, 164782.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.00% complete, ETA 01:03:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6860.127 ops/s
[info] # Warmup Iteration   2: 10514.921 ops/s
[info] # Warmup Iteration   3: 9918.893 ops/s
[info] # Warmup Iteration   4: 10534.721 ops/s
[info] # Warmup Iteration   5: 10464.213 ops/s
[info] Iteration   1: 10457.446 ops/s
[info]                  ·gc.alloc.rate:            1050.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102060.462 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 10412.096 ops/s
[info]                  ·gc.alloc.rate:            1046.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205002.951 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 10487.388 ops/s
[info]                  ·gc.alloc.rate:            1053.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 101768.554 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 10434.920 ops/s
[info]                  ·gc.alloc.rate:            1048.195 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 204551.187 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 10458.073 ops/s
[info]                  ·gc.alloc.rate:            1050.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       158112.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 102050.704 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   10449.985 ±(99.9%) 108.616 ops/s [Average]
[info]   (min, avg, max) = (10412.096, 10449.985, 10487.388), stdev = 28.207
[info]   CI (99.9%): [10341.369, 10558.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1049.799 ±(99.9%) 10.929 MB/sec [Average]
[info]   (min, avg, max) = (1046.200, 1049.799, 1053.794), stdev = 2.838
[info]   CI (99.9%): [1038.870, 1060.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158112.041 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (158112.039, 158112.041, 158112.042), stdev = 0.002
[info]   CI (99.9%): [158112.034, 158112.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   949.360 ±(99.9%) 1430.330 MB/sec [Average]
[info]   (min, avg, max) = (677.995, 949.360, 1356.470), stdev = 371.452
[info]   CI (99.9%): [≈ 0, 2379.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   143086.772 ±(99.9%) 216851.429 B/op [Average]
[info]   (min, avg, max) = (101768.554, 143086.772, 205002.951), stdev = 56315.628
[info]   CI (99.9%): [≈ 0, 359938.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.24% complete, ETA 01:03:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6623.306 ops/s
[info] # Warmup Iteration   2: 11418.450 ops/s
[info] # Warmup Iteration   3: 11778.604 ops/s
[info] # Warmup Iteration   4: 11708.989 ops/s
[info] # Warmup Iteration   5: 11780.904 ops/s
[info] Iteration   1: 11538.118 ops/s
[info]                  ·gc.alloc.rate:            1018.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       138947.652 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184802.321 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 11716.080 ops/s
[info]                  ·gc.alloc.rate:                   1034.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              138968.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        181921.404 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 89.484 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 11778.388 ops/s
[info]                  ·gc.alloc.rate:            1040.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       138968.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90518.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 11707.114 ops/s
[info]                  ·gc.alloc.rate:            1033.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       138968.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.792 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182135.233 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 11749.511 ops/s
[info]                  ·gc.alloc.rate:            1037.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       138965.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90734.433 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11697.842 ±(99.9%) 360.647 ops/s [Average]
[info]   (min, avg, max) = (11538.118, 11697.842, 11778.388), stdev = 93.659
[info]   CI (99.9%): [11337.196, 12058.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1032.873 ±(99.9%) 32.157 MB/sec [Average]
[info]   (min, avg, max) = (1018.623, 1032.873, 1040.034), stdev = 8.351
[info]   CI (99.9%): [1000.716, 1065.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   138963.404 ±(99.9%) 34.223 B/op [Average]
[info]   (min, avg, max) = (138947.652, 138963.404, 138968.038), stdev = 8.888
[info]   CI (99.9%): [138929.181, 138997.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.742 ±(99.9%) 1428.284 MB/sec [Average]
[info]   (min, avg, max) = (677.397, 1083.742, 1354.792), stdev = 370.921
[info]   CI (99.9%): [≈ 0, 2512.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   146022.435 ±(99.9%) 194773.397 B/op [Average]
[info]   (min, avg, max) = (90518.784, 146022.435, 184802.321), stdev = 50582.033
[info]   CI (99.9%): [≈ 0, 340795.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.897 ±(99.9%) 154.097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.897, 89.484), stdev = 40.019
[info]   CI (99.9%): [≈ 0, 171.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 9.000), stdev = 2.191
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.47% complete, ETA 01:02:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233382.490 ops/s
[info] # Warmup Iteration   2: 253628.750 ops/s
[info] # Warmup Iteration   3: 252935.647 ops/s
[info] # Warmup Iteration   4: 254860.334 ops/s
[info] # Warmup Iteration   5: 254740.056 ops/s
[info] Iteration   1: 251948.563 ops/s
[info]                  ·gc.alloc.rate:            1457.856 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8472.165 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 250761.925 ops/s
[info]                  ·gc.alloc.rate:            1450.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8512.024 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 250827.588 ops/s
[info]                  ·gc.alloc.rate:                                  1450.878 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.323 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12785.626 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                20.898 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 255590.846 ops/s
[info]                  ·gc.alloc.rate:                                  1478.279 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8392.415 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 255581.640 ops/s
[info]                  ·gc.alloc.rate:                                  1478.244 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8392.743 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   252942.112 ±(99.9%) 9470.249 ops/s [Average]
[info]   (min, avg, max) = (250761.925, 252942.112, 255590.846), stdev = 2459.394
[info]   CI (99.9%): [243471.864, 262412.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1463.125 ±(99.9%) 54.413 MB/sec [Average]
[info]   (min, avg, max) = (1450.368, 1463.125, 1478.279), stdev = 14.131
[info]   CI (99.9%): [1408.712, 1517.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.002), stdev = 0.001
[info]   CI (99.9%): [9104.001, 9104.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.097 ±(99.9%) 0.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.097, 0.323), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1495.167 ±(99.9%) 1167.711 MB/sec [Average]
[info]   (min, avg, max) = (1356.059, 1495.167, 2037.608), stdev = 303.251
[info]   CI (99.9%): [327.456, 2662.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9310.994 ±(99.9%) 7482.057 B/op [Average]
[info]   (min, avg, max) = (8392.415, 9310.994, 12785.626), stdev = 1943.067
[info]   CI (99.9%): [1828.937, 16793.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.180 ±(99.9%) 35.988 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.180, 20.898), stdev = 9.346
[info]   CI (99.9%): [≈ 0, 40.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.600, 9.000), stdev = 2.966
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.71% complete, ETA 01:02:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4188.149 ops/s
[info] # Warmup Iteration   2: 10243.438 ops/s
[info] # Warmup Iteration   3: 10309.331 ops/s
[info] # Warmup Iteration   4: 10282.026 ops/s
[info] # Warmup Iteration   5: 10294.842 ops/s
[info] Iteration   1: 10461.124 ops/s
[info]                  ·gc.alloc.rate:                   1329.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              200072.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        203642.018 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 100.218 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 10372.756 ops/s
[info]                  ·gc.alloc.rate:            1318.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       200072.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 205470.362 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 10448.198 ops/s
[info]                  ·gc.alloc.rate:            1328.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       200072.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 203856.337 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 10452.357 ops/s
[info]                  ·gc.alloc.rate:                   1328.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              200072.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        204499.901 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 702.059 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 10519.763 ops/s
[info]                  ·gc.alloc.rate:                                  1337.153 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200072.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.838 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       203895.314 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10450.840 ±(99.9%) 201.585 ops/s [Average]
[info]   (min, avg, max) = (10372.756, 10450.840, 10519.763), stdev = 52.351
[info]   CI (99.9%): [10249.254, 10652.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1328.427 ±(99.9%) 25.676 MB/sec [Average]
[info]   (min, avg, max) = (1318.419, 1328.427, 1337.153), stdev = 6.668
[info]   CI (99.9%): [1302.751, 1354.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200072.043 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (200072.039, 200072.043, 200072.059), stdev = 0.009
[info]   CI (99.9%): [200072.011, 200072.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.168 ±(99.9%) 10.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.168, 5.838), stdev = 2.611
[info]   CI (99.9%): [≈ 0, 11.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.303 ±(99.9%) 15.687 MB/sec [Average]
[info]   (min, avg, max) = (1353.376, 1356.303, 1362.705), stdev = 4.074
[info]   CI (99.9%): [1340.616, 1371.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   204272.786 ±(99.9%) 2855.424 B/op [Average]
[info]   (min, avg, max) = (203642.018, 204272.786, 205470.362), stdev = 741.545
[info]   CI (99.9%): [201417.362, 207128.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   160.455 ±(99.9%) 1177.758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 160.455, 702.059), stdev = 305.860
[info]   CI (99.9%): [≈ 0, 1338.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 11.000), stdev = 3.536
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.94% complete, ETA 01:02:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19658.096 ops/s
[info] # Warmup Iteration   2: 27667.218 ops/s
[info] # Warmup Iteration   3: 27386.286 ops/s
[info] # Warmup Iteration   4: 27500.045 ops/s
[info] # Warmup Iteration   5: 27316.816 ops/s
[info] Iteration   1: 27555.957 ops/s
[info]                  ·gc.alloc.rate:            951.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77460.932 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 27621.999 ops/s
[info]                  ·gc.alloc.rate:            953.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38636.541 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 27759.012 ops/s
[info]                  ·gc.alloc.rate:                   958.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        38408.132 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.766 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 27444.837 ops/s
[info]                  ·gc.alloc.rate:                   947.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        77735.962 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 27676.346 ops/s
[info]                  ·gc.alloc.rate:            954.950 MB/sec
[info]                  ·gc.alloc.rate.norm:       54312.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38562.565 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27611.630 ±(99.9%) 459.409 ops/s [Average]
[info]   (min, avg, max) = (27444.837, 27611.630, 27759.012), stdev = 119.307
[info]   CI (99.9%): [27152.221, 28071.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   952.873 ±(99.9%) 16.105 MB/sec [Average]
[info]   (min, avg, max) = (947.036, 952.873, 958.193), stdev = 4.182
[info]   CI (99.9%): [936.768, 968.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312.015 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (54312.015, 54312.015, 54312.016), stdev = 0.001
[info]   CI (99.9%): [54312.013, 54312.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   949.118 ±(99.9%) 1430.112 MB/sec [Average]
[info]   (min, avg, max) = (677.610, 949.118, 1356.445), stdev = 371.396
[info]   CI (99.9%): [≈ 0, 2379.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54160.827 ±(99.9%) 82388.000 B/op [Average]
[info]   (min, avg, max) = (38408.132, 54160.827, 77735.962), stdev = 21395.902
[info]   CI (99.9%): [≈ 0, 136548.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.193 ±(99.9%) 80.111 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.193, 38.199), stdev = 20.805
[info]   CI (99.9%): [≈ 0, 95.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 8.000), stdev = 2.408
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.18% complete, ETA 01:02:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48148.543 ops/s
[info] # Warmup Iteration   2: 76790.521 ops/s
[info] # Warmup Iteration   3: 77583.201 ops/s
[info] # Warmup Iteration   4: 78056.487 ops/s
[info] # Warmup Iteration   5: 77731.158 ops/s
[info] Iteration   1: 78110.398 ops/s
[info]                  ·gc.alloc.rate:                   1243.408 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27288.211 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 77998.133 ops/s
[info]                  ·gc.alloc.rate:            1241.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27340.481 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 78375.144 ops/s
[info]                  ·gc.alloc.rate:            1247.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13604.667 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 77709.316 ops/s
[info]                  ·gc.alloc.rate:                   1237.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27442.499 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.951 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 77795.179 ops/s
[info]                  ·gc.alloc.rate:                                  1238.404 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.787 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27573.181 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   77997.634 ±(99.9%) 1017.593 ops/s [Average]
[info]   (min, avg, max) = (77709.316, 77997.634, 78375.144), stdev = 264.266
[info]   CI (99.9%): [76980.041, 79015.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1241.695 ±(99.9%) 16.143 MB/sec [Average]
[info]   (min, avg, max) = (1237.082, 1241.695, 1247.627), stdev = 4.192
[info]   CI (99.9%): [1225.551, 1257.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.006), stdev = 0.001
[info]   CI (99.9%): [25056.005, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.237 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.138), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.557 ±(99.9%) 4.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.557, 2.787), stdev = 1.246
[info]   CI (99.9%): [≈ 0, 5.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.904 ±(99.9%) 1169.958 MB/sec [Average]
[info]   (min, avg, max) = (677.425, 1220.904, 1362.817), stdev = 303.834
[info]   CI (99.9%): [50.946, 2390.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24649.808 ±(99.9%) 23779.189 B/op [Average]
[info]   (min, avg, max) = (13604.667, 24649.808, 27573.181), stdev = 6175.380
[info]   CI (99.9%): [870.618, 48428.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.875 ±(99.9%) 135.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.875, 80.951), stdev = 35.185
[info]   CI (99.9%): [≈ 0, 154.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 3.578
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.41% complete, ETA 01:01:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 858434.992 ops/s
[info] # Warmup Iteration   2: 915767.579 ops/s
[info] # Warmup Iteration   3: 950453.350 ops/s
[info] # Warmup Iteration   4: 949186.896 ops/s
[info] # Warmup Iteration   5: 946863.125 ops/s
[info] Iteration   1: 952084.630 ops/s
[info]                  ·gc.alloc.rate:            1306.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2240.867 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 949153.222 ops/s
[info]                  ·gc.alloc.rate:                   1302.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2247.710 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.105 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 949829.140 ops/s
[info]                  ·gc.alloc.rate:            1303.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2245.089 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 942498.933 ops/s
[info]                  ·gc.alloc.rate:                                  1293.700 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.123 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2269.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.674 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 948490.481 ops/s
[info]                  ·gc.alloc.rate:                                  1301.844 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2261.570 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   948411.281 ±(99.9%) 13751.763 ops/s [Average]
[info]   (min, avg, max) = (942498.933, 948411.281, 952084.630), stdev = 3571.289
[info]   CI (99.9%): [934659.518, 962163.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1301.659 ±(99.9%) 18.644 MB/sec [Average]
[info]   (min, avg, max) = (1293.700, 1301.659, 1306.818), stdev = 4.842
[info]   CI (99.9%): [1283.015, 1320.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.000, 2160.000, 2160.000), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.107), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.178), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.619 ±(99.9%) 13.407 MB/sec [Average]
[info]   (min, avg, max) = (1354.733, 1357.619, 1363.061), stdev = 3.482
[info]   CI (99.9%): [1344.212, 1371.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2252.894 ±(99.9%) 46.155 B/op [Average]
[info]   (min, avg, max) = (2240.867, 2252.894, 2269.233), stdev = 11.986
[info]   CI (99.9%): [2206.739, 2299.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.556 ±(99.9%) 11.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.556, 6.674), stdev = 2.901
[info]   CI (99.9%): [≈ 0, 12.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45.65% complete, ETA 01:01:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1001484.214 ops/s
[info] # Warmup Iteration   2: 1088023.669 ops/s
[info] # Warmup Iteration   3: 1095389.574 ops/s
[info] # Warmup Iteration   4: 1012165.298 ops/s
[info] # Warmup Iteration   5: 1095165.258 ops/s
[info] Iteration   1: 1095953.245 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1094786.708 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1097728.366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1096592.488 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1094296.982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1095871.558 ±(99.9%) 5318.330 ops/s [Average]
[info]   (min, avg, max) = (1094296.982, 1095871.558, 1097728.366), stdev = 1381.153
[info]   CI (99.9%): [1090553.228, 1101189.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.88% complete, ETA 01:01:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36263.126 ops/s
[info] # Warmup Iteration   2: 64369.834 ops/s
[info] # Warmup Iteration   3: 63967.851 ops/s
[info] # Warmup Iteration   4: 64348.779 ops/s
[info] # Warmup Iteration   5: 64221.955 ops/s
[info] Iteration   1: 64374.108 ops/s
[info]                  ·gc.alloc.rate:            1387.578 MB/sec
[info]                  ·gc.alloc.rate.norm:       33928.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33107.955 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 63656.109 ops/s
[info]                  ·gc.alloc.rate:            1372.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       33928.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.567 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33466.418 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 63656.990 ops/s
[info]                  ·gc.alloc.rate:                   1372.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              33928.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33481.836 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 115.284 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 64092.382 ops/s
[info]                  ·gc.alloc.rate:                                  1381.638 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.929 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33467.802 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 64155.508 ops/s
[info]                  ·gc.alloc.rate:                                  1383.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33928.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.501 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33434.421 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   63987.019 ±(99.9%) 1229.418 ops/s [Average]
[info]   (min, avg, max) = (63656.109, 63987.019, 64374.108), stdev = 319.276
[info]   CI (99.9%): [62757.601, 65216.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1379.314 ±(99.9%) 26.506 MB/sec [Average]
[info]   (min, avg, max) = (1372.101, 1379.314, 1387.578), stdev = 6.884
[info]   CI (99.9%): [1352.808, 1405.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   33928.007 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (33928.006, 33928.007, 33928.007), stdev = 0.001
[info]   CI (99.9%): [33928.005, 33928.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.286 ±(99.9%) 1.616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 0.929), stdev = 0.420
[info]   CI (99.9%): [≈ 0, 1.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.492 ±(99.9%) 19.016 MB/sec [Average]
[info]   (min, avg, max) = (1353.567, 1357.492, 1362.897), stdev = 4.938
[info]   CI (99.9%): [1338.475, 1376.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   33391.686 ±(99.9%) 614.401 B/op [Average]
[info]   (min, avg, max) = (33107.955, 33391.686, 33481.836), stdev = 159.558
[info]   CI (99.9%): [32777.285, 34006.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   23.057 ±(99.9%) 198.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.057, 115.284), stdev = 51.557
[info]   CI (99.9%): [≈ 0, 221.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 11.000), stdev = 3.899
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.12% complete, ETA 01:00:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8603.497 ops/s
[info] # Warmup Iteration   2: 18524.879 ops/s
[info] # Warmup Iteration   3: 19432.506 ops/s
[info] # Warmup Iteration   4: 19671.282 ops/s
[info] # Warmup Iteration   5: 19676.728 ops/s
[info] Iteration   1: 19656.221 ops/s
[info]                  ·gc.alloc.rate:            710.896 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54295.543 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 19484.441 ops/s
[info]                  ·gc.alloc.rate:            704.573 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54777.563 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 19731.623 ops/s
[info]                  ·gc.alloc.rate:            713.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54091.941 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 19741.925 ops/s
[info]                  ·gc.alloc.rate:            713.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       56920.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54061.806 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 19002.373 ops/s
[info]                  ·gc.alloc.rate:                   687.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              56920.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56166.818 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 55.174 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   19523.317 ±(99.9%) 1189.560 ops/s [Average]
[info]   (min, avg, max) = (19002.373, 19523.317, 19741.925), stdev = 308.925
[info]   CI (99.9%): [18333.757, 20712.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   706.084 ±(99.9%) 42.722 MB/sec [Average]
[info]   (min, avg, max) = (687.409, 706.084, 713.913), stdev = 11.095
[info]   CI (99.9%): [663.362, 748.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56920.023 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (56920.021, 56920.023, 56920.028), stdev = 0.003
[info]   CI (99.9%): [56920.011, 56920.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   678.144 ±(99.9%) 0.407 MB/sec [Average]
[info]   (min, avg, max) = (678.053, 678.144, 678.313), stdev = 0.106
[info]   CI (99.9%): [677.737, 678.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54678.734 ±(99.9%) 3387.648 B/op [Average]
[info]   (min, avg, max) = (54061.806, 54678.734, 56166.818), stdev = 879.761
[info]   CI (99.9%): [51291.086, 58066.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   11.035 ±(99.9%) 95.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.035, 55.174), stdev = 24.674
[info]   CI (99.9%): [≈ 0, 106.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.35% complete, ETA 01:00:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6310.394 ops/s
[info] # Warmup Iteration   2: 16223.266 ops/s
[info] # Warmup Iteration   3: 16385.101 ops/s
[info] # Warmup Iteration   4: 16257.520 ops/s
[info] # Warmup Iteration   5: 16474.953 ops/s
[info] Iteration   1: 16147.645 ops/s
[info]                  ·gc.alloc.rate:            452.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66026.982 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 16280.127 ops/s
[info]                  ·gc.alloc.rate:            456.012 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65487.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 16337.543 ops/s
[info]                  ·gc.alloc.rate:      457.587 MB/sec
[info]                  ·gc.alloc.rate.norm: 44089.699 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 16393.286 ops/s
[info]                  ·gc.alloc.rate:            459.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65036.396 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 16398.840 ops/s
[info]                  ·gc.alloc.rate:            459.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65016.571 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   16311.488 ±(99.9%) 398.445 ops/s [Average]
[info]   (min, avg, max) = (16147.645, 16311.488, 16398.840), stdev = 103.475
[info]   CI (99.9%): [15913.043, 16709.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   456.890 ±(99.9%) 10.932 MB/sec [Average]
[info]   (min, avg, max) = (452.408, 456.890, 459.327), stdev = 2.839
[info]   CI (99.9%): [445.958, 467.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088.362 ±(99.9%) 2.878 B/op [Average]
[info]   (min, avg, max) = (44088.025, 44088.362, 44089.699), stdev = 0.747
[info]   CI (99.9%): [44085.484, 44091.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.904 ±(99.9%) 1166.490 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.904, 677.534), stdev = 302.934
[info]   CI (99.9%): [≈ 0, 1708.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   52313.531 ±(99.9%) 112620.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52313.531, 66026.982), stdev = 29247.058
[info]   CI (99.9%): [≈ 0, 164933.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.59% complete, ETA 01:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89534.530 ops/s
[info] # Warmup Iteration   2: 94171.026 ops/s
[info] # Warmup Iteration   3: 91840.432 ops/s
[info] # Warmup Iteration   4: 90781.179 ops/s
[info] # Warmup Iteration   5: 94145.143 ops/s
[info] Iteration   1: 92935.386 ops/s
[info]                  ·gc.alloc.rate:            233.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      679.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11506.945 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 94292.905 ops/s
[info]                  ·gc.alloc.rate:      236.745 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 94240.741 ops/s
[info]                  ·gc.alloc.rate:      236.614 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 92170.258 ops/s
[info]                  ·gc.alloc.rate:            231.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11589.806 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 94236.401 ops/s
[info]                  ·gc.alloc.rate:      236.638 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   93575.138 ±(99.9%) 3742.490 ops/s [Average]
[info]   (min, avg, max) = (92170.258, 93575.138, 94292.905), stdev = 971.913
[info]   CI (99.9%): [89832.649, 97317.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   234.950 ±(99.9%) 9.418 MB/sec [Average]
[info]   (min, avg, max) = (231.416, 234.950, 236.745), stdev = 2.446
[info]   CI (99.9%): [225.533, 244.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.004), stdev = 0.001
[info]   CI (99.9%): [3952.004, 3952.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.613 ±(99.9%) 1432.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.613, 679.403), stdev = 371.921
[info]   CI (99.9%): [≈ 0, 1703.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4619.350 ±(99.9%) 24356.761 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4619.350, 11589.806), stdev = 6325.373
[info]   CI (99.9%): [≈ 0, 28976.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.82% complete, ETA 01:00:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3299.189 ops/s
[info] # Warmup Iteration   2: 14159.994 ops/s
[info] # Warmup Iteration   3: 14659.389 ops/s
[info] # Warmup Iteration   4: 14561.125 ops/s
[info] # Warmup Iteration   5: 14840.793 ops/s
[info] Iteration   1: 14728.148 ops/s
[info]                  ·gc.alloc.rate:            930.068 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144783.354 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 14834.474 ops/s
[info]                  ·gc.alloc.rate:            937.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.552 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71869.645 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 14788.360 ops/s
[info]                  ·gc.alloc.rate:            933.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72098.019 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 14651.864 ops/s
[info]                  ·gc.alloc.rate:            925.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.186 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145524.262 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 14852.184 ops/s
[info]                  ·gc.alloc.rate:            937.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71782.565 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14771.006 ±(99.9%) 316.075 ops/s [Average]
[info]   (min, avg, max) = (14651.864, 14771.006, 14852.184), stdev = 82.084
[info]   CI (99.9%): [14454.931, 15087.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   932.867 ±(99.9%) 19.621 MB/sec [Average]
[info]   (min, avg, max) = (925.583, 932.867, 937.847), stdev = 5.095
[info]   CI (99.9%): [913.247, 952.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99392.029 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (99392.027, 99392.029, 99392.035), stdev = 0.003
[info]   CI (99.9%): [99392.018, 99392.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   948.454 ±(99.9%) 1429.078 MB/sec [Average]
[info]   (min, avg, max) = (677.329, 948.454, 1355.186), stdev = 371.127
[info]   CI (99.9%): [≈ 0, 2377.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   101211.569 ±(99.9%) 154467.092 B/op [Average]
[info]   (min, avg, max) = (71782.565, 101211.569, 145524.262), stdev = 40114.613
[info]   CI (99.9%): [≈ 0, 255678.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.06% complete, ETA 00:59:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40272.353 ops/s
[info] # Warmup Iteration   2: 58249.577 ops/s
[info] # Warmup Iteration   3: 57262.497 ops/s
[info] # Warmup Iteration   4: 59003.691 ops/s
[info] # Warmup Iteration   5: 58482.069 ops/s
[info] Iteration   1: 58857.233 ops/s
[info]                  ·gc.alloc.rate:            1049.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18132.640 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 58718.064 ops/s
[info]                  ·gc.alloc.rate:            1047.407 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36352.349 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 58986.570 ops/s
[info]                  ·gc.alloc.rate:            1052.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18093.606 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 58728.341 ops/s
[info]                  ·gc.alloc.rate:            1047.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36346.160 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 58851.721 ops/s
[info]                  ·gc.alloc.rate:            1049.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       28072.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18135.104 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   58828.386 ±(99.9%) 424.352 ops/s [Average]
[info]   (min, avg, max) = (58718.064, 58828.386, 58986.570), stdev = 110.203
[info]   CI (99.9%): [58404.033, 59252.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1049.220 ±(99.9%) 7.550 MB/sec [Average]
[info]   (min, avg, max) = (1047.376, 1049.220, 1052.119), stdev = 1.961
[info]   CI (99.9%): [1041.670, 1056.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28072.007, 28072.007, 28072.007), stdev = 0.001
[info]   CI (99.9%): [28072.006, 28072.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   949.323 ±(99.9%) 1430.310 MB/sec [Average]
[info]   (min, avg, max) = (677.976, 949.323, 1356.358), stdev = 371.447
[info]   CI (99.9%): [≈ 0, 2379.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25411.972 ±(99.9%) 38446.143 B/op [Average]
[info]   (min, avg, max) = (18093.606, 25411.972, 36352.349), stdev = 9984.341
[info]   CI (99.9%): [≈ 0, 63858.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.29% complete, ETA 00:59:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51342.933 ops/s
[info] # Warmup Iteration   2: 80234.601 ops/s
[info] # Warmup Iteration   3: 80514.167 ops/s
[info] # Warmup Iteration   4: 80705.854 ops/s
[info] # Warmup Iteration   5: 79337.133 ops/s
[info] Iteration   1: 80536.402 ops/s
[info]                  ·gc.alloc.rate:                   1151.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26464.334 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.017 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 80445.917 ops/s
[info]                  ·gc.alloc.rate:            1150.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       22512.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.889 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26506.967 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 80423.737 ops/s
[info]                  ·gc.alloc.rate:            1152.125 MB/sec
[info]                  ·gc.alloc.rate.norm:       22512.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1350.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26393.797 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 81002.165 ops/s
[info]                  ·gc.alloc.rate:            1158.557 MB/sec
[info]                  ·gc.alloc.rate.norm:       22512.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13162.367 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 81749.520 ops/s
[info]                  ·gc.alloc.rate:                                  1169.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22512.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.405 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26160.540 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                76.943 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   80831.548 ±(99.9%) 2173.068 ops/s [Average]
[info]   (min, avg, max) = (80423.737, 80831.548, 81749.520), stdev = 564.339
[info]   CI (99.9%): [78658.480, 83004.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1156.502 ±(99.9%) 30.076 MB/sec [Average]
[info]   (min, avg, max) = (1150.689, 1156.502, 1169.337), stdev = 7.811
[info]   CI (99.9%): [1126.426, 1186.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22512.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22512.005, 22512.005, 22512.005), stdev = 0.001
[info]   CI (99.9%): [22512.005, 22512.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.281 ±(99.9%) 2.419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.281, 1.405), stdev = 0.628
[info]   CI (99.9%): [≈ 0, 2.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.187 ±(99.9%) 1166.316 MB/sec [Average]
[info]   (min, avg, max) = (677.388, 1219.187, 1358.852), stdev = 302.889
[info]   CI (99.9%): [52.871, 2385.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   23737.601 ±(99.9%) 22769.816 B/op [Average]
[info]   (min, avg, max) = (13162.367, 23737.601, 26506.967), stdev = 5913.249
[info]   CI (99.9%): [967.785, 46507.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.992 ±(99.9%) 128.739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.992, 76.943), stdev = 33.433
[info]   CI (99.9%): [≈ 0, 146.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.168
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.53% complete, ETA 00:59:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227095.780 ops/s
[info] # Warmup Iteration   2: 239879.017 ops/s
[info] # Warmup Iteration   3: 250487.027 ops/s
[info] # Warmup Iteration   4: 244920.423 ops/s
[info] # Warmup Iteration   5: 248591.243 ops/s
[info] Iteration   1: 251010.959 ops/s
[info]                  ·gc.alloc.rate:            481.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4247.750 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 251756.349 ops/s
[info]                  ·gc.alloc.rate:      482.442 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 249219.588 ops/s
[info]                  ·gc.alloc.rate:                   477.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4278.254 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.207 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 250710.640 ops/s
[info]                  ·gc.alloc.rate:            480.348 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4257.030 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 250040.208 ops/s
[info]                  ·gc.alloc.rate:            479.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4268.436 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   250547.549 ±(99.9%) 3715.134 ops/s [Average]
[info]   (min, avg, max) = (249219.588, 250547.549, 251756.349), stdev = 964.808
[info]   CI (99.9%): [246832.415, 254262.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   480.091 ±(99.9%) 7.146 MB/sec [Average]
[info]   (min, avg, max) = (477.571, 480.091, 482.442), stdev = 1.856
[info]   CI (99.9%): [472.944, 487.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.001, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.186 ±(99.9%) 1167.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.186, 678.039), stdev = 303.091
[info]   CI (99.9%): [≈ 0, 1709.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3410.294 ±(99.9%) 7341.049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3410.294, 4278.254), stdev = 1906.447
[info]   CI (99.9%): [≈ 0, 10751.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.841 ±(99.9%) 7.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.841, 4.207), stdev = 1.881
[info]   CI (99.9%): [≈ 0, 8.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:59:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 265204.491 ops/s
[info] # Warmup Iteration   2: 293649.954 ops/s
[info] # Warmup Iteration   3: 276790.585 ops/s
[info] # Warmup Iteration   4: 292899.958 ops/s
[info] # Warmup Iteration   5: 290724.139 ops/s
[info] Iteration   1: 293916.959 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 291894.533 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 292392.293 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 292578.805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 292944.871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   292745.492 ±(99.9%) 2912.747 ops/s [Average]
[info]   (min, avg, max) = (291894.533, 292745.492, 293916.959), stdev = 756.431
[info]   CI (99.9%): [289832.745, 295658.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.00% complete, ETA 00:58:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49363.801 ops/s
[info] # Warmup Iteration   2: 67542.707 ops/s
[info] # Warmup Iteration   3: 68571.753 ops/s
[info] # Warmup Iteration   4: 68314.947 ops/s
[info] # Warmup Iteration   5: 68382.933 ops/s
[info] Iteration   1: 67695.679 ops/s
[info]                  ·gc.alloc.rate:            1214.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31499.558 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 67483.145 ops/s
[info]                  ·gc.alloc.rate:            1210.999 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31599.431 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 67753.388 ops/s
[info]                  ·gc.alloc.rate:            1215.945 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31473.992 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 68378.076 ops/s
[info]                  ·gc.alloc.rate:            1227.258 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15592.949 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 68117.407 ops/s
[info]                  ·gc.alloc.rate:                                  1222.716 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28248.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31397.256 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                92.345 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   67885.539 ±(99.9%) 1377.362 ops/s [Average]
[info]   (min, avg, max) = (67483.145, 67885.539, 68378.076), stdev = 357.697
[info]   CI (99.9%): [66508.177, 69262.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1218.358 ±(99.9%) 25.127 MB/sec [Average]
[info]   (min, avg, max) = (1210.999, 1218.358, 1227.258), stdev = 6.525
[info]   CI (99.9%): [1193.231, 1243.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28248.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28248.006, 28248.006, 28248.006), stdev = 0.001
[info]   CI (99.9%): [28248.006, 28248.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.202 ±(99.9%) 1.742 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.202, 1.012), stdev = 0.452
[info]   CI (99.9%): [≈ 0, 1.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.136 ±(99.9%) 1168.197 MB/sec [Average]
[info]   (min, avg, max) = (677.449, 1220.136, 1359.031), stdev = 303.377
[info]   CI (99.9%): [51.939, 2388.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   28312.637 ±(99.9%) 27381.502 B/op [Average]
[info]   (min, avg, max) = (15592.949, 28312.637, 31599.431), stdev = 7110.889
[info]   CI (99.9%): [931.135, 55694.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   18.469 ±(99.9%) 159.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.469, 92.345), stdev = 41.298
[info]   CI (99.9%): [≈ 0, 177.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.280
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.24% complete, ETA 00:58:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102618.502 ops/s
[info] # Warmup Iteration   2: 126100.754 ops/s
[info] # Warmup Iteration   3: 125411.773 ops/s
[info] # Warmup Iteration   4: 125591.158 ops/s
[info] # Warmup Iteration   5: 125578.414 ops/s
[info] Iteration   1: 126048.245 ops/s
[info]                  ·gc.alloc.rate:            1825.612 MB/sec
[info]                  ·gc.alloc.rate.norm:       22800.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16934.383 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 125779.250 ops/s
[info]                  ·gc.alloc.rate:                                  1821.950 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.451 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25539.244 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                41.676 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 126321.681 ops/s
[info]                  ·gc.alloc.rate:                                  1829.866 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22800.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25470.575 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 125109.518 ops/s
[info]                  ·gc.alloc.rate:            1813.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       22800.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.417 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17144.987 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 124818.454 ops/s
[info]                  ·gc.alloc.rate:            1808.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       22800.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.228 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25776.394 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   125615.430 ±(99.9%) 2438.459 ops/s [Average]
[info]   (min, avg, max) = (124818.454, 125615.430, 126321.681), stdev = 633.260
[info]   CI (99.9%): [123176.970, 128053.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1819.746 ±(99.9%) 34.406 MB/sec [Average]
[info]   (min, avg, max) = (1808.181, 1819.746, 1829.866), stdev = 8.935
[info]   CI (99.9%): [1785.340, 1854.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22800.003, 22800.003, 22800.003), stdev = 0.001
[info]   CI (99.9%): [22800.003, 22800.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.116), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.322 ±(99.9%) 2.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.322, 1.451), stdev = 0.635
[info]   CI (99.9%): [≈ 0, 2.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1769.727 ±(99.9%) 1441.410 MB/sec [Average]
[info]   (min, avg, max) = (1355.948, 1769.727, 2044.228), stdev = 374.330
[info]   CI (99.9%): [328.317, 3211.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   22173.117 ±(99.9%) 18052.301 B/op [Average]
[info]   (min, avg, max) = (16934.383, 22173.117, 25776.394), stdev = 4688.125
[info]   CI (99.9%): [4120.816, 40225.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.335 ±(99.9%) 71.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.335, 41.676), stdev = 18.638
[info]   CI (99.9%): [≈ 0, 80.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.600, 7.000), stdev = 2.302
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48.47% complete, ETA 00:58:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44218.201 ops/s
[info] # Warmup Iteration   2: 632984.412 ops/s
[info] # Warmup Iteration   3: 623101.496 ops/s
[info] # Warmup Iteration   4: 637694.813 ops/s
[info] # Warmup Iteration   5: 623505.712 ops/s
[info] Iteration   1: 637098.922 ops/s
[info]                  ·gc.alloc.rate:      352.952 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 621872.037 ops/s
[info]                  ·gc.alloc.rate:            344.507 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1707.779 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 636691.764 ops/s
[info]                  ·gc.alloc.rate:      352.724 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 619082.972 ops/s
[info]                  ·gc.alloc.rate:            343.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1715.449 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 637665.200 ops/s
[info]                  ·gc.alloc.rate:      353.341 MB/sec
[info]                  ·gc.alloc.rate.norm: 872.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   630482.179 ±(99.9%) 35397.267 ops/s [Average]
[info]   (min, avg, max) = (619082.972, 630482.179, 637665.200), stdev = 9192.558
[info]   CI (99.9%): [595084.913, 665879.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   349.320 ±(99.9%) 19.552 MB/sec [Average]
[info]   (min, avg, max) = (343.074, 349.320, 353.341), stdev = 5.078
[info]   CI (99.9%): [329.767, 368.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   269.923 ±(99.9%) 1423.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.923, 674.914), stdev = 369.608
[info]   CI (99.9%): [≈ 0, 1693.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   684.645 ±(99.9%) 3609.953 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 684.645, 1715.449), stdev = 937.493
[info]   CI (99.9%): [≈ 0, 4294.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.71% complete, ETA 00:58:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207776.124 ops/s
[info] # Warmup Iteration   2: 340253.197 ops/s
[info] # Warmup Iteration   3: 339698.928 ops/s
[info] # Warmup Iteration   4: 341906.212 ops/s
[info] # Warmup Iteration   5: 338441.417 ops/s
[info] Iteration   1: 341024.360 ops/s
[info]                  ·gc.alloc.rate:      355.378 MB/sec
[info]                  ·gc.alloc.rate.norm: 1640.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 339340.690 ops/s
[info]                  ·gc.alloc.rate:            353.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3142.039 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 341796.684 ops/s
[info]                  ·gc.alloc.rate:      356.116 MB/sec
[info]                  ·gc.alloc.rate.norm: 1640.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 339811.138 ops/s
[info]                  ·gc.alloc.rate:            354.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3137.703 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 339263.408 ops/s
[info]                  ·gc.alloc.rate:            353.457 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3142.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   340247.256 ±(99.9%) 4298.531 ops/s [Average]
[info]   (min, avg, max) = (339263.408, 340247.256, 341796.684), stdev = 1116.315
[info]   CI (99.9%): [335948.725, 344545.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   354.521 ±(99.9%) 4.526 MB/sec [Average]
[info]   (min, avg, max) = (353.457, 354.521, 356.116), stdev = 1.175
[info]   CI (99.9%): [349.995, 359.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.431 ±(99.9%) 1428.661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.431, 677.486), stdev = 371.019
[info]   CI (99.9%): [≈ 0, 1835.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1884.477 ±(99.9%) 6624.205 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1884.477, 3142.641), stdev = 1720.285
[info]   CI (99.9%): [≈ 0, 8508.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.94% complete, ETA 00:57:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 734397.079 ops/s
[info] # Warmup Iteration   2: 774113.624 ops/s
[info] # Warmup Iteration   3: 751141.995 ops/s
[info] # Warmup Iteration   4: 756283.382 ops/s
[info] # Warmup Iteration   5: 778640.589 ops/s
[info] Iteration   1: 774870.692 ops/s
[info]                  ·gc.alloc.rate:            267.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1377.368 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 775874.258 ops/s
[info]                  ·gc.alloc.rate:      268.154 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 773077.130 ops/s
[info]                  ·gc.alloc.rate:            267.181 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1380.560 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 772508.227 ops/s
[info]                  ·gc.alloc.rate:      266.969 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 772234.512 ops/s
[info]                  ·gc.alloc.rate:      266.935 MB/sec
[info]                  ·gc.alloc.rate.norm: 544.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   773712.964 ±(99.9%) 6104.523 ops/s [Average]
[info]   (min, avg, max) = (772234.512, 773712.964, 775874.258), stdev = 1585.325
[info]   CI (99.9%): [767608.441, 779817.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   267.406 ±(99.9%) 2.085 MB/sec [Average]
[info]   (min, avg, max) = (266.935, 267.406, 268.154), stdev = 0.541
[info]   CI (99.9%): [265.322, 269.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.001, 544.001, 544.001), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.216 ±(99.9%) 1430.044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.216, 678.051), stdev = 371.378
[info]   CI (99.9%): [≈ 0, 1701.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   551.586 ±(99.9%) 2908.355 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 551.586, 1380.560), stdev = 755.290
[info]   CI (99.9%): [≈ 0, 3459.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.18% complete, ETA 00:57:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39376.120 ops/s
[info] # Warmup Iteration   2: 73111.707 ops/s
[info] # Warmup Iteration   3: 73310.389 ops/s
[info] # Warmup Iteration   4: 73318.685 ops/s
[info] # Warmup Iteration   5: 73672.927 ops/s
[info] Iteration   1: 73919.343 ops/s
[info]                  ·gc.alloc.rate:                                  3168.613 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.227 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58036.750 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 73975.044 ops/s
[info]                  ·gc.alloc.rate:                                  3171.135 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72491.029 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 73699.018 ops/s
[info]                  ·gc.alloc.rate:                                  3159.478 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.212 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72762.457 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 74757.527 ops/s
[info]                  ·gc.alloc.rate:                                  3205.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.187 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57383.989 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 74467.853 ops/s
[info]                  ·gc.alloc.rate:                                  3192.143 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.194 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72009.267 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   74163.757 ±(99.9%) 1674.444 ops/s [Average]
[info]   (min, avg, max) = (73699.018, 74163.757, 74757.527), stdev = 434.848
[info]   CI (99.9%): [72489.313, 75838.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3179.331 ±(99.9%) 72.396 MB/sec [Average]
[info]   (min, avg, max) = (3159.478, 3179.331, 3205.285), stdev = 18.801
[info]   CI (99.9%): [3106.934, 3251.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67472.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67472.005, 67472.006, 67472.006), stdev = 0.001
[info]   CI (99.9%): [67472.005, 67472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.011 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.007, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.158 ±(99.9%) 0.242 B/op [Average]
[info]   (min, avg, max) = (0.091, 0.158, 0.227), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3134.521 ±(99.9%) 1436.774 MB/sec [Average]
[info]   (min, avg, max) = (2725.515, 3134.521, 3407.212), stdev = 373.126
[info]   CI (99.9%): [1697.747, 4571.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66536.698 ±(99.9%) 31055.888 B/op [Average]
[info]   (min, avg, max) = (57383.989, 66536.698, 72762.457), stdev = 8065.115
[info]   CI (99.9%): [35480.810, 97592.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.41% complete, ETA 00:57:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 210168.850 ops/s
[info] # Warmup Iteration   2: 284730.582 ops/s
[info] # Warmup Iteration   3: 285109.459 ops/s
[info] # Warmup Iteration   4: 286327.041 ops/s
[info] # Warmup Iteration   5: 287318.456 ops/s
[info] Iteration   1: 283912.598 ops/s
[info]                  ·gc.alloc.rate:            1479.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       8200.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7518.289 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 284192.571 ops/s
[info]                  ·gc.alloc.rate:            1480.653 MB/sec
[info]                  ·gc.alloc.rate.norm:       8200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.225 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7510.909 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 286533.156 ops/s
[info]                  ·gc.alloc.rate:                                  1492.961 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.320 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2037.831 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11192.665 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.295 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 289559.163 ops/s
[info]                  ·gc.alloc.rate:                                  1508.664 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.954 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7408.026 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 289473.470 ops/s
[info]                  ·gc.alloc.rate:                                  1508.494 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8200.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7410.175 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   286734.192 ±(99.9%) 10535.884 ops/s [Average]
[info]   (min, avg, max) = (283912.598, 286734.192, 289559.163), stdev = 2736.136
[info]   CI (99.9%): [276198.308, 297270.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1494.018 ±(99.9%) 55.131 MB/sec [Average]
[info]   (min, avg, max) = (1479.316, 1494.018, 1508.664), stdev = 14.317
[info]   CI (99.9%): [1438.886, 1549.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8200.001, 8200.001, 8200.002), stdev = 0.001
[info]   CI (99.9%): [8200.001, 8200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.190 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.110), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.185 ±(99.9%) 1.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.185, 0.596), stdev = 0.268
[info]   CI (99.9%): [≈ 0, 1.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1495.307 ±(99.9%) 1167.897 MB/sec [Average]
[info]   (min, avg, max) = (1356.225, 1495.307, 2037.831), stdev = 303.299
[info]   CI (99.9%): [327.411, 2663.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8208.013 ±(99.9%) 6427.908 B/op [Average]
[info]   (min, avg, max) = (7408.026, 8208.013, 11192.665), stdev = 1669.307
[info]   CI (99.9%): [1780.105, 14635.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.659 ±(99.9%) 31.504 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.659, 18.295), stdev = 8.182
[info]   CI (99.9%): [≈ 0, 35.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.391
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49.65% complete, ETA 00:56:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139553.134 ops/s
[info] # Warmup Iteration   2: 1482678.539 ops/s
[info] # Warmup Iteration   3: 1493155.210 ops/s
[info] # Warmup Iteration   4: 1499111.880 ops/s
[info] # Warmup Iteration   5: 1500472.912 ops/s
[info] Iteration   1: 1470392.720 ops/s
[info]                  ·gc.alloc.rate:      500.701 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1469346.080 ops/s
[info]                  ·gc.alloc.rate:            500.365 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 722.794 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1511189.450 ops/s
[info]                  ·gc.alloc.rate:            514.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 702.790 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1506620.309 ops/s
[info]                  ·gc.alloc.rate:            513.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 704.919 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1513388.193 ops/s
[info]                  ·gc.alloc.rate:      515.493 MB/sec
[info]                  ·gc.alloc.rate.norm: 536.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1494187.350 ±(99.9%) 86008.150 ops/s [Average]
[info]   (min, avg, max) = (1469346.080, 1494187.350, 1513388.193), stdev = 22336.043
[info]   CI (99.9%): [1408179.200, 1580195.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   508.837 ±(99.9%) 29.391 MB/sec [Average]
[info]   (min, avg, max) = (500.365, 508.837, 515.493), stdev = 7.633
[info]   CI (99.9%): [479.446, 538.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.835 ±(99.9%) 1423.053 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.835, 674.741), stdev = 369.562
[info]   CI (99.9%): [≈ 0, 1827.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   426.101 ±(99.9%) 1498.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 426.101, 722.794), stdev = 389.052
[info]   CI (99.9%): [≈ 0, 1924.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.88% complete, ETA 00:56:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 910466.591 ops/s
[info] # Warmup Iteration   2: 1502320.102 ops/s
[info] # Warmup Iteration   3: 1512969.360 ops/s
[info] # Warmup Iteration   4: 1468221.089 ops/s
[info] # Warmup Iteration   5: 1512781.258 ops/s
[info] Iteration   1: 1486950.303 ops/s
[info]                  ·gc.alloc.rate:            869.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.927 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1434.115 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1512404.554 ops/s
[info]                  ·gc.alloc.rate:            884.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 704.986 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1514472.166 ops/s
[info]                  ·gc.alloc.rate:            885.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 704.024 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1506091.836 ops/s
[info]                  ·gc.alloc.rate:            880.285 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1415.866 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1514201.542 ops/s
[info]                  ·gc.alloc.rate:            885.051 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 704.163 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1506824.080 ±(99.9%) 44722.417 ops/s [Average]
[info]   (min, avg, max) = (1486950.303, 1506824.080, 1514472.166), stdev = 11614.270
[info]   CI (99.9%): [1462101.663, 1551546.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   880.794 ±(99.9%) 26.146 MB/sec [Average]
[info]   (min, avg, max) = (869.200, 880.794, 885.368), stdev = 6.790
[info]   CI (99.9%): [854.647, 906.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.411 ±(99.9%) 1428.640 MB/sec [Average]
[info]   (min, avg, max) = (677.413, 948.411, 1354.927), stdev = 371.013
[info]   CI (99.9%): [≈ 0, 2377.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   992.631 ±(99.9%) 1520.009 B/op [Average]
[info]   (min, avg, max) = (704.024, 992.631, 1434.115), stdev = 394.741
[info]   CI (99.9%): [≈ 0, 2512.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.12% complete, ETA 00:56:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1453341.693 ops/s
[info] # Warmup Iteration   2: 1555822.197 ops/s
[info] # Warmup Iteration   3: 1585967.160 ops/s
[info] # Warmup Iteration   4: 1606158.464 ops/s
[info] # Warmup Iteration   5: 1615717.333 ops/s
[info] Iteration   1: 1597905.512 ops/s
[info]                  ·gc.alloc.rate:            544.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 667.922 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1604811.580 ops/s
[info]                  ·gc.alloc.rate:                   546.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        664.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.653 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1606053.872 ops/s
[info]                  ·gc.alloc.rate:            546.903 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 664.535 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1607571.666 ops/s
[info]                  ·gc.alloc.rate:            547.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 663.250 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1612473.808 ops/s
[info]                  ·gc.alloc.rate:                   549.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.510 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        661.232 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.650 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1605763.288 ±(99.9%) 20287.827 ops/s [Average]
[info]   (min, avg, max) = (1597905.512, 1605763.288, 1612473.808), stdev = 5268.684
[info]   CI (99.9%): [1585475.461, 1626051.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   546.831 ±(99.9%) 7.105 MB/sec [Average]
[info]   (min, avg, max) = (544.069, 546.831, 549.196), stdev = 1.845
[info]   CI (99.9%): [539.726, 553.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.682 ±(99.9%) 1.196 MB/sec [Average]
[info]   (min, avg, max) = (677.363, 677.682, 678.053), stdev = 0.311
[info]   CI (99.9%): [676.486, 678.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   664.267 ±(99.9%) 9.372 B/op [Average]
[info]   (min, avg, max) = (661.232, 664.267, 667.922), stdev = 2.434
[info]   CI (99.9%): [654.895, 673.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.261 ±(99.9%) 1.375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.261, 0.653), stdev = 0.357
[info]   CI (99.9%): [≈ 0, 1.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.35% complete, ETA 00:56:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1645776.517 ops/s
[info] # Warmup Iteration   2: 1812858.037 ops/s
[info] # Warmup Iteration   3: 1808972.444 ops/s
[info] # Warmup Iteration   4: 1771058.191 ops/s
[info] # Warmup Iteration   5: 1810192.941 ops/s
[info] Iteration   1: 1668403.743 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1810919.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1809859.391 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1812581.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1810697.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1782492.227 ±(99.9%) 245613.480 ops/s [Average]
[info]   (min, avg, max) = (1668403.743, 1782492.227, 1812581.037), stdev = 63785.041
[info]   CI (99.9%): [1536878.748, 2028105.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.59% complete, ETA 00:55:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23356.484 ops/s
[info] # Warmup Iteration   2: 33095.503 ops/s
[info] # Warmup Iteration   3: 33430.802 ops/s
[info] # Warmup Iteration   4: 34292.113 ops/s
[info] # Warmup Iteration   5: 34295.816 ops/s
[info] Iteration   1: 33735.318 ops/s
[info]                  ·gc.alloc.rate:            1570.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       73264.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 94819.365 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 34102.882 ops/s
[info]                  ·gc.alloc.rate:            1587.186 MB/sec
[info]                  ·gc.alloc.rate.norm:       73264.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62530.890 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 34200.260 ops/s
[info]                  ·gc.alloc.rate:                                  1591.895 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73264.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.350 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62537.496 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                183.934 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 34427.671 ops/s
[info]                  ·gc.alloc.rate:                                  1602.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73264.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.405 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       93456.460 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 34292.774 ops/s
[info]                  ·gc.alloc.rate:            1596.178 MB/sec
[info]                  ·gc.alloc.rate.norm:       73264.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62549.535 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   34151.781 ±(99.9%) 1008.135 ops/s [Average]
[info]   (min, avg, max) = (33735.318, 34151.781, 34427.671), stdev = 261.809
[info]   CI (99.9%): [33143.646, 35159.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1589.615 ±(99.9%) 47.047 MB/sec [Average]
[info]   (min, avg, max) = (1570.246, 1589.615, 1602.568), stdev = 12.218
[info]   CI (99.9%): [1542.567, 1636.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   73264.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (73264.012, 73264.012, 73264.013), stdev = 0.001
[info]   CI (99.9%): [73264.011, 73264.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.047 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.047, 0.118), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.151 ±(99.9%) 11.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.151, 5.405), stdev = 2.945
[info]   CI (99.9%): [≈ 0, 13.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.546 ±(99.9%) 1433.258 MB/sec [Average]
[info]   (min, avg, max) = (1354.664, 1630.546, 2044.256), stdev = 372.213
[info]   CI (99.9%): [197.287, 3063.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75178.749 ±(99.9%) 66669.960 B/op [Average]
[info]   (min, avg, max) = (62530.890, 75178.749, 94819.365), stdev = 17313.977
[info]   CI (99.9%): [8508.789, 141848.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.787 ±(99.9%) 316.745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.787, 183.934), stdev = 82.258
[info]   CI (99.9%): [≈ 0, 353.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 12.000), stdev = 2.950
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50.82% complete, ETA 00:55:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36649.932 ops/s
[info] # Warmup Iteration   2: 45887.203 ops/s
[info] # Warmup Iteration   3: 45932.763 ops/s
[info] # Warmup Iteration   4: 44070.935 ops/s
[info] # Warmup Iteration   5: 45999.567 ops/s
[info] Iteration   1: 46009.994 ops/s
[info]                  ·gc.alloc.rate:            917.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       31384.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23195.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 45947.475 ops/s
[info]                  ·gc.alloc.rate:            916.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       31384.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46456.332 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 46141.642 ops/s
[info]                  ·gc.alloc.rate:            920.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       31384.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23131.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 45748.879 ops/s
[info]                  ·gc.alloc.rate:            912.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       31384.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23329.699 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 45944.796 ops/s
[info]                  ·gc.alloc.rate:            916.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       31384.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46460.376 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   45958.557 ±(99.9%) 546.069 ops/s [Average]
[info]   (min, avg, max) = (45748.879, 45958.557, 46141.642), stdev = 141.812
[info]   CI (99.9%): [45412.488, 46504.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   916.375 ±(99.9%) 10.860 MB/sec [Average]
[info]   (min, avg, max) = (912.205, 916.375, 920.022), stdev = 2.820
[info]   CI (99.9%): [905.514, 927.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31384.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (31384.009, 31384.009, 31384.010), stdev = 0.001
[info]   CI (99.9%): [31384.008, 31384.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   949.309 ±(99.9%) 1430.178 MB/sec [Average]
[info]   (min, avg, max) = (678.018, 949.309, 1356.176), stdev = 371.413
[info]   CI (99.9%): [≈ 0, 2379.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32514.557 ±(99.9%) 49015.188 B/op [Average]
[info]   (min, avg, max) = (23131.021, 32514.557, 46460.376), stdev = 12729.089
[info]   CI (99.9%): [≈ 0, 81529.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.06% complete, ETA 00:55:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51043.988 ops/s
[info] # Warmup Iteration   2: 78883.027 ops/s
[info] # Warmup Iteration   3: 79492.826 ops/s
[info] # Warmup Iteration   4: 80110.531 ops/s
[info] # Warmup Iteration   5: 80055.073 ops/s
[info] Iteration   1: 79076.950 ops/s
[info]                  ·gc.alloc.rate:                   833.639 MB/sec
[info]                  ·gc.alloc.rate.norm:              16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26940.590 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.252 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 80015.093 ops/s
[info]                  ·gc.alloc.rate:            843.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13325.525 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 79958.960 ops/s
[info]                  ·gc.alloc.rate:            843.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13334.856 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 80124.115 ops/s
[info]                  ·gc.alloc.rate:            844.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13306.736 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 78892.463 ops/s
[info]                  ·gc.alloc.rate:            831.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13514.838 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   79613.516 ±(99.9%) 2236.299 ops/s [Average]
[info]   (min, avg, max) = (78892.463, 79613.516, 80124.115), stdev = 580.760
[info]   CI (99.9%): [77377.218, 81849.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   839.305 ±(99.9%) 23.482 MB/sec [Average]
[info]   (min, avg, max) = (831.748, 839.305, 844.620), stdev = 6.098
[info]   CI (99.9%): [815.823, 862.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.006), stdev = 0.001
[info]   CI (99.9%): [16592.004, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.686 ±(99.9%) 1164.331 MB/sec [Average]
[info]   (min, avg, max) = (677.329, 812.686, 1353.587), stdev = 302.373
[info]   CI (99.9%): [≈ 0, 1977.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16084.509 ±(99.9%) 23370.769 B/op [Average]
[info]   (min, avg, max) = (13306.736, 16084.509, 26940.590), stdev = 6069.314
[info]   CI (99.9%): [≈ 0, 39455.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.650 ±(99.9%) 22.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.650, 13.252), stdev = 5.926
[info]   CI (99.9%): [≈ 0, 25.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.29% complete, ETA 00:55:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243736.428 ops/s
[info] # Warmup Iteration   2: 258294.313 ops/s
[info] # Warmup Iteration   3: 260192.184 ops/s
[info] # Warmup Iteration   4: 260164.666 ops/s
[info] # Warmup Iteration   5: 253963.315 ops/s
[info] Iteration   1: 260275.215 ops/s
[info]                  ·gc.alloc.rate:            846.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4100.768 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 260536.535 ops/s
[info]                  ·gc.alloc.rate:            847.471 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4096.645 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 260196.676 ops/s
[info]                  ·gc.alloc.rate:            846.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4101.808 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 259829.918 ops/s
[info]                  ·gc.alloc.rate:            845.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8215.391 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 262870.768 ops/s
[info]                  ·gc.alloc.rate:            855.101 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4059.935 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   260741.823 ±(99.9%) 4684.918 ops/s [Average]
[info]   (min, avg, max) = (259829.918, 260741.823, 262870.768), stdev = 1216.658
[info]   CI (99.9%): [256056.905, 265426.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   848.169 ±(99.9%) 15.264 MB/sec [Average]
[info]   (min, avg, max) = (845.143, 848.169, 855.101), stdev = 3.964
[info]   CI (99.9%): [832.905, 863.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.696 ±(99.9%) 1167.544 MB/sec [Average]
[info]   (min, avg, max) = (678.056, 813.696, 1356.090), stdev = 303.207
[info]   CI (99.9%): [≈ 0, 1981.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4914.909 ±(99.9%) 7104.849 B/op [Average]
[info]   (min, avg, max) = (4059.935, 4914.909, 8215.391), stdev = 1845.107
[info]   CI (99.9%): [≈ 0, 12019.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.53% complete, ETA 00:54:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12498.858 ops/s
[info] # Warmup Iteration   2: 23730.913 ops/s
[info] # Warmup Iteration   3: 23750.925 ops/s
[info] # Warmup Iteration   4: 23702.943 ops/s
[info] # Warmup Iteration   5: 23723.553 ops/s
[info] Iteration   1: 23825.743 ops/s
[info]                  ·gc.alloc.rate:            1119.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89500.780 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 23908.277 ops/s
[info]                  ·gc.alloc.rate:            1123.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.602 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44596.930 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 23615.330 ops/s
[info]                  ·gc.alloc.rate:                   1109.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90255.938 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 23494.509 ops/s
[info]                  ·gc.alloc.rate:                   1104.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90712.979 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 44.620 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 23586.763 ops/s
[info]                  ·gc.alloc.rate:                   1108.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              73960.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        45201.839 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 266.678 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23686.124 ±(99.9%) 668.190 ops/s [Average]
[info]   (min, avg, max) = (23494.509, 23686.124, 23908.277), stdev = 173.527
[info]   CI (99.9%): [23017.934, 24354.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1113.060 ±(99.9%) 31.846 MB/sec [Average]
[info]   (min, avg, max) = (1104.049, 1113.060, 1123.743), stdev = 8.270
[info]   CI (99.9%): [1081.214, 1144.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.018 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (73960.017, 73960.018, 73960.019), stdev = 0.001
[info]   CI (99.9%): [73960.015, 73960.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.613 ±(99.9%) 1427.671 MB/sec [Average]
[info]   (min, avg, max) = (677.326, 1083.613, 1354.903), stdev = 370.762
[info]   CI (99.9%): [≈ 0, 2511.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   72053.693 ±(99.9%) 95469.326 B/op [Average]
[info]   (min, avg, max) = (44596.930, 72053.693, 90712.979), stdev = 24793.081
[info]   CI (99.9%): [≈ 0, 167523.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   71.139 ±(99.9%) 429.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 71.139, 266.678), stdev = 111.552
[info]   CI (99.9%): [≈ 0, 500.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.76% complete, ETA 00:54:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44808.070 ops/s
[info] # Warmup Iteration   2: 58804.440 ops/s
[info] # Warmup Iteration   3: 58954.493 ops/s
[info] # Warmup Iteration   4: 59699.603 ops/s
[info] # Warmup Iteration   5: 59366.067 ops/s
[info] Iteration   1: 59682.792 ops/s
[info]                  ·gc.alloc.rate:            885.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17882.937 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 59822.208 ops/s
[info]                  ·gc.alloc.rate:            887.496 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17841.092 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 59510.522 ops/s
[info]                  ·gc.alloc.rate:            882.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35868.628 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 59648.439 ops/s
[info]                  ·gc.alloc.rate:            884.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17892.229 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 59731.869 ops/s
[info]                  ·gc.alloc.rate:            886.207 MB/sec
[info]                  ·gc.alloc.rate.norm:       23352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17867.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   59679.166 ±(99.9%) 441.720 ops/s [Average]
[info]   (min, avg, max) = (59510.522, 59679.166, 59822.208), stdev = 114.713
[info]   CI (99.9%): [59237.445, 60120.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   885.388 ±(99.9%) 6.576 MB/sec [Average]
[info]   (min, avg, max) = (882.868, 885.388, 887.496), stdev = 1.708
[info]   CI (99.9%): [878.812, 891.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23352.007, 23352.007, 23352.007), stdev = 0.001
[info]   CI (99.9%): [23352.006, 23352.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.658 ±(99.9%) 1167.613 MB/sec [Average]
[info]   (min, avg, max) = (678.038, 813.658, 1356.084), stdev = 303.225
[info]   CI (99.9%): [≈ 0, 1981.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   21470.391 ±(99.9%) 30993.379 B/op [Average]
[info]   (min, avg, max) = (17841.092, 21470.391, 35868.628), stdev = 8048.882
[info]   CI (99.9%): [≈ 0, 52463.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.00% complete, ETA 00:54:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53584.814 ops/s
[info] # Warmup Iteration   2: 88062.708 ops/s
[info] # Warmup Iteration   3: 87786.341 ops/s
[info] # Warmup Iteration   4: 87815.407 ops/s
[info] # Warmup Iteration   5: 87625.536 ops/s
[info] Iteration   1: 87854.083 ops/s
[info]                  ·gc.alloc.rate:            1203.545 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24272.814 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 88342.632 ops/s
[info]                  ·gc.alloc.rate:            1209.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12068.830 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 87692.553 ops/s
[info]                  ·gc.alloc.rate:            1201.120 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24317.093 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 87716.457 ops/s
[info]                  ·gc.alloc.rate:                   1201.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24309.887 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 71.711 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 88112.117 ops/s
[info]                  ·gc.alloc.rate:                                  1206.880 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.561 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24344.811 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   87943.568 ±(99.9%) 1072.416 ops/s [Average]
[info]   (min, avg, max) = (87692.553, 87943.568, 88342.632), stdev = 278.503
[info]   CI (99.9%): [86871.152, 89015.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1204.659 ±(99.9%) 14.361 MB/sec [Average]
[info]   (min, avg, max) = (1201.120, 1204.659, 1209.998), stdev = 3.730
[info]   CI (99.9%): [1190.298, 1219.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.009 ±(99.9%) 0.040 B/op [Average]
[info]   (min, avg, max) = (21560.005, 21560.009, 21560.028), stdev = 0.010
[info]   CI (99.9%): [21559.970, 21560.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.312 ±(99.9%) 2.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.312, 1.561), stdev = 0.698
[info]   CI (99.9%): [≈ 0, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.966 ±(99.9%) 1170.289 MB/sec [Average]
[info]   (min, avg, max) = (677.331, 1220.966, 1362.766), stdev = 303.920
[info]   CI (99.9%): [50.677, 2391.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21862.687 ±(99.9%) 21082.248 B/op [Average]
[info]   (min, avg, max) = (12068.830, 21862.687, 24344.811), stdev = 5474.993
[info]   CI (99.9%): [780.439, 42944.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.342 ±(99.9%) 123.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.342, 71.711), stdev = 32.070
[info]   CI (99.9%): [≈ 0, 137.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 3.033
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:54:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263491.177 ops/s
[info] # Warmup Iteration   2: 288929.887 ops/s
[info] # Warmup Iteration   3: 291565.852 ops/s
[info] # Warmup Iteration   4: 292855.967 ops/s
[info] # Warmup Iteration   5: 293106.813 ops/s
[info] Iteration   1: 291847.932 ops/s
[info]                  ·gc.alloc.rate:            930.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7310.367 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 293376.478 ops/s
[info]                  ·gc.alloc.rate:            935.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3634.325 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 288703.385 ops/s
[info]                  ·gc.alloc.rate:            920.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3693.154 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 288589.022 ops/s
[info]                  ·gc.alloc.rate:            919.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7389.148 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 292452.038 ops/s
[info]                  ·gc.alloc.rate:            931.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3645.806 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   290993.771 ±(99.9%) 8515.520 ops/s [Average]
[info]   (min, avg, max) = (288589.022, 290993.771, 293376.478), stdev = 2211.454
[info]   CI (99.9%): [282478.251, 299509.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   927.369 ±(99.9%) 27.305 MB/sec [Average]
[info]   (min, avg, max) = (919.679, 927.369, 935.104), stdev = 7.091
[info]   CI (99.9%): [900.063, 954.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.001), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.533 ±(99.9%) 1429.561 MB/sec [Average]
[info]   (min, avg, max) = (677.314, 948.533, 1355.645), stdev = 371.253
[info]   CI (99.9%): [≈ 0, 2378.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5134.560 ±(99.9%) 7787.933 B/op [Average]
[info]   (min, avg, max) = (3634.325, 5134.560, 7389.148), stdev = 2022.501
[info]   CI (99.9%): [≈ 0, 12922.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52.47% complete, ETA 00:53:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 293490.005 ops/s
[info] # Warmup Iteration   2: 321908.715 ops/s
[info] # Warmup Iteration   3: 322566.561 ops/s
[info] # Warmup Iteration   4: 322821.206 ops/s
[info] # Warmup Iteration   5: 304933.796 ops/s
[info] Iteration   1: 322893.750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 322994.927 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 322753.912 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 322991.752 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 322954.826 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   322917.833 ±(99.9%) 386.151 ops/s [Average]
[info]   (min, avg, max) = (322753.912, 322917.833, 322994.927), stdev = 100.282
[info]   CI (99.9%): [322531.682, 323303.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52.71% complete, ETA 00:53:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56520.317 ops/s
[info] # Warmup Iteration   2: 78254.759 ops/s
[info] # Warmup Iteration   3: 75360.262 ops/s
[info] # Warmup Iteration   4: 78495.906 ops/s
[info] # Warmup Iteration   5: 77596.845 ops/s
[info] Iteration   1: 78765.229 ops/s
[info]                  ·gc.alloc.rate:            1167.715 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13536.453 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 78382.957 ops/s
[info]                  ·gc.alloc.rate:            1161.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27204.474 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 78139.519 ops/s
[info]                  ·gc.alloc.rate:            1158.167 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27290.105 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 79078.081 ops/s
[info]                  ·gc.alloc.rate:            1172.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       23328.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13482.714 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 78575.287 ops/s
[info]                  ·gc.alloc.rate:                   1165.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27139.394 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.057 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   78588.215 ±(99.9%) 1381.583 ops/s [Average]
[info]   (min, avg, max) = (78139.519, 78588.215, 79078.081), stdev = 358.793
[info]   CI (99.9%): [77206.632, 79969.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1164.917 ±(99.9%) 20.788 MB/sec [Average]
[info]   (min, avg, max) = (1158.167, 1164.917, 1172.127), stdev = 5.399
[info]   CI (99.9%): [1144.129, 1185.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.000 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (23327.980, 23328.000, 23328.031), stdev = 0.021
[info]   CI (99.9%): [23327.918, 23328.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.969 ±(99.9%) 1428.742 MB/sec [Average]
[info]   (min, avg, max) = (677.446, 1083.969, 1355.349), stdev = 371.040
[info]   CI (99.9%): [≈ 0, 2512.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   21730.628 ±(99.9%) 28898.955 B/op [Average]
[info]   (min, avg, max) = (13482.714, 21730.628, 27290.105), stdev = 7504.967
[info]   CI (99.9%): [≈ 0, 50629.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.011 ±(99.9%) 137.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.011, 80.057), stdev = 35.803
[info]   CI (99.9%): [≈ 0, 153.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.94% complete, ETA 00:53:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16314.059 ops/s
[info] # Warmup Iteration   2: 23123.617 ops/s
[info] # Warmup Iteration   3: 23205.347 ops/s
[info] # Warmup Iteration   4: 23185.923 ops/s
[info] # Warmup Iteration   5: 23105.064 ops/s
[info] Iteration   1: 23121.680 ops/s
[info]                  ·gc.alloc.rate:            1204.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 92316.040 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 23261.469 ops/s
[info]                  ·gc.alloc.rate:            1211.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45878.298 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 23226.782 ops/s
[info]                  ·gc.alloc.rate:            1209.699 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91898.788 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 23257.190 ops/s
[info]                  ·gc.alloc.rate:            1211.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       81984.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 91776.319 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 23046.002 ops/s
[info]                  ·gc.alloc.rate:                                  1200.334 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81984.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.524 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92843.851 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                227.447 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   23182.624 ±(99.9%) 365.842 ops/s [Average]
[info]   (min, avg, max) = (23046.002, 23182.624, 23261.469), stdev = 95.008
[info]   CI (99.9%): [22816.782, 23548.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1207.450 ±(99.9%) 19.100 MB/sec [Average]
[info]   (min, avg, max) = (1200.334, 1207.450, 1211.614), stdev = 4.960
[info]   CI (99.9%): [1188.349, 1226.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984.020 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (81984.018, 81984.020, 81984.025), stdev = 0.003
[info]   CI (99.9%): [81984.007, 81984.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.037), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.505 ±(99.9%) 4.346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.505, 2.524), stdev = 1.129
[info]   CI (99.9%): [≈ 0, 4.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.080 ±(99.9%) 1168.990 MB/sec [Average]
[info]   (min, avg, max) = (678.020, 1221.080, 1359.334), stdev = 303.583
[info]   CI (99.9%): [52.089, 2390.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   82942.659 ±(99.9%) 79800.043 B/op [Average]
[info]   (min, avg, max) = (45878.298, 82942.659, 92843.851), stdev = 20723.818
[info]   CI (99.9%): [3142.616, 162742.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   45.489 ±(99.9%) 391.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.489, 227.447), stdev = 101.717
[info]   CI (99.9%): [≈ 0, 437.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.18% complete, ETA 00:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15522.939 ops/s
[info] # Warmup Iteration   2: 25512.443 ops/s
[info] # Warmup Iteration   3: 26094.763 ops/s
[info] # Warmup Iteration   4: 26313.514 ops/s
[info] # Warmup Iteration   5: 26503.786 ops/s
[info] Iteration   1: 26497.356 ops/s
[info]                  ·gc.alloc.rate:            1037.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80474.044 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 26525.031 ops/s
[info]                  ·gc.alloc.rate:            1038.806 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80392.144 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 26623.461 ops/s
[info]                  ·gc.alloc.rate:            1042.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.442 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40048.137 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 26059.267 ops/s
[info]                  ·gc.alloc.rate:            1020.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81832.620 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 26617.171 ops/s
[info]                  ·gc.alloc.rate:            1042.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       61648.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40055.658 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   26464.457 ±(99.9%) 897.980 ops/s [Average]
[info]   (min, avg, max) = (26059.267, 26464.457, 26623.461), stdev = 233.203
[info]   CI (99.9%): [25566.477, 27362.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1036.513 ±(99.9%) 35.516 MB/sec [Average]
[info]   (min, avg, max) = (1020.515, 1036.513, 1042.819), stdev = 9.223
[info]   CI (99.9%): [1000.997, 1072.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61648.016 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (61648.015, 61648.016, 61648.018), stdev = 0.001
[info]   CI (99.9%): [61648.012, 61648.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.778 ±(99.9%) 1428.290 MB/sec [Average]
[info]   (min, avg, max) = (677.442, 1083.778, 1354.679), stdev = 370.922
[info]   CI (99.9%): [≈ 0, 2512.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   64560.521 ±(99.9%) 86179.424 B/op [Average]
[info]   (min, avg, max) = (40048.137, 64560.521, 81832.620), stdev = 22380.523
[info]   CI (99.9%): [≈ 0, 150739.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.41% complete, ETA 00:52:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 446960.176 ops/s
[info] # Warmup Iteration   2: 460399.172 ops/s
[info] # Warmup Iteration   3: 480144.509 ops/s
[info] # Warmup Iteration   4: 482481.746 ops/s
[info] # Warmup Iteration   5: 480565.152 ops/s
[info] Iteration   1: 481675.223 ops/s
[info]                  ·gc.alloc.rate:            1253.430 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2215.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 480835.846 ops/s
[info]                  ·gc.alloc.rate:            1251.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4439.229 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 478975.993 ops/s
[info]                  ·gc.alloc.rate:            1246.797 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.523 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4456.474 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 474966.462 ops/s
[info]                  ·gc.alloc.rate:                   1236.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4494.093 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.037 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 480822.667 ops/s
[info]                  ·gc.alloc.rate:                                  1251.303 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.114 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.373 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.866 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4461.190 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   479455.238 ±(99.9%) 10383.013 ops/s [Average]
[info]   (min, avg, max) = (474966.462, 479455.238, 481675.223), stdev = 2696.435
[info]   CI (99.9%): [469072.225, 489838.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1247.861 ±(99.9%) 26.476 MB/sec [Average]
[info]   (min, avg, max) = (1236.354, 1247.861, 1253.430), stdev = 6.876
[info]   CI (99.9%): [1221.385, 1274.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.114), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.373), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1222.048 ±(99.9%) 1171.049 MB/sec [Average]
[info]   (min, avg, max) = (678.049, 1222.048, 1362.866), stdev = 304.118
[info]   CI (99.9%): [50.999, 2393.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4013.347 ±(99.9%) 3870.221 B/op [Average]
[info]   (min, avg, max) = (2215.749, 4013.347, 4494.093), stdev = 1005.084
[info]   CI (99.9%): [143.126, 7883.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.207 ±(99.9%) 19.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.207, 11.037), stdev = 4.936
[info]   CI (99.9%): [≈ 0, 21.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.65% complete, ETA 00:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8316.380 ops/s
[info] # Warmup Iteration   2: 20065.979 ops/s
[info] # Warmup Iteration   3: 20389.003 ops/s
[info] # Warmup Iteration   4: 20256.217 ops/s
[info] # Warmup Iteration   5: 20239.610 ops/s
[info] Iteration   1: 20101.462 ops/s
[info]                  ·gc.alloc.rate:            1528.977 MB/sec
[info]                  ·gc.alloc.rate.norm:       119680.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.537 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 106025.814 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 19988.204 ops/s
[info]                  ·gc.alloc.rate:                   1519.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              119680.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106630.403 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 20463.030 ops/s
[info]                  ·gc.alloc.rate:                   1555.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              119680.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        104463.110 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 358.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 20586.721 ops/s
[info]                  ·gc.alloc.rate:                                  1565.385 MB/sec
[info]                  ·gc.alloc.rate.norm:                             119680.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.891 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       156285.743 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 20574.528 ops/s
[info]                  ·gc.alloc.rate:            1564.543 MB/sec
[info]                  ·gc.alloc.rate.norm:       119680.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 104251.251 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   20342.789 ±(99.9%) 1074.793 ops/s [Average]
[info]   (min, avg, max) = (19988.204, 20342.789, 20586.721), stdev = 279.120
[info]   CI (99.9%): [19267.995, 21417.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1546.928 ±(99.9%) 81.424 MB/sec [Average]
[info]   (min, avg, max) = (1519.823, 1546.928, 1565.385), stdev = 21.146
[info]   CI (99.9%): [1465.504, 1628.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119680.022 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (119680.020, 119680.022, 119680.025), stdev = 0.002
[info]   CI (99.9%): [119680.013, 119680.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.116), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.778 ±(99.9%) 15.311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.778, 8.891), stdev = 3.976
[info]   CI (99.9%): [≈ 0, 17.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.750 ±(99.9%) 1182.765 MB/sec [Average]
[info]   (min, avg, max) = (1354.106, 1494.750, 2044.179), stdev = 307.160
[info]   CI (99.9%): [311.985, 2677.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   115531.264 ±(99.9%) 87813.453 B/op [Average]
[info]   (min, avg, max) = (104251.251, 115531.264, 156285.743), stdev = 22804.875
[info]   CI (99.9%): [27717.811, 203344.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   82.215 ±(99.9%) 601.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 82.215, 358.628), stdev = 156.179
[info]   CI (99.9%): [≈ 0, 683.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.400, 10.000), stdev = 2.510
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.88% complete, ETA 00:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50034.059 ops/s
[info] # Warmup Iteration   2: 66322.598 ops/s
[info] # Warmup Iteration   3: 67757.672 ops/s
[info] # Warmup Iteration   4: 69324.144 ops/s
[info] # Warmup Iteration   5: 69094.272 ops/s
[info] Iteration   1: 69503.018 ops/s
[info]                  ·gc.alloc.rate:                   1470.925 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30696.284 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.084 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 69366.481 ops/s
[info]                  ·gc.alloc.rate:            1468.024 MB/sec
[info]                  ·gc.alloc.rate.norm:       33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30772.013 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 68931.779 ops/s
[info]                  ·gc.alloc.rate:                   1458.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30964.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 76.043 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 69563.714 ops/s
[info]                  ·gc.alloc.rate:                                  1472.585 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33312.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.434 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30834.708 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 69771.373 ops/s
[info]                  ·gc.alloc.rate:                                  1476.813 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33312.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30742.803 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   69427.273 ±(99.9%) 1205.394 ops/s [Average]
[info]   (min, avg, max) = (68931.779, 69427.273, 69771.373), stdev = 313.037
[info]   CI (99.9%): [68221.879, 70632.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1469.417 ±(99.9%) 26.040 MB/sec [Average]
[info]   (min, avg, max) = (1458.741, 1469.417, 1476.813), stdev = 6.762
[info]   CI (99.9%): [1443.378, 1495.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33312.006, 33312.006, 33312.006), stdev = 0.001
[info]   CI (99.9%): [33312.005, 33312.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.490 ±(99.9%) 4.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.490, 2.434), stdev = 1.087
[info]   CI (99.9%): [≈ 0, 4.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1358.692 ±(99.9%) 15.153 MB/sec [Average]
[info]   (min, avg, max) = (1355.425, 1358.692, 1363.074), stdev = 3.935
[info]   CI (99.9%): [1343.539, 1373.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   30802.126 ±(99.9%) 399.989 B/op [Average]
[info]   (min, avg, max) = (30696.284, 30802.126, 30964.824), stdev = 103.876
[info]   CI (99.9%): [30402.137, 31202.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.225 ±(99.9%) 126.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.225, 76.043), stdev = 32.974
[info]   CI (99.9%): [≈ 0, 145.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.12% complete, ETA 00:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 101900.661 ops/s
[info] # Warmup Iteration   2: 155341.018 ops/s
[info] # Warmup Iteration   3: 155191.129 ops/s
[info] # Warmup Iteration   4: 155759.556 ops/s
[info] # Warmup Iteration   5: 155566.620 ops/s
[info] Iteration   1: 156544.102 ops/s
[info]                  ·gc.alloc.rate:            1186.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6810.935 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 155654.800 ops/s
[info]                  ·gc.alloc.rate:            1179.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13699.832 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 155246.842 ops/s
[info]                  ·gc.alloc.rate:            1176.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13735.830 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 155124.352 ops/s
[info]                  ·gc.alloc.rate:                   1175.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.754 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13746.365 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 40.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 154843.583 ops/s
[info]                  ·gc.alloc.rate:                                  1173.579 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11928.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.060 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.608 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            681.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6926.411 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   155482.736 ±(99.9%) 2546.020 ops/s [Average]
[info]   (min, avg, max) = (154843.583, 155482.736, 156544.102), stdev = 661.193
[info]   CI (99.9%): [152936.716, 158028.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1178.328 ±(99.9%) 19.362 MB/sec [Average]
[info]   (min, avg, max) = (1173.579, 1178.328, 1186.432), stdev = 5.028
[info]   CI (99.9%): [1158.966, 1197.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11928.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11928.003, 11928.003, 11928.003), stdev = 0.001
[info]   CI (99.9%): [11928.002, 11928.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.122 ±(99.9%) 1.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.122, 0.608), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1084.661 ±(99.9%) 1424.320 MB/sec [Average]
[info]   (min, avg, max) = (677.457, 1084.661, 1354.850), stdev = 369.891
[info]   CI (99.9%): [≈ 0, 2508.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   10983.875 ±(99.9%) 14466.521 B/op [Average]
[info]   (min, avg, max) = (6810.935, 10983.875, 13746.365), stdev = 3756.909
[info]   CI (99.9%): [≈ 0, 25450.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.110 ±(99.9%) 69.829 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.110, 40.550), stdev = 18.134
[info]   CI (99.9%): [≈ 0, 77.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 9.000), stdev = 3.362
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.35% complete, ETA 00:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1577953.693 ops/s
[info] # Warmup Iteration   2: 1765120.296 ops/s
[info] # Warmup Iteration   3: 1750901.109 ops/s
[info] # Warmup Iteration   4: 1745905.149 ops/s
[info] # Warmup Iteration   5: 1724940.782 ops/s
[info] Iteration   1: 1742468.965 ops/s
[info]                  ·gc.alloc.rate:            1443.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1223.775 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 1738086.200 ops/s
[info]                  ·gc.alloc.rate:                   1439.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1226.907 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.603 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1752585.698 ops/s
[info]                  ·gc.alloc.rate:                   1451.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1217.943 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.991 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1762250.026 ops/s
[info]                  ·gc.alloc.rate:                                  1459.938 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.165 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1825.778 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1768708.048 ops/s
[info]                  ·gc.alloc.rate:                                  1465.456 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1304.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1212.745 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1752819.787 ±(99.9%) 49673.275 ops/s [Average]
[info]   (min, avg, max) = (1738086.200, 1752819.787, 1768708.048), stdev = 12899.992
[info]   CI (99.9%): [1703146.512, 1802493.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1452.135 ±(99.9%) 41.363 MB/sec [Average]
[info]   (min, avg, max) = (1439.935, 1452.135, 1465.456), stdev = 10.742
[info]   CI (99.9%): [1410.771, 1493.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.000, 1304.000, 1304.000), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.165), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.253 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.147), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1494.508 ±(99.9%) 1183.136 MB/sec [Average]
[info]   (min, avg, max) = (1354.708, 1494.508, 2044.112), stdev = 307.257
[info]   CI (99.9%): [311.373, 2677.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1341.430 ±(99.9%) 1042.807 B/op [Average]
[info]   (min, avg, max) = (1212.745, 1341.430, 1825.778), stdev = 270.814
[info]   CI (99.9%): [298.623, 2384.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.719 ±(99.9%) 4.993 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.719, 2.991), stdev = 1.297
[info]   CI (99.9%): [≈ 0, 5.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 7.000), stdev = 2.302
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54.59% complete, ETA 00:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1784282.737 ops/s
[info] # Warmup Iteration   2: 1964683.537 ops/s
[info] # Warmup Iteration   3: 1965342.234 ops/s
[info] # Warmup Iteration   4: 1965652.964 ops/s
[info] # Warmup Iteration   5: 1964144.423 ops/s
[info] Iteration   1: 1965401.808 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1966005.269 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1965631.939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1967314.054 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1967109.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1966292.523 ±(99.9%) 3347.687 ops/s [Average]
[info]   (min, avg, max) = (1965401.808, 1966292.523, 1967314.054), stdev = 869.384
[info]   CI (99.9%): [1962944.836, 1969640.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.82% complete, ETA 00:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68520.418 ops/s
[info] # Warmup Iteration   2: 114239.331 ops/s
[info] # Warmup Iteration   3: 115725.365 ops/s
[info] # Warmup Iteration   4: 115011.888 ops/s
[info] # Warmup Iteration   5: 114966.173 ops/s
[info] Iteration   1: 114633.292 ops/s
[info]                  ·gc.alloc.rate:                   1291.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18591.481 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 114423.418 ops/s
[info]                  ·gc.alloc.rate:            1288.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       17728.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18618.058 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 115090.716 ops/s
[info]                  ·gc.alloc.rate:                   1296.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18518.482 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.109 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 113549.291 ops/s
[info]                  ·gc.alloc.rate:                   1279.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              17728.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18826.466 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 64.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 116161.572 ops/s
[info]                  ·gc.alloc.rate:                                  1308.436 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17728.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.614 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18465.739 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   114771.658 ±(99.9%) 3687.510 ops/s [Average]
[info]   (min, avg, max) = (113549.291, 114771.658, 116161.572), stdev = 957.635
[info]   CI (99.9%): [111084.148, 118459.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1292.723 ±(99.9%) 41.602 MB/sec [Average]
[info]   (min, avg, max) = (1279.059, 1292.723, 1308.436), stdev = 10.804
[info]   CI (99.9%): [1251.121, 1334.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17728.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17728.004, 17728.004, 17728.004), stdev = 0.001
[info]   CI (99.9%): [17728.003, 17728.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.123 ±(99.9%) 1.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.614), stdev = 0.275
[info]   CI (99.9%): [≈ 0, 1.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.541 ±(99.9%) 15.616 MB/sec [Average]
[info]   (min, avg, max) = (1353.313, 1356.541, 1362.885), stdev = 4.055
[info]   CI (99.9%): [1340.926, 1372.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   18604.045 ±(99.9%) 531.734 B/op [Average]
[info]   (min, avg, max) = (18465.739, 18604.045, 18826.466), stdev = 138.090
[info]   CI (99.9%): [18072.311, 19135.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.577 ±(99.9%) 104.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.577, 64.632), stdev = 27.248
[info]   CI (99.9%): [≈ 0, 121.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 10.000), stdev = 2.793
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.06% complete, ETA 00:50:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19776.069 ops/s
[info] # Warmup Iteration   2: 33082.946 ops/s
[info] # Warmup Iteration   3: 33193.849 ops/s
[info] # Warmup Iteration   4: 33655.366 ops/s
[info] # Warmup Iteration   5: 33759.602 ops/s
[info] Iteration   1: 33919.359 ops/s
[info]                  ·gc.alloc.rate:            1218.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31435.025 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 33757.661 ops/s
[info]                  ·gc.alloc.rate:            1212.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63171.719 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 33597.371 ops/s
[info]                  ·gc.alloc.rate:            1206.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       56528.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63468.741 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 33695.388 ops/s
[info]                  ·gc.alloc.rate:                   1210.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              56528.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        63254.948 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 217.799 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 33638.163 ops/s
[info]                  ·gc.alloc.rate:                                  1208.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56528.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.063 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.967 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63767.284 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   33721.588 ±(99.9%) 485.130 ops/s [Average]
[info]   (min, avg, max) = (33597.371, 33721.588, 33919.359), stdev = 125.987
[info]   CI (99.9%): [33236.459, 34206.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1211.094 ±(99.9%) 17.524 MB/sec [Average]
[info]   (min, avg, max) = (1206.627, 1211.094, 1218.268), stdev = 4.551
[info]   CI (99.9%): [1193.570, 1228.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56528.012 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (56528.012, 56528.012, 56528.013), stdev = 0.001
[info]   CI (99.9%): [56528.011, 56528.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.063), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.593 ±(99.9%) 5.109 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.593, 2.967), stdev = 1.327
[info]   CI (99.9%): [≈ 0, 5.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.808 ±(99.9%) 1169.646 MB/sec [Average]
[info]   (min, avg, max) = (677.475, 1220.808, 1362.803), stdev = 303.753
[info]   CI (99.9%): [51.162, 2390.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   57019.544 ±(99.9%) 55079.732 B/op [Average]
[info]   (min, avg, max) = (31435.025, 57019.544, 63767.284), stdev = 14304.032
[info]   CI (99.9%): [1939.811, 112099.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   43.560 ±(99.9%) 375.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.560, 217.799), stdev = 97.403
[info]   CI (99.9%): [≈ 0, 418.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 9.000), stdev = 3.033
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.29% complete, ETA 00:50:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 618862.418 ops/s
[info] # Warmup Iteration   2: 658705.849 ops/s
[info] # Warmup Iteration   3: 660622.586 ops/s
[info] # Warmup Iteration   4: 671954.836 ops/s
[info] # Warmup Iteration   5: 678932.248 ops/s
[info] Iteration   1: 683507.631 ops/s
[info]                  ·gc.alloc.rate:            1334.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3122.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 670267.256 ops/s
[info]                  ·gc.alloc.rate:            1308.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3184.694 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 676475.703 ops/s
[info]                  ·gc.alloc.rate:            1320.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3155.514 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 678361.511 ops/s
[info]                  ·gc.alloc.rate:                   1323.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1359.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3154.488 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.728 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 679430.066 ops/s
[info]                  ·gc.alloc.rate:                                  1326.050 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3072.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3157.274 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   677608.433 ±(99.9%) 18652.978 ops/s [Average]
[info]   (min, avg, max) = (670267.256, 677608.433, 683507.631), stdev = 4844.119
[info]   CI (99.9%): [658955.455, 696261.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1322.536 ±(99.9%) 36.509 MB/sec [Average]
[info]   (min, avg, max) = (1308.249, 1322.536, 1334.196), stdev = 9.481
[info]   CI (99.9%): [1286.027, 1359.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3072.001, 3072.001, 3072.001), stdev = 0.001
[info]   CI (99.9%): [3072.001, 3072.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.044 ±(99.9%) 0.381 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.221), stdev = 0.099
[info]   CI (99.9%): [≈ 0, 0.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1358.210 ±(99.9%) 11.381 MB/sec [Average]
[info]   (min, avg, max) = (1356.145, 1358.210, 1362.859), stdev = 2.956
[info]   CI (99.9%): [1346.828, 1369.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3154.983 ±(99.9%) 84.253 B/op [Average]
[info]   (min, avg, max) = (3122.944, 3154.983, 3184.694), stdev = 21.880
[info]   CI (99.9%): [3070.729, 3239.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.546 ±(99.9%) 13.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.546, 7.728), stdev = 3.456
[info]   CI (99.9%): [≈ 0, 14.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.53% complete, ETA 00:50:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9897.461 ops/s
[info] # Warmup Iteration   2: 24097.709 ops/s
[info] # Warmup Iteration   3: 24302.428 ops/s
[info] # Warmup Iteration   4: 24331.181 ops/s
[info] # Warmup Iteration   5: 24282.545 ops/s
[info] Iteration   1: 23781.591 ops/s
[info]                  ·gc.alloc.rate:            1731.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       114560.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2031.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134411.344 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 24366.156 ops/s
[info]                  ·gc.alloc.rate:                   1773.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              114560.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        87729.123 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 301.179 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 24414.132 ops/s
[info]                  ·gc.alloc.rate:                                  1776.893 MB/sec
[info]                  ·gc.alloc.rate.norm:                             114560.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       131780.497 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 24423.731 ops/s
[info]                  ·gc.alloc.rate:            1778.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       114560.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87821.298 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 24397.797 ops/s
[info]                  ·gc.alloc.rate:            1775.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       114560.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 131877.704 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   24276.682 ±(99.9%) 1069.041 ops/s [Average]
[info]   (min, avg, max) = (23781.591, 24276.682, 24423.731), stdev = 277.626
[info]   CI (99.9%): [23207.641, 25345.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1767.030 ±(99.9%) 77.558 MB/sec [Average]
[info]   (min, avg, max) = (1731.140, 1767.030, 1778.172), stdev = 20.142
[info]   CI (99.9%): [1689.472, 1844.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114560.017 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (114560.017, 114560.017, 114560.017), stdev = 0.001
[info]   CI (99.9%): [114560.016, 114560.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.653 ±(99.9%) 5.621 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.653, 3.264), stdev = 1.460
[info]   CI (99.9%): [≈ 0, 6.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1768.054 ±(99.9%) 1432.477 MB/sec [Average]
[info]   (min, avg, max) = (1358.026, 1768.054, 2043.993), stdev = 372.010
[info]   CI (99.9%): [335.577, 3200.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   114723.993 ±(99.9%) 94815.879 B/op [Average]
[info]   (min, avg, max) = (87729.123, 114723.993, 134411.344), stdev = 24623.383
[info]   CI (99.9%): [19908.114, 209539.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   60.236 ±(99.9%) 518.648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 60.236, 301.179), stdev = 134.691
[info]   CI (99.9%): [≈ 0, 578.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 15.000), stdev = 4.930
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.76% complete, ETA 00:50:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232336.049 ops/s
[info] # Warmup Iteration   2: 348671.821 ops/s
[info] # Warmup Iteration   3: 348963.477 ops/s
[info] # Warmup Iteration   4: 357223.107 ops/s
[info] # Warmup Iteration   5: 358949.217 ops/s
[info] Iteration   1: 357783.550 ops/s
[info]                  ·gc.alloc.rate:            994.597 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5960.182 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 359185.948 ops/s
[info]                  ·gc.alloc.rate:            998.500 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2968.444 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 357814.604 ops/s
[info]                  ·gc.alloc.rate:            994.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5959.666 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 358720.296 ops/s
[info]                  ·gc.alloc.rate:            997.292 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2972.209 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 357612.895 ops/s
[info]                  ·gc.alloc.rate:            994.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       4376.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5963.099 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   358223.458 ±(99.9%) 2658.552 ops/s [Average]
[info]   (min, avg, max) = (357612.895, 358223.458, 359185.948), stdev = 690.417
[info]   CI (99.9%): [355564.907, 360882.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   995.849 ±(99.9%) 7.420 MB/sec [Average]
[info]   (min, avg, max) = (994.169, 995.849, 998.500), stdev = 1.927
[info]   CI (99.9%): [988.429, 1003.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4376.001, 4376.001, 4376.001), stdev = 0.001
[info]   CI (99.9%): [4376.001, 4376.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.750 ±(99.9%) 1428.561 MB/sec [Average]
[info]   (min, avg, max) = (677.329, 1083.750, 1354.736), stdev = 370.993
[info]   CI (99.9%): [≈ 0, 2512.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4764.720 ±(99.9%) 6307.550 B/op [Average]
[info]   (min, avg, max) = (2968.444, 4764.720, 5963.099), stdev = 1638.051
[info]   CI (99.9%): [≈ 0, 11072.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.00% complete, ETA 00:49:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2035988.783 ops/s
[info] # Warmup Iteration   2: 2194487.489 ops/s
[info] # Warmup Iteration   3: 2257683.411 ops/s
[info] # Warmup Iteration   4: 2248877.779 ops/s
[info] # Warmup Iteration   5: 2234104.729 ops/s
[info] Iteration   1: 2236451.001 ops/s
[info]                  ·gc.alloc.rate:                   1307.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        953.970 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.469 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2255583.220 ops/s
[info]                  ·gc.alloc.rate:                   1318.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        945.876 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.465 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2241875.892 ops/s
[info]                  ·gc.alloc.rate:                   1310.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        951.193 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.468 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 2200752.239 ops/s
[info]                  ·gc.alloc.rate:                                  1286.318 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.427 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       972.290 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.382 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 2200032.607 ops/s
[info]                  ·gc.alloc.rate:                                  1285.942 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.110 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.730 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       974.937 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   2226938.992 ±(99.9%) 97105.359 ops/s [Average]
[info]   (min, avg, max) = (2200032.607, 2226938.992, 2255583.220), stdev = 25217.953
[info]   CI (99.9%): [2129833.633, 2324044.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1301.596 ±(99.9%) 56.650 MB/sec [Average]
[info]   (min, avg, max) = (1285.942, 1301.596, 1318.384), stdev = 14.712
[info]   CI (99.9%): [1244.947, 1358.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.110), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1357.529 ±(99.9%) 13.303 MB/sec [Average]
[info]   (min, avg, max) = (1354.732, 1357.529, 1362.730), stdev = 3.455
[info]   CI (99.9%): [1344.227, 1370.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   959.653 ±(99.9%) 50.462 B/op [Average]
[info]   (min, avg, max) = (945.876, 959.653, 974.937), stdev = 13.105
[info]   CI (99.9%): [909.191, 1010.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 5.000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.330), stdev = 1.298
[info]   CI (99.9%): [≈ 0, 6.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.757 ±(99.9%) 3.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.757, 2.382), stdev = 0.931
[info]   CI (99.9%): [≈ 0, 4.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 8.000), stdev = 2.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56.24% complete, ETA 00:49:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2070321.120 ops/s
[info] # Warmup Iteration   2: 2267885.066 ops/s
[info] # Warmup Iteration   3: 2266000.774 ops/s
[info] # Warmup Iteration   4: 2181034.164 ops/s
[info] # Warmup Iteration   5: 2148120.249 ops/s
[info] Iteration   1: 2267211.855 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2266346.913 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2252632.375 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2265521.662 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2267730.117 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   2263888.584 ±(99.9%) 24445.833 ops/s [Average]
[info]   (min, avg, max) = (2252632.375, 2263888.584, 2267730.117), stdev = 6348.505
[info]   CI (99.9%): [2239442.751, 2288334.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:49:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123984.357 ops/s
[info] # Warmup Iteration   2: 221037.440 ops/s
[info] # Warmup Iteration   3: 221940.268 ops/s
[info] # Warmup Iteration   4: 222107.729 ops/s
[info] # Warmup Iteration   5: 218659.214 ops/s
[info] Iteration   1: 221883.234 ops/s
[info]                  ·gc.alloc.rate:                   1434.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9601.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 221342.981 ops/s
[info]                  ·gc.alloc.rate:            1430.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       10176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9634.086 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 225177.011 ops/s
[info]                  ·gc.alloc.rate:                                  1455.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.400 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14227.954 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                32.590 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 225286.436 ops/s
[info]                  ·gc.alloc.rate:                                  1456.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9521.594 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 227317.656 ops/s
[info]                  ·gc.alloc.rate:                                  1469.581 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.766 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9436.368 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   224201.464 ±(99.9%) 9700.380 ops/s [Average]
[info]   (min, avg, max) = (221342.981, 224201.464, 227317.656), stdev = 2519.158
[info]   CI (99.9%): [214501.084, 233901.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1449.444 ±(99.9%) 62.919 MB/sec [Average]
[info]   (min, avg, max) = (1430.891, 1449.444, 1469.581), stdev = 16.340
[info]   CI (99.9%): [1386.525, 1512.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10176.002, 10176.002, 10176.002), stdev = 0.001
[info]   CI (99.9%): [10176.002, 10176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.057), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.150 ±(99.9%) 0.782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.150, 0.400), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 0.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.846 ±(99.9%) 1166.330 MB/sec [Average]
[info]   (min, avg, max) = (1353.344, 1493.846, 2035.619), stdev = 302.892
[info]   CI (99.9%): [327.516, 2660.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10484.230 ±(99.9%) 8064.026 B/op [Average]
[info]   (min, avg, max) = (9436.368, 10484.230, 14227.954), stdev = 2094.202
[info]   CI (99.9%): [2420.204, 18548.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.463 ±(99.9%) 54.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.463, 32.590), stdev = 14.195
[info]   CI (99.9%): [≈ 0, 62.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 11.000), stdev = 4.382
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.71% complete, ETA 00:48:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49578.291 ops/s
[info] # Warmup Iteration   2: 78874.493 ops/s
[info] # Warmup Iteration   3: 78604.328 ops/s
[info] # Warmup Iteration   4: 78913.938 ops/s
[info] # Warmup Iteration   5: 79655.633 ops/s
[info] Iteration   1: 79149.621 ops/s
[info]                  ·gc.alloc.rate:            1487.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       29576.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26941.244 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 79710.857 ops/s
[info]                  ·gc.alloc.rate:            1497.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       29576.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26751.334 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 78833.308 ops/s
[info]                  ·gc.alloc.rate:                   1481.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              29576.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.912 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27048.872 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 79.790 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 79801.697 ops/s
[info]                  ·gc.alloc.rate:                                  1500.130 MB/sec
[info]                  ·gc.alloc.rate.norm:                             29576.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.200 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.935 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40316.709 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 79867.726 ops/s
[info]                  ·gc.alloc.rate:            1500.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       29576.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26856.609 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   79472.642 ±(99.9%) 1758.490 ops/s [Average]
[info]   (min, avg, max) = (78833.308, 79472.642, 79867.726), stdev = 456.674
[info]   CI (99.9%): [77714.152, 81231.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1493.584 ±(99.9%) 33.084 MB/sec [Average]
[info]   (min, avg, max) = (1481.500, 1493.584, 1500.910), stdev = 8.592
[info]   CI (99.9%): [1460.500, 1526.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   29576.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (29576.005, 29576.005, 29576.006), stdev = 0.001
[info]   CI (99.9%): [29576.004, 29576.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.344 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.200), stdev = 0.089
[info]   CI (99.9%): [≈ 0, 0.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.787 ±(99.9%) 6.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.935), stdev = 1.760
[info]   CI (99.9%): [≈ 0, 7.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.509 ±(99.9%) 1184.857 MB/sec [Average]
[info]   (min, avg, max) = (1354.703, 1494.509, 2044.911), stdev = 307.704
[info]   CI (99.9%): [309.651, 2679.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   29582.954 ±(99.9%) 23109.056 B/op [Average]
[info]   (min, avg, max) = (26751.334, 29582.954, 40316.709), stdev = 6001.349
[info]   CI (99.9%): [6473.897, 52692.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.958 ±(99.9%) 137.404 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.958, 79.790), stdev = 35.683
[info]   CI (99.9%): [≈ 0, 153.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 8.000), stdev = 2.074
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.94% complete, ETA 00:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41101.870 ops/s
[info] # Warmup Iteration   2: 78201.873 ops/s
[info] # Warmup Iteration   3: 77180.767 ops/s
[info] # Warmup Iteration   4: 78247.550 ops/s
[info] # Warmup Iteration   5: 78469.781 ops/s
[info] Iteration   1: 78935.936 ops/s
[info]                  ·gc.alloc.rate:            909.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13494.195 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 78886.560 ops/s
[info]                  ·gc.alloc.rate:            909.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13502.576 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 78608.039 ops/s
[info]                  ·gc.alloc.rate:                   906.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27086.613 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.337 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 79226.171 ops/s
[info]                  ·gc.alloc.rate:            913.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13444.809 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 78355.204 ops/s
[info]                  ·gc.alloc.rate:            903.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       18144.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13593.717 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   78802.382 ±(99.9%) 1280.385 ops/s [Average]
[info]   (min, avg, max) = (78355.204, 78802.382, 79226.171), stdev = 332.512
[info]   CI (99.9%): [77521.997, 80082.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   908.343 ±(99.9%) 14.780 MB/sec [Average]
[info]   (min, avg, max) = (903.253, 908.343, 913.318), stdev = 3.838
[info]   CI (99.9%): [893.563, 923.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18144.005, 18144.005, 18144.006), stdev = 0.001
[info]   CI (99.9%): [18144.005, 18144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   811.891 ±(99.9%) 1163.971 MB/sec [Average]
[info]   (min, avg, max) = (676.655, 811.891, 1352.625), stdev = 302.279
[info]   CI (99.9%): [≈ 0, 1975.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16224.382 ±(99.9%) 23382.687 B/op [Average]
[info]   (min, avg, max) = (13444.809, 16224.382, 27086.613), stdev = 6072.410
[info]   CI (99.9%): [≈ 0, 39607.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.667 ±(99.9%) 22.966 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.667, 13.337), stdev = 5.964
[info]   CI (99.9%): [≈ 0, 25.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.18% complete, ETA 00:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83232.172 ops/s
[info] # Warmup Iteration   2: 101819.760 ops/s
[info] # Warmup Iteration   3: 102389.545 ops/s
[info] # Warmup Iteration   4: 101463.044 ops/s
[info] # Warmup Iteration   5: 102357.585 ops/s
[info] Iteration   1: 102325.373 ops/s
[info]                  ·gc.alloc.rate:            1077.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20839.964 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 102013.690 ops/s
[info]                  ·gc.alloc.rate:            1074.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10451.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 102182.216 ops/s
[info]                  ·gc.alloc.rate:            1076.048 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20869.124 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 102084.420 ops/s
[info]                  ·gc.alloc.rate:            1075.025 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20889.155 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 102753.389 ops/s
[info]                  ·gc.alloc.rate:            1082.382 MB/sec
[info]                  ·gc.alloc.rate.norm:       16576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10376.486 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   102271.818 ±(99.9%) 1130.142 ops/s [Average]
[info]   (min, avg, max) = (102013.690, 102271.818, 102753.389), stdev = 293.494
[info]   CI (99.9%): [101141.676, 103401.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1077.086 ±(99.9%) 12.435 MB/sec [Average]
[info]   (min, avg, max) = (1074.266, 1077.086, 1082.382), stdev = 3.229
[info]   CI (99.9%): [1064.651, 1089.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.004, 16576.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.871 ±(99.9%) 1428.579 MB/sec [Average]
[info]   (min, avg, max) = (677.362, 1083.871, 1354.935), stdev = 370.997
[info]   CI (99.9%): [≈ 0, 2512.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   16685.294 ±(99.9%) 22044.422 B/op [Average]
[info]   (min, avg, max) = (10376.486, 16685.294, 20889.155), stdev = 5724.866
[info]   CI (99.9%): [≈ 0, 38729.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.41% complete, ETA 00:48:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22159.831 ops/s
[info] # Warmup Iteration   2: 42807.691 ops/s
[info] # Warmup Iteration   3: 43722.215 ops/s
[info] # Warmup Iteration   4: 43539.043 ops/s
[info] # Warmup Iteration   5: 43343.233 ops/s
[info] Iteration   1: 43211.805 ops/s
[info]                  ·gc.alloc.rate:                                  2073.024 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.848 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74118.456 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                169.830 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 43341.783 ops/s
[info]                  ·gc.alloc.rate:                                  2079.212 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.947 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98984.336 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 43448.364 ops/s
[info]                  ·gc.alloc.rate:                                  2084.258 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.266 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74052.046 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 43495.135 ops/s
[info]                  ·gc.alloc.rate:                                  2086.592 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73973.743 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 43511.994 ops/s
[info]                  ·gc.alloc.rate:                                  2087.294 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75512.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73944.847 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   43401.816 ±(99.9%) 482.186 ops/s [Average]
[info]   (min, avg, max) = (43211.805, 43401.816, 43511.994), stdev = 125.222
[info]   CI (99.9%): [42919.630, 43884.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2082.076 ±(99.9%) 22.985 MB/sec [Average]
[info]   (min, avg, max) = (2073.024, 2082.076, 2087.294), stdev = 5.969
[info]   CI (99.9%): [2059.091, 2105.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75512.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (75512.009, 75512.010, 75512.011), stdev = 0.001
[info]   CI (99.9%): [75512.008, 75512.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.136 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.028, 0.078), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.034 ±(99.9%) 4.957 B/op [Average]
[info]   (min, avg, max) = (0.031, 1.034, 2.848), stdev = 1.287
[info]   CI (99.9%): [≈ 0, 5.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2178.461 ±(99.9%) 1177.683 MB/sec [Average]
[info]   (min, avg, max) = (2034.767, 2178.461, 2725.519), stdev = 305.841
[info]   CI (99.9%): [1000.778, 3356.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79014.686 ±(99.9%) 42986.975 B/op [Average]
[info]   (min, avg, max) = (73944.847, 79014.686, 98984.336), stdev = 11163.581
[info]   CI (99.9%): [36027.711, 122001.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   33.966 ±(99.9%) 292.457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33.966, 169.830), stdev = 75.950
[info]   CI (99.9%): [≈ 0, 326.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 12.000), stdev = 3.464
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57.65% complete, ETA 00:47:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99704.703 ops/s
[info] # Warmup Iteration   2: 125837.012 ops/s
[info] # Warmup Iteration   3: 128208.630 ops/s
[info] # Warmup Iteration   4: 131851.909 ops/s
[info] # Warmup Iteration   5: 132084.235 ops/s
[info] Iteration   1: 131992.076 ops/s
[info]                  ·gc.alloc.rate:      585.604 MB/sec
[info]                  ·gc.alloc.rate.norm: 6984.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 130285.890 ops/s
[info]                  ·gc.alloc.rate:            578.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8184.078 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 130545.477 ops/s
[info]                  ·gc.alloc.rate:            579.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8159.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 130478.646 ops/s
[info]                  ·gc.alloc.rate:            579.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8163.939 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 128955.001 ops/s
[info]                  ·gc.alloc.rate:            572.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       6984.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8260.345 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   130451.418 ±(99.9%) 4151.683 ops/s [Average]
[info]   (min, avg, max) = (128955.001, 130451.418, 131992.076), stdev = 1078.179
[info]   CI (99.9%): [126299.735, 134603.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   578.888 ±(99.9%) 18.335 MB/sec [Average]
[info]   (min, avg, max) = (572.179, 578.888, 585.604), stdev = 4.762
[info]   CI (99.9%): [560.553, 597.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6984.003, 6984.003, 6984.003), stdev = 0.001
[info]   CI (99.9%): [6984.003, 6984.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   541.627 ±(99.9%) 1165.894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.627, 677.637), stdev = 302.779
[info]   CI (99.9%): [≈ 0, 1707.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6553.635 ±(99.9%) 14108.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6553.635, 8260.345), stdev = 3663.817
[info]   CI (99.9%): [≈ 0, 20661.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 6.000), stdev = 2.191
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.88% complete, ETA 00:47:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109813.262 ops/s
[info] # Warmup Iteration   2: 162001.579 ops/s
[info] # Warmup Iteration   3: 161661.961 ops/s
[info] # Warmup Iteration   4: 147410.276 ops/s
[info] # Warmup Iteration   5: 161995.243 ops/s
[info] Iteration   1: 162256.688 ops/s
[info]                  ·gc.alloc.rate:      240.834 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 158346.850 ops/s
[info]                  ·gc.alloc.rate:            234.989 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6726.819 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 162736.260 ops/s
[info]                  ·gc.alloc.rate:      241.530 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 160823.690 ops/s
[info]                  ·gc.alloc.rate:            238.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6623.066 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 156107.526 ops/s
[info]                  ·gc.alloc.rate:      231.692 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   160054.203 ±(99.9%) 10741.812 ops/s [Average]
[info]   (min, avg, max) = (156107.526, 160054.203, 162736.260), stdev = 2789.614
[info]   CI (99.9%): [149312.391, 170796.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   237.546 ±(99.9%) 15.968 MB/sec [Average]
[info]   (min, avg, max) = (231.692, 237.546, 241.530), stdev = 4.147
[info]   CI (99.9%): [221.578, 253.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.003, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   270.682 ±(99.9%) 1427.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.682, 676.729), stdev = 370.646
[info]   CI (99.9%): [≈ 0, 1697.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2669.977 ±(99.9%) 14078.726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2669.977, 6726.819), stdev = 3656.200
[info]   CI (99.9%): [≈ 0, 16748.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.12% complete, ETA 00:47:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 669224.895 ops/s
[info] # Warmup Iteration   2: 742766.864 ops/s
[info] # Warmup Iteration   3: 748810.053 ops/s
[info] # Warmup Iteration   4: 736927.293 ops/s
[info] # Warmup Iteration   5: 743133.496 ops/s
[info] Iteration   1: 727436.758 ops/s
[info]                  ·gc.alloc.rate:            901.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.575 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2931.568 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 741416.755 ops/s
[info]                  ·gc.alloc.rate:            919.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1438.162 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 752868.302 ops/s
[info]                  ·gc.alloc.rate:            933.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1416.251 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 747862.576 ops/s
[info]                  ·gc.alloc.rate:            927.825 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2851.426 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 735295.555 ops/s
[info]                  ·gc.alloc.rate:            912.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.621 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1450.078 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   740975.989 ±(99.9%) 38728.394 ops/s [Average]
[info]   (min, avg, max) = (727436.758, 740975.989, 752868.302), stdev = 10057.641
[info]   CI (99.9%): [702247.595, 779704.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   919.063 ±(99.9%) 48.540 MB/sec [Average]
[info]   (min, avg, max) = (901.951, 919.063, 933.838), stdev = 12.606
[info]   CI (99.9%): [870.523, 967.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.001, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.510 ±(99.9%) 1428.721 MB/sec [Average]
[info]   (min, avg, max) = (677.479, 948.510, 1355.340), stdev = 371.034
[info]   CI (99.9%): [≈ 0, 2377.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2017.497 ±(99.9%) 3074.524 B/op [Average]
[info]   (min, avg, max) = (1416.251, 2017.497, 2931.568), stdev = 798.444
[info]   CI (99.9%): [≈ 0, 5092.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58.35% complete, ETA 00:47:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 745333.567 ops/s
[info] # Warmup Iteration   2: 804810.959 ops/s
[info] # Warmup Iteration   3: 796248.661 ops/s
[info] # Warmup Iteration   4: 796821.682 ops/s
[info] # Warmup Iteration   5: 789624.992 ops/s
[info] Iteration   1: 795676.349 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 787430.826 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 791668.440 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 797766.440 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 798201.089 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   794148.629 ±(99.9%) 17553.735 ops/s [Average]
[info]   (min, avg, max) = (787430.826, 794148.629, 798201.089), stdev = 4558.649
[info]   CI (99.9%): [776594.894, 811702.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.59% complete, ETA 00:46:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155361.094 ops/s
[info] # Warmup Iteration   2: 195673.307 ops/s
[info] # Warmup Iteration   3: 202971.075 ops/s
[info] # Warmup Iteration   4: 202818.728 ops/s
[info] # Warmup Iteration   5: 201698.761 ops/s
[info] Iteration   1: 201194.098 ops/s
[info]                  ·gc.alloc.rate:            655.475 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5294.496 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 201288.861 ops/s
[info]                  ·gc.alloc.rate:            656.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5291.893 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 200737.140 ops/s
[info]                  ·gc.alloc.rate:            653.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5306.548 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 202973.763 ops/s
[info]                  ·gc.alloc.rate:            661.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5247.864 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 202954.834 ops/s
[info]                  ·gc.alloc.rate:            661.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.891 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5248.201 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   201829.739 ±(99.9%) 4068.306 ops/s [Average]
[info]   (min, avg, max) = (200737.140, 201829.739, 202973.763), stdev = 1056.526
[info]   CI (99.9%): [197761.434, 205898.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   657.621 ±(99.9%) 13.284 MB/sec [Average]
[info]   (min, avg, max) = (653.973, 657.621, 661.388), stdev = 3.450
[info]   CI (99.9%): [644.337, 670.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   676.816 ±(99.9%) 0.507 MB/sec [Average]
[info]   (min, avg, max) = (676.683, 676.816, 677.008), stdev = 0.132
[info]   CI (99.9%): [676.309, 677.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5277.800 ±(99.9%) 106.783 B/op [Average]
[info]   (min, avg, max) = (5247.864, 5277.800, 5306.548), stdev = 27.731
[info]   CI (99.9%): [5171.017, 5384.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.82% complete, ETA 00:46:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87955.800 ops/s
[info] # Warmup Iteration   2: 126719.221 ops/s
[info] # Warmup Iteration   3: 126053.489 ops/s
[info] # Warmup Iteration   4: 127963.633 ops/s
[info] # Warmup Iteration   5: 128021.081 ops/s
[info] Iteration   1: 123059.830 ops/s
[info]                  ·gc.alloc.rate:                   1515.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26009.510 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 126968.904 ops/s
[info]                  ·gc.alloc.rate:            1564.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16811.566 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 127477.199 ops/s
[info]                  ·gc.alloc.rate:                                  1569.697 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.046 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.563 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16785.703 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                41.121 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 126089.406 ops/s
[info]                  ·gc.alloc.rate:                                  1553.165 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.299 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25518.240 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 127651.388 ops/s
[info]                  ·gc.alloc.rate:                                  1571.962 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16803.629 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   126249.345 ±(99.9%) 7252.537 ops/s [Average]
[info]   (min, avg, max) = (123059.830, 126249.345, 127651.388), stdev = 1883.461
[info]   CI (99.9%): [118996.808, 133501.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1554.903 ±(99.9%) 89.384 MB/sec [Average]
[info]   (min, avg, max) = (1515.463, 1554.903, 1571.962), stdev = 23.213
[info]   CI (99.9%): [1465.519, 1644.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.003, 19384.003), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.375 ±(99.9%) 2.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.375, 1.299), stdev = 0.571
[info]   CI (99.9%): [≈ 0, 2.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.353 ±(99.9%) 1433.273 MB/sec [Average]
[info]   (min, avg, max) = (1356.639, 1631.353, 2044.678), stdev = 372.216
[info]   CI (99.9%): [198.080, 3064.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   20385.730 ±(99.9%) 18916.801 B/op [Average]
[info]   (min, avg, max) = (16785.703, 20385.730, 26009.510), stdev = 4912.633
[info]   CI (99.9%): [1468.929, 39302.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   9.928 ±(99.9%) 68.632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.928, 41.121), stdev = 17.823
[info]   CI (99.9%): [≈ 0, 78.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.06% complete, ETA 00:46:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102878.333 ops/s
[info] # Warmup Iteration   2: 155042.062 ops/s
[info] # Warmup Iteration   3: 164082.316 ops/s
[info] # Warmup Iteration   4: 164997.307 ops/s
[info] # Warmup Iteration   5: 164942.006 ops/s
[info] Iteration   1: 163443.936 ops/s
[info]                  ·gc.alloc.rate:            872.368 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13047.623 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 164729.566 ops/s
[info]                  ·gc.alloc.rate:            879.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6472.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 164708.707 ops/s
[info]                  ·gc.alloc.rate:            879.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.431 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6473.713 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 164103.146 ops/s
[info]                  ·gc.alloc.rate:                   875.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12988.685 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.389 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 164647.771 ops/s
[info]                  ·gc.alloc.rate:            878.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6475.954 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   164326.625 ±(99.9%) 2144.437 ops/s [Average]
[info]   (min, avg, max) = (163443.936, 164326.625, 164729.566), stdev = 556.903
[info]   CI (99.9%): [162182.188, 166471.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   877.023 ±(99.9%) 11.270 MB/sec [Average]
[info]   (min, avg, max) = (872.368, 877.023, 879.161), stdev = 2.927
[info]   CI (99.9%): [865.752, 888.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.344 ±(99.9%) 1428.387 MB/sec [Average]
[info]   (min, avg, max) = (677.429, 948.344, 1355.039), stdev = 370.948
[info]   CI (99.9%): [≈ 0, 2376.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   9091.773 ±(99.9%) 13802.018 B/op [Average]
[info]   (min, avg, max) = (6472.888, 9091.773, 13047.623), stdev = 3584.340
[info]   CI (99.9%): [≈ 0, 22893.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.278 ±(99.9%) 11.002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.278, 6.389), stdev = 2.857
[info]   CI (99.9%): [≈ 0, 12.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.29% complete, ETA 00:46:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 397455.774 ops/s
[info] # Warmup Iteration   2: 431855.536 ops/s
[info] # Warmup Iteration   3: 431151.575 ops/s
[info] # Warmup Iteration   4: 435358.833 ops/s
[info] # Warmup Iteration   5: 433143.466 ops/s
[info] Iteration   1: 435215.527 ops/s
[info]                  ·gc.alloc.rate:            844.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2452.347 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 436516.672 ops/s
[info]                  ·gc.alloc.rate:            847.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2445.022 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 435740.826 ops/s
[info]                  ·gc.alloc.rate:            846.091 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2449.387 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 435047.013 ops/s
[info]                  ·gc.alloc.rate:            844.625 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4906.521 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 435126.766 ops/s
[info]                  ·gc.alloc.rate:            844.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2452.815 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   435529.361 ±(99.9%) 2368.017 ops/s [Average]
[info]   (min, avg, max) = (435047.013, 435529.361, 436516.672), stdev = 614.966
[info]   CI (99.9%): [433161.344, 437897.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   845.579 ±(99.9%) 4.616 MB/sec [Average]
[info]   (min, avg, max) = (844.625, 845.579, 847.458), stdev = 1.199
[info]   CI (99.9%): [840.963, 850.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.665 ±(99.9%) 1167.580 MB/sec [Average]
[info]   (min, avg, max) = (678.028, 813.665, 1356.076), stdev = 303.217
[info]   CI (99.9%): [≈ 0, 1981.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2941.219 ±(99.9%) 4230.478 B/op [Average]
[info]   (min, avg, max) = (2445.022, 2941.219, 4906.521), stdev = 1098.642
[info]   CI (99.9%): [≈ 0, 7171.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59.53% complete, ETA 00:45:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28296.013 ops/s
[info] # Warmup Iteration   2: 61857.814 ops/s
[info] # Warmup Iteration   3: 62366.326 ops/s
[info] # Warmup Iteration   4: 62454.486 ops/s
[info] # Warmup Iteration   5: 63225.745 ops/s
[info] Iteration   1: 64240.543 ops/s
[info]                  ·gc.alloc.rate:                                  2711.773 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.940 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66780.380 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 64109.364 ops/s
[info]                  ·gc.alloc.rate:                                  2706.836 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66917.857 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 63460.191 ops/s
[info]                  ·gc.alloc.rate:                                  2678.962 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67602.102 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   4: 64121.641 ops/s
[info]                  ·gc.alloc.rate:                                  2707.279 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.869 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66904.293 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 64332.112 ops/s
[info]                  ·gc.alloc.rate:                                  2715.814 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66448.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66685.933 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   64052.770 ±(99.9%) 1323.281 ops/s [Average]
[info]   (min, avg, max) = (63460.191, 64052.770, 64332.112), stdev = 343.652
[info]   CI (99.9%): [62729.489, 65376.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2704.133 ±(99.9%) 55.988 MB/sec [Average]
[info]   (min, avg, max) = (2678.962, 2704.133, 2715.814), stdev = 14.540
[info]   CI (99.9%): [2648.145, 2760.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66448.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66448.006, 66448.006, 66448.007), stdev = 0.001
[info]   CI (99.9%): [66448.006, 66448.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.009, 0.038), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.215 ±(99.9%) 1.562 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.215, 0.940), stdev = 0.406
[info]   CI (99.9%): [≈ 0, 1.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2725.643 ±(99.9%) 1.036 MB/sec [Average]
[info]   (min, avg, max) = (2725.337, 2725.643, 2725.976), stdev = 0.269
[info]   CI (99.9%): [2724.607, 2726.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66978.113 ±(99.9%) 1392.248 B/op [Average]
[info]   (min, avg, max) = (66685.933, 66978.113, 67602.102), stdev = 361.562
[info]   CI (99.9%): [65585.865, 68370.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 12.000), stdev = 3.130
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.76% complete, ETA 00:45:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123795.593 ops/s
[info] # Warmup Iteration   2: 136856.966 ops/s
[info] # Warmup Iteration   3: 138042.925 ops/s
[info] # Warmup Iteration   4: 139851.687 ops/s
[info] # Warmup Iteration   5: 139200.984 ops/s
[info] Iteration   1: 139557.774 ops/s
[info]                  ·gc.alloc.rate:            478.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7647.533 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 140196.788 ops/s
[info]                  ·gc.alloc.rate:      480.240 MB/sec
[info]                  ·gc.alloc.rate.norm: 5392.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 139594.613 ops/s
[info]                  ·gc.alloc.rate:            478.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7645.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 139548.776 ops/s
[info]                  ·gc.alloc.rate:            478.015 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7648.027 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 139722.380 ops/s
[info]                  ·gc.alloc.rate:            478.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7638.559 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   139724.066 ±(99.9%) 1052.090 ops/s [Average]
[info]   (min, avg, max) = (139548.776, 139724.066, 140196.788), stdev = 273.224
[info]   CI (99.9%): [138671.976, 140776.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   478.615 ±(99.9%) 3.629 MB/sec [Average]
[info]   (min, avg, max) = (478.015, 478.615, 480.240), stdev = 0.942
[info]   CI (99.9%): [474.986, 482.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.003, 5392.003, 5392.003), stdev = 0.001
[info]   CI (99.9%): [5392.003, 5392.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.412 ±(99.9%) 1167.582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.412, 678.053), stdev = 303.217
[info]   CI (99.9%): [≈ 0, 1709.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   6115.925 ±(99.9%) 13164.998 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6115.925, 7648.027), stdev = 3418.908
[info]   CI (99.9%): [≈ 0, 19280.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.00% complete, ETA 00:45:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192742.660 ops/s
[info] # Warmup Iteration   2: 290901.066 ops/s
[info] # Warmup Iteration   3: 286220.823 ops/s
[info] # Warmup Iteration   4: 289918.649 ops/s
[info] # Warmup Iteration   5: 290110.409 ops/s
[info] Iteration   1: 289954.390 ops/s
[info]                  ·gc.alloc.rate:            285.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3677.070 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 289936.681 ops/s
[info]                  ·gc.alloc.rate:      285.993 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 286300.847 ops/s
[info]                  ·gc.alloc.rate:            282.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3724.133 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 291017.671 ops/s
[info]                  ·gc.alloc.rate:      286.923 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 284705.623 ops/s
[info]                  ·gc.alloc.rate:            280.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3744.691 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   288383.042 ±(99.9%) 10489.585 ops/s [Average]
[info]   (min, avg, max) = (284705.623, 288383.042, 291017.671), stdev = 2724.112
[info]   CI (99.9%): [277893.458, 298872.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   284.362 ±(99.9%) 10.393 MB/sec [Average]
[info]   (min, avg, max) = (280.723, 284.362, 286.923), stdev = 2.699
[info]   CI (99.9%): [273.969, 294.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.002), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.406 ±(99.9%) 1428.573 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.406, 677.349), stdev = 370.996
[info]   CI (99.9%): [≈ 0, 1834.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2229.179 ±(99.9%) 7836.446 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2229.179, 3744.691), stdev = 2035.100
[info]   CI (99.9%): [≈ 0, 10065.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 5.000), stdev = 2.408
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.24% complete, ETA 00:44:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1376571.825 ops/s
[info] # Warmup Iteration   2: 1521289.904 ops/s
[info] # Warmup Iteration   3: 1547287.040 ops/s
[info] # Warmup Iteration   4: 1525215.025 ops/s
[info] # Warmup Iteration   5: 1540266.535 ops/s
[info] Iteration   1: 1534117.745 ops/s
[info]                  ·gc.alloc.rate:                   1138.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        695.007 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1543898.503 ops/s
[info]                  ·gc.alloc.rate:            1145.663 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1382.573 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1536242.452 ops/s
[info]                  ·gc.alloc.rate:            1139.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1388.093 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1536062.272 ops/s
[info]                  ·gc.alloc.rate:                   1139.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1388.260 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.683 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1538391.658 ops/s
[info]                  ·gc.alloc.rate:                   1141.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        693.724 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.407 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1537742.526 ±(99.9%) 14475.802 ops/s [Average]
[info]   (min, avg, max) = (1534117.745, 1537742.526, 1543898.503), stdev = 3759.320
[info]   CI (99.9%): [1523266.724, 1552218.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1141.038 ±(99.9%) 10.930 MB/sec [Average]
[info]   (min, avg, max) = (1138.249, 1141.038, 1145.663), stdev = 2.838
[info]   CI (99.9%): [1130.109, 1151.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.183 ±(99.9%) 1428.980 MB/sec [Average]
[info]   (min, avg, max) = (677.304, 1084.183, 1356.131), stdev = 371.102
[info]   CI (99.9%): [≈ 0, 2513.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1109.531 ±(99.9%) 1459.394 B/op [Average]
[info]   (min, avg, max) = (693.724, 1109.531, 1388.260), stdev = 379.000
[info]   CI (99.9%): [≈ 0, 2568.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 5.318 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.330), stdev = 1.381
[info]   CI (99.9%): [≈ 0, 6.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.955 ±(99.9%) 5.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.955, 3.407), stdev = 1.413
[info]   CI (99.9%): [≈ 0, 6.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60.47% complete, ETA 00:44:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1470061.913 ops/s
[info] # Warmup Iteration   2: 1595375.476 ops/s
[info] # Warmup Iteration   3: 1617131.514 ops/s
[info] # Warmup Iteration   4: 1618285.165 ops/s
[info] # Warmup Iteration   5: 1617613.578 ops/s
[info] Iteration   1: 1616096.411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1617490.646 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1613881.163 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1618732.525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1613644.871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1615969.123 ±(99.9%) 8551.844 ops/s [Average]
[info]   (min, avg, max) = (1613644.871, 1615969.123, 1618732.525), stdev = 2220.887
[info]   CI (99.9%): [1607417.280, 1624520.967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.71% complete, ETA 00:44:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 166203.986 ops/s
[info] # Warmup Iteration   2: 292824.272 ops/s
[info] # Warmup Iteration   3: 292119.604 ops/s
[info] # Warmup Iteration   4: 293899.695 ops/s
[info] # Warmup Iteration   5: 290997.526 ops/s
[info] Iteration   1: 291107.900 ops/s
[info]                  ·gc.alloc.rate:            791.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3662.585 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 292826.513 ops/s
[info]                  ·gc.alloc.rate:            796.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3641.138 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 292817.823 ops/s
[info]                  ·gc.alloc.rate:            796.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3637.595 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 289286.990 ops/s
[info]                  ·gc.alloc.rate:            786.780 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7363.972 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 290610.549 ops/s
[info]                  ·gc.alloc.rate:            790.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3665.290 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   291329.955 ±(99.9%) 5837.885 ops/s [Average]
[info]   (min, avg, max) = (289286.990, 291329.955, 292826.513), stdev = 1516.080
[info]   CI (99.9%): [285492.070, 297167.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   792.243 ±(99.9%) 15.678 MB/sec [Average]
[info]   (min, avg, max) = (786.780, 792.243, 796.298), stdev = 4.072
[info]   CI (99.9%): [776.565, 807.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.002), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   812.412 ±(99.9%) 1165.156 MB/sec [Average]
[info]   (min, avg, max) = (676.711, 812.412, 1353.696), stdev = 302.587
[info]   CI (99.9%): [≈ 0, 1977.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4394.116 ±(99.9%) 6393.018 B/op [Average]
[info]   (min, avg, max) = (3637.595, 4394.116, 7363.972), stdev = 1660.246
[info]   CI (99.9%): [≈ 0, 10787.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.94% complete, ETA 00:44:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2778.724 ops/s
[info] # Warmup Iteration   2: 4375.612 ops/s
[info] # Warmup Iteration   3: 4457.538 ops/s
[info] # Warmup Iteration   4: 4524.858 ops/s
[info] # Warmup Iteration   5: 4527.874 ops/s
[info] Iteration   1: 4561.708 ops/s
[info]                  ·gc.alloc.rate:            898.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233016.889 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 4555.770 ops/s
[info]                  ·gc.alloc.rate:            896.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233323.692 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4534.984 ops/s
[info]                  ·gc.alloc.rate:            892.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1350.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 468807.788 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 4585.345 ops/s
[info]                  ·gc.alloc.rate:            902.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 231797.703 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4554.167 ops/s
[info]                  ·gc.alloc.rate:            896.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233374.904 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4558.395 ±(99.9%) 69.688 ops/s [Average]
[info]   (min, avg, max) = (4534.984, 4558.395, 4585.345), stdev = 18.098
[info]   CI (99.9%): [4488.707, 4628.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   897.428 ±(99.9%) 13.610 MB/sec [Average]
[info]   (min, avg, max) = (892.883, 897.428, 902.713), stdev = 3.535
[info]   CI (99.9%): [883.817, 911.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   309840.091 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (309840.089, 309840.091, 309840.097), stdev = 0.003
[info]   CI (99.9%): [309840.078, 309840.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   810.488 ±(99.9%) 1163.469 MB/sec [Average]
[info]   (min, avg, max) = (675.266, 810.488, 1350.989), stdev = 302.149
[info]   CI (99.9%): [≈ 0, 1973.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   280064.195 ±(99.9%) 406292.259 B/op [Average]
[info]   (min, avg, max) = (231797.703, 280064.195, 468807.788), stdev = 105512.809
[info]   CI (99.9%): [≈ 0, 686356.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 9.000), stdev = 2.074
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.18% complete, ETA 00:43:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2263.366 ops/s
[info] # Warmup Iteration   2: 4559.565 ops/s
[info] # Warmup Iteration   3: 4592.002 ops/s
[info] # Warmup Iteration   4: 4674.328 ops/s
[info] # Warmup Iteration   5: 4752.848 ops/s
[info] Iteration   1: 4750.338 ops/s
[info]                  ·gc.alloc.rate:            835.998 MB/sec
[info]                  ·gc.alloc.rate.norm:       277032.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 223528.512 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4755.472 ops/s
[info]                  ·gc.alloc.rate:            836.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       277032.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 223293.565 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4756.655 ops/s
[info]                  ·gc.alloc.rate:            837.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       277032.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.339 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 446493.269 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 4795.743 ops/s
[info]                  ·gc.alloc.rate:            844.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       277032.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 221431.621 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 4791.465 ops/s
[info]                  ·gc.alloc.rate:            843.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       277032.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 221616.417 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4769.935 ±(99.9%) 83.904 ops/s [Average]
[info]   (min, avg, max) = (4750.338, 4769.935, 4795.743), stdev = 21.790
[info]   CI (99.9%): [4686.031, 4853.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   839.515 ±(99.9%) 14.816 MB/sec [Average]
[info]   (min, avg, max) = (835.998, 839.515, 844.062), stdev = 3.848
[info]   CI (99.9%): [824.699, 854.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   277032.087 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (277032.085, 277032.087, 277032.092), stdev = 0.003
[info]   CI (99.9%): [277032.075, 277032.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.558 ±(99.9%) 1161.920 MB/sec [Average]
[info]   (min, avg, max) = (674.540, 809.558, 1349.339), stdev = 301.747
[info]   CI (99.9%): [≈ 0, 1971.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   267272.677 ±(99.9%) 385803.159 B/op [Average]
[info]   (min, avg, max) = (221431.621, 267272.677, 446493.269), stdev = 100191.855
[info]   CI (99.9%): [≈ 0, 653075.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 11.000), stdev = 2.387
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.41% complete, ETA 00:43:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34093.120 ops/s
[info] # Warmup Iteration   2: 41673.541 ops/s
[info] # Warmup Iteration   3: 41531.541 ops/s
[info] # Warmup Iteration   4: 43314.930 ops/s
[info] # Warmup Iteration   5: 43247.039 ops/s
[info] Iteration   1: 42724.412 ops/s
[info]                  ·gc.alloc.rate:            700.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1351.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49788.465 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 43371.779 ops/s
[info]                  ·gc.alloc.rate:            710.869 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24510.848 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 43298.400 ops/s
[info]                  ·gc.alloc.rate:            709.914 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24552.165 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 42936.058 ops/s
[info]                  ·gc.alloc.rate:            703.759 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24757.977 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 42895.874 ops/s
[info]                  ·gc.alloc.rate:            703.126 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24782.213 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   43045.304 ±(99.9%) 1068.302 ops/s [Average]
[info]   (min, avg, max) = (42724.412, 43045.304, 43371.779), stdev = 277.435
[info]   CI (99.9%): [41977.003, 44113.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   705.588 ±(99.9%) 17.670 MB/sec [Average]
[info]   (min, avg, max) = (700.275, 705.588, 710.869), stdev = 4.589
[info]   CI (99.9%): [687.918, 723.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25800.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25800.009, 25800.010, 25800.010), stdev = 0.001
[info]   CI (99.9%): [25800.008, 25800.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.606 ±(99.9%) 1164.058 MB/sec [Average]
[info]   (min, avg, max) = (675.335, 810.606, 1351.380), stdev = 302.302
[info]   CI (99.9%): [≈ 0, 1974.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   29678.334 ±(99.9%) 43291.061 B/op [Average]
[info]   (min, avg, max) = (24510.848, 29678.334, 49788.465), stdev = 11242.551
[info]   CI (99.9%): [≈ 0, 72969.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.65% complete, ETA 00:43:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1624.810 ops/s
[info] # Warmup Iteration   2: 3690.060 ops/s
[info] # Warmup Iteration   3: 3793.379 ops/s
[info] # Warmup Iteration   4: 3870.489 ops/s
[info] # Warmup Iteration   5: 3854.518 ops/s
[info] Iteration   1: 3896.323 ops/s
[info]                  ·gc.alloc.rate:            992.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 272500.638 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 3887.994 ops/s
[info]                  ·gc.alloc.rate:            990.792 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.734 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 546262.529 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3900.185 ops/s
[info]                  ·gc.alloc.rate:            993.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 272291.076 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 3886.179 ops/s
[info]                  ·gc.alloc.rate:            990.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 546543.601 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 3894.380 ops/s
[info]                  ·gc.alloc.rate:            992.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 272640.526 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3893.012 ±(99.9%) 22.465 ops/s [Average]
[info]   (min, avg, max) = (3886.179, 3893.012, 3900.185), stdev = 5.834
[info]   CI (99.9%): [3870.547, 3915.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   991.893 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (990.034, 991.893, 993.523), stdev = 1.444
[info]   CI (99.9%): [986.332, 997.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   400992.110 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (400992.105, 400992.110, 400992.113), stdev = 0.004
[info]   CI (99.9%): [400992.093, 400992.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   944.628 ±(99.9%) 1423.409 MB/sec [Average]
[info]   (min, avg, max) = (674.646, 944.628, 1349.734), stdev = 369.655
[info]   CI (99.9%): [≈ 0, 2368.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   382047.674 ±(99.9%) 577732.682 B/op [Average]
[info]   (min, avg, max) = (272291.076, 382047.674, 546543.601), stdev = 150035.343
[info]   CI (99.9%): [≈ 0, 959780.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 11.000), stdev = 2.950
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.88% complete, ETA 00:43:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9823.423 ops/s
[info] # Warmup Iteration   2: 14048.549 ops/s
[info] # Warmup Iteration   3: 14347.989 ops/s
[info] # Warmup Iteration   4: 14426.560 ops/s
[info] # Warmup Iteration   5: 14363.266 ops/s
[info] Iteration   1: 14318.468 ops/s
[info]                  ·gc.alloc.rate:            797.305 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1066.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117216.183 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 14386.544 ops/s
[info]                  ·gc.alloc.rate:            801.060 MB/sec
[info]                  ·gc.alloc.rate.norm:       87648.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73888.538 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 14014.119 ops/s
[info]                  ·gc.alloc.rate:            780.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       87647.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75854.752 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 14383.103 ops/s
[info]                  ·gc.alloc.rate:            800.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       87624.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 73903.946 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 13967.283 ops/s
[info]                  ·gc.alloc.rate:            777.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       87624.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76104.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14213.904 ±(99.9%) 794.070 ops/s [Average]
[info]   (min, avg, max) = (13967.283, 14213.904, 14386.544), stdev = 206.217
[info]   CI (99.9%): [13419.833, 15007.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   791.531 ±(99.9%) 43.609 MB/sec [Average]
[info]   (min, avg, max) = (777.809, 791.531, 801.060), stdev = 11.325
[info]   CI (99.9%): [747.923, 835.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87638.266 ±(99.9%) 50.062 B/op [Average]
[info]   (min, avg, max) = (87624.028, 87638.266, 87648.031), stdev = 13.001
[info]   CI (99.9%): [87588.204, 87688.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   753.639 ±(99.9%) 672.977 MB/sec [Average]
[info]   (min, avg, max) = (675.305, 753.639, 1066.277), stdev = 174.770
[info]   CI (99.9%): [80.662, 1426.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   83393.585 ±(99.9%) 72916.902 B/op [Average]
[info]   (min, avg, max) = (73888.538, 83393.585, 117216.183), stdev = 18936.288
[info]   CI (99.9%): [10476.684, 156310.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.12% complete, ETA 00:42:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10056.280 ops/s
[info] # Warmup Iteration   2: 17052.598 ops/s
[info] # Warmup Iteration   3: 16481.759 ops/s
[info] # Warmup Iteration   4: 17003.251 ops/s
[info] # Warmup Iteration   5: 17150.021 ops/s
[info] Iteration   1: 16901.925 ops/s
[info]                  ·gc.alloc.rate:                   875.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        125667.848 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 124.055 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 17099.200 ops/s
[info]                  ·gc.alloc.rate:            886.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62102.870 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 17156.196 ops/s
[info]                  ·gc.alloc.rate:            888.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61900.203 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 16765.614 ops/s
[info]                  ·gc.alloc.rate:            868.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 126679.486 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 16780.073 ops/s
[info]                  ·gc.alloc.rate:            869.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 63290.680 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   16940.602 ±(99.9%) 692.904 ops/s [Average]
[info]   (min, avg, max) = (16765.614, 16940.602, 17156.196), stdev = 179.945
[info]   CI (99.9%): [16247.698, 17633.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   877.676 ±(99.9%) 36.289 MB/sec [Average]
[info]   (min, avg, max) = (868.522, 877.676, 888.862), stdev = 9.424
[info]   CI (99.9%): [841.387, 913.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.049 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (81536.024, 81536.049, 81536.129), stdev = 0.045
[info]   CI (99.9%): [81535.874, 81536.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   944.687 ±(99.9%) 1422.965 MB/sec [Average]
[info]   (min, avg, max) = (674.728, 944.687, 1349.606), stdev = 369.539
[info]   CI (99.9%): [≈ 0, 2367.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   87928.218 ±(99.9%) 134460.754 B/op [Average]
[info]   (min, avg, max) = (61900.203, 87928.218, 126679.486), stdev = 34919.031
[info]   CI (99.9%): [≈ 0, 222388.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   24.811 ±(99.9%) 213.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.811, 124.055), stdev = 55.479
[info]   CI (99.9%): [≈ 0, 238.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 11.000), stdev = 2.490
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62.35% complete, ETA 00:42:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256947.006 ops/s
[info] # Warmup Iteration   2: 269825.742 ops/s
[info] # Warmup Iteration   3: 282126.988 ops/s
[info] # Warmup Iteration   4: 280012.739 ops/s
[info] # Warmup Iteration   5: 269788.434 ops/s
[info] Iteration   1: 273975.646 ops/s
[info]                  ·gc.alloc.rate:            966.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3880.199 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 277519.714 ops/s
[info]                  ·gc.alloc.rate:                   978.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7661.505 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 279078.656 ops/s
[info]                  ·gc.alloc.rate:            984.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3813.181 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 279009.146 ops/s
[info]                  ·gc.alloc.rate:            984.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3814.056 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 273075.243 ops/s
[info]                  ·gc.alloc.rate:                   963.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7786.227 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   276531.681 ±(99.9%) 10905.110 ops/s [Average]
[info]   (min, avg, max) = (273075.243, 276531.681, 279078.656), stdev = 2832.022
[info]   CI (99.9%): [265626.571, 287436.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   975.400 ±(99.9%) 38.576 MB/sec [Average]
[info]   (min, avg, max) = (963.236, 975.400, 984.410), stdev = 10.018
[info]   CI (99.9%): [936.824, 1013.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.001, 5552.001), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.847 ±(99.9%) 1423.717 MB/sec [Average]
[info]   (min, avg, max) = (675.311, 945.847, 1350.884), stdev = 369.735
[info]   CI (99.9%): [≈ 0, 2369.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5391.034 ±(99.9%) 8202.661 B/op [Average]
[info]   (min, avg, max) = (3813.181, 5391.034, 7786.227), stdev = 2130.205
[info]   CI (99.9%): [≈ 0, 13593.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.523 ±(99.9%) 8.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.523, 3.839), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 9.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.59% complete, ETA 00:42:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 286395.590 ops/s
[info] # Warmup Iteration   2: 315736.739 ops/s
[info] # Warmup Iteration   3: 312189.708 ops/s
[info] # Warmup Iteration   4: 312020.401 ops/s
[info] # Warmup Iteration   5: 311533.064 ops/s
[info] Iteration   1: 311432.303 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 311256.915 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 311315.028 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 312595.386 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 312486.846 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   311817.296 ±(99.9%) 2560.202 ops/s [Average]
[info]   (min, avg, max) = (311256.915, 311817.296, 312595.386), stdev = 664.876
[info]   CI (99.9%): [309257.094, 314377.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.82% complete, ETA 00:42:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10439.564 ops/s
[info] # Warmup Iteration   2: 14398.516 ops/s
[info] # Warmup Iteration   3: 15156.918 ops/s
[info] # Warmup Iteration   4: 15127.836 ops/s
[info] # Warmup Iteration   5: 14866.930 ops/s
[info] Iteration   1: 15028.452 ops/s
[info]                  ·gc.alloc.rate:                   853.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              89440.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1350.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        141405.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 69.761 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 15077.431 ops/s
[info]                  ·gc.alloc.rate:            856.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       89439.915 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70438.162 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 14823.426 ops/s
[info]                  ·gc.alloc.rate:            842.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       89434.238 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71644.914 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14878.224 ops/s
[info]                  ·gc.alloc.rate:            846.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       89424.142 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 142072.827 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 14950.994 ops/s
[info]                  ·gc.alloc.rate:            849.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       89423.914 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71031.663 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14951.705 ±(99.9%) 401.801 ops/s [Average]
[info]   (min, avg, max) = (14823.426, 14951.705, 15077.431), stdev = 104.346
[info]   CI (99.9%): [14549.905, 15353.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   849.824 ±(99.9%) 22.255 MB/sec [Average]
[info]   (min, avg, max) = (842.264, 849.824, 856.841), stdev = 5.779
[info]   CI (99.9%): [827.569, 872.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89432.470 ±(99.9%) 31.040 B/op [Average]
[info]   (min, avg, max) = (89423.914, 89432.470, 89440.139), stdev = 8.061
[info]   CI (99.9%): [89401.429, 89463.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   943.886 ±(99.9%) 1419.060 MB/sec [Average]
[info]   (min, avg, max) = (674.729, 943.886, 1350.073), stdev = 368.525
[info]   CI (99.9%): [≈ 0, 2362.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   99318.580 ±(99.9%) 149125.854 B/op [Average]
[info]   (min, avg, max) = (70438.162, 99318.580, 142072.827), stdev = 38727.511
[info]   CI (99.9%): [≈ 0, 248444.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   13.952 ±(99.9%) 120.132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.952, 69.761), stdev = 31.198
[info]   CI (99.9%): [≈ 0, 134.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 12.000), stdev = 3.421
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.06% complete, ETA 00:41:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 837514.368 ops/s
[info] # Warmup Iteration   2: 879457.935 ops/s
[info] # Warmup Iteration   3: 881667.338 ops/s
[info] # Warmup Iteration   4: 881043.103 ops/s
[info] # Warmup Iteration   5: 879764.862 ops/s
[info] Iteration   1: 880161.433 ops/s
[info]                  ·gc.alloc.rate:      35.785 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 881395.371 ops/s
[info]                  ·gc.alloc.rate:      35.844 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 881035.550 ops/s
[info]                  ·gc.alloc.rate:      35.821 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 881199.926 ops/s
[info]                  ·gc.alloc.rate:      35.831 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 881730.194 ops/s
[info]                  ·gc.alloc.rate:      35.856 MB/sec
[info]                  ·gc.alloc.rate.norm: 64.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   881104.495 ±(99.9%) 2261.195 ops/s [Average]
[info]   (min, avg, max) = (880161.433, 881104.495, 881730.194), stdev = 587.225
[info]   CI (99.9%): [878843.300, 883365.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   35.828 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (35.785, 35.828, 35.856), stdev = 0.027
[info]   CI (99.9%): [35.723, 35.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64.000, 64.000, 64.000), stdev = 0.001
[info]   CI (99.9%): [64.000, 64.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63.29% complete, ETA 00:41:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29662.022 ops/s
[info] # Warmup Iteration   2: 67656.615 ops/s
[info] # Warmup Iteration   3: 67656.862 ops/s
[info] # Warmup Iteration   4: 68128.356 ops/s
[info] # Warmup Iteration   5: 68825.191 ops/s
[info] Iteration   1: 68869.123 ops/s
[info]                  ·gc.alloc.rate:                                  3106.616 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62292.548 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 68846.560 ops/s
[info]                  ·gc.alloc.rate:            3106.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       71008.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77891.694 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 68252.711 ops/s
[info]                  ·gc.alloc.rate:                                  3079.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.543 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62854.655 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 69216.404 ops/s
[info]                  ·gc.alloc.rate:            3122.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       71008.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77475.389 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 69281.012 ops/s
[info]                  ·gc.alloc.rate:                                  3125.608 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61919.490 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   68893.162 ±(99.9%) 1573.403 ops/s [Average]
[info]   (min, avg, max) = (68252.711, 68893.162, 69281.012), stdev = 408.608
[info]   CI (99.9%): [67319.759, 70466.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3108.064 ±(99.9%) 71.110 MB/sec [Average]
[info]   (min, avg, max) = (3079.094, 3108.064, 3125.608), stdev = 18.467
[info]   CI (99.9%): [3036.954, 3179.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71008.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71008.006, 71008.006, 71008.006), stdev = 0.001
[info]   CI (99.9%): [71008.005, 71008.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.036 ±(99.9%) 0.150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.089), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2998.192 ±(99.9%) 1437.986 MB/sec [Average]
[info]   (min, avg, max) = (2725.313, 2998.192, 3407.513), stdev = 373.440
[info]   CI (99.9%): [1560.206, 4436.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68486.755 ±(99.9%) 32358.364 B/op [Average]
[info]   (min, avg, max) = (61919.490, 68486.755, 77891.694), stdev = 8403.364
[info]   CI (99.9%): [36128.391, 100845.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.53% complete, ETA 00:41:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 723377.737 ops/s
[info] # Warmup Iteration   2: 1070812.286 ops/s
[info] # Warmup Iteration   3: 1051164.526 ops/s
[info] # Warmup Iteration   4: 1075618.920 ops/s
[info] # Warmup Iteration   5: 1072277.874 ops/s
[info] Iteration   1: 1070273.905 ops/s
[info]                  ·gc.alloc.rate:                   614.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        995.239 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1068927.196 ops/s
[info]                  ·gc.alloc.rate:            613.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 997.430 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1080403.227 ops/s
[info]                  ·gc.alloc.rate:      620.500 MB/sec
[info]                  ·gc.alloc.rate.norm: 904.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1069144.950 ops/s
[info]                  ·gc.alloc.rate:            614.009 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 997.249 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1068113.389 ops/s
[info]                  ·gc.alloc.rate:            613.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 998.219 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1071372.533 ±(99.9%) 19665.091 ops/s [Average]
[info]   (min, avg, max) = (1068113.389, 1071372.533, 1080403.227), stdev = 5106.962
[info]   CI (99.9%): [1051707.442, 1091037.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   615.280 ±(99.9%) 11.352 MB/sec [Average]
[info]   (min, avg, max) = (613.440, 615.280, 620.500), stdev = 2.948
[info]   CI (99.9%): [603.927, 626.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.728 ±(99.9%) 1166.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.728, 677.375), stdev = 302.835
[info]   CI (99.9%): [≈ 0, 1707.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   797.627 ±(99.9%) 1716.958 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 797.627, 998.219), stdev = 445.889
[info]   CI (99.9%): [≈ 0, 2514.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.196 ±(99.9%) 1.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.196, 0.980), stdev = 0.438
[info]   CI (99.9%): [≈ 0, 1.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63.76% complete, ETA 00:41:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 647329.654 ops/s
[info] # Warmup Iteration   2: 688410.169 ops/s
[info] # Warmup Iteration   3: 656727.363 ops/s
[info] # Warmup Iteration   4: 665084.043 ops/s
[info] # Warmup Iteration   5: 691686.815 ops/s
[info] Iteration   1: 691999.470 ops/s
[info]                  ·gc.alloc.rate:      186.389 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 691686.182 ops/s
[info]                  ·gc.alloc.rate:      186.363 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 681774.494 ops/s
[info]                  ·gc.alloc.rate:            183.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1565.447 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 691405.491 ops/s
[info]                  ·gc.alloc.rate:      186.245 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 691596.764 ops/s
[info]                  ·gc.alloc.rate:      186.361 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   689692.480 ±(99.9%) 17064.074 ops/s [Average]
[info]   (min, avg, max) = (681774.494, 689692.480, 691999.470), stdev = 4431.486
[info]   CI (99.9%): [672628.407, 706756.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   185.801 ±(99.9%) 4.640 MB/sec [Average]
[info]   (min, avg, max) = (183.648, 185.801, 186.389), stdev = 1.205
[info]   CI (99.9%): [181.162, 190.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.001, 424.001, 424.001), stdev = 0.001
[info]   CI (99.9%): [424.001, 424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.609 ±(99.9%) 1167.635 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.609, 678.046), stdev = 303.231
[info]   CI (99.9%): [≈ 0, 1303.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   313.089 ±(99.9%) 2695.795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 313.089, 1565.447), stdev = 700.089
[info]   CI (99.9%): [≈ 0, 3008.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64.00% complete, ETA 00:40:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1344372.515 ops/s
[info] # Warmup Iteration   2: 1508456.337 ops/s
[info] # Warmup Iteration   3: 1515905.598 ops/s
[info] # Warmup Iteration   4: 1501273.611 ops/s
[info] # Warmup Iteration   5: 1517872.718 ops/s
[info] Iteration   1: 1517091.851 ops/s
[info]                  ·gc.alloc.rate:      15.420 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1516546.127 ops/s
[info]                  ·gc.alloc.rate:      15.415 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1507800.422 ops/s
[info]                  ·gc.alloc.rate:      15.326 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1518216.438 ops/s
[info]                  ·gc.alloc.rate:      15.440 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1518430.912 ops/s
[info]                  ·gc.alloc.rate:      15.434 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1515617.150 ±(99.9%) 17092.320 ops/s [Average]
[info]   (min, avg, max) = (1507800.422, 1515617.150, 1518430.912), stdev = 4438.821
[info]   CI (99.9%): [1498524.830, 1532709.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   15.407 ±(99.9%) 0.178 MB/sec [Average]
[info]   (min, avg, max) = (15.326, 15.407, 15.440), stdev = 0.046
[info]   CI (99.9%): [15.229, 15.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64.24% complete, ETA 00:40:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19053.269 ops/s
[info] # Warmup Iteration   2: 39305.273 ops/s
[info] # Warmup Iteration   3: 39133.041 ops/s
[info] # Warmup Iteration   4: 39457.391 ops/s
[info] # Warmup Iteration   5: 39464.078 ops/s
[info] Iteration   1: 39263.230 ops/s
[info]                  ·gc.alloc.rate:                   1647.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              66064.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2030.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        81415.575 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 39450.736 ops/s
[info]                  ·gc.alloc.rate:                   1655.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              66064.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54002.089 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 186.031 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 39726.295 ops/s
[info]                  ·gc.alloc.rate:                                  1667.420 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.455 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80994.658 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 39564.206 ops/s
[info]                  ·gc.alloc.rate:                                  1660.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54217.501 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 39747.074 ops/s
[info]                  ·gc.alloc.rate:            1669.021 MB/sec
[info]                  ·gc.alloc.rate.norm:       66064.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2045.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80953.908 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   39550.308 ±(99.9%) 775.428 ops/s [Average]
[info]   (min, avg, max) = (39263.230, 39550.308, 39747.074), stdev = 201.376
[info]   CI (99.9%): [38774.880, 40325.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1660.147 ±(99.9%) 33.363 MB/sec [Average]
[info]   (min, avg, max) = (1647.992, 1660.147, 1669.021), stdev = 8.664
[info]   CI (99.9%): [1626.784, 1693.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66064.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66064.010, 66064.010, 66064.011), stdev = 0.001
[info]   CI (99.9%): [66064.009, 66064.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.106 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.505 ±(99.9%) 4.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.505, 2.455), stdev = 1.090
[info]   CI (99.9%): [≈ 0, 4.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.326 ±(99.9%) 1438.656 MB/sec [Average]
[info]   (min, avg, max) = (1353.329, 1767.326, 2045.195), stdev = 373.614
[info]   CI (99.9%): [328.669, 3205.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70316.746 ±(99.9%) 56974.723 B/op [Average]
[info]   (min, avg, max) = (54002.089, 70316.746, 81415.575), stdev = 14796.155
[info]   CI (99.9%): [13342.024, 127291.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   42.547 ±(99.9%) 312.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.547, 186.031), stdev = 81.039
[info]   CI (99.9%): [≈ 0, 354.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 14.000), stdev = 4.336
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.47% complete, ETA 00:40:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354836.041 ops/s
[info] # Warmup Iteration   2: 653077.757 ops/s
[info] # Warmup Iteration   3: 655970.449 ops/s
[info] # Warmup Iteration   4: 659099.650 ops/s
[info] # Warmup Iteration   5: 642625.145 ops/s
[info] Iteration   1: 655260.424 ops/s
[info]                  ·gc.alloc.rate:                                  2092.135 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.130 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4894.355 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.000 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 662545.747 ops/s
[info]                  ·gc.alloc.rate:                                  2115.335 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.116 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.275 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4856.372 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 659903.374 ops/s
[info]                  ·gc.alloc.rate:            2106.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4875.635 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 654301.898 ops/s
[info]                  ·gc.alloc.rate:            2088.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4917.386 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 652918.013 ops/s
[info]                  ·gc.alloc.rate:            2083.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4927.739 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   656985.891 ±(99.9%) 15659.438 ops/s [Average]
[info]   (min, avg, max) = (652918.013, 656985.891, 662545.747), stdev = 4066.706
[info]   CI (99.9%): [641326.454, 672645.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2097.255 ±(99.9%) 50.398 MB/sec [Average]
[info]   (min, avg, max) = (2083.962, 2097.255, 2115.335), stdev = 13.088
[info]   CI (99.9%): [2046.857, 2147.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5024.001, 5024.001, 5024.001), stdev = 0.001
[info]   CI (99.9%): [5024.001, 5024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.116), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.081 ±(99.9%) 0.471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.275), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2043.051 ±(99.9%) 10.616 MB/sec [Average]
[info]   (min, avg, max) = (2038.147, 2043.051, 2044.756), stdev = 2.757
[info]   CI (99.9%): [2032.435, 2053.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4894.297 ±(99.9%) 112.891 B/op [Average]
[info]   (min, avg, max) = (4856.372, 4894.297, 4927.739), stdev = 29.317
[info]   CI (99.9%): [4781.406, 5007.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.600 ±(99.9%) 13.776 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.600, 8.000), stdev = 3.578
[info]   CI (99.9%): [≈ 0, 15.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.71% complete, ETA 00:39:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.942 ops/s
[info] # Warmup Iteration   2: 5069477.026 ops/s
[info] # Warmup Iteration   3: 5210734.013 ops/s
[info] # Warmup Iteration   4: 5290971.826 ops/s
[info] # Warmup Iteration   5: 5313026.281 ops/s
[info] Iteration   1: 5138382.450 ops/s
[info]                  ·gc.alloc.rate:            313.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 206.887 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 5171876.390 ops/s
[info]                  ·gc.alloc.rate:      315.437 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 5141560.052 ops/s
[info]                  ·gc.alloc.rate:            313.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 206.559 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 5168941.087 ops/s
[info]                  ·gc.alloc.rate:      315.218 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 5143927.563 ops/s
[info]                  ·gc.alloc.rate:            313.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 206.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5152937.508 ±(99.9%) 62008.254 ops/s [Average]
[info]   (min, avg, max) = (5138382.450, 5152937.508, 5171876.390), stdev = 16103.347
[info]   CI (99.9%): [5090929.254, 5214945.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   314.319 ±(99.9%) 3.585 MB/sec [Average]
[info]   (min, avg, max) = (313.523, 314.319, 315.437), stdev = 0.931
[info]   CI (99.9%): [310.735, 317.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   405.067 ±(99.9%) 1423.867 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 405.067, 675.666), stdev = 369.774
[info]   CI (99.9%): [≈ 0, 1828.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   123.981 ±(99.9%) 435.812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 123.981, 206.887), stdev = 113.179
[info]   CI (99.9%): [≈ 0, 559.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.94% complete, ETA 00:39:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185184.886 ops/s
[info] # Warmup Iteration   2: 788192.650 ops/s
[info] # Warmup Iteration   3: 778626.115 ops/s
[info] # Warmup Iteration   4: 779418.457 ops/s
[info] # Warmup Iteration   5: 787788.904 ops/s
[info] Iteration   1: 791487.797 ops/s
[info]                  ·gc.alloc.rate:            981.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1347.120 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 783339.927 ops/s
[info]                  ·gc.alloc.rate:            971.422 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1359.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 778049.976 ops/s
[info]                  ·gc.alloc.rate:                   964.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2738.007 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.347 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 791603.533 ops/s
[info]                  ·gc.alloc.rate:            981.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1346.868 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 788998.673 ops/s
[info]                  ·gc.alloc.rate:            978.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2701.334 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   786695.981 ±(99.9%) 22647.260 ops/s [Average]
[info]   (min, avg, max) = (778049.976, 786695.981, 791603.533), stdev = 5881.421
[info]   CI (99.9%): [764048.721, 809343.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   975.634 ±(99.9%) 28.384 MB/sec [Average]
[info]   (min, avg, max) = (964.814, 975.634, 981.779), stdev = 7.371
[info]   CI (99.9%): [947.249, 1004.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.794 ±(99.9%) 1426.763 MB/sec [Average]
[info]   (min, avg, max) = (676.682, 947.794, 1354.056), stdev = 370.526
[info]   CI (99.9%): [≈ 0, 2374.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1898.615 ±(99.9%) 2886.629 B/op [Average]
[info]   (min, avg, max) = (1346.868, 1898.615, 2738.007), stdev = 749.649
[info]   CI (99.9%): [≈ 0, 4785.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.269 ±(99.9%) 2.320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.269, 1.347), stdev = 0.603
[info]   CI (99.9%): [≈ 0, 2.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65.18% complete, ETA 00:39:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6944467.620 ops/s
[info] # Warmup Iteration   2: 7753145.228 ops/s
[info] # Warmup Iteration   3: 7708381.551 ops/s
[info] # Warmup Iteration   4: 7839225.609 ops/s
[info] # Warmup Iteration   5: 7975924.594 ops/s
[info] Iteration   1: 7813951.942 ops/s
[info]                  ·gc.alloc.rate:            357.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.584 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7908380.415 ops/s
[info]                  ·gc.alloc.rate:      361.896 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7886041.927 ops/s
[info]                  ·gc.alloc.rate:            360.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.338 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7907795.180 ops/s
[info]                  ·gc.alloc.rate:      361.705 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7883688.400 ops/s
[info]                  ·gc.alloc.rate:                   360.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        135.378 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.133 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7879971.573 ±(99.9%) 149016.327 ops/s [Average]
[info]   (min, avg, max) = (7813951.942, 7879971.573, 7908380.415), stdev = 38699.067
[info]   CI (99.9%): [7730955.246, 8028987.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   360.489 ±(99.9%) 6.745 MB/sec [Average]
[info]   (min, avg, max) = (357.530, 360.489, 361.896), stdev = 1.752
[info]   CI (99.9%): [353.743, 367.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.856 ±(99.9%) 1430.158 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.856, 678.236), stdev = 371.407
[info]   CI (99.9%): [≈ 0, 1837.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   81.460 ±(99.9%) 286.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 81.460, 136.584), stdev = 74.364
[info]   CI (99.9%): [≈ 0, 367.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.027 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.133), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.41% complete, ETA 00:39:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37352.461 ops/s
[info] # Warmup Iteration   2: 255978.279 ops/s
[info] # Warmup Iteration   3: 264621.217 ops/s
[info] # Warmup Iteration   4: 267541.228 ops/s
[info] # Warmup Iteration   5: 263506.674 ops/s
[info] Iteration   1: 267075.039 ops/s
[info]                  ·gc.alloc.rate:            1467.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       8648.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2030.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11969.212 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 270109.251 ops/s
[info]                  ·gc.alloc.rate:                   1483.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7890.917 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.881 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 268912.147 ops/s
[info]                  ·gc.alloc.rate:                   1477.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              8648.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7926.036 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.291 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 268596.529 ops/s
[info]                  ·gc.alloc.rate:                                  1475.707 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8648.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.737 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7986.072 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 271473.057 ops/s
[info]                  ·gc.alloc.rate:                                  1491.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8648.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.832 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7901.598 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   269233.205 ±(99.9%) 6371.190 ops/s [Average]
[info]   (min, avg, max) = (267075.039, 269233.205, 271473.057), stdev = 1654.578
[info]   CI (99.9%): [262862.015, 275604.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1479.181 ±(99.9%) 34.998 MB/sec [Average]
[info]   (min, avg, max) = (1467.370, 1479.181, 1491.568), stdev = 9.089
[info]   CI (99.9%): [1444.183, 1514.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8648.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8648.002, 8648.002, 8648.002), stdev = 0.001
[info]   CI (99.9%): [8648.001, 8648.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.126), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.159 ±(99.9%) 1.247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.159, 0.737), stdev = 0.324
[info]   CI (99.9%): [≈ 0, 1.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.902 ±(99.9%) 1158.213 MB/sec [Average]
[info]   (min, avg, max) = (1353.982, 1492.902, 2030.904), stdev = 300.784
[info]   CI (99.9%): [334.689, 2651.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8734.767 ±(99.9%) 6963.833 B/op [Average]
[info]   (min, avg, max) = (7890.917, 8734.767, 11969.212), stdev = 1808.485
[info]   CI (99.9%): [1770.934, 15698.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.234 ±(99.9%) 45.785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.234, 27.291), stdev = 11.890
[info]   CI (99.9%): [≈ 0, 52.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 15.000), stdev = 4.278
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65.65% complete, ETA 00:38:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2237.282 ops/s
[info] # Warmup Iteration   2: 3604.559 ops/s
[info] # Warmup Iteration   3: 3598.416 ops/s
[info] # Warmup Iteration   4: 3692.365 ops/s
[info] # Warmup Iteration   5: 3684.308 ops/s
[info] Iteration   1: 3702.171 ops/s
[info]                  ·gc.alloc.rate:            1687.081 MB/sec
[info]                  ·gc.alloc.rate.norm:       717152.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 576532.740 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 3684.777 ops/s
[info]                  ·gc.alloc.rate:                   1679.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2036.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        869641.029 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1706.852 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 3698.400 ops/s
[info]                  ·gc.alloc.rate:                                  1685.290 MB/sec
[info]                  ·gc.alloc.rate.norm:                             717152.110 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 30.223 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       579834.188 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 3714.927 ops/s
[info]                  ·gc.alloc.rate:                                  1692.645 MB/sec
[info]                  ·gc.alloc.rate.norm:                             717152.110 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.546 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       866006.390 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 3721.366 ops/s
[info]                  ·gc.alloc.rate:                                  1695.717 MB/sec
[info]                  ·gc.alloc.rate.norm:                             717152.110 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.423 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       576252.081 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   3704.328 ±(99.9%) 55.290 ops/s [Average]
[info]   (min, avg, max) = (3684.777, 3704.328, 3721.366), stdev = 14.359
[info]   CI (99.9%): [3649.039, 3759.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   1687.949 ±(99.9%) 25.113 MB/sec [Average]
[info]   (min, avg, max) = (1679.009, 1687.949, 1695.717), stdev = 6.522
[info]   CI (99.9%): [1662.835, 1713.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   717152.112 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (717152.110, 717152.112, 717152.119), stdev = 0.004
[info]   CI (99.9%): [717152.097, 717152.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.112 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.071), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   10.238 ±(99.9%) 47.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.238, 30.223), stdev = 12.358
[info]   CI (99.9%): [≈ 0, 57.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1632.285 ±(99.9%) 1433.240 MB/sec [Average]
[info]   (min, avg, max) = (1356.278, 1632.285, 2043.975), stdev = 372.208
[info]   CI (99.9%): [199.045, 3065.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   693653.285 ±(99.9%) 612277.602 B/op [Average]
[info]   (min, avg, max) = (576252.081, 693653.285, 869641.029), stdev = 159006.549
[info]   CI (99.9%): [81375.683, 1305930.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   341.370 ±(99.9%) 2939.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 341.370, 1706.852), stdev = 763.327
[info]   CI (99.9%): [≈ 0, 3280.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 10.000), stdev = 3.209
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65.88% complete, ETA 00:38:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2117.028 ops/s
[info] # Warmup Iteration   2: 4574.194 ops/s
[info] # Warmup Iteration   3: 4756.541 ops/s
[info] # Warmup Iteration   4: 4781.973 ops/s
[info] # Warmup Iteration   5: 4751.683 ops/s
[info] Iteration   1: 4747.262 ops/s
[info]                  ·gc.alloc.rate:                   1961.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              650472.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2029.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        672996.346 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1324.796 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   2: 4802.179 ops/s
[info]                  ·gc.alloc.rate:                                  1985.251 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650472.085 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.150 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.803 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       669656.779 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                218.271 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 4825.163 ops/s
[info]                  ·gc.alloc.rate:                                  1993.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650472.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.460 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       666683.187 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4818.364 ops/s
[info]                  ·gc.alloc.rate:            1991.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       650472.085 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2043.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 667651.399 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 4819.085 ops/s
[info]                  ·gc.alloc.rate:                                  1991.640 MB/sec
[info]                  ·gc.alloc.rate.norm:                             650472.085 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.747 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       667512.911 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   4802.411 ±(99.9%) 123.154 ops/s [Average]
[info]   (min, avg, max) = (4747.262, 4802.411, 4825.163), stdev = 31.983
[info]   CI (99.9%): [4679.256, 4925.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1984.790 ±(99.9%) 51.110 MB/sec [Average]
[info]   (min, avg, max) = (1961.754, 1984.790, 1993.934), stdev = 13.273
[info]   CI (99.9%): [1933.680, 2035.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650472.088 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (650472.085, 650472.088, 650472.098), stdev = 0.006
[info]   CI (99.9%): [650472.066, 650472.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.061), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   6.671 ±(99.9%) 31.679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.671, 20.150), stdev = 8.227
[info]   CI (99.9%): [≈ 0, 38.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2040.979 ±(99.9%) 24.315 MB/sec [Average]
[info]   (min, avg, max) = (2029.685, 2040.979, 2043.963), stdev = 6.315
[info]   CI (99.9%): [2016.663, 2065.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   668900.125 ±(99.9%) 9769.951 B/op [Average]
[info]   (min, avg, max) = (666683.187, 668900.125, 672996.346), stdev = 2537.225
[info]   CI (99.9%): [659130.174, 678670.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.995), stdev = 1.736
[info]   CI (99.9%): [≈ 0, 7.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   308.613 ±(99.9%) 2217.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 308.613, 1324.796), stdev = 575.872
[info]   CI (99.9%): [≈ 0, 2526.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.357
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66.12% complete, ETA 00:38:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33983.762 ops/s
[info] # Warmup Iteration   2: 42299.802 ops/s
[info] # Warmup Iteration   3: 42220.155 ops/s
[info] # Warmup Iteration   4: 42609.449 ops/s
[info] # Warmup Iteration   5: 42462.899 ops/s
[info] Iteration   1: 42627.735 ops/s
[info]                  ·gc.alloc.rate:            709.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25061.544 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 42661.375 ops/s
[info]                  ·gc.alloc.rate:            709.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25041.575 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 42712.087 ops/s
[info]                  ·gc.alloc.rate:            710.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25011.679 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 42708.352 ops/s
[info]                  ·gc.alloc.rate:            710.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25014.022 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 42786.031 ops/s
[info]                  ·gc.alloc.rate:            711.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       26184.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24969.596 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   42699.116 ±(99.9%) 230.456 ops/s [Average]
[info]   (min, avg, max) = (42627.735, 42699.116, 42786.031), stdev = 59.849
[info]   CI (99.9%): [42468.660, 42929.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   710.299 ±(99.9%) 4.071 MB/sec [Average]
[info]   (min, avg, max) = (709.085, 710.299, 711.868), stdev = 1.057
[info]   CI (99.9%): [706.229, 714.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26184.010, 26184.010, 26184.010), stdev = 0.001
[info]   CI (99.9%): [26184.008, 26184.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.713 ±(99.9%) 0.321 MB/sec [Average]
[info]   (min, avg, max) = (678.649, 678.713, 678.852), stdev = 0.083
[info]   CI (99.9%): [678.393, 679.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   25019.683 ±(99.9%) 133.896 B/op [Average]
[info]   (min, avg, max) = (24969.596, 25019.683, 25061.544), stdev = 34.772
[info]   CI (99.9%): [24885.787, 25153.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66.35% complete, ETA 00:38:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2624.643 ops/s
[info] # Warmup Iteration   2: 3663.295 ops/s
[info] # Warmup Iteration   3: 3874.735 ops/s
[info] # Warmup Iteration   4: 4054.081 ops/s
[info] # Warmup Iteration   5: 4051.310 ops/s
[info] Iteration   1: 4074.156 ops/s
[info]                  ·gc.alloc.rate:            749.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       289544.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261886.744 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 4082.310 ops/s
[info]                  ·gc.alloc.rate:            750.954 MB/sec
[info]                  ·gc.alloc.rate.norm:       289544.108 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261373.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 4078.614 ops/s
[info]                  ·gc.alloc.rate:            750.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       289544.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261629.992 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 4079.245 ops/s
[info]                  ·gc.alloc.rate:            750.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       289544.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261565.883 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4078.479 ops/s
[info]                  ·gc.alloc.rate:            750.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       289544.100 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 261629.992 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4078.561 ±(99.9%) 11.216 ops/s [Average]
[info]   (min, avg, max) = (4074.156, 4078.561, 4082.310), stdev = 2.913
[info]   CI (99.9%): [4067.345, 4089.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   750.386 ±(99.9%) 1.900 MB/sec [Average]
[info]   (min, avg, max) = (749.611, 750.386, 750.954), stdev = 0.493
[info]   CI (99.9%): [748.486, 752.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289544.102 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (289544.100, 289544.102, 289544.108), stdev = 0.003
[info]   CI (99.9%): [289544.088, 289544.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   678.010 ±(99.9%) 0.282 MB/sec [Average]
[info]   (min, avg, max) = (677.892, 678.010, 678.077), stdev = 0.073
[info]   CI (99.9%): [677.728, 678.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   261617.271 ±(99.9%) 707.109 B/op [Average]
[info]   (min, avg, max) = (261373.743, 261617.271, 261886.744), stdev = 183.634
[info]   CI (99.9%): [260910.162, 262324.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66.59% complete, ETA 00:37:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ce803297/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1865.142 ops/s
[info] # Warmup Iteration   2: 4050.771 ops/s
[info] # Warmup Iteration   3: 4153.521 ops/s
[info] # Warmup Iteration   4: 4002.273 ops/s
[info] # Warmup Iteration   5: 4017.656 ops/s
[info] Iteration   1: 4144.994 ops/s
[info]                  ·gc.alloc.rate:            507.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       192741.658 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256959.290 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4160.940 ops/s
[info]                  ·gc.alloc.rate:      509.486 MB/sec
[info]                  ·gc.alloc.rate.norm: 192741.209 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4147.254 ops/s
[info]                  ·gc.alloc.rate:            507.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       192741.746 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256773.491 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4151.737 ops/s
[info]                  ·gc.alloc.rate:            508.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       192741.467 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 256273.691 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4153.619 ops/s
[info]                  ·gc.alloc.rate:                   508.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              192741.435 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        256150.335 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 252.365 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4151.709 ±(99.9%) 23.877 ops/s [Average]
[info]   (min, avg, max) = (4144.994, 4151.709, 4160.940), stdev = 6.201
[info]   CI (99.9%): [4127.832, 4175.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   508.364 ±(99.9%) 2.906 MB/sec [Average]
[info]   (min, avg, max) = (507.555, 508.364, 509.486), stdev = 0.755
[info]   CI (99.9%): [505.458, 511.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   192741.503 ±(99.9%) 0.806 B/op [Average]
[info]   (min, avg, max) = (192741.209, 192741.503, 192741.746), stdev = 0.209
[info]   CI (99.9%): [192740.697, 192742.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.007 ±(99.9%) 1164.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.007, 676.662), stdev = 302.432
[info]   CI (99.9%): [≈ 0, 1705.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   205231.361 ±(99.9%) 441777.880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 205231.361, 256959.290), stdev = 114728.312
[info]   CI (99.9%): [≈ 0, 647009.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   50.473 ±(99.9%) 434.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.473, 252.365), stdev = 112.861
[info]   CI (99.9%): [≈ 0, 485.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.400, 6.000), stdev = 2.510
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66.82% complete, ETA 00:37:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5620.381 ops/s
[info] # Warmup Iteration   2: 6495.170 ops/s
[info] # Warmup Iteration   3: 6501.056 ops/s
[info] # Warmup Iteration   4: 6422.809 ops/s
[info] # Warmup Iteration   5: 6504.372 ops/s
[info] Iteration   1: 6495.033 ops/s
[info]                  ·gc.alloc.rate:      173.698 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.068 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6502.389 ops/s
[info]                  ·gc.alloc.rate:      173.903 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6461.109 ops/s
[info]                  ·gc.alloc.rate:            172.802 MB/sec
[info]                  ·gc.alloc.rate.norm:       42096.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 165001.051 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 6410.375 ops/s
[info]                  ·gc.alloc.rate:      171.451 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.064 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6461.722 ops/s
[info]                  ·gc.alloc.rate:      172.851 MB/sec
[info]                  ·gc.alloc.rate.norm: 42096.068 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6466.125 ±(99.9%) 140.211 ops/s [Average]
[info]   (min, avg, max) = (6410.375, 6466.125, 6502.389), stdev = 36.412
[info]   CI (99.9%): [6325.915, 6606.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   172.941 ±(99.9%) 3.726 MB/sec [Average]
[info]   (min, avg, max) = (171.451, 172.941, 173.903), stdev = 0.968
[info]   CI (99.9%): [169.215, 176.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42096.066 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (42096.063, 42096.066, 42096.068), stdev = 0.003
[info]   CI (99.9%): [42096.056, 42096.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.464 ±(99.9%) 1166.388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.464, 677.322), stdev = 302.907
[info]   CI (99.9%): [≈ 0, 1301.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   33000.210 ±(99.9%) 284141.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33000.210, 165001.051), stdev = 73790.713
[info]   CI (99.9%): [≈ 0, 317141.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.06% complete, ETA 00:37:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5758.145 ops/s
[info] # Warmup Iteration   2: 6598.341 ops/s
[info] # Warmup Iteration   3: 6341.001 ops/s
[info] # Warmup Iteration   4: 6567.779 ops/s
[info] # Warmup Iteration   5: 6564.945 ops/s
[info] Iteration   1: 6432.380 ops/s
[info]                  ·gc.alloc.rate:            125.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       30592.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      682.166 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 166885.580 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 6582.482 ops/s
[info]                  ·gc.alloc.rate:      127.975 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6581.644 ops/s
[info]                  ·gc.alloc.rate:      127.959 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.062 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6584.987 ops/s
[info]                  ·gc.alloc.rate:      128.021 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.067 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6578.127 ops/s
[info]                  ·gc.alloc.rate:      127.855 MB/sec
[info]                  ·gc.alloc.rate.norm: 30592.092 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   6551.924 ±(99.9%) 257.501 ops/s [Average]
[info]   (min, avg, max) = (6432.380, 6551.924, 6584.987), stdev = 66.872
[info]   CI (99.9%): [6294.423, 6809.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   127.372 ±(99.9%) 5.005 MB/sec [Average]
[info]   (min, avg, max) = (125.049, 127.372, 128.021), stdev = 1.300
[info]   CI (99.9%): [122.366, 132.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30592.069 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (30592.062, 30592.069, 30592.092), stdev = 0.013
[info]   CI (99.9%): [30592.019, 30592.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   136.433 ±(99.9%) 1174.730 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 136.433, 682.166), stdev = 305.074
[info]   CI (99.9%): [≈ 0, 1311.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   33377.116 ±(99.9%) 287387.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33377.116, 166885.580), stdev = 74633.500
[info]   CI (99.9%): [≈ 0, 320764.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67.29% complete, ETA 00:37:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5039.416 ops/s
[info] # Warmup Iteration   2: 7039.941 ops/s
[info] # Warmup Iteration   3: 7415.344 ops/s
[info] # Warmup Iteration   4: 7392.886 ops/s
[info] # Warmup Iteration   5: 7417.734 ops/s
[info] Iteration   1: 7257.087 ops/s
[info]                  ·gc.alloc.rate:            1689.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       366544.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2033.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 441155.959 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 7408.707 ops/s
[info]                  ·gc.alloc.rate:                   1725.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        288110.761 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 707.541 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 7353.168 ops/s
[info]                  ·gc.alloc.rate:                                  1712.447 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366544.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       437536.335 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7435.566 ops/s
[info]                  ·gc.alloc.rate:                                  1731.691 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366551.571 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.834 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       288474.720 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 7432.183 ops/s
[info]                  ·gc.alloc.rate:                                  1730.763 MB/sec
[info]                  ·gc.alloc.rate.norm:                             366568.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.505 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       432886.702 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7377.342 ±(99.9%) 288.330 ops/s [Average]
[info]   (min, avg, max) = (7257.087, 7377.342, 7435.566), stdev = 74.878
[info]   CI (99.9%): [7089.012, 7665.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1718.020 ±(99.9%) 67.330 MB/sec [Average]
[info]   (min, avg, max) = (1689.915, 1718.020, 1731.691), stdev = 17.485
[info]   CI (99.9%): [1650.689, 1785.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366550.359 ±(99.9%) 40.098 B/op [Average]
[info]   (min, avg, max) = (366544.055, 366550.359, 366568.055), stdev = 10.413
[info]   CI (99.9%): [366510.261, 366590.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.079), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   9.699 ±(99.9%) 34.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.699, 16.846), stdev = 8.877
[info]   CI (99.9%): [≈ 0, 43.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1768.170 ±(99.9%) 1436.754 MB/sec [Average]
[info]   (min, avg, max) = (1356.106, 1768.170, 2044.114), stdev = 373.120
[info]   CI (99.9%): [331.416, 3204.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   377632.895 ±(99.9%) 314246.387 B/op [Average]
[info]   (min, avg, max) = (288110.761, 377632.895, 441155.959), stdev = 81608.789
[info]   CI (99.9%): [63386.509, 691879.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   141.508 ±(99.9%) 1218.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 141.508, 707.541), stdev = 316.422
[info]   CI (99.9%): [≈ 0, 1359.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.647
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67.53% complete, ETA 00:36:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 454.697 ops/s
[info] # Warmup Iteration   2: 11057.276 ops/s
[info] # Warmup Iteration   3: 11104.353 ops/s
[info] # Warmup Iteration   4: 11080.222 ops/s
[info] # Warmup Iteration   5: 11187.166 ops/s
[info] Iteration   1: 11194.722 ops/s
[info]                  ·gc.alloc.rate:      258.022 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.036 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 11057.661 ops/s
[info]                  ·gc.alloc.rate:            254.899 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96040.460 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11196.717 ops/s
[info]                  ·gc.alloc.rate:      258.126 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11126.359 ops/s
[info]                  ·gc.alloc.rate:            256.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95436.432 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 11163.556 ops/s
[info]                  ·gc.alloc.rate:      257.322 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.037 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11147.803 ±(99.9%) 223.102 ops/s [Average]
[info]   (min, avg, max) = (11057.661, 11147.803, 11196.717), stdev = 57.939
[info]   CI (99.9%): [10924.701, 11370.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   256.977 ±(99.9%) 5.116 MB/sec [Average]
[info]   (min, avg, max) = (254.899, 256.977, 258.126), stdev = 1.329
[info]   CI (99.9%): [251.861, 262.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.037 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (36280.036, 36280.037, 36280.039), stdev = 0.001
[info]   CI (99.9%): [36280.033, 36280.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   269.910 ±(99.9%) 1423.157 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.910, 674.781), stdev = 369.589
[info]   CI (99.9%): [≈ 0, 1693.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   38295.378 ±(99.9%) 201922.151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38295.378, 96040.460), stdev = 52438.541
[info]   CI (99.9%): [≈ 0, 240217.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 3.033
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67.76% complete, ETA 00:36:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6355.537 ops/s
[info] # Warmup Iteration   2: 12864.838 ops/s
[info] # Warmup Iteration   3: 13037.542 ops/s
[info] # Warmup Iteration   4: 12967.894 ops/s
[info] # Warmup Iteration   5: 12976.025 ops/s
[info] Iteration   1: 13019.530 ops/s
[info]                  ·gc.alloc.rate:      454.264 MB/sec
[info]                  ·gc.alloc.rate.norm: 54920.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 12988.146 ops/s
[info]                  ·gc.alloc.rate:            453.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.565 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82007.021 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 12998.338 ops/s
[info]                  ·gc.alloc.rate:            453.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81943.944 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 13028.600 ops/s
[info]                  ·gc.alloc.rate:      454.569 MB/sec
[info]                  ·gc.alloc.rate.norm: 54920.039 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 12954.781 ops/s
[info]                  ·gc.alloc.rate:            452.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 82209.524 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   12997.879 ±(99.9%) 111.684 ops/s [Average]
[info]   (min, avg, max) = (12954.781, 12997.879, 13028.600), stdev = 29.004
[info]   CI (99.9%): [12886.195, 13109.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   453.522 ±(99.9%) 3.672 MB/sec [Average]
[info]   (min, avg, max) = (452.177, 453.522, 454.569), stdev = 0.954
[info]   CI (99.9%): [449.850, 457.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   54920.033 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (54920.031, 54920.033, 54920.039), stdev = 0.003
[info]   CI (99.9%): [54920.020, 54920.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.017 ±(99.9%) 1427.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.017, 676.862), stdev = 370.641
[info]   CI (99.9%): [≈ 0, 1833.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   49232.098 ±(99.9%) 173058.173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49232.098, 82209.524), stdev = 44942.658
[info]   CI (99.9%): [≈ 0, 222290.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 68.00% complete, ETA 00:36:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20555.519 ops/s
[info] # Warmup Iteration   2: 23213.354 ops/s
[info] # Warmup Iteration   3: 23889.261 ops/s
[info] # Warmup Iteration   4: 24057.112 ops/s
[info] # Warmup Iteration   5: 23677.166 ops/s
[info] Iteration   1: 24191.085 ops/s
[info]                  ·gc.alloc.rate:      453.314 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 24085.545 ops/s
[info]                  ·gc.alloc.rate:            451.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44310.933 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 24089.044 ops/s
[info]                  ·gc.alloc.rate:            451.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44303.576 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 24183.878 ops/s
[info]                  ·gc.alloc.rate:      453.169 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496.018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 24083.873 ops/s
[info]                  ·gc.alloc.rate:            451.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44312.772 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24126.685 ±(99.9%) 214.054 ops/s [Average]
[info]   (min, avg, max) = (24083.873, 24126.685, 24191.085), stdev = 55.589
[info]   CI (99.9%): [23912.631, 24340.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   452.145 ±(99.9%) 3.875 MB/sec [Average]
[info]   (min, avg, max) = (451.320, 452.145, 453.314), stdev = 1.006
[info]   CI (99.9%): [448.270, 456.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.017 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (29496.017, 29496.017, 29496.018), stdev = 0.001
[info]   CI (99.9%): [29496.015, 29496.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   406.870 ±(99.9%) 1430.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.870, 678.347), stdev = 371.419
[info]   CI (99.9%): [≈ 0, 1837.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   26585.456 ±(99.9%) 93451.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26585.456, 44312.772), stdev = 24269.090
[info]   CI (99.9%): [≈ 0, 120037.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 4.000), stdev = 2.049
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 68.24% complete, ETA 00:35:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 685.690 ops/s
[info] # Warmup Iteration   2: 2080.722 ops/s
[info] # Warmup Iteration   3: 2141.995 ops/s
[info] # Warmup Iteration   4: 2131.003 ops/s
[info] # Warmup Iteration   5: 2161.785 ops/s
[info] Iteration   1: 2153.604 ops/s
[info]                  ·gc.alloc.rate:            1342.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       980912.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 989185.902 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2155.121 ops/s
[info]                  ·gc.alloc.rate:            1343.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       980912.204 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 988268.289 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2157.069 ops/s
[info]                  ·gc.alloc.rate:            1344.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       980912.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 987352.378 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 2159.234 ops/s
[info]                  ·gc.alloc.rate:                   1345.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              980912.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1357.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        989350.874 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3398.163 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2168.147 ops/s
[info]                  ·gc.alloc.rate:                                  1351.284 MB/sec
[info]                  ·gc.alloc.rate.norm:                             980912.188 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 80.557 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       989113.184 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2158.635 ±(99.9%) 22.032 ops/s [Average]
[info]   (min, avg, max) = (2153.604, 2158.635, 2168.147), stdev = 5.722
[info]   CI (99.9%): [2136.604, 2180.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1345.358 ±(99.9%) 13.803 MB/sec [Average]
[info]   (min, avg, max) = (1342.105, 1345.358, 1351.284), stdev = 3.585
[info]   CI (99.9%): [1331.554, 1359.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   980912.192 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (980912.188, 980912.192, 980912.204), stdev = 0.007
[info]   CI (99.9%): [980912.166, 980912.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.111), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   16.111 ±(99.9%) 138.724 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.111, 80.557), stdev = 36.026
[info]   CI (99.9%): [≈ 0, 154.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.977 ±(99.9%) 15.760 MB/sec [Average]
[info]   (min, avg, max) = (1353.187, 1355.977, 1362.582), stdev = 4.093
[info]   CI (99.9%): [1340.217, 1371.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   988654.125 ±(99.9%) 3234.538 B/op [Average]
[info]   (min, avg, max) = (987352.378, 988654.125, 989350.874), stdev = 839.999
[info]   CI (99.9%): [985419.588, 991888.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   679.633 ±(99.9%) 5851.842 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 679.633, 3398.163), stdev = 1519.705
[info]   CI (99.9%): [≈ 0, 6531.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 11.000), stdev = 2.793
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68.47% complete, ETA 00:35:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4950.234 ops/s
[info] # Warmup Iteration   2: 7106.051 ops/s
[info] # Warmup Iteration   3: 7288.211 ops/s
[info] # Warmup Iteration   4: 7328.210 ops/s
[info] # Warmup Iteration   5: 7308.368 ops/s
[info] Iteration   1: 7134.146 ops/s
[info]                  ·gc.alloc.rate:            1407.948 MB/sec
[info]                  ·gc.alloc.rate.norm:       310576.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2011.068 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 443617.004 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 7316.054 ops/s
[info]                  ·gc.alloc.rate:                   1443.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              310576.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        291589.527 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 143.287 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 7416.541 ops/s
[info]                  ·gc.alloc.rate:                   1463.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              310576.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        287800.045 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 706.778 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 7400.037 ops/s
[info]                  ·gc.alloc.rate:                                  1460.199 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310581.947 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.215 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 45.687 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       289838.759 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7422.664 ops/s
[info]                  ·gc.alloc.rate:                                  1464.608 MB/sec
[info]                  ·gc.alloc.rate.norm:                             310600.055 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.806 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       288979.862 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7337.889 ±(99.9%) 468.542 ops/s [Average]
[info]   (min, avg, max) = (7134.146, 7337.889, 7422.664), stdev = 121.679
[info]   CI (99.9%): [6869.346, 7806.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1447.944 ±(99.9%) 92.018 MB/sec [Average]
[info]   (min, avg, max) = (1407.948, 1447.944, 1464.608), stdev = 23.897
[info]   CI (99.9%): [1355.926, 1539.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   310582.035 ±(99.9%) 40.013 B/op [Average]
[info]   (min, avg, max) = (310576.055, 310582.035, 310600.055), stdev = 10.391
[info]   CI (99.9%): [310542.021, 310622.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.215), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   9.699 ±(99.9%) 77.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.699, 45.687), stdev = 20.155
[info]   CI (99.9%): [≈ 0, 87.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1489.560 ±(99.9%) 1122.666 MB/sec [Average]
[info]   (min, avg, max) = (1355.348, 1489.560, 2011.068), stdev = 291.553
[info]   CI (99.9%): [366.894, 2612.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   320365.040 ±(99.9%) 265362.447 B/op [Average]
[info]   (min, avg, max) = (287800.045, 320365.040, 443617.004), stdev = 68913.785
[info]   CI (99.9%): [55002.592, 585727.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   170.013 ±(99.9%) 1179.869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 170.013, 706.778), stdev = 306.408
[info]   CI (99.9%): [≈ 0, 1349.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 14.000), stdev = 5.273
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68.71% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4655.748 ops/s
[info] # Warmup Iteration   2: 51502.501 ops/s
[info] # Warmup Iteration   3: 51924.239 ops/s
[info] # Warmup Iteration   4: 51948.519 ops/s
[info] # Warmup Iteration   5: 52546.206 ops/s
[info] Iteration   1: 52267.809 ops/s
[info]                  ·gc.alloc.rate:      488.541 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 52529.297 ops/s
[info]                  ·gc.alloc.rate:            490.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20217.890 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 52495.145 ops/s
[info]                  ·gc.alloc.rate:            490.635 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20230.597 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 52831.558 ops/s
[info]                  ·gc.alloc.rate:      493.808 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 52294.387 ops/s
[info]                  ·gc.alloc.rate:            488.788 MB/sec
[info]                  ·gc.alloc.rate.norm:       14712.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20308.341 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   52483.639 ±(99.9%) 873.137 ops/s [Average]
[info]   (min, avg, max) = (52267.809, 52483.639, 52831.558), stdev = 226.751
[info]   CI (99.9%): [51610.502, 53356.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   490.547 ±(99.9%) 8.153 MB/sec [Average]
[info]   (min, avg, max) = (488.541, 490.547, 493.808), stdev = 2.117
[info]   CI (99.9%): [482.394, 498.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14712.008, 14712.008, 14712.008), stdev = 0.001
[info]   CI (99.9%): [14712.007, 14712.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.819 ±(99.9%) 1422.996 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.819, 674.719), stdev = 369.547
[info]   CI (99.9%): [≈ 0, 1827.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   12151.366 ±(99.9%) 42713.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12151.366, 20308.341), stdev = 11092.682
[info]   CI (99.9%): [≈ 0, 54865.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68.94% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ce803297/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 19964.708 ops/s
[info] # Warmup Iteration   2: 37042.159 ops/s
[info] # Warmup Iteration   3: 37340.452 ops/s
[info] # Warmup Iteration   4: 37617.418 ops/s
[info] # Warmup Iteration   5: 37488.873 ops/s
[info] Iteration   1: 37389.176 ops/s
[info]                  ·gc.alloc.rate:            556.611 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.783 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28488.427 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 37438.281 ops/s
[info]                  ·gc.alloc.rate:            557.279 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.837 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28451.907 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 37461.538 ops/s
[info]                  ·gc.alloc.rate:            557.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.890 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28433.683 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 37431.550 ops/s
[info]                  ·gc.alloc.rate:            557.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.868 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28456.467 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 37644.786 ops/s
[info]                  ·gc.alloc.rate:      560.414 MB/sec
[info]                  ·gc.alloc.rate.norm: 23431.822 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   37473.066 ±(99.9%) 383.095 ops/s [Average]
[info]   (min, avg, max) = (37389.176, 37473.066, 37644.786), stdev = 99.489
[info]   CI (99.9%): [37089.971, 37856.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   557.829 ±(99.9%) 5.743 MB/sec [Average]
[info]   (min, avg, max) = (556.611, 557.829, 560.414), stdev = 1.491
[info]   CI (99.9%): [552.086, 563.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.840 ±(99.9%) 0.160 B/op [Average]
[info]   (min, avg, max) = (23431.783, 23431.840, 23431.890), stdev = 0.042
[info]   CI (99.9%): [23431.680, 23432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.352 ±(99.9%) 1165.301 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.352, 676.729), stdev = 302.625
[info]   CI (99.9%): [≈ 0, 1706.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22766.097 ±(99.9%) 49005.799 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22766.097, 28488.427), stdev = 12726.650
[info]   CI (99.9%): [≈ 0, 71771.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.200, 6.000), stdev = 2.387
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 69.18% complete, ETA 00:34:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63396.001 ops/s
[info] # Warmup Iteration   2: 73193.773 ops/s
[info] # Warmup Iteration   3: 73538.191 ops/s
[info] # Warmup Iteration   4: 74358.429 ops/s
[info] # Warmup Iteration   5: 74299.132 ops/s
[info] Iteration   1: 74541.217 ops/s
[info]                  ·gc.alloc.rate:      560.339 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 70219.578 ops/s
[info]                  ·gc.alloc.rate:            527.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15184.636 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 72152.673 ops/s
[info]                  ·gc.alloc.rate:            542.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14777.271 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 74317.869 ops/s
[info]                  ·gc.alloc.rate:            558.690 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14346.470 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 74070.142 ops/s
[info]                  ·gc.alloc.rate:            556.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.400 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14394.884 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   73060.296 ±(99.9%) 7123.135 ops/s [Average]
[info]   (min, avg, max) = (70219.578, 73060.296, 74541.217), stdev = 1849.856
[info]   CI (99.9%): [65937.161, 80183.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   549.245 ±(99.9%) 53.397 MB/sec [Average]
[info]   (min, avg, max) = (527.940, 549.245, 560.339), stdev = 13.867
[info]   CI (99.9%): [495.848, 602.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11832.006, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   541.969 ±(99.9%) 1166.630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.969, 677.534), stdev = 302.970
[info]   CI (99.9%): [≈ 0, 1708.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11740.652 ±(99.9%) 25306.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11740.652, 15184.636), stdev = 6571.914
[info]   CI (99.9%): [≈ 0, 37046.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69.41% complete, ETA 00:34:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83807.099 ops/s
[info] # Warmup Iteration   2: 96225.383 ops/s
[info] # Warmup Iteration   3: 96395.280 ops/s
[info] # Warmup Iteration   4: 96050.737 ops/s
[info] # Warmup Iteration   5: 96430.925 ops/s
[info] Iteration   1: 96432.653 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 96676.861 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 96592.660 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 96681.018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 96737.636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   96624.166 ±(99.9%) 457.863 ops/s [Average]
[info]   (min, avg, max) = (96432.653, 96624.166, 96737.636), stdev = 118.905
[info]   CI (99.9%): [96166.303, 97082.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.005), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69.65% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1769.039 ops/s
[info] # Warmup Iteration   2: 4736.111 ops/s
[info] # Warmup Iteration   3: 4787.463 ops/s
[info] # Warmup Iteration   4: 4893.329 ops/s
[info] # Warmup Iteration   5: 4895.052 ops/s
[info] Iteration   1: 4908.473 ops/s
[info]                  ·gc.alloc.rate:            1485.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       476472.398 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433952.430 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 4915.498 ops/s
[info]                  ·gc.alloc.rate:            1487.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       476471.559 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433334.641 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 4888.036 ops/s
[info]                  ·gc.alloc.rate:                   1479.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              476472.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        655011.476 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1501.336 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 4932.931 ops/s
[info]                  ·gc.alloc.rate:                                  1493.315 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476471.467 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.214 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 68.384 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       434816.882 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 4934.964 ops/s
[info]                  ·gc.alloc.rate:                                  1494.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             476472.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.201 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       434640.700 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   4915.981 ±(99.9%) 74.199 ops/s [Average]
[info]   (min, avg, max) = (4888.036, 4915.981, 4934.964), stdev = 19.269
[info]   CI (99.9%): [4841.782, 4990.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1488.137 ±(99.9%) 22.605 MB/sec [Average]
[info]   (min, avg, max) = (1479.703, 1488.137, 1494.006), stdev = 5.871
[info]   CI (99.9%): [1465.532, 1510.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   476471.920 ±(99.9%) 1.532 B/op [Average]
[info]   (min, avg, max) = (476471.467, 476471.920, 476472.398), stdev = 0.398
[info]   CI (99.9%): [476470.388, 476473.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.044 ±(99.9%) 0.368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.044, 0.214), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   13.917 ±(99.9%) 117.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.917, 68.384), stdev = 30.453
[info]   CI (99.9%): [≈ 0, 131.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.228 ±(99.9%) 1164.552 MB/sec [Average]
[info]   (min, avg, max) = (1353.143, 1493.228, 2034.163), stdev = 302.430
[info]   CI (99.9%): [328.676, 2657.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   478351.226 ±(99.9%) 380281.253 B/op [Average]
[info]   (min, avg, max) = (433334.641, 478351.226, 655011.476), stdev = 98757.834
[info]   CI (99.9%): [98069.973, 858632.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   300.267 ±(99.9%) 2585.391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 300.267, 1501.336), stdev = 671.418
[info]   CI (99.9%): [≈ 0, 2885.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 13.000), stdev = 4.604
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69.88% complete, ETA 00:34:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3330167.954 ops/s
[info] # Warmup Iteration   2: 4804776.395 ops/s
[info] # Warmup Iteration   3: 4864270.956 ops/s
[info] # Warmup Iteration   4: 4892288.920 ops/s
[info] # Warmup Iteration   5: 4845716.257 ops/s
[info] Iteration   1: 4878409.599 ops/s
[info]                  ·gc.alloc.rate:                                  3024.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1099.247 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 4854459.398 ops/s
[info]                  ·gc.alloc.rate:            3010.063 MB/sec
[info]                  ·gc.alloc.rate.norm:       976.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 883.739 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 4839189.193 ops/s
[info]                  ·gc.alloc.rate:                                  3000.641 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.839 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1108.122 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 4898838.278 ops/s
[info]                  ·gc.alloc.rate:                                  3038.475 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       875.714 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 4886432.426 ops/s
[info]                  ·gc.alloc.rate:                                  3029.933 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1097.375 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   4871465.779 ±(99.9%) 93382.400 ops/s [Average]
[info]   (min, avg, max) = (4839189.193, 4871465.779, 4898838.278), stdev = 24251.113
[info]   CI (99.9%): [4778083.379, 4964848.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3020.778 ±(99.9%) 58.818 MB/sec [Average]
[info]   (min, avg, max) = (3000.641, 3020.778, 3038.475), stdev = 15.275
[info]   CI (99.9%): [2961.959, 3079.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3134.419 ±(99.9%) 1436.028 MB/sec [Average]
[info]   (min, avg, max) = (2725.522, 3134.419, 3406.839), stdev = 372.932
[info]   CI (99.9%): [1698.392, 4570.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1012.839 ±(99.9%) 468.299 B/op [Average]
[info]   (min, avg, max) = (875.714, 1012.839, 1108.122), stdev = 121.616
[info]   CI (99.9%): [544.540, 1481.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 70.12% complete, ETA 00:33:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.927 ops/s
[info] # Warmup Iteration   2: 37672156.885 ops/s
[info] # Warmup Iteration   3: 35773217.579 ops/s
[info] # Warmup Iteration   4: 38241926.562 ops/s
[info] # Warmup Iteration   5: 37064315.638 ops/s
[info] Iteration   1: 38203272.938 ops/s
[info]                  ·gc.alloc.rate:      388.341 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38011719.841 ops/s
[info]                  ·gc.alloc.rate:            386.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27.940 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 37968816.467 ops/s
[info]                  ·gc.alloc.rate:            385.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27.972 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 38138276.638 ops/s
[info]                  ·gc.alloc.rate:      387.841 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 37971039.466 ops/s
[info]                  ·gc.alloc.rate:            386.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27.969 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38058625.070 ±(99.9%) 409348.541 ops/s [Average]
[info]   (min, avg, max) = (37968816.467, 38058625.070, 38203272.938), stdev = 106306.516
[info]   CI (99.9%): [37649276.529, 38467973.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   386.910 ±(99.9%) 4.251 MB/sec [Average]
[info]   (min, avg, max) = (385.967, 386.910, 388.341), stdev = 1.104
[info]   CI (99.9%): [382.659, 391.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   404.853 ±(99.9%) 1423.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 404.853, 674.788), stdev = 369.579
[info]   CI (99.9%): [≈ 0, 1827.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   16.776 ±(99.9%) 58.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.776, 27.972), stdev = 15.314
[info]   CI (99.9%): [≈ 0, 75.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.200, 6.000), stdev = 2.950
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70.35% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2930632.715 ops/s
[info] # Warmup Iteration   2: 7169722.513 ops/s
[info] # Warmup Iteration   3: 7161178.150 ops/s
[info] # Warmup Iteration   4: 7283048.221 ops/s
[info] # Warmup Iteration   5: 7227975.460 ops/s
[info] Iteration   1: 7260935.085 ops/s
[info]                  ·gc.alloc.rate:                                  2730.818 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       590.826 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 7395482.380 ops/s
[info]                  ·gc.alloc.rate:            2781.421 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 580.104 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7408539.542 ops/s
[info]                  ·gc.alloc.rate:                                  2788.023 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       722.913 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 7413147.959 ops/s
[info]                  ·gc.alloc.rate:            2787.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 578.728 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 7440848.819 ops/s
[info]                  ·gc.alloc.rate:            2799.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       592.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 576.547 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   7383790.757 ±(99.9%) 272010.454 ops/s [Average]
[info]   (min, avg, max) = (7260935.085, 7383790.757, 7440848.819), stdev = 70640.251
[info]   CI (99.9%): [7111780.302, 7655801.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2777.540 ±(99.9%) 103.649 MB/sec [Average]
[info]   (min, avg, max) = (2730.818, 2777.540, 2799.498), stdev = 26.917
[info]   CI (99.9%): [2673.890, 2881.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2861.468 ±(99.9%) 1169.037 MB/sec [Average]
[info]   (min, avg, max) = (2725.404, 2861.468, 3404.556), stdev = 303.595
[info]   CI (99.9%): [1692.431, 4030.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   609.823 ±(99.9%) 244.354 B/op [Average]
[info]   (min, avg, max) = (576.547, 609.823, 722.913), stdev = 63.458
[info]   CI (99.9%): [365.470, 854.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70.59% complete, ETA 00:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30428011.249 ops/s
[info] # Warmup Iteration   2: 33509881.817 ops/s
[info] # Warmup Iteration   3: 34482329.292 ops/s
[info] # Warmup Iteration   4: 35621904.709 ops/s
[info] # Warmup Iteration   5: 35606980.583 ops/s
[info] Iteration   1: 35596406.478 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 35626268.013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 35815844.894 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 35590630.608 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 35614712.597 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   35648772.518 ±(99.9%) 363791.067 ops/s [Average]
[info]   (min, avg, max) = (35590630.608, 35648772.518, 35815844.894), stdev = 94475.385
[info]   CI (99.9%): [35284981.451, 36012563.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70.82% complete, ETA 00:33:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22103990.207 ops/s
[info] # Warmup Iteration   2: 28495908.776 ops/s
[info] # Warmup Iteration   3: 27781773.479 ops/s
[info] # Warmup Iteration   4: 28494739.388 ops/s
[info] # Warmup Iteration   5: 26783107.001 ops/s
[info] Iteration   1: 27723094.912 ops/s
[info]                  ·gc.alloc.rate:            986.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38.499 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 27826915.951 ops/s
[info]                  ·gc.alloc.rate:            989.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38.354 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 27367997.086 ops/s
[info]                  ·gc.alloc.rate:            973.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77.995 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 28475231.181 ops/s
[info]                  ·gc.alloc.rate:            1013.082 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 27887118.680 ops/s
[info]                  ·gc.alloc.rate:            992.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       56.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76.543 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   27856071.562 ±(99.9%) 1541547.106 ops/s [Average]
[info]   (min, avg, max) = (27367997.086, 27856071.562, 28475231.181), stdev = 400334.888
[info]   CI (99.9%): [26314524.456, 29397618.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   991.009 ±(99.9%) 54.974 MB/sec [Average]
[info]   (min, avg, max) = (973.581, 991.009, 1013.082), stdev = 14.277
[info]   CI (99.9%): [936.035, 1045.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56.000, 56.000, 56.000), stdev = 0.001
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   949.224 ±(99.9%) 1429.861 MB/sec [Average]
[info]   (min, avg, max) = (678.032, 949.224, 1356.025), stdev = 371.330
[info]   CI (99.9%): [≈ 0, 2379.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   53.774 ±(99.9%) 82.625 B/op [Average]
[info]   (min, avg, max) = (37.480, 53.774, 77.995), stdev = 21.457
[info]   CI (99.9%): [≈ 0, 136.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.382
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 71.06% complete, ETA 00:32:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3312412.129 ops/s
[info] # Warmup Iteration   2: 5949993.224 ops/s
[info] # Warmup Iteration   3: 5999949.698 ops/s
[info] # Warmup Iteration   4: 5915057.736 ops/s
[info] # Warmup Iteration   5: 5968214.983 ops/s
[info] Iteration   1: 6067110.529 ops/s
[info]                  ·gc.alloc.rate:                                  2929.268 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       707.088 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   2: 6065218.801 ops/s
[info]                  ·gc.alloc.rate:            2929.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3407.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 884.133 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 6048212.932 ops/s
[info]                  ·gc.alloc.rate:                                  2920.434 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       709.311 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 6075893.200 ops/s
[info]                  ·gc.alloc.rate:            2934.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 706.053 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 6070679.687 ops/s
[info]                  ·gc.alloc.rate:                                  2931.195 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       706.648 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   6065423.030 ±(99.9%) 40217.286 ops/s [Average]
[info]   (min, avg, max) = (6048212.932, 6065423.030, 6075893.200), stdev = 10444.301
[info]   CI (99.9%): [6025205.744, 6105640.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2928.841 ±(99.9%) 19.592 MB/sec [Average]
[info]   (min, avg, max) = (2920.434, 2928.841, 2934.033), stdev = 5.088
[info]   CI (99.9%): [2909.249, 2948.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2861.978 ±(99.9%) 1174.750 MB/sec [Average]
[info]   (min, avg, max) = (2725.330, 2861.978, 3407.720), stdev = 305.079
[info]   CI (99.9%): [1687.228, 4036.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   742.647 ±(99.9%) 304.597 B/op [Average]
[info]   (min, avg, max) = (706.053, 742.647, 884.133), stdev = 79.103
[info]   CI (99.9%): [438.049, 1047.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71.29% complete, ETA 00:32:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14366725.234 ops/s
[info] # Warmup Iteration   2: 21552649.214 ops/s
[info] # Warmup Iteration   3: 21854001.228 ops/s
[info] # Warmup Iteration   4: 21752039.521 ops/s
[info] # Warmup Iteration   5: 21774925.953 ops/s
[info] Iteration   1: 21698288.698 ops/s
[info]                  ·gc.alloc.rate:                   1984.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              144.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2034.133 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        147.569 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.242 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 21884482.180 ops/s
[info]                  ·gc.alloc.rate:                                  2002.625 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.106 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       147.032 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 22016467.560 ops/s
[info]                  ·gc.alloc.rate:                                  2014.285 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       146.151 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 21952560.013 ops/s
[info]                  ·gc.alloc.rate:            2008.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       144.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.931 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97.716 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 22002752.509 ops/s
[info]                  ·gc.alloc.rate:            2012.892 MB/sec
[info]                  ·gc.alloc.rate.norm:       144.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.239 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   21910910.192 ±(99.9%) 499168.881 ops/s [Average]
[info]   (min, avg, max) = (21698288.698, 21910910.192, 22016467.560), stdev = 129632.573
[info]   CI (99.9%): [21411741.311, 22410079.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2004.646 ±(99.9%) 45.886 MB/sec [Average]
[info]   (min, avg, max) = (1984.941, 2004.646, 2014.285), stdev = 11.916
[info]   CI (99.9%): [1958.760, 2050.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (144.000, 144.000, 144.000), stdev = 0.001
[info]   CI (99.9%): [144.000, 144.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1906.084 ±(99.9%) 1169.305 MB/sec [Average]
[info]   (min, avg, max) = (1362.931, 1906.084, 2044.795), stdev = 303.665
[info]   CI (99.9%): [736.779, 3075.389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   136.941 ±(99.9%) 84.465 B/op [Average]
[info]   (min, avg, max) = (97.716, 136.941, 147.569), stdev = 21.935
[info]   CI (99.9%): [52.477, 221.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.048 ±(99.9%) 0.416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.242), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 12.000), stdev = 3.962
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71.53% complete, ETA 00:32:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.907 ops/s
[info] # Warmup Iteration   2: 52634864.768 ops/s
[info] # Warmup Iteration   3: 54421583.622 ops/s
[info] # Warmup Iteration   4: 52806776.786 ops/s
[info] # Warmup Iteration   5: 54464104.018 ops/s
[info] Iteration   1: 53321838.741 ops/s
[info]                  ·gc.alloc.rate:            1626.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2024.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59.753 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 53527077.700 ops/s
[info]                  ·gc.alloc.rate:            1632.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39.681 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 53952454.895 ops/s
[info]                  ·gc.alloc.rate:                                  1645.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.466 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2035.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59.366 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.194 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 55174101.228 ops/s
[info]                  ·gc.alloc.rate:                                  1682.818 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38.877 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 55170313.579 ops/s
[info]                  ·gc.alloc.rate:            1683.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1363.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   54229157.229 ±(99.9%) 3428695.781 ops/s [Average]
[info]   (min, avg, max) = (53321838.741, 54229157.229, 55174101.228), stdev = 890421.406
[info]   CI (99.9%): [50800461.448, 57657853.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1654.115 ±(99.9%) 105.142 MB/sec [Average]
[info]   (min, avg, max) = (1626.271, 1654.115, 1683.153), stdev = 27.305
[info]   CI (99.9%): [1548.973, 1759.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.105 ±(99.9%) 0.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.105, 0.466), stdev = 0.203
[info]   CI (99.9%): [≈ 0, 0.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.014), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1627.193 ±(99.9%) 1416.519 MB/sec [Average]
[info]   (min, avg, max) = (1349.432, 1627.193, 2035.733), stdev = 367.866
[info]   CI (99.9%): [210.674, 3043.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   47.311 ±(99.9%) 43.075 B/op [Average]
[info]   (min, avg, max) = (38.877, 47.311, 59.753), stdev = 11.187
[info]   CI (99.9%): [4.236, 90.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.333 ±(99.9%) 11.475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.333, 6.664), stdev = 2.980
[info]   CI (99.9%): [≈ 0, 12.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.039 ±(99.9%) 0.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.194), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 16.000), stdev = 5.857
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71.76% complete, ETA 00:31:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3568932.217 ops/s
[info] # Warmup Iteration   2: 11303534.063 ops/s
[info] # Warmup Iteration   3: 11516821.418 ops/s
[info] # Warmup Iteration   4: 11447260.928 ops/s
[info] # Warmup Iteration   5: 11409218.535 ops/s
[info] Iteration   1: 11418817.084 ops/s
[info]                  ·gc.alloc.rate:                                  2263.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       281.232 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.551 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 11650887.413 ops/s
[info]                  ·gc.alloc.rate:                                  2309.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       368.219 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 11544006.201 ops/s
[info]                  ·gc.alloc.rate:            2288.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 278.727 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 11633551.103 ops/s
[info]                  ·gc.alloc.rate:                                  2305.911 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       276.581 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 11434960.223 ops/s
[info]                  ·gc.alloc.rate:                                  2266.639 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.530 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       375.166 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11536444.405 ±(99.9%) 416151.649 ops/s [Average]
[info]   (min, avg, max) = (11418817.084, 11536444.405, 11650887.413), stdev = 108073.262
[info]   CI (99.9%): [11120292.756, 11952596.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2286.707 ±(99.9%) 82.577 MB/sec [Average]
[info]   (min, avg, max) = (2263.319, 2286.707, 2309.486), stdev = 21.445
[info]   CI (99.9%): [2204.129, 2369.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.087), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2315.916 ±(99.9%) 1440.047 MB/sec [Average]
[info]   (min, avg, max) = (2040.120, 2315.916, 2725.634), stdev = 373.976
[info]   CI (99.9%): [875.869, 3755.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   315.985 ±(99.9%) 196.151 B/op [Average]
[info]   (min, avg, max) = (276.581, 315.985, 375.166), stdev = 50.940
[info]   CI (99.9%): [119.835, 512.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.110 ±(99.9%) 0.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.551), stdev = 0.246
[info]   CI (99.9%): [≈ 0, 1.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.647
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 72.00% complete, ETA 00:31:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31989294.807 ops/s
[info] # Warmup Iteration   2: 41334298.493 ops/s
[info] # Warmup Iteration   3: 43868162.891 ops/s
[info] # Warmup Iteration   4: 44989808.606 ops/s
[info] # Warmup Iteration   5: 39923827.638 ops/s
[info] Iteration   1: 44980081.718 ops/s
[info]                  ·gc.alloc.rate:            914.392 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.705 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 44992193.576 ops/s
[info]                  ·gc.alloc.rate:            914.655 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.698 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44860958.364 ops/s
[info]                  ·gc.alloc.rate:            911.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 47.535 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 44299852.620 ops/s
[info]                  ·gc.alloc.rate:            900.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.466 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.068 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 44992046.999 ops/s
[info]                  ·gc.alloc.rate:            914.697 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23.698 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   44825026.656 ±(99.9%) 1150340.000 ops/s [Average]
[info]   (min, avg, max) = (44299852.620, 44825026.656, 44992193.576), stdev = 298739.645
[info]   CI (99.9%): [43674686.656, 45975366.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   911.290 ±(99.9%) 23.135 MB/sec [Average]
[info]   (min, avg, max) = (900.737, 911.290, 914.697), stdev = 6.008
[info]   CI (99.9%): [888.156, 934.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   812.855 ±(99.9%) 1166.397 MB/sec [Average]
[info]   (min, avg, max) = (677.350, 812.855, 1354.716), stdev = 302.910
[info]   CI (99.9%): [≈ 0, 1979.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28.541 ±(99.9%) 40.892 B/op [Average]
[info]   (min, avg, max) = (23.698, 28.541, 47.535), stdev = 10.619
[info]   CI (99.9%): [≈ 0, 69.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.24% complete, ETA 00:31:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35655641.732 ops/s
[info] # Warmup Iteration   2: 49527628.886 ops/s
[info] # Warmup Iteration   3: 50691560.140 ops/s
[info] # Warmup Iteration   4: 49068187.565 ops/s
[info] # Warmup Iteration   5: 48168556.785 ops/s
[info] Iteration   1: 50861953.207 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 50816237.828 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 50858144.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 50859371.928 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 50824403.324 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   50844022.146 ±(99.9%) 84219.238 ops/s [Average]
[info]   (min, avg, max) = (50816237.828, 50844022.146, 50861953.207), stdev = 21871.469
[info]   CI (99.9%): [50759802.908, 50928241.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72.47% complete, ETA 00:31:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42872087.184 ops/s
[info] # Warmup Iteration   2: 40281147.960 ops/s
[info] # Warmup Iteration   3: 40458751.367 ops/s
[info] # Warmup Iteration   4: 40489687.214 ops/s
[info] # Warmup Iteration   5: 40403018.120 ops/s
[info] Iteration   1: 40495337.543 ops/s
[info]                  ·gc.alloc.rate:                                  2057.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.328 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.129 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 40724142.834 ops/s
[info]                  ·gc.alloc.rate:                                  2069.750 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.009 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 40706237.928 ops/s
[info]                  ·gc.alloc.rate:            2068.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 79.043 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 40749127.940 ops/s
[info]                  ·gc.alloc.rate:                                  2071.066 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78.958 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 40727644.031 ops/s
[info]                  ·gc.alloc.rate:                                  2070.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.221 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79.001 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   40680498.055 ±(99.9%) 402869.317 ops/s [Average]
[info]   (min, avg, max) = (40495337.543, 40680498.055, 40749127.940), stdev = 104623.882
[info]   CI (99.9%): [40277628.738, 41083367.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2067.525 ±(99.9%) 20.900 MB/sec [Average]
[info]   (min, avg, max) = (2057.924, 2067.525, 2071.066), stdev = 5.428
[info]   CI (99.9%): [2046.625, 2088.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.112), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   2043.423 ±(99.9%) 6.003 MB/sec [Average]
[info]   (min, avg, max) = (2040.636, 2043.423, 2044.221), stdev = 1.559
[info]   CI (99.9%): [2037.420, 2049.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   79.068 ±(99.9%) 0.572 B/op [Average]
[info]   (min, avg, max) = (78.958, 79.068, 79.328), stdev = 0.149
[info]   CI (99.9%): [78.496, 79.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.026 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72.71% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1372875.863 ops/s
[info] # Warmup Iteration   2: 2092466.994 ops/s
[info] # Warmup Iteration   3: 2158706.706 ops/s
[info] # Warmup Iteration   4: 2175734.673 ops/s
[info] # Warmup Iteration   5: 2189767.917 ops/s
[info] Iteration   1: 2178313.698 ops/s
[info]                  ·gc.alloc.rate:            1749.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1468.392 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2193675.897 ops/s
[info]                  ·gc.alloc.rate:                                  1761.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.041 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1461.010 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.868 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 2211221.690 ops/s
[info]                  ·gc.alloc.rate:                                  1776.297 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.137 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.234 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       970.067 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 2207907.771 ops/s
[info]                  ·gc.alloc.rate:            1773.674 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1457.245 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2209590.761 ops/s
[info]                  ·gc.alloc.rate:            1774.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.856 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 970.776 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2200141.963 ±(99.9%) 54136.516 ops/s [Average]
[info]   (min, avg, max) = (2178313.698, 2200141.963, 2211221.690), stdev = 14059.081
[info]   CI (99.9%): [2146005.447, 2254278.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1767.092 ±(99.9%) 44.085 MB/sec [Average]
[info]   (min, avg, max) = (1749.489, 1767.092, 1776.297), stdev = 11.449
[info]   CI (99.9%): [1723.007, 1811.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.137), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.098), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.871 ±(99.9%) 1423.129 MB/sec [Average]
[info]   (min, avg, max) = (1362.856, 1767.871, 2044.840), stdev = 369.582
[info]   CI (99.9%): [344.743, 3191.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1265.498 ±(99.9%) 1037.350 B/op [Average]
[info]   (min, avg, max) = (970.067, 1265.498, 1468.392), stdev = 269.396
[info]   CI (99.9%): [228.148, 2302.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.574 ±(99.9%) 4.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.868), stdev = 1.282
[info]   CI (99.9%): [≈ 0, 5.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 4.183
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72.94% complete, ETA 00:30:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126625.056 ops/s
[info] # Warmup Iteration   2: 141860.412 ops/s
[info] # Warmup Iteration   3: 143981.927 ops/s
[info] # Warmup Iteration   4: 142246.479 ops/s
[info] # Warmup Iteration   5: 144818.763 ops/s
[info] Iteration   1: 144301.416 ops/s
[info]                  ·gc.alloc.rate:                                  2646.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29729.730 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 145242.719 ops/s
[info]                  ·gc.alloc.rate:                                  2664.115 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.490 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29537.149 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 144789.987 ops/s
[info]                  ·gc.alloc.rate:                                  2655.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.539 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29629.341 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 145772.132 ops/s
[info]                  ·gc.alloc.rate:            2673.648 MB/sec
[info]                  ·gc.alloc.rate.norm:       28872.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29429.776 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 145259.480 ops/s
[info]                  ·gc.alloc.rate:                                  2664.553 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29532.270 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   145073.147 ±(99.9%) 2133.377 ops/s [Average]
[info]   (min, avg, max) = (144301.416, 145073.147, 145772.132), stdev = 554.031
[info]   CI (99.9%): [142939.770, 147206.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2661.012 ±(99.9%) 38.902 MB/sec [Average]
[info]   (min, avg, max) = (2646.870, 2661.012, 2673.648), stdev = 10.103
[info]   CI (99.9%): [2622.110, 2699.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.002, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2725.464 ±(99.9%) 0.362 MB/sec [Average]
[info]   (min, avg, max) = (2725.300, 2725.464, 2725.539), stdev = 0.094
[info]   CI (99.9%): [2725.102, 2725.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   29571.653 ±(99.9%) 435.595 B/op [Average]
[info]   (min, avg, max) = (29429.776, 29571.653, 29729.730), stdev = 113.123
[info]   CI (99.9%): [29136.058, 30007.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 9.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.18% complete, ETA 00:30:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7172.729 ops/s
[info] # Warmup Iteration   2: 20647.553 ops/s
[info] # Warmup Iteration   3: 20755.295 ops/s
[info] # Warmup Iteration   4: 20398.703 ops/s
[info] # Warmup Iteration   5: 21060.278 ops/s
[info] Iteration   1: 20545.717 ops/s
[info]                  ·gc.alloc.rate:            1624.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       124424.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2030.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 155526.017 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 21142.596 ops/s
[info]                  ·gc.alloc.rate:                   1671.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              124424.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        100756.913 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 347.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 21160.346 ops/s
[info]                  ·gc.alloc.rate:                                  1672.651 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.913 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101369.613 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 21095.397 ops/s
[info]                  ·gc.alloc.rate:                                  1668.101 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.629 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       152522.856 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 21340.501 ops/s
[info]                  ·gc.alloc.rate:                                  1687.664 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.504 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       100510.026 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   21056.911 ±(99.9%) 1157.219 ops/s [Average]
[info]   (min, avg, max) = (20545.717, 21056.911, 21340.501), stdev = 300.526
[info]   CI (99.9%): [19899.692, 22214.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1664.819 ±(99.9%) 92.256 MB/sec [Average]
[info]   (min, avg, max) = (1624.118, 1664.819, 1687.664), stdev = 23.959
[info]   CI (99.9%): [1572.564, 1757.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   124424.021 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (124424.019, 124424.021, 124424.025), stdev = 0.003
[info]   CI (99.9%): [124424.011, 124424.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.085 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.053), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.209 ±(99.9%) 6.359 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.209, 3.913), stdev = 1.651
[info]   CI (99.9%): [≈ 0, 7.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1630.908 ±(99.9%) 1429.280 MB/sec [Average]
[info]   (min, avg, max) = (1353.608, 1630.908, 2044.811), stdev = 371.179
[info]   CI (99.9%): [201.629, 3060.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   122137.085 ±(99.9%) 112169.549 B/op [Average]
[info]   (min, avg, max) = (100510.026, 122137.085, 155526.017), stdev = 29130.076
[info]   CI (99.9%): [9967.536, 234306.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   69.419 ±(99.9%) 597.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 69.419, 347.096), stdev = 155.226
[info]   CI (99.9%): [≈ 0, 667.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 15.000), stdev = 5.339
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.41% complete, ETA 00:30:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70334.035 ops/s
[info] # Warmup Iteration   2: 127914.295 ops/s
[info] # Warmup Iteration   3: 127534.912 ops/s
[info] # Warmup Iteration   4: 127792.469 ops/s
[info] # Warmup Iteration   5: 127560.116 ops/s
[info] Iteration   1: 127946.658 ops/s
[info]                  ·gc.alloc.rate:                   1421.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16650.307 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.194 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 127382.078 ops/s
[info]                  ·gc.alloc.rate:            1415.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16741.001 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 129892.819 ops/s
[info]                  ·gc.alloc.rate:                   1443.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16408.213 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 56.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 131928.532 ops/s
[info]                  ·gc.alloc.rate:                                  1465.989 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.999 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24388.630 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 131732.539 ops/s
[info]                  ·gc.alloc.rate:            1463.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16283.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   129776.525 ±(99.9%) 8066.258 ops/s [Average]
[info]   (min, avg, max) = (127382.078, 129776.525, 131928.532), stdev = 2094.782
[info]   CI (99.9%): [121710.267, 137842.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1441.862 ±(99.9%) 90.051 MB/sec [Average]
[info]   (min, avg, max) = (1415.029, 1441.862, 1465.989), stdev = 23.386
[info]   CI (99.9%): [1351.812, 1531.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17488.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17488.003, 17488.003, 17488.003), stdev = 0.001
[info]   CI (99.9%): [17488.003, 17488.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.084), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.200 ±(99.9%) 1.721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.999), stdev = 0.447
[info]   CI (99.9%): [≈ 0, 1.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.860 ±(99.9%) 1185.290 MB/sec [Average]
[info]   (min, avg, max) = (1353.446, 1493.860, 2044.457), stdev = 307.816
[info]   CI (99.9%): [308.570, 2679.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18094.260 ±(99.9%) 13567.480 B/op [Average]
[info]   (min, avg, max) = (16283.151, 18094.260, 24388.630), stdev = 3523.431
[info]   CI (99.9%): [4526.780, 31661.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.938 ±(99.9%) 94.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.938, 56.497), stdev = 24.607
[info]   CI (99.9%): [≈ 0, 107.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 10.000), stdev = 3.564
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.65% complete, ETA 00:29:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 431764.703 ops/s
[info] # Warmup Iteration   2: 492772.830 ops/s
[info] # Warmup Iteration   3: 497517.667 ops/s
[info] # Warmup Iteration   4: 497856.886 ops/s
[info] # Warmup Iteration   5: 498129.217 ops/s
[info] Iteration   1: 492912.832 ops/s
[info]                  ·gc.alloc.rate:            1019.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2163.104 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 495261.438 ops/s
[info]                  ·gc.alloc.rate:            1024.513 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.806 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4305.702 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 497930.242 ops/s
[info]                  ·gc.alloc.rate:                   1030.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1352.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4271.776 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.100 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 498833.167 ops/s
[info]                  ·gc.alloc.rate:            1031.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2139.462 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 496285.411 ops/s
[info]                  ·gc.alloc.rate:            1026.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4298.992 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   496244.618 ±(99.9%) 8950.370 ops/s [Average]
[info]   (min, avg, max) = (492912.832, 496244.618, 498833.167), stdev = 2324.383
[info]   CI (99.9%): [487294.248, 505194.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1026.717 ±(99.9%) 19.075 MB/sec [Average]
[info]   (min, avg, max) = (1019.713, 1026.717, 1031.912), stdev = 4.954
[info]   CI (99.9%): [1007.643, 1045.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.638 ±(99.9%) 1426.775 MB/sec [Average]
[info]   (min, avg, max) = (677.440, 1083.638, 1355.424), stdev = 370.529
[info]   CI (99.9%): [≈ 0, 2510.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3435.807 ±(99.9%) 4515.663 B/op [Average]
[info]   (min, avg, max) = (2139.462, 3435.807, 4305.702), stdev = 1172.703
[info]   CI (99.9%): [≈ 0, 7951.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.665), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.420 ±(99.9%) 3.617 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.420, 2.100), stdev = 0.939
[info]   CI (99.9%): [≈ 0, 4.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 8.000), stdev = 2.408
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:29:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 473020.707 ops/s
[info] # Warmup Iteration   2: 531114.677 ops/s
[info] # Warmup Iteration   3: 529313.620 ops/s
[info] # Warmup Iteration   4: 537032.298 ops/s
[info] # Warmup Iteration   5: 535043.381 ops/s
[info] Iteration   1: 538268.835 ops/s
[info]                  ·gc.alloc.rate:            525.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1980.845 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 535571.719 ops/s
[info]                  ·gc.alloc.rate:            522.824 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1990.807 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 530810.686 ops/s
[info]                  ·gc.alloc.rate:                   517.974 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2008.679 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.975 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 542205.711 ops/s
[info]                  ·gc.alloc.rate:      529.102 MB/sec
[info]                  ·gc.alloc.rate.norm: 1536.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 533082.483 ops/s
[info]                  ·gc.alloc.rate:            520.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2002.068 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   535987.887 ±(99.9%) 17143.156 ops/s [Average]
[info]   (min, avg, max) = (530810.686, 535987.887, 542205.711), stdev = 4452.023
[info]   CI (99.9%): [518844.731, 553131.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   523.056 ±(99.9%) 16.703 MB/sec [Average]
[info]   (min, avg, max) = (517.974, 523.056, 529.102), stdev = 4.338
[info]   CI (99.9%): [506.353, 539.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   542.065 ±(99.9%) 1166.836 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.065, 678.022), stdev = 303.024
[info]   CI (99.9%): [≈ 0, 1708.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   1596.480 ±(99.9%) 3436.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1596.480, 2008.679), stdev = 892.523
[info]   CI (99.9%): [≈ 0, 5033.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.395 ±(99.9%) 3.401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.975), stdev = 0.883
[info]   CI (99.9%): [≈ 0, 3.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.12% complete, ETA 00:29:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22496.736 ops/s
[info] # Warmup Iteration   2: 43276.005 ops/s
[info] # Warmup Iteration   3: 44624.203 ops/s
[info] # Warmup Iteration   4: 45006.179 ops/s
[info] # Warmup Iteration   5: 43612.500 ops/s
[info] Iteration   1: 44991.703 ops/s
[info]                  ·gc.alloc.rate:            768.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.721 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23674.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 44887.788 ops/s
[info]                  ·gc.alloc.rate:            766.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.827 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23729.357 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 44083.303 ops/s
[info]                  ·gc.alloc.rate:            753.032 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24162.052 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 44989.999 ops/s
[info]                  ·gc.alloc.rate:                   768.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        23675.042 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.302 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 45064.635 ops/s
[info]                  ·gc.alloc.rate:            769.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       26888.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.469 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23659.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   44803.486 ±(99.9%) 1569.087 ops/s [Average]
[info]   (min, avg, max) = (44083.303, 44803.486, 45064.635), stdev = 407.487
[info]   CI (99.9%): [43234.399, 46372.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   765.399 ±(99.9%) 26.932 MB/sec [Average]
[info]   (min, avg, max) = (753.032, 765.399, 769.917), stdev = 6.994
[info]   CI (99.9%): [738.467, 792.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   26888.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (26888.009, 26888.009, 26888.010), stdev = 0.001
[info]   CI (99.9%): [26888.008, 26888.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   676.883 ±(99.9%) 1.277 MB/sec [Average]
[info]   (min, avg, max) = (676.689, 676.883, 677.469), stdev = 0.332
[info]   CI (99.9%): [675.606, 678.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23780.081 ±(99.9%) 828.576 B/op [Average]
[info]   (min, avg, max) = (23659.437, 23780.081, 24162.052), stdev = 215.179
[info]   CI (99.9%): [22951.505, 24608.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   4.660 ±(99.9%) 40.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.660, 23.302), stdev = 10.421
[info]   CI (99.9%): [≈ 0, 44.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74.35% complete, ETA 00:29:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296574.877 ops/s
[info] # Warmup Iteration   2: 357136.899 ops/s
[info] # Warmup Iteration   3: 362541.872 ops/s
[info] # Warmup Iteration   4: 363311.701 ops/s
[info] # Warmup Iteration   5: 362095.104 ops/s
[info] Iteration   1: 366378.007 ops/s
[info]                  ·gc.alloc.rate:                                  2486.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11709.379 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 365395.461 ops/s
[info]                  ·gc.alloc.rate:            2480.047 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8805.391 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 363080.531 ops/s
[info]                  ·gc.alloc.rate:            2463.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11815.461 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 364900.742 ops/s
[info]                  ·gc.alloc.rate:            2476.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       10680.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11756.412 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 364830.497 ops/s
[info]                  ·gc.alloc.rate:                                  2475.079 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8819.001 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   364917.047 ±(99.9%) 4614.283 ops/s [Average]
[info]   (min, avg, max) = (363080.531, 364917.047, 366378.007), stdev = 1198.315
[info]   CI (99.9%): [360302.764, 369531.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2476.403 ±(99.9%) 32.642 MB/sec [Average]
[info]   (min, avg, max) = (2463.660, 2476.403, 2486.891), stdev = 8.477
[info]   CI (99.9%): [2443.761, 2509.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.001, 10680.001, 10680.001), stdev = 0.001
[info]   CI (99.9%): [10680.001, 10680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.115 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.492 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.287), stdev = 0.128
[info]   CI (99.9%): [≈ 0, 0.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2453.325 ±(99.9%) 1437.905 MB/sec [Average]
[info]   (min, avg, max) = (2043.794, 2453.325, 2726.587), stdev = 373.419
[info]   CI (99.9%): [1015.420, 3891.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10581.129 ±(99.9%) 6219.761 B/op [Average]
[info]   (min, avg, max) = (8805.391, 10581.129, 11815.461), stdev = 1615.252
[info]   CI (99.9%): [4361.368, 16800.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 13.000), stdev = 3.937
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.59% complete, ETA 00:28:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 202269.407 ops/s
[info] # Warmup Iteration   2: 388340.259 ops/s
[info] # Warmup Iteration   3: 399687.637 ops/s
[info] # Warmup Iteration   4: 398827.137 ops/s
[info] # Warmup Iteration   5: 394737.905 ops/s
[info] Iteration   1: 397004.588 ops/s
[info]                  ·gc.alloc.rate:                   1051.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5366.073 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 399107.574 ops/s
[info]                  ·gc.alloc.rate:                   1056.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5340.201 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.627 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 400497.178 ops/s
[info]                  ·gc.alloc.rate:            1060.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2662.257 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 398122.114 ops/s
[info]                  ·gc.alloc.rate:                   1054.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5353.384 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 399781.470 ops/s
[info]                  ·gc.alloc.rate:            1058.801 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2666.951 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   398902.585 ±(99.9%) 5296.811 ops/s [Average]
[info]   (min, avg, max) = (397004.588, 398902.585, 400497.178), stdev = 1375.565
[info]   CI (99.9%): [393605.774, 404199.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1056.286 ±(99.9%) 14.215 MB/sec [Average]
[info]   (min, avg, max) = (1051.142, 1056.286, 1060.455), stdev = 3.692
[info]   CI (99.9%): [1042.070, 1070.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.239 ±(99.9%) 1426.510 MB/sec [Average]
[info]   (min, avg, max) = (677.352, 1083.239, 1354.092), stdev = 370.460
[info]   CI (99.9%): [≈ 0, 2509.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4277.773 ±(99.9%) 5670.629 B/op [Average]
[info]   (min, avg, max) = (2662.257, 4277.773, 5366.073), stdev = 1472.644
[info]   CI (99.9%): [≈ 0, 9948.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.580 ±(99.9%) 5.555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.580, 2.641), stdev = 1.442
[info]   CI (99.9%): [≈ 0, 7.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.82% complete, ETA 00:28:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 406818.078 ops/s
[info] # Warmup Iteration   2: 424957.042 ops/s
[info] # Warmup Iteration   3: 428433.296 ops/s
[info] # Warmup Iteration   4: 428483.490 ops/s
[info] # Warmup Iteration   5: 392027.401 ops/s
[info] Iteration   1: 428018.812 ops/s
[info]                  ·gc.alloc.rate:            844.038 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2493.530 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 428347.212 ops/s
[info]                  ·gc.alloc.rate:            844.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2491.610 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 427149.029 ops/s
[info]                  ·gc.alloc.rate:            842.309 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2498.555 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 425575.576 ops/s
[info]                  ·gc.alloc.rate:            839.311 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5015.460 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 428159.100 ops/s
[info]                  ·gc.alloc.rate:            844.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2492.698 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   427449.946 ±(99.9%) 4405.331 ops/s [Average]
[info]   (min, avg, max) = (425575.576, 427449.946, 428347.212), stdev = 1144.050
[info]   CI (99.9%): [423044.615, 431855.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   842.998 ±(99.9%) 8.781 MB/sec [Average]
[info]   (min, avg, max) = (839.311, 842.998, 844.874), stdev = 2.280
[info]   CI (99.9%): [834.217, 851.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.711 ±(99.9%) 1167.669 MB/sec [Average]
[info]   (min, avg, max) = (678.014, 813.711, 1356.163), stdev = 303.240
[info]   CI (99.9%): [≈ 0, 1981.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2998.371 ±(99.9%) 4341.949 B/op [Average]
[info]   (min, avg, max) = (2491.610, 2998.371, 5015.460), stdev = 1127.590
[info]   CI (99.9%): [≈ 0, 7340.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.06% complete, ETA 00:28:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61119.580 ops/s
[info] # Warmup Iteration   2: 96910.878 ops/s
[info] # Warmup Iteration   3: 96841.108 ops/s
[info] # Warmup Iteration   4: 98113.889 ops/s
[info] # Warmup Iteration   5: 99864.536 ops/s
[info] Iteration   1: 100097.835 ops/s
[info]                  ·gc.alloc.rate:            3492.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53573.053 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 99955.125 ops/s
[info]                  ·gc.alloc.rate:                                  3487.111 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54920.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.487 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53650.221 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 99382.876 ops/s
[info]                  ·gc.alloc.rate:                                  3467.502 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54920.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53956.784 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 98112.042 ops/s
[info]                  ·gc.alloc.rate:                                  3423.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54920.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54658.415 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 97474.483 ops/s
[info]                  ·gc.alloc.rate:            3400.829 MB/sec
[info]                  ·gc.alloc.rate.norm:       54920.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55016.117 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   99004.472 ±(99.9%) 4465.614 ops/s [Average]
[info]   (min, avg, max) = (97474.483, 99004.472, 100097.835), stdev = 1159.706
[info]   CI (99.9%): [94538.859, 103470.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3454.253 ±(99.9%) 155.761 MB/sec [Average]
[info]   (min, avg, max) = (3400.829, 3454.253, 3492.618), stdev = 40.451
[info]   CI (99.9%): [3298.492, 3610.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54920.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54920.004, 54920.004, 54920.005), stdev = 0.001
[info]   CI (99.9%): [54920.003, 54920.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.017 ±(99.9%) 0.068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.042), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3406.763 ±(99.9%) 0.720 MB/sec [Average]
[info]   (min, avg, max) = (3406.487, 3406.763, 3406.959), stdev = 0.187
[info]   CI (99.9%): [3406.043, 3407.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   54170.918 ±(99.9%) 2455.397 B/op [Average]
[info]   (min, avg, max) = (53573.053, 54170.918, 55016.117), stdev = 637.659
[info]   CI (99.9%): [51715.521, 56626.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 12.000), stdev = 2.608
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.29% complete, ETA 00:27:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255806.699 ops/s
[info] # Warmup Iteration   2: 319989.214 ops/s
[info] # Warmup Iteration   3: 330937.253 ops/s
[info] # Warmup Iteration   4: 331342.938 ops/s
[info] # Warmup Iteration   5: 330502.431 ops/s
[info] Iteration   1: 331076.083 ops/s
[info]                  ·gc.alloc.rate:            506.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3223.591 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 330771.184 ops/s
[info]                  ·gc.alloc.rate:            506.010 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3226.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 332243.789 ops/s
[info]                  ·gc.alloc.rate:      508.305 MB/sec
[info]                  ·gc.alloc.rate.norm: 2408.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 330294.271 ops/s
[info]                  ·gc.alloc.rate:            505.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3231.183 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 330853.368 ops/s
[info]                  ·gc.alloc.rate:            506.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       2408.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3225.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   331047.739 ±(99.9%) 2798.889 ops/s [Average]
[info]   (min, avg, max) = (330294.271, 331047.739, 332243.789), stdev = 726.862
[info]   CI (99.9%): [328248.851, 333846.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   506.450 ±(99.9%) 4.352 MB/sec [Average]
[info]   (min, avg, max) = (505.272, 506.450, 508.305), stdev = 1.130
[info]   CI (99.9%): [502.098, 510.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2408.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2408.001, 2408.001, 2408.001), stdev = 0.001
[info]   CI (99.9%): [2408.001, 2408.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.431 ±(99.9%) 1167.624 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.431, 678.060), stdev = 303.228
[info]   CI (99.9%): [≈ 0, 1710.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2581.446 ±(99.9%) 5556.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2581.446, 3231.183), stdev = 1443.075
[info]   CI (99.9%): [≈ 0, 8138.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.53% complete, ETA 00:27:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343073.464 ops/s
[info] # Warmup Iteration   2: 620162.251 ops/s
[info] # Warmup Iteration   3: 629450.424 ops/s
[info] # Warmup Iteration   4: 625197.464 ops/s
[info] # Warmup Iteration   5: 625708.545 ops/s
[info] Iteration   1: 627684.584 ops/s
[info]                  ·gc.alloc.rate:      459.393 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 626996.403 ops/s
[info]                  ·gc.alloc.rate:            458.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1698.938 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 629659.770 ops/s
[info]                  ·gc.alloc.rate:            460.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1691.611 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 632503.944 ops/s
[info]                  ·gc.alloc.rate:      462.916 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 628737.517 ops/s
[info]                  ·gc.alloc.rate:            460.193 MB/sec
[info]                  ·gc.alloc.rate.norm:       1152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1694.032 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   629116.443 ±(99.9%) 8271.885 ops/s [Average]
[info]   (min, avg, max) = (626996.403, 629116.443, 632503.944), stdev = 2148.182
[info]   CI (99.9%): [620844.559, 637388.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   460.454 ±(99.9%) 6.046 MB/sec [Average]
[info]   (min, avg, max) = (458.895, 460.454, 462.916), stdev = 1.570
[info]   CI (99.9%): [454.407, 466.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1152.001, 1152.001, 1152.001), stdev = 0.001
[info]   CI (99.9%): [1152.001, 1152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.047 ±(99.9%) 1427.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.047, 676.765), stdev = 370.668
[info]   CI (99.9%): [≈ 0, 1833.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1016.916 ±(99.9%) 3574.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1016.916, 1698.938), stdev = 928.317
[info]   CI (99.9%): [≈ 0, 4591.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.76% complete, ETA 00:27:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2102365.929 ops/s
[info] # Warmup Iteration   2: 2340018.575 ops/s
[info] # Warmup Iteration   3: 2450754.226 ops/s
[info] # Warmup Iteration   4: 2433272.035 ops/s
[info] # Warmup Iteration   5: 2437073.350 ops/s
[info] Iteration   1: 2441350.170 ops/s
[info]                  ·gc.alloc.rate:            1129.245 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 436.738 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 2438878.426 ops/s
[info]                  ·gc.alloc.rate:                   1128.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        874.792 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2440632.708 ops/s
[info]                  ·gc.alloc.rate:                   1128.894 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.580 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        874.185 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.430 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2433964.796 ops/s
[info]                  ·gc.alloc.rate:            1125.737 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 438.072 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2429558.608 ops/s
[info]                  ·gc.alloc.rate:                   1123.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        877.677 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2436876.942 ±(99.9%) 19268.625 ops/s [Average]
[info]   (min, avg, max) = (2429558.608, 2436876.942, 2441350.170), stdev = 5004.001
[info]   CI (99.9%): [2417608.317, 2456145.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1127.193 ±(99.9%) 8.919 MB/sec [Average]
[info]   (min, avg, max) = (1123.853, 1127.193, 1129.245), stdev = 2.316
[info]   CI (99.9%): [1118.274, 1136.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.217 ±(99.9%) 1429.917 MB/sec [Average]
[info]   (min, avg, max) = (677.409, 1084.217, 1355.729), stdev = 371.345
[info]   CI (99.9%): [≈ 0, 2514.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   700.293 ±(99.9%) 924.105 B/op [Average]
[info]   (min, avg, max) = (436.738, 700.293, 877.677), stdev = 239.987
[info]   CI (99.9%): [≈ 0, 1624.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.997), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.690 ±(99.9%) 4.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 2.589), stdev = 1.083
[info]   CI (99.9%): [≈ 0, 4.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.00% complete, ETA 00:27:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2285518.463 ops/s
[info] # Warmup Iteration   2: 2475836.943 ops/s
[info] # Warmup Iteration   3: 2466249.973 ops/s
[info] # Warmup Iteration   4: 2461361.742 ops/s
[info] # Warmup Iteration   5: 2442464.649 ops/s
[info] Iteration   1: 2448467.989 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2467212.387 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2466546.547 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2463582.718 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2467364.530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2462634.834 ±(99.9%) 31058.224 ops/s [Average]
[info]   (min, avg, max) = (2448467.989, 2462634.834, 2467364.530), stdev = 8065.722
[info]   CI (99.9%): [2431576.610, 2493693.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.24% complete, ETA 00:26:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 306690.516 ops/s
[info] # Warmup Iteration   2: 396629.581 ops/s
[info] # Warmup Iteration   3: 405778.596 ops/s
[info] # Warmup Iteration   4: 404358.739 ops/s
[info] # Warmup Iteration   5: 401128.962 ops/s
[info] Iteration   1: 406838.126 ops/s
[info]                  ·gc.alloc.rate:      585.150 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 405570.613 ops/s
[info]                  ·gc.alloc.rate:            583.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2628.859 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 406331.858 ops/s
[info]                  ·gc.alloc.rate:            584.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2623.949 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 406338.811 ops/s
[info]                  ·gc.alloc.rate:            584.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2623.981 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 405761.292 ops/s
[info]                  ·gc.alloc.rate:            583.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2627.576 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   406168.140 ±(99.9%) 1951.500 ops/s [Average]
[info]   (min, avg, max) = (405570.613, 406168.140, 406838.126), stdev = 506.798
[info]   CI (99.9%): [404216.640, 408119.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   584.190 ±(99.9%) 2.754 MB/sec [Average]
[info]   (min, avg, max) = (583.339, 584.190, 585.150), stdev = 0.715
[info]   CI (99.9%): [581.436, 586.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.874 ±(99.9%) 1166.425 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.874, 677.365), stdev = 302.917
[info]   CI (99.9%): [≈ 0, 1708.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2100.873 ±(99.9%) 4522.295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2100.873, 2628.859), stdev = 1174.426
[info]   CI (99.9%): [≈ 0, 6623.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76.47% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30807.469 ops/s
[info] # Warmup Iteration   2: 38186.972 ops/s
[info] # Warmup Iteration   3: 39470.874 ops/s
[info] # Warmup Iteration   4: 39655.997 ops/s
[info] # Warmup Iteration   5: 39415.115 ops/s
[info] Iteration   1: 39701.374 ops/s
[info]                  ·gc.alloc.rate:            1337.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53766.357 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 39587.168 ops/s
[info]                  ·gc.alloc.rate:            1334.055 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.252 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53922.528 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 39654.928 ops/s
[info]                  ·gc.alloc.rate:            1336.226 MB/sec
[info]                  ·gc.alloc.rate.norm:       53040.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53830.074 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 39637.482 ops/s
[info]                  ·gc.alloc.rate:                                  1335.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53040.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.572 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53984.048 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                132.249 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 39906.037 ops/s
[info]                  ·gc.alloc.rate:                                  1344.931 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53040.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.772 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.939 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53750.225 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   39697.398 ±(99.9%) 475.871 ops/s [Average]
[info]   (min, avg, max) = (39587.168, 39697.398, 39906.037), stdev = 123.582
[info]   CI (99.9%): [39221.527, 40173.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1337.728 ±(99.9%) 16.313 MB/sec [Average]
[info]   (min, avg, max) = (1334.055, 1337.728, 1344.931), stdev = 4.236
[info]   CI (99.9%): [1321.416, 1354.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53040.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (53040.010, 53040.010, 53040.010), stdev = 0.001
[info]   CI (99.9%): [53040.010, 53040.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.070), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.069 ±(99.9%) 5.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.069, 2.772), stdev = 1.465
[info]   CI (99.9%): [≈ 0, 6.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.169 ±(99.9%) 11.664 MB/sec [Average]
[info]   (min, avg, max) = (1356.062, 1358.169, 1362.939), stdev = 3.029
[info]   CI (99.9%): [1346.505, 1369.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   53850.647 ±(99.9%) 387.824 B/op [Average]
[info]   (min, avg, max) = (53750.225, 53850.647, 53984.048), stdev = 100.717
[info]   CI (99.9%): [53462.822, 54238.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   26.450 ±(99.9%) 227.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.450, 132.249), stdev = 59.144
[info]   CI (99.9%): [≈ 0, 254.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.71% complete, ETA 00:26:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34304.977 ops/s
[info] # Warmup Iteration   2: 64704.792 ops/s
[info] # Warmup Iteration   3: 65213.304 ops/s
[info] # Warmup Iteration   4: 66295.871 ops/s
[info] # Warmup Iteration   5: 66741.212 ops/s
[info] Iteration   1: 66269.486 ops/s
[info]                  ·gc.alloc.rate:                   1193.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32162.385 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.820 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 65001.956 ops/s
[info]                  ·gc.alloc.rate:            1170.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       28352.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32804.792 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 65017.300 ops/s
[info]                  ·gc.alloc.rate:                   1171.155 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32781.605 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.125 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 65549.153 ops/s
[info]                  ·gc.alloc.rate:                   1180.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16250.049 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.994 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 65248.855 ops/s
[info]                  ·gc.alloc.rate:                   1175.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        32778.042 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 96.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   65417.350 ±(99.9%) 2023.412 ops/s [Average]
[info]   (min, avg, max) = (65001.956, 65417.350, 66269.486), stdev = 525.474
[info]   CI (99.9%): [63393.938, 67440.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1178.341 ±(99.9%) 36.796 MB/sec [Average]
[info]   (min, avg, max) = (1170.752, 1178.341, 1193.867), stdev = 9.556
[info]   CI (99.9%): [1141.545, 1215.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28352.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28352.006, 28352.006, 28352.007), stdev = 0.001
[info]   CI (99.9%): [28352.006, 28352.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1219.701 ±(99.9%) 1168.854 MB/sec [Average]
[info]   (min, avg, max) = (676.709, 1219.701, 1358.723), stdev = 303.548
[info]   CI (99.9%): [50.846, 2388.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   29355.375 ±(99.9%) 28229.518 B/op [Average]
[info]   (min, avg, max) = (16250.049, 29355.375, 32804.792), stdev = 7331.116
[info]   CI (99.9%): [1125.857, 57584.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.996), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   28.869 ±(99.9%) 147.800 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.869, 96.406), stdev = 38.383
[info]   CI (99.9%): [≈ 0, 176.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.800, 13.000), stdev = 2.683
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.94% complete, ETA 00:26:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66999.661 ops/s
[info] # Warmup Iteration   2: 75258.212 ops/s
[info] # Warmup Iteration   3: 76166.641 ops/s
[info] # Warmup Iteration   4: 75952.061 ops/s
[info] # Warmup Iteration   5: 74641.262 ops/s
[info] Iteration   1: 75937.166 ops/s
[info]                  ·gc.alloc.rate:            1164.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28109.292 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 76246.774 ops/s
[info]                  ·gc.alloc.rate:            1169.280 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13997.513 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 75912.511 ops/s
[info]                  ·gc.alloc.rate:            1164.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.264 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28118.177 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 76006.759 ops/s
[info]                  ·gc.alloc.rate:            1165.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28083.409 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 76265.022 ops/s
[info]                  ·gc.alloc.rate:                   1169.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             678.111 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13994.577 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 68.736 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   76073.646 ±(99.9%) 654.789 ops/s [Average]
[info]   (min, avg, max) = (75912.511, 76073.646, 76265.022), stdev = 170.047
[info]   CI (99.9%): [75418.858, 76728.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1166.640 ±(99.9%) 9.906 MB/sec [Average]
[info]   (min, avg, max) = (1164.187, 1166.640, 1169.517), stdev = 2.573
[info]   CI (99.9%): [1156.734, 1176.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24136.005, 24136.005, 24136.005), stdev = 0.001
[info]   CI (99.9%): [24136.005, 24136.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1085.012 ±(99.9%) 1430.307 MB/sec [Average]
[info]   (min, avg, max) = (678.111, 1085.012, 1356.316), stdev = 371.446
[info]   CI (99.9%): [≈ 0, 2515.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   22460.594 ±(99.9%) 29754.122 B/op [Average]
[info]   (min, avg, max) = (13994.577, 22460.594, 28118.177), stdev = 7727.051
[info]   CI (99.9%): [≈ 0, 52214.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.747 ±(99.9%) 118.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.747, 68.736), stdev = 30.740
[info]   CI (99.9%): [≈ 0, 132.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77.18% complete, ETA 00:25:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8089.729 ops/s
[info] # Warmup Iteration   2: 19071.664 ops/s
[info] # Warmup Iteration   3: 19448.067 ops/s
[info] # Warmup Iteration   4: 19162.412 ops/s
[info] # Warmup Iteration   5: 19610.600 ops/s
[info] Iteration   1: 19547.657 ops/s
[info]                  ·gc.alloc.rate:                   1410.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              113536.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        108981.967 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 19550.461 ops/s
[info]                  ·gc.alloc.rate:            1410.472 MB/sec
[info]                  ·gc.alloc.rate.norm:       113536.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109072.496 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 19583.524 ops/s
[info]                  ·gc.alloc.rate:                   1412.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              113536.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        108781.663 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 374.740 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 19696.408 ops/s
[info]                  ·gc.alloc.rate:                                  1420.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113536.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.429 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108902.868 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 19737.710 ops/s
[info]                  ·gc.alloc.rate:                                  1424.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113536.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.783 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108676.688 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   19623.152 ±(99.9%) 339.228 ops/s [Average]
[info]   (min, avg, max) = (19547.657, 19623.152, 19737.710), stdev = 88.096
[info]   CI (99.9%): [19283.924, 19962.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1415.651 ±(99.9%) 24.895 MB/sec [Average]
[info]   (min, avg, max) = (1410.003, 1415.651, 1424.257), stdev = 6.465
[info]   CI (99.9%): [1390.756, 1440.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   113536.022 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (113536.021, 113536.022, 113536.026), stdev = 0.002
[info]   CI (99.9%): [113536.013, 113536.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.114 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.068), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.242 ±(99.9%) 9.105 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.242, 5.429), stdev = 2.365
[info]   CI (99.9%): [≈ 0, 10.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.631 ±(99.9%) 19.174 MB/sec [Average]
[info]   (min, avg, max) = (1353.446, 1357.631, 1363.298), stdev = 4.979
[info]   CI (99.9%): [1338.456, 1376.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   108883.136 ±(99.9%) 605.579 B/op [Average]
[info]   (min, avg, max) = (108676.688, 108883.136, 109072.496), stdev = 157.267
[info]   CI (99.9%): [108277.557, 109488.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   85.675 ±(99.9%) 628.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 85.675, 374.740), stdev = 163.253
[info]   CI (99.9%): [≈ 0, 714.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 3.578
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.41% complete, ETA 00:25:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76634.450 ops/s
[info] # Warmup Iteration   2: 142519.959 ops/s
[info] # Warmup Iteration   3: 146492.772 ops/s
[info] # Warmup Iteration   4: 149290.265 ops/s
[info] # Warmup Iteration   5: 148889.713 ops/s
[info] Iteration   1: 148595.126 ops/s
[info]                  ·gc.alloc.rate:                   1368.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14336.896 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 149519.031 ops/s
[info]                  ·gc.alloc.rate:            1377.167 MB/sec
[info]                  ·gc.alloc.rate.norm:       14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14255.321 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 149434.783 ops/s
[info]                  ·gc.alloc.rate:                   1376.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        14256.317 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 149594.531 ops/s
[info]                  ·gc.alloc.rate:                                  1377.757 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14331.223 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.008 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 149444.523 ops/s
[info]                  ·gc.alloc.rate:                                  1376.314 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.263 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14353.292 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   149317.599 ±(99.9%) 1574.855 ops/s [Average]
[info]   (min, avg, max) = (148595.126, 149317.599, 149594.531), stdev = 408.985
[info]   CI (99.9%): [147742.744, 150892.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1375.316 ±(99.9%) 14.699 MB/sec [Average]
[info]   (min, avg, max) = (1368.553, 1375.316, 1377.757), stdev = 3.817
[info]   CI (99.9%): [1360.617, 1390.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14496.003, 14496.003, 14496.003), stdev = 0.001
[info]   CI (99.9%): [14496.002, 14496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.045 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.025), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.085 ±(99.9%) 0.470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.085, 0.263), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.343 ±(99.9%) 17.936 MB/sec [Average]
[info]   (min, avg, max) = (1353.532, 1357.343, 1362.765), stdev = 4.658
[info]   CI (99.9%): [1339.407, 1375.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14306.610 ±(99.9%) 181.247 B/op [Average]
[info]   (min, avg, max) = (14255.321, 14306.610, 14353.292), stdev = 47.069
[info]   CI (99.9%): [14125.363, 14487.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.440 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.998), stdev = 1.673
[info]   CI (99.9%): [≈ 0, 7.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.232 ±(99.9%) 67.802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.232, 42.095), stdev = 17.608
[info]   CI (99.9%): [≈ 0, 79.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 11.000), stdev = 3.899
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77.65% complete, ETA 00:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462663.361 ops/s
[info] # Warmup Iteration   2: 518147.331 ops/s
[info] # Warmup Iteration   3: 530045.433 ops/s
[info] # Warmup Iteration   4: 534071.912 ops/s
[info] # Warmup Iteration   5: 535456.846 ops/s
[info] Iteration   1: 529457.093 ops/s
[info]                  ·gc.alloc.rate:            584.034 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2013.823 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 531206.938 ops/s
[info]                  ·gc.alloc.rate:      585.898 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 533019.177 ops/s
[info]                  ·gc.alloc.rate:                   587.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2000.349 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.967 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 530638.579 ops/s
[info]                  ·gc.alloc.rate:            585.227 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2011.295 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 527335.228 ops/s
[info]                  ·gc.alloc.rate:                   581.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2021.864 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   530331.403 ±(99.9%) 8128.994 ops/s [Average]
[info]   (min, avg, max) = (527335.228, 530331.403, 533019.177), stdev = 2111.074
[info]   CI (99.9%): [522202.410, 538460.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   584.925 ±(99.9%) 8.926 MB/sec [Average]
[info]   (min, avg, max) = (581.603, 584.925, 587.862), stdev = 2.318
[info]   CI (99.9%): [575.999, 593.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.057 ±(99.9%) 1166.819 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.057, 678.032), stdev = 303.019
[info]   CI (99.9%): [≈ 0, 1708.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1609.466 ±(99.9%) 3464.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1609.466, 2021.864), stdev = 899.752
[info]   CI (99.9%): [≈ 0, 5074.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.791 ±(99.9%) 4.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.791, 1.988), stdev = 1.083
[info]   CI (99.9%): [≈ 0, 4.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77.88% complete, ETA 00:25:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 453305.162 ops/s
[info] # Warmup Iteration   2: 502406.492 ops/s
[info] # Warmup Iteration   3: 502383.860 ops/s
[info] # Warmup Iteration   4: 503195.132 ops/s
[info] # Warmup Iteration   5: 502216.376 ops/s
[info] Iteration   1: 503536.292 ops/s
[info]                  ·gc.alloc.rate:      5.118 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 502879.103 ops/s
[info]                  ·gc.alloc.rate:      5.114 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 502686.507 ops/s
[info]                  ·gc.alloc.rate:      5.110 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 503805.501 ops/s
[info]                  ·gc.alloc.rate:      5.122 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 503205.866 ops/s
[info]                  ·gc.alloc.rate:      5.118 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   503222.654 ±(99.9%) 1768.617 ops/s [Average]
[info]   (min, avg, max) = (502686.507, 503222.654, 503805.501), stdev = 459.304
[info]   CI (99.9%): [501454.036, 504991.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.116 ±(99.9%) 0.017 MB/sec [Average]
[info]   (min, avg, max) = (5.110, 5.116, 5.122), stdev = 0.004
[info]   CI (99.9%): [5.099, 5.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 78.12% complete, ETA 00:24:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27952.649 ops/s
[info] # Warmup Iteration   2: 55060.768 ops/s
[info] # Warmup Iteration   3: 57491.138 ops/s
[info] # Warmup Iteration   4: 56799.170 ops/s
[info] # Warmup Iteration   5: 57594.111 ops/s
[info] Iteration   1: 57456.439 ops/s
[info]                  ·gc.alloc.rate:            1031.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       28264.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37093.999 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 57701.207 ops/s
[info]                  ·gc.alloc.rate:                   1036.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18460.461 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.170 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 57260.571 ops/s
[info]                  ·gc.alloc.rate:                   1028.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37221.592 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.309 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 57631.729 ops/s
[info]                  ·gc.alloc.rate:            1034.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       28264.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18499.467 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 57314.227 ops/s
[info]                  ·gc.alloc.rate:            1029.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       28264.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37166.942 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   57472.835 ±(99.9%) 740.391 ops/s [Average]
[info]   (min, avg, max) = (57260.571, 57472.835, 57701.207), stdev = 192.277
[info]   CI (99.9%): [56732.443, 58213.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1032.058 ±(99.9%) 13.332 MB/sec [Average]
[info]   (min, avg, max) = (1028.076, 1032.058, 1036.061), stdev = 3.462
[info]   CI (99.9%): [1018.725, 1045.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28264.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28264.007, 28264.007, 28264.008), stdev = 0.001
[info]   CI (99.9%): [28264.006, 28264.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.164 ±(99.9%) 1427.599 MB/sec [Average]
[info]   (min, avg, max) = (676.697, 1083.164, 1354.403), stdev = 370.743
[info]   CI (99.9%): [≈ 0, 2510.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   29688.492 ±(99.9%) 39399.976 B/op [Average]
[info]   (min, avg, max) = (18460.461, 29688.492, 37221.592), stdev = 10232.049
[info]   CI (99.9%): [≈ 0, 69088.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.296 ±(99.9%) 38.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.296, 18.309), stdev = 9.990
[info]   CI (99.9%): [≈ 0, 45.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.588
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 78.35% complete, ETA 00:24:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1097782.318 ops/s
[info] # Warmup Iteration   2: 2006350.469 ops/s
[info] # Warmup Iteration   3: 1996300.145 ops/s
[info] # Warmup Iteration   4: 2005484.767 ops/s
[info] # Warmup Iteration   5: 2026839.017 ops/s
[info] Iteration   1: 2005247.449 ops/s
[info]                  ·gc.alloc.rate:            2833.310 MB/sec
[info]                  ·gc.alloc.rate.norm:       2224.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2139.384 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 2048624.849 ops/s
[info]                  ·gc.alloc.rate:                                  2894.647 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2094.129 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 2020378.314 ops/s
[info]                  ·gc.alloc.rate:            2854.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       2224.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2123.394 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2022538.442 ops/s
[info]                  ·gc.alloc.rate:                                  2858.443 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2726.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2121.123 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   5: 1963626.177 ops/s
[info]                  ·gc.alloc.rate:                                  2774.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2224.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2731.069 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2012083.046 ±(99.9%) 120363.019 ops/s [Average]
[info]   (min, avg, max) = (1963626.177, 2012083.046, 2048624.849), stdev = 31257.894
[info]   CI (99.9%): [1891720.027, 2132446.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   2843.191 ±(99.9%) 170.117 MB/sec [Average]
[info]   (min, avg, max) = (2774.688, 2843.191, 2894.647), stdev = 44.179
[info]   CI (99.9%): [2673.074, 3013.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2224.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.000, 2224.000, 2224.000), stdev = 0.001
[info]   CI (99.9%): [2224.000, 2224.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2862.076 ±(99.9%) 1173.662 MB/sec [Average]
[info]   (min, avg, max) = (2725.512, 2862.076, 3407.312), stdev = 304.796
[info]   CI (99.9%): [1688.413, 4035.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2241.820 ±(99.9%) 1055.003 B/op [Average]
[info]   (min, avg, max) = (2094.129, 2241.820, 2731.069), stdev = 273.981
[info]   CI (99.9%): [1186.817, 3296.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 12.000), stdev = 3.209
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 78.59% complete, ETA 00:24:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.932 ops/s
[info] # Warmup Iteration   2: 850652.070 ops/s
[info] # Warmup Iteration   3: 876316.099 ops/s
[info] # Warmup Iteration   4: 854277.462 ops/s
[info] # Warmup Iteration   5: 854731.269 ops/s
[info] Iteration   1: 853133.662 ops/s
[info]                  ·gc.alloc.rate:            542.030 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1244.857 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 875301.361 ops/s
[info]                  ·gc.alloc.rate:      556.164 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 866503.572 ops/s
[info]                  ·gc.alloc.rate:            550.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1225.655 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 868101.050 ops/s
[info]                  ·gc.alloc.rate:            551.626 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.864 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1223.409 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 864152.744 ops/s
[info]                  ·gc.alloc.rate:            549.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       1000.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1228.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   865438.478 ±(99.9%) 30958.900 ops/s [Average]
[info]   (min, avg, max) = (853133.662, 865438.478, 875301.361), stdev = 8039.928
[info]   CI (99.9%): [834479.578, 896397.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   549.883 ±(99.9%) 19.747 MB/sec [Average]
[info]   (min, avg, max) = (542.030, 549.883, 556.164), stdev = 5.128
[info]   CI (99.9%): [530.136, 569.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   539.831 ±(99.9%) 1162.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539.831, 674.864), stdev = 301.775
[info]   CI (99.9%): [≈ 0, 1701.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   984.577 ±(99.9%) 2119.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 984.577, 1244.857), stdev = 550.460
[info]   CI (99.9%): [≈ 0, 3104.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.800, 7.000), stdev = 2.775
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78.82% complete, ETA 00:23:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30884.372 ops/s
[info] # Warmup Iteration   2: 268882.886 ops/s
[info] # Warmup Iteration   3: 286502.036 ops/s
[info] # Warmup Iteration   4: 289128.743 ops/s
[info] # Warmup Iteration   5: 289292.517 ops/s
[info] Iteration   1: 290753.167 ops/s
[info]                  ·gc.alloc.rate:            558.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       3024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3663.500 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 295396.791 ops/s
[info]                  ·gc.alloc.rate:      567.543 MB/sec
[info]                  ·gc.alloc.rate.norm: 3024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 290031.207 ops/s
[info]                  ·gc.alloc.rate:            557.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       3024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3672.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 289843.215 ops/s
[info]                  ·gc.alloc.rate:                   556.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              3024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.790 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3674.886 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.617 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 291264.768 ops/s
[info]                  ·gc.alloc.rate:            559.763 MB/sec
[info]                  ·gc.alloc.rate.norm:       3024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3660.623 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   291457.830 ±(99.9%) 8757.882 ops/s [Average]
[info]   (min, avg, max) = (289843.215, 291457.830, 295396.791), stdev = 2274.394
[info]   CI (99.9%): [282699.948, 300215.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   560.052 ±(99.9%) 16.669 MB/sec [Average]
[info]   (min, avg, max) = (556.919, 560.052, 567.543), stdev = 4.329
[info]   CI (99.9%): [543.384, 576.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3024.001, 3024.001, 3024.002), stdev = 0.001
[info]   CI (99.9%): [3024.001, 3024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.621 ±(99.9%) 1165.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.621, 677.606), stdev = 302.776
[info]   CI (99.9%): [≈ 0, 1707.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2934.303 ±(99.9%) 6316.350 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2934.303, 3674.886), stdev = 1640.336
[info]   CI (99.9%): [≈ 0, 9250.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.723 ±(99.9%) 6.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.723, 3.617), stdev = 1.618
[info]   CI (99.9%): [≈ 0, 6.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.800, 5.000), stdev = 2.168
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 79.06% complete, ETA 00:23:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 711491.520 ops/s
[info] # Warmup Iteration   2: 747366.937 ops/s
[info] # Warmup Iteration   3: 754076.139 ops/s
[info] # Warmup Iteration   4: 765395.771 ops/s
[info] # Warmup Iteration   5: 767333.920 ops/s
[info] Iteration   1: 767428.016 ops/s
[info]                  ·gc.alloc.rate:            577.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1390.728 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 753802.793 ops/s
[info]                  ·gc.alloc.rate:      567.191 MB/sec
[info]                  ·gc.alloc.rate.norm: 1184.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 753198.075 ops/s
[info]                  ·gc.alloc.rate:            566.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1416.948 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 760328.079 ops/s
[info]                  ·gc.alloc.rate:            571.990 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1403.670 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 762791.618 ops/s
[info]                  ·gc.alloc.rate:            573.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       1184.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1399.139 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   759509.716 ±(99.9%) 23307.201 ops/s [Average]
[info]   (min, avg, max) = (753198.075, 759509.716, 767428.016), stdev = 6052.806
[info]   CI (99.9%): [736202.515, 782816.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   571.384 ±(99.9%) 17.522 MB/sec [Average]
[info]   (min, avg, max) = (566.512, 571.384, 577.251), stdev = 4.550
[info]   CI (99.9%): [553.862, 588.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1184.001, 1184.001, 1184.001), stdev = 0.001
[info]   CI (99.9%): [1184.000, 1184.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.478 ±(99.9%) 1167.725 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.478, 678.267), stdev = 303.254
[info]   CI (99.9%): [≈ 0, 1710.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1122.097 ±(99.9%) 2415.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1122.097, 1416.948), stdev = 627.343
[info]   CI (99.9%): [≈ 0, 3537.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 79.29% complete, ETA 00:23:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3883139.732 ops/s
[info] # Warmup Iteration   2: 4286751.269 ops/s
[info] # Warmup Iteration   3: 4370724.742 ops/s
[info] # Warmup Iteration   4: 4345772.108 ops/s
[info] # Warmup Iteration   5: 4365464.217 ops/s
[info] Iteration   1: 4357042.416 ops/s
[info]                  ·gc.alloc.rate:            1395.006 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 489.910 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 4359112.210 ops/s
[info]                  ·gc.alloc.rate:                   1395.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        489.913 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4340691.585 ops/s
[info]                  ·gc.alloc.rate:                   1389.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        491.750 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.208 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 4222049.951 ops/s
[info]                  ·gc.alloc.rate:                                  1352.039 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.135 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.935 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       508.062 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 4165380.980 ops/s
[info]                  ·gc.alloc.rate:                                  1333.726 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       514.953 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4288855.428 ±(99.9%) 344311.841 ops/s [Average]
[info]   (min, avg, max) = (4165380.980, 4288855.428, 4359112.210), stdev = 89416.692
[info]   CI (99.9%): [3944543.587, 4633167.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1373.319 ±(99.9%) 110.222 MB/sec [Average]
[info]   (min, avg, max) = (1333.726, 1373.319, 1395.983), stdev = 28.624
[info]   CI (99.9%): [1263.098, 1483.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.135), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.086 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1358.935 ±(99.9%) 13.748 MB/sec [Average]
[info]   (min, avg, max) = (1356.005, 1358.935, 1362.935), stdev = 3.570
[info]   CI (99.9%): [1345.188, 1372.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   498.918 ±(99.9%) 45.331 B/op [Average]
[info]   (min, avg, max) = (489.910, 498.918, 514.953), stdev = 11.772
[info]   CI (99.9%): [453.587, 544.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.290 ±(99.9%) 2.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.290, 1.208), stdev = 0.524
[info]   CI (99.9%): [≈ 0, 2.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 79.53% complete, ETA 00:23:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6933438.484 ops/s
[info] # Warmup Iteration   2: 7666279.415 ops/s
[info] # Warmup Iteration   3: 7837884.255 ops/s
[info] # Warmup Iteration   4: 7823763.994 ops/s
[info] # Warmup Iteration   5: 7832306.036 ops/s
[info] Iteration   1: 7832261.578 ops/s
[info]                  ·gc.alloc.rate:            636.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.267 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7705355.710 ops/s
[info]                  ·gc.alloc.rate:            626.682 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.511 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 7685723.996 ops/s
[info]                  ·gc.alloc.rate:            625.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.865 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7792246.080 ops/s
[info]                  ·gc.alloc.rate:            633.698 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7644758.973 ops/s
[info]                  ·gc.alloc.rate:            621.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.609 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7732069.267 ±(99.9%) 299165.135 ops/s [Average]
[info]   (min, avg, max) = (7644758.973, 7732069.267, 7832261.578), stdev = 77692.236
[info]   CI (99.9%): [7432904.132, 8031234.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   628.837 ±(99.9%) 24.131 MB/sec [Average]
[info]   (min, avg, max) = (621.821, 628.837, 636.921), stdev = 6.267
[info]   CI (99.9%): [604.705, 652.968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   678.119 ±(99.9%) 0.261 MB/sec [Average]
[info]   (min, avg, max) = (678.056, 678.119, 678.219), stdev = 0.068
[info]   CI (99.9%): [677.857, 678.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   138.042 ±(99.9%) 5.334 B/op [Average]
[info]   (min, avg, max) = (136.267, 138.042, 139.609), stdev = 1.385
[info]   CI (99.9%): [132.708, 143.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 79.76% complete, ETA 00:22:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15856.295 ops/s
[info] # Warmup Iteration   2: 170183.746 ops/s
[info] # Warmup Iteration   3: 181123.692 ops/s
[info] # Warmup Iteration   4: 191290.274 ops/s
[info] # Warmup Iteration   5: 191369.401 ops/s
[info] Iteration   1: 192349.115 ops/s
[info]                  ·gc.alloc.rate:                   1310.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11080.960 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 189311.489 ops/s
[info]                  ·gc.alloc.rate:            1289.111 MB/sec
[info]                  ·gc.alloc.rate.norm:       10720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11253.454 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 188968.769 ops/s
[info]                  ·gc.alloc.rate:                   1286.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11273.102 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.548 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 190382.637 ops/s
[info]                  ·gc.alloc.rate:                   1296.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              10720.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11195.075 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.547 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 191191.220 ops/s
[info]                  ·gc.alloc.rate:                                  1302.549 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10720.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11219.467 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   190440.646 ±(99.9%) 5325.315 ops/s [Average]
[info]   (min, avg, max) = (188968.769, 190440.646, 192349.115), stdev = 1382.967
[info]   CI (99.9%): [185115.330, 195765.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1297.038 ±(99.9%) 36.805 MB/sec [Average]
[info]   (min, avg, max) = (1286.849, 1297.038, 1310.010), stdev = 9.558
[info]   CI (99.9%): [1260.233, 1333.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10720.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10720.002, 10720.002, 10720.002), stdev = 0.001
[info]   CI (99.9%): [10720.002, 10720.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.040 ±(99.9%) 0.348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.202), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.599 ±(99.9%) 16.528 MB/sec [Average]
[info]   (min, avg, max) = (1353.244, 1355.599, 1363.237), stdev = 4.292
[info]   CI (99.9%): [1339.071, 1372.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11204.411 ±(99.9%) 289.937 B/op [Average]
[info]   (min, avg, max) = (11080.960, 11204.411, 11273.102), stdev = 75.296
[info]   CI (99.9%): [10914.475, 11494.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   9.909 ±(99.9%) 62.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.909, 38.547), stdev = 16.243
[info]   CI (99.9%): [≈ 0, 72.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 10.000), stdev = 3.050
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.00% complete, ETA 00:22:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 865169.471 ops/s
[info] # Warmup Iteration   2: 912459.518 ops/s
[info] # Warmup Iteration   3: 914262.765 ops/s
[info] # Warmup Iteration   4: 913888.732 ops/s
[info] # Warmup Iteration   5: 854526.699 ops/s
[info] Iteration   1: 911634.757 ops/s
[info]                  ·gc.alloc.rate:      50.962 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 911634.243 ops/s
[info]                  ·gc.alloc.rate:      50.962 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 911435.858 ops/s
[info]                  ·gc.alloc.rate:      50.954 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 909507.499 ops/s
[info]                  ·gc.alloc.rate:      50.849 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 911728.343 ops/s
[info]                  ·gc.alloc.rate:      50.989 MB/sec
[info]                  ·gc.alloc.rate.norm: 88.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   911188.140 ±(99.9%) 3640.953 ops/s [Average]
[info]   (min, avg, max) = (909507.499, 911188.140, 911728.343), stdev = 945.544
[info]   CI (99.9%): [907547.187, 914829.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   50.943 ±(99.9%) 0.210 MB/sec [Average]
[info]   (min, avg, max) = (50.849, 50.943, 50.989), stdev = 0.054
[info]   CI (99.9%): [50.733, 51.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (88.000, 88.000, 88.000), stdev = 0.001
[info]   CI (99.9%): [88.000, 88.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.24% complete, ETA 00:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26948.329 ops/s
[info] # Warmup Iteration   2: 59200.510 ops/s
[info] # Warmup Iteration   3: 59204.675 ops/s
[info] # Warmup Iteration   4: 59139.385 ops/s
[info] # Warmup Iteration   5: 60306.497 ops/s
[info] Iteration   1: 60706.847 ops/s
[info]                  ·gc.alloc.rate:                                  2819.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70670.724 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 60417.662 ops/s
[info]                  ·gc.alloc.rate:                                  2806.577 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71007.546 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 60565.750 ops/s
[info]                  ·gc.alloc.rate:                                  2813.556 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.505 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70831.718 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 60538.506 ops/s
[info]                  ·gc.alloc.rate:                                  2812.177 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.430 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70864.473 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 60510.933 ops/s
[info]                  ·gc.alloc.rate:                                  2810.952 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73120.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70894.916 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   60547.940 ±(99.9%) 403.857 ops/s [Average]
[info]   (min, avg, max) = (60417.662, 60547.940, 60706.847), stdev = 104.880
[info]   CI (99.9%): [60144.083, 60951.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2812.648 ±(99.9%) 18.717 MB/sec [Average]
[info]   (min, avg, max) = (2806.577, 2812.648, 2819.978), stdev = 4.861
[info]   CI (99.9%): [2793.931, 2831.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73120.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73120.007, 73120.007, 73120.007), stdev = 0.001
[info]   CI (99.9%): [73120.006, 73120.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.102 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.102, 0.158), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2725.472 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (2725.413, 2725.472, 2725.518), stdev = 0.047
[info]   CI (99.9%): [2725.289, 2725.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70853.875 ±(99.9%) 469.427 B/op [Average]
[info]   (min, avg, max) = (70670.724, 70853.875, 71007.546), stdev = 121.909
[info]   CI (99.9%): [70384.449, 71323.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 9.000), stdev = 1.789
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.47% complete, ETA 00:22:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 682158.240 ops/s
[info] # Warmup Iteration   2: 1049863.609 ops/s
[info] # Warmup Iteration   3: 1043447.469 ops/s
[info] # Warmup Iteration   4: 1054086.534 ops/s
[info] # Warmup Iteration   5: 1050343.598 ops/s
[info] Iteration   1: 1057313.146 ops/s
[info]                  ·gc.alloc.rate:      591.239 MB/sec
[info]                  ·gc.alloc.rate.norm: 880.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1050746.061 ops/s
[info]                  ·gc.alloc.rate:                   587.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.795 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1013.710 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1052937.603 ops/s
[info]                  ·gc.alloc.rate:            588.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1012.590 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1054435.738 ops/s
[info]                  ·gc.alloc.rate:            589.564 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1011.172 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1051094.001 ops/s
[info]                  ·gc.alloc.rate:            587.755 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1014.396 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1053305.310 ±(99.9%) 10353.054 ops/s [Average]
[info]   (min, avg, max) = (1050746.061, 1053305.310, 1057313.146), stdev = 2688.655
[info]   CI (99.9%): [1042952.256, 1063658.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   588.965 ±(99.9%) 5.813 MB/sec [Average]
[info]   (min, avg, max) = (587.525, 588.965, 591.239), stdev = 1.510
[info]   CI (99.9%): [583.151, 594.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   880.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (880.000, 880.000, 880.000), stdev = 0.001
[info]   CI (99.9%): [880.000, 880.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   541.840 ±(99.9%) 1166.353 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.840, 677.518), stdev = 302.898
[info]   CI (99.9%): [≈ 0, 1708.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   810.373 ±(99.9%) 1744.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 810.373, 1014.396), stdev = 453.014
[info]   CI (99.9%): [≈ 0, 2554.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.200 ±(99.9%) 1.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.998), stdev = 0.446
[info]   CI (99.9%): [≈ 0, 1.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.71% complete, ETA 00:21:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 668493.356 ops/s
[info] # Warmup Iteration   2: 705093.529 ops/s
[info] # Warmup Iteration   3: 714421.180 ops/s
[info] # Warmup Iteration   4: 691428.087 ops/s
[info] # Warmup Iteration   5: 719093.230 ops/s
[info] Iteration   1: 719312.241 ops/s
[info]                  ·gc.alloc.rate:      201.089 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 715663.757 ops/s
[info]                  ·gc.alloc.rate:            200.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1491.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 719866.387 ops/s
[info]                  ·gc.alloc.rate:      201.229 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 722155.202 ops/s
[info]                  ·gc.alloc.rate:      201.913 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 722465.369 ops/s
[info]                  ·gc.alloc.rate:      201.997 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   719892.591 ±(99.9%) 10538.236 ops/s [Average]
[info]   (min, avg, max) = (715663.757, 719892.591, 722465.369), stdev = 2736.746
[info]   CI (99.9%): [709354.355, 730430.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   201.260 ±(99.9%) 2.989 MB/sec [Average]
[info]   (min, avg, max) = (200.073, 201.260, 201.997), stdev = 0.776
[info]   CI (99.9%): [198.271, 204.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.001, 440.001, 440.001), stdev = 0.001
[info]   CI (99.9%): [440.001, 440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   135.623 ±(99.9%) 1167.757 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.623, 678.116), stdev = 303.263
[info]   CI (99.9%): [≈ 0, 1303.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   298.263 ±(99.9%) 2568.138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 298.263, 1491.317), stdev = 666.937
[info]   CI (99.9%): [≈ 0, 2866.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80.94% complete, ETA 00:21:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 837522.880 ops/s
[info] # Warmup Iteration   2: 909970.802 ops/s
[info] # Warmup Iteration   3: 911351.148 ops/s
[info] # Warmup Iteration   4: 910864.218 ops/s
[info] # Warmup Iteration   5: 907079.498 ops/s
[info] Iteration   1: 890131.097 ops/s
[info]                  ·gc.alloc.rate:      9.048 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 911789.017 ops/s
[info]                  ·gc.alloc.rate:      9.267 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 911753.504 ops/s
[info]                  ·gc.alloc.rate:      9.267 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 911324.255 ops/s
[info]                  ·gc.alloc.rate:      9.264 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 911615.274 ops/s
[info]                  ·gc.alloc.rate:      9.268 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   907322.629 ±(99.9%) 37012.773 ops/s [Average]
[info]   (min, avg, max) = (890131.097, 907322.629, 911789.017), stdev = 9612.100
[info]   CI (99.9%): [870309.856, 944335.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.223 ±(99.9%) 0.377 MB/sec [Average]
[info]   (min, avg, max) = (9.048, 9.223, 9.268), stdev = 0.098
[info]   CI (99.9%): [8.846, 9.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.18% complete, ETA 00:21:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19559.045 ops/s
[info] # Warmup Iteration   2: 40300.689 ops/s
[info] # Warmup Iteration   3: 40109.836 ops/s
[info] # Warmup Iteration   4: 40307.951 ops/s
[info] # Warmup Iteration   5: 40263.911 ops/s
[info] Iteration   1: 40489.475 ops/s
[info]                  ·gc.alloc.rate:                   1706.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        52638.526 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 40518.210 ops/s
[info]                  ·gc.alloc.rate:                                  1707.502 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66336.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.788 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79045.543 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                181.119 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 40849.702 ops/s
[info]                  ·gc.alloc.rate:                                  1721.649 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66336.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.861 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52507.073 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 40695.829 ops/s
[info]                  ·gc.alloc.rate:                                  1715.100 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66336.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79062.471 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 40759.781 ops/s
[info]                  ·gc.alloc.rate:            1717.787 MB/sec
[info]                  ·gc.alloc.rate.norm:       66336.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 52625.567 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   40662.599 ±(99.9%) 597.707 ops/s [Average]
[info]   (min, avg, max) = (40489.475, 40662.599, 40849.702), stdev = 155.223
[info]   CI (99.9%): [40064.893, 41260.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1713.697 ±(99.9%) 25.313 MB/sec [Average]
[info]   (min, avg, max) = (1706.447, 1713.697, 1721.649), stdev = 6.574
[info]   CI (99.9%): [1688.384, 1739.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66336.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (66336.010, 66336.011, 66336.011), stdev = 0.001
[info]   CI (99.9%): [66336.009, 66336.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.048), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.536 ±(99.9%) 3.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.536, 1.861), stdev = 0.814
[info]   CI (99.9%): [≈ 0, 3.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.674 ±(99.9%) 1433.316 MB/sec [Average]
[info]   (min, avg, max) = (1354.089, 1631.674, 2044.139), stdev = 372.228
[info]   CI (99.9%): [198.357, 3064.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   63175.836 ±(99.9%) 55814.362 B/op [Average]
[info]   (min, avg, max) = (52507.073, 63175.836, 79062.471), stdev = 14494.812
[info]   CI (99.9%): [7361.474, 118990.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.402 ±(99.9%) 303.834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.402, 181.119), stdev = 78.905
[info]   CI (99.9%): [≈ 0, 345.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 11.000), stdev = 4.183
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.41% complete, ETA 00:21:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219357.117 ops/s
[info] # Warmup Iteration   2: 239060.718 ops/s
[info] # Warmup Iteration   3: 239485.715 ops/s
[info] # Warmup Iteration   4: 239939.077 ops/s
[info] # Warmup Iteration   5: 239723.716 ops/s
[info] Iteration   1: 238852.755 ops/s
[info]                  ·gc.alloc.rate:            934.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8937.089 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 240393.938 ops/s
[info]                  ·gc.alloc.rate:            940.832 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4439.718 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 240079.139 ops/s
[info]                  ·gc.alloc.rate:            939.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4445.691 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 239198.933 ops/s
[info]                  ·gc.alloc.rate:            936.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8923.865 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 239275.027 ops/s
[info]                  ·gc.alloc.rate:            936.400 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4460.403 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   239559.958 ±(99.9%) 2493.074 ops/s [Average]
[info]   (min, avg, max) = (238852.755, 239559.958, 240393.938), stdev = 647.444
[info]   CI (99.9%): [237066.884, 242053.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   937.508 ±(99.9%) 9.967 MB/sec [Average]
[info]   (min, avg, max) = (934.637, 937.508, 940.832), stdev = 2.588
[info]   CI (99.9%): [927.541, 947.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.001, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   949.264 ±(99.9%) 1429.903 MB/sec [Average]
[info]   (min, avg, max) = (678.039, 949.264, 1356.101), stdev = 371.341
[info]   CI (99.9%): [≈ 0, 2379.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6241.353 ±(99.9%) 9452.710 B/op [Average]
[info]   (min, avg, max) = (4439.718, 6241.353, 8937.089), stdev = 2454.839
[info]   CI (99.9%): [≈ 0, 15694.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.65% complete, ETA 00:20:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7066.065 ops/s
[info] # Warmup Iteration   2: 17327.376 ops/s
[info] # Warmup Iteration   3: 17720.153 ops/s
[info] # Warmup Iteration   4: 17665.796 ops/s
[info] # Warmup Iteration   5: 17226.398 ops/s
[info] Iteration   1: 17519.018 ops/s
[info]                  ·gc.alloc.rate:                   970.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              87200.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        60797.421 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 59.840 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 17411.293 ops/s
[info]                  ·gc.alloc.rate:            964.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       87200.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.918 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 122409.131 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 17808.173 ops/s
[info]                  ·gc.alloc.rate:            986.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       87200.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.663 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59814.340 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 17620.398 ops/s
[info]                  ·gc.alloc.rate:            976.169 MB/sec
[info]                  ·gc.alloc.rate.norm:       87200.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 120904.865 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 17775.992 ops/s
[info]                  ·gc.alloc.rate:                   984.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              87200.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.714 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        59921.999 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 58.978 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   17626.975 ±(99.9%) 647.937 ops/s [Average]
[info]   (min, avg, max) = (17411.293, 17626.975, 17808.173), stdev = 168.267
[info]   CI (99.9%): [16979.038, 18274.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   976.572 ±(99.9%) 35.654 MB/sec [Average]
[info]   (min, avg, max) = (964.484, 976.572, 986.470), stdev = 9.259
[info]   CI (99.9%): [940.918, 1012.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   87200.025 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (87200.023, 87200.025, 87200.031), stdev = 0.003
[info]   CI (99.9%): [87200.012, 87200.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   947.550 ±(99.9%) 1427.673 MB/sec [Average]
[info]   (min, avg, max) = (676.663, 947.550, 1353.918), stdev = 370.762
[info]   CI (99.9%): [≈ 0, 2375.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   84769.551 ±(99.9%) 129689.053 B/op [Average]
[info]   (min, avg, max) = (59814.340, 84769.551, 122409.131), stdev = 33679.835
[info]   CI (99.9%): [≈ 0, 214458.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   23.764 ±(99.9%) 125.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.764, 59.840), stdev = 32.541
[info]   CI (99.9%): [≈ 0, 149.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.88% complete, ETA 00:20:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54509.936 ops/s
[info] # Warmup Iteration   2: 98346.019 ops/s
[info] # Warmup Iteration   3: 99517.697 ops/s
[info] # Warmup Iteration   4: 98468.325 ops/s
[info] # Warmup Iteration   5: 97503.197 ops/s
[info] Iteration   1: 96758.102 ops/s
[info]                  ·gc.alloc.rate:                   1357.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              22088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        22027.041 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 98756.497 ops/s
[info]                  ·gc.alloc.rate:                   1385.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              22088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21581.929 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 99515.589 ops/s
[info]                  ·gc.alloc.rate:                   1396.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              22088.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21407.465 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 73.746 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 99741.340 ops/s
[info]                  ·gc.alloc.rate:                                  1399.633 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22088.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.854 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21504.616 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 99877.226 ops/s
[info]                  ·gc.alloc.rate:                                  1401.374 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22088.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.409 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.517 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21475.555 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   98929.751 ±(99.9%) 4963.324 ops/s [Average]
[info]   (min, avg, max) = (96758.102, 98929.751, 99877.226), stdev = 1288.960
[info]   CI (99.9%): [93966.427, 103893.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1388.229 ±(99.9%) 69.411 MB/sec [Average]
[info]   (min, avg, max) = (1357.850, 1388.229, 1401.374), stdev = 18.026
[info]   CI (99.9%): [1318.818, 1457.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22088.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22088.004, 22088.004, 22088.004), stdev = 0.001
[info]   CI (99.9%): [22088.004, 22088.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.252 ±(99.9%) 1.463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.252, 0.854), stdev = 0.380
[info]   CI (99.9%): [≈ 0, 1.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1357.359 ±(99.9%) 18.420 MB/sec [Average]
[info]   (min, avg, max) = (1353.456, 1357.359, 1362.666), stdev = 4.784
[info]   CI (99.9%): [1338.938, 1375.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21599.321 ±(99.9%) 951.706 B/op [Average]
[info]   (min, avg, max) = (21407.465, 21599.321, 22027.041), stdev = 247.155
[info]   CI (99.9%): [20647.615, 22551.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   19.039 ±(99.9%) 119.558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.039, 73.746), stdev = 31.049
[info]   CI (99.9%): [≈ 0, 138.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 10.000), stdev = 3.674
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.12% complete, ETA 00:20:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294323.509 ops/s
[info] # Warmup Iteration   2: 344405.575 ops/s
[info] # Warmup Iteration   3: 347180.438 ops/s
[info] # Warmup Iteration   4: 344331.776 ops/s
[info] # Warmup Iteration   5: 342784.284 ops/s
[info] Iteration   1: 345525.051 ops/s
[info]                  ·gc.alloc.rate:                   1645.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2033.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9260.128 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.034 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 347258.937 ops/s
[info]                  ·gc.alloc.rate:                   1654.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6143.941 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 18.115 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 345692.306 ops/s
[info]                  ·gc.alloc.rate:                                  1646.264 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.393 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9307.264 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 341488.983 ops/s
[info]                  ·gc.alloc.rate:            1626.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6281.270 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 345953.945 ops/s
[info]                  ·gc.alloc.rate:            1647.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6199.894 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   345183.844 ±(99.9%) 8375.930 ops/s [Average]
[info]   (min, avg, max) = (341488.983, 345183.844, 347258.937), stdev = 2175.202
[info]   CI (99.9%): [336807.914, 353559.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1644.035 ±(99.9%) 40.720 MB/sec [Average]
[info]   (min, avg, max) = (1626.172, 1644.035, 1654.439), stdev = 10.575
[info]   CI (99.9%): [1603.315, 1684.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.086), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.079 ±(99.9%) 0.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.393), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1631.701 ±(99.9%) 1430.458 MB/sec [Average]
[info]   (min, avg, max) = (1356.026, 1631.701, 2044.052), stdev = 371.485
[info]   CI (99.9%): [201.243, 3062.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   7438.499 ±(99.9%) 6489.169 B/op [Average]
[info]   (min, avg, max) = (6143.941, 7438.499, 9307.264), stdev = 1685.217
[info]   CI (99.9%): [949.331, 13927.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.691 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.998), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.230 ±(99.9%) 30.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.230, 18.115), stdev = 7.872
[info]   CI (99.9%): [≈ 0, 34.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 3.435
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82.35% complete, ETA 00:19:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342821.824 ops/s
[info] # Warmup Iteration   2: 398534.306 ops/s
[info] # Warmup Iteration   3: 401445.206 ops/s
[info] # Warmup Iteration   4: 399425.200 ops/s
[info] # Warmup Iteration   5: 401712.343 ops/s
[info] Iteration   1: 399877.168 ops/s
[info]                  ·gc.alloc.rate:                   1369.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5332.596 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.622 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 373244.326 ops/s
[info]                  ·gc.alloc.rate:                   1278.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5715.941 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.809 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 400914.637 ops/s
[info]                  ·gc.alloc.rate:            1373.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5321.407 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 401152.884 ops/s
[info]                  ·gc.alloc.rate:                                  1374.220 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.186 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5331.251 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.680 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 402519.396 ops/s
[info]                  ·gc.alloc.rate:                                  1378.883 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.451 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5329.120 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   395541.682 ±(99.9%) 48133.482 ops/s [Average]
[info]   (min, avg, max) = (373244.326, 395541.682, 402519.396), stdev = 12500.112
[info]   CI (99.9%): [347408.201, 443675.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1354.971 ±(99.9%) 164.830 MB/sec [Average]
[info]   (min, avg, max) = (1278.616, 1354.971, 1378.883), stdev = 42.806
[info]   CI (99.9%): [1190.141, 1519.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.115), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.127 ±(99.9%) 0.763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.127, 0.451), stdev = 0.198
[info]   CI (99.9%): [≈ 0, 0.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1357.407 ±(99.9%) 13.091 MB/sec [Average]
[info]   (min, avg, max) = (1354.741, 1357.407, 1362.802), stdev = 3.400
[info]   CI (99.9%): [1344.316, 1370.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   5406.063 ±(99.9%) 667.244 B/op [Average]
[info]   (min, avg, max) = (5321.407, 5406.063, 5715.941), stdev = 173.281
[info]   CI (99.9%): [4738.819, 6073.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   4.222 ±(99.9%) 25.213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.222, 15.680), stdev = 6.548
[info]   CI (99.9%): [≈ 0, 29.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 7.000), stdev = 2.168
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24787.488 ops/s
[info] # Warmup Iteration   2: 51048.066 ops/s
[info] # Warmup Iteration   3: 51447.146 ops/s
[info] # Warmup Iteration   4: 52014.034 ops/s
[info] # Warmup Iteration   5: 51904.561 ops/s
[info] Iteration   1: 52141.275 ops/s
[info]                  ·gc.alloc.rate:            1175.567 MB/sec
[info]                  ·gc.alloc.rate.norm:       35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40858.050 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 52513.426 ops/s
[info]                  ·gc.alloc.rate:                   1183.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40586.304 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.964 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 52494.780 ops/s
[info]                  ·gc.alloc.rate:                   1183.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20289.737 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.970 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 52473.604 ops/s
[info]                  ·gc.alloc.rate:            1183.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40617.236 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 52394.257 ops/s
[info]                  ·gc.alloc.rate:                   1181.348 MB/sec
[info]                  ·gc.alloc.rate.norm:              35488.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1358.102 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40797.742 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 140.061 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   52403.468 ±(99.9%) 590.850 ops/s [Average]
[info]   (min, avg, max) = (52141.275, 52403.468, 52513.426), stdev = 153.442
[info]   CI (99.9%): [51812.618, 52994.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1181.483 ±(99.9%) 13.270 MB/sec [Average]
[info]   (min, avg, max) = (1175.567, 1181.483, 1183.851), stdev = 3.446
[info]   CI (99.9%): [1168.212, 1194.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   35488.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35488.008, 35488.008, 35488.008), stdev = 0.001
[info]   CI (99.9%): [35488.007, 35488.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.250 ±(99.9%) 1167.942 MB/sec [Average]
[info]   (min, avg, max) = (676.681, 1219.250, 1358.102), stdev = 303.311
[info]   CI (99.9%): [51.308, 2387.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   36629.814 ±(99.9%) 35176.062 B/op [Average]
[info]   (min, avg, max) = (20289.737, 36629.814, 40858.050), stdev = 9135.112
[info]   CI (99.9%): [1453.751, 71805.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   35.999 ±(99.9%) 227.276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.999, 140.061), stdev = 59.023
[info]   CI (99.9%): [≈ 0, 263.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.200, 10.000), stdev = 2.168
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 82.82% complete, ETA 00:19:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45735.713 ops/s
[info] # Warmup Iteration   2: 58314.282 ops/s
[info] # Warmup Iteration   3: 57666.387 ops/s
[info] # Warmup Iteration   4: 59539.641 ops/s
[info] # Warmup Iteration   5: 58402.132 ops/s
[info] Iteration   1: 59721.021 ops/s
[info]                  ·gc.alloc.rate:            1343.047 MB/sec
[info]                  ·gc.alloc.rate.norm:       35400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35740.725 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 59581.166 ops/s
[info]                  ·gc.alloc.rate:            1340.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       35400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35825.892 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 59567.694 ops/s
[info]                  ·gc.alloc.rate:            1339.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       35400.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35833.709 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 58735.367 ops/s
[info]                  ·gc.alloc.rate:                                  1321.242 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35400.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.915 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36429.837 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.245 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 59252.293 ops/s
[info]                  ·gc.alloc.rate:                                  1332.801 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35400.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.821 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       36201.112 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   59371.508 ±(99.9%) 1520.263 ops/s [Average]
[info]   (min, avg, max) = (58735.367, 59371.508, 59721.021), stdev = 394.808
[info]   CI (99.9%): [57851.245, 60891.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1335.395 ±(99.9%) 33.747 MB/sec [Average]
[info]   (min, avg, max) = (1321.242, 1335.395, 1343.047), stdev = 8.764
[info]   CI (99.9%): [1301.647, 1369.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35400.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35400.007, 35400.007, 35400.007), stdev = 0.001
[info]   CI (99.9%): [35400.006, 35400.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.109), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.747 ±(99.9%) 4.863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.747, 2.915), stdev = 1.263
[info]   CI (99.9%): [≈ 0, 5.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.207 ±(99.9%) 11.846 MB/sec [Average]
[info]   (min, avg, max) = (1355.971, 1358.207, 1362.962), stdev = 3.076
[info]   CI (99.9%): [1346.361, 1370.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   36006.255 ±(99.9%) 1139.360 B/op [Average]
[info]   (min, avg, max) = (35740.725, 36006.255, 36429.837), stdev = 295.888
[info]   CI (99.9%): [34866.895, 37145.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   17.849 ±(99.9%) 153.685 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.849, 89.245), stdev = 39.912
[info]   CI (99.9%): [≈ 0, 171.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 10.000), stdev = 1.517
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.06% complete, ETA 00:19:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42018.030 ops/s
[info] # Warmup Iteration   2: 92255.217 ops/s
[info] # Warmup Iteration   3: 93806.630 ops/s
[info] # Warmup Iteration   4: 95463.922 ops/s
[info] # Warmup Iteration   5: 94874.280 ops/s
[info] Iteration   1: 95344.226 ops/s
[info]                  ·gc.alloc.rate:            647.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11171.792 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 95485.326 ops/s
[info]                  ·gc.alloc.rate:                   648.442 MB/sec
[info]                  ·gc.alloc.rate.norm:              10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11155.414 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.980 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 95557.327 ops/s
[info]                  ·gc.alloc.rate:            648.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11157.982 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 95412.240 ops/s
[info]                  ·gc.alloc.rate:                   647.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              10688.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11163.831 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 95464.526 ops/s
[info]                  ·gc.alloc.rate:            648.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11168.616 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   95452.729 ±(99.9%) 307.778 ops/s [Average]
[info]   (min, avg, max) = (95344.226, 95452.729, 95557.327), stdev = 79.929
[info]   CI (99.9%): [95144.951, 95760.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   648.132 ±(99.9%) 2.111 MB/sec [Average]
[info]   (min, avg, max) = (647.397, 648.132, 648.804), stdev = 0.548
[info]   CI (99.9%): [646.020, 650.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10688.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10688.004, 10688.004, 10688.005), stdev = 0.001
[info]   CI (99.9%): [10688.004, 10688.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.968 ±(99.9%) 1.354 MB/sec [Average]
[info]   (min, avg, max) = (676.641, 676.968, 677.362), stdev = 0.352
[info]   CI (99.9%): [675.614, 678.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   11163.527 ±(99.9%) 26.599 B/op [Average]
[info]   (min, avg, max) = (11155.414, 11163.527, 11171.792), stdev = 6.908
[info]   CI (99.9%): [11136.928, 11190.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.394 ±(99.9%) 23.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.394, 10.988), stdev = 6.016
[info]   CI (99.9%): [≈ 0, 27.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.29% complete, ETA 00:18:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 176800.879 ops/s
[info] # Warmup Iteration   2: 190631.982 ops/s
[info] # Warmup Iteration   3: 195769.535 ops/s
[info] # Warmup Iteration   4: 196764.820 ops/s
[info] # Warmup Iteration   5: 196308.325 ops/s
[info] Iteration   1: 195942.907 ops/s
[info]                  ·gc.alloc.rate:            806.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10893.796 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 196581.376 ops/s
[info]                  ·gc.alloc.rate:            809.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5429.168 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 196817.909 ops/s
[info]                  ·gc.alloc.rate:            810.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5422.631 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 196544.829 ops/s
[info]                  ·gc.alloc.rate:            809.076 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5429.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 196721.562 ops/s
[info]                  ·gc.alloc.rate:            809.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5425.167 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   196521.717 ±(99.9%) 1315.408 ops/s [Average]
[info]   (min, avg, max) = (195942.907, 196521.717, 196817.909), stdev = 341.607
[info]   CI (99.9%): [195206.309, 197837.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   809.011 ±(99.9%) 5.519 MB/sec [Average]
[info]   (min, avg, max) = (806.590, 809.011, 810.257), stdev = 1.433
[info]   CI (99.9%): [803.492, 814.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.002), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.615 ±(99.9%) 1167.507 MB/sec [Average]
[info]   (min, avg, max) = (677.975, 813.615, 1355.992), stdev = 303.198
[info]   CI (99.9%): [≈ 0, 1981.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6520.151 ±(99.9%) 9414.606 B/op [Average]
[info]   (min, avg, max) = (5422.631, 6520.151, 10893.796), stdev = 2444.943
[info]   CI (99.9%): [≈ 0, 15934.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.53% complete, ETA 00:18:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8370.440 ops/s
[info] # Warmup Iteration   2: 21364.040 ops/s
[info] # Warmup Iteration   3: 21430.644 ops/s
[info] # Warmup Iteration   4: 21254.838 ops/s
[info] # Warmup Iteration   5: 21644.225 ops/s
[info] Iteration   1: 21329.076 ops/s
[info]                  ·gc.alloc.rate:            1197.262 MB/sec
[info]                  ·gc.alloc.rate.norm:       88352.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99922.893 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 21578.097 ops/s
[info]                  ·gc.alloc.rate:                   1211.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              88352.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98721.514 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 48.583 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 21559.695 ops/s
[info]                  ·gc.alloc.rate:            1210.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       88352.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98852.539 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 21570.015 ops/s
[info]                  ·gc.alloc.rate:                   1210.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              88352.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98762.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 340.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 21757.137 ops/s
[info]                  ·gc.alloc.rate:            1221.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       88352.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      681.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 49294.299 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   21558.804 ±(99.9%) 585.911 ops/s [Average]
[info]   (min, avg, max) = (21329.076, 21558.804, 21757.137), stdev = 152.159
[info]   CI (99.9%): [20972.893, 22144.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1210.107 ±(99.9%) 32.858 MB/sec [Average]
[info]   (min, avg, max) = (1197.262, 1210.107, 1221.271), stdev = 8.533
[info]   CI (99.9%): [1177.249, 1242.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88352.020 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (88352.019, 88352.020, 88352.025), stdev = 0.003
[info]   CI (99.9%): [88352.009, 88352.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1219.216 ±(99.9%) 1157.723 MB/sec [Average]
[info]   (min, avg, max) = (681.385, 1219.216, 1354.060), stdev = 300.657
[info]   CI (99.9%): [61.493, 2376.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   89110.789 ±(99.9%) 85729.412 B/op [Average]
[info]   (min, avg, max) = (49294.299, 89110.789, 99922.893), stdev = 22263.656
[info]   CI (99.9%): [3381.377, 174840.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   77.762 ±(99.9%) 570.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77.762, 340.226), stdev = 148.222
[info]   CI (99.9%): [≈ 0, 648.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 11.000), stdev = 3.647
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.76% complete, ETA 00:18:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69699.220 ops/s
[info] # Warmup Iteration   2: 120257.153 ops/s
[info] # Warmup Iteration   3: 123072.776 ops/s
[info] # Warmup Iteration   4: 124296.245 ops/s
[info] # Warmup Iteration   5: 124412.085 ops/s
[info] Iteration   1: 124445.274 ops/s
[info]                  ·gc.alloc.rate:            1252.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       15840.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17119.608 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 125061.254 ops/s
[info]                  ·gc.alloc.rate:            1258.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       15840.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.907 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8517.511 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 124411.832 ops/s
[info]                  ·gc.alloc.rate:            1252.117 MB/sec
[info]                  ·gc.alloc.rate.norm:       15840.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17123.873 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 124203.805 ops/s
[info]                  ·gc.alloc.rate:                   1249.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17152.132 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 59.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 124611.793 ops/s
[info]                  ·gc.alloc.rate:                                  1254.187 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15840.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.596 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17213.631 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   124546.792 ±(99.9%) 1240.387 ops/s [Average]
[info]   (min, avg, max) = (124203.805, 124546.792, 125061.254), stdev = 322.124
[info]   CI (99.9%): [123306.405, 125787.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1253.480 ±(99.9%) 12.940 MB/sec [Average]
[info]   (min, avg, max) = (1249.908, 1253.480, 1258.843), stdev = 3.360
[info]   CI (99.9%): [1240.540, 1266.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15840.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15840.003, 15840.003, 15840.004), stdev = 0.001
[info]   CI (99.9%): [15840.003, 15840.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.126), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.319 ±(99.9%) 2.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.596), stdev = 0.714
[info]   CI (99.9%): [≈ 0, 3.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.084 ±(99.9%) 1169.334 MB/sec [Average]
[info]   (min, avg, max) = (676.907, 1220.084, 1362.949), stdev = 303.672
[info]   CI (99.9%): [50.749, 2389.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15425.351 ±(99.9%) 14870.350 B/op [Average]
[info]   (min, avg, max) = (8517.511, 15425.351, 17213.631), stdev = 3861.783
[info]   CI (99.9%): [555.001, 30295.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.817 ±(99.9%) 101.751 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.817, 59.087), stdev = 26.425
[info]   CI (99.9%): [≈ 0, 113.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.881
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.00% complete, ETA 00:18:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 466133.359 ops/s
[info] # Warmup Iteration   2: 514655.689 ops/s
[info] # Warmup Iteration   3: 523974.974 ops/s
[info] # Warmup Iteration   4: 523934.336 ops/s
[info] # Warmup Iteration   5: 532913.270 ops/s
[info] Iteration   1: 534512.116 ops/s
[info]                  ·gc.alloc.rate:            595.029 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1994.758 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 530899.930 ops/s
[info]                  ·gc.alloc.rate:            590.947 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2008.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 530152.665 ops/s
[info]                  ·gc.alloc.rate:      590.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 1752.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 530622.352 ops/s
[info]                  ·gc.alloc.rate:                   590.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2009.368 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.976 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 532710.111 ops/s
[info]                  ·gc.alloc.rate:            592.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2003.458 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   531779.435 ±(99.9%) 6966.489 ops/s [Average]
[info]   (min, avg, max) = (530152.665, 531779.435, 534512.116), stdev = 1809.175
[info]   CI (99.9%): [524812.946, 538745.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   591.916 ±(99.9%) 7.890 MB/sec [Average]
[info]   (min, avg, max) = (590.078, 591.916, 595.029), stdev = 2.049
[info]   CI (99.9%): [584.027, 599.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.055 ±(99.9%) 1166.816 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.055, 678.035), stdev = 303.018
[info]   CI (99.9%): [≈ 0, 1708.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1603.188 ±(99.9%) 3451.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1603.188, 2009.368), stdev = 896.228
[info]   CI (99.9%): [≈ 0, 5054.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.395 ±(99.9%) 3.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.976), stdev = 0.884
[info]   CI (99.9%): [≈ 0, 3.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84.24% complete, ETA 00:17:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505762.957 ops/s
[info] # Warmup Iteration   2: 559525.878 ops/s
[info] # Warmup Iteration   3: 564258.978 ops/s
[info] # Warmup Iteration   4: 564189.357 ops/s
[info] # Warmup Iteration   5: 564815.679 ops/s
[info] Iteration   1: 565999.878 ops/s
[info]                  ·gc.alloc.rate:      11.507 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 566331.846 ops/s
[info]                  ·gc.alloc.rate:      11.512 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 564599.573 ops/s
[info]                  ·gc.alloc.rate:      11.480 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 564825.670 ops/s
[info]                  ·gc.alloc.rate:      11.483 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 564608.767 ops/s
[info]                  ·gc.alloc.rate:      11.479 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   565273.147 ±(99.9%) 3189.486 ops/s [Average]
[info]   (min, avg, max) = (564599.573, 565273.147, 566331.846), stdev = 828.299
[info]   CI (99.9%): [562083.661, 568462.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.492 ±(99.9%) 0.062 MB/sec [Average]
[info]   (min, avg, max) = (11.479, 11.492, 11.512), stdev = 0.016
[info]   CI (99.9%): [11.430, 11.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.47% complete, ETA 00:17:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29396.076 ops/s
[info] # Warmup Iteration   2: 59507.312 ops/s
[info] # Warmup Iteration   3: 61351.903 ops/s
[info] # Warmup Iteration   4: 61727.314 ops/s
[info] # Warmup Iteration   5: 61023.402 ops/s
[info] Iteration   1: 62201.952 ops/s
[info]                  ·gc.alloc.rate:            1229.492 MB/sec
[info]                  ·gc.alloc.rate.norm:       31112.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17140.590 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 61401.140 ops/s
[info]                  ·gc.alloc.rate:                   1213.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              31112.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34711.222 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.074 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 61721.924 ops/s
[info]                  ·gc.alloc.rate:            1219.986 MB/sec
[info]                  ·gc.alloc.rate.norm:       31112.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34531.855 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 61444.894 ops/s
[info]                  ·gc.alloc.rate:                   1214.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              31112.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34670.438 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 119.436 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 61167.065 ops/s
[info]                  ·gc.alloc.rate:                                  1209.887 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31112.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.151 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.890 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.545 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35011.856 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   61587.395 ±(99.9%) 1525.085 ops/s [Average]
[info]   (min, avg, max) = (61167.065, 61587.395, 62201.952), stdev = 396.060
[info]   CI (99.9%): [60062.310, 63112.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1217.515 ±(99.9%) 29.284 MB/sec [Average]
[info]   (min, avg, max) = (1209.887, 1217.515, 1229.492), stdev = 7.605
[info]   CI (99.9%): [1188.231, 1246.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   31112.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31112.007, 31112.007, 31112.007), stdev = 0.001
[info]   CI (99.9%): [31112.006, 31112.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.260 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.151), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.778 ±(99.9%) 6.698 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.778, 3.890), stdev = 1.739
[info]   CI (99.9%): [≈ 0, 7.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.105 ±(99.9%) 1168.358 MB/sec [Average]
[info]   (min, avg, max) = (677.366, 1220.105, 1361.545), stdev = 303.419
[info]   CI (99.9%): [51.747, 2388.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   31213.192 ±(99.9%) 30299.838 B/op [Average]
[info]   (min, avg, max) = (17140.590, 31213.192, 35011.856), stdev = 7868.772
[info]   CI (99.9%): [913.354, 61513.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   27.302 ±(99.9%) 200.358 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.302, 119.436), stdev = 52.032
[info]   CI (99.9%): [≈ 0, 227.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 3.209
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.71% complete, ETA 00:17:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63261.416 ops/s
[info] # Warmup Iteration   2: 78334.146 ops/s
[info] # Warmup Iteration   3: 77751.651 ops/s
[info] # Warmup Iteration   4: 78704.814 ops/s
[info] # Warmup Iteration   5: 78686.665 ops/s
[info] Iteration   1: 78545.989 ops/s
[info]                  ·gc.alloc.rate:            1373.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       27528.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27176.109 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 78305.408 ops/s
[info]                  ·gc.alloc.rate:            1369.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       27528.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27259.736 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 78425.314 ops/s
[info]                  ·gc.alloc.rate:            1371.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       27528.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27218.378 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 77221.535 ops/s
[info]                  ·gc.alloc.rate:                                  1350.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27528.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.341 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.375 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27707.711 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                67.878 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 78532.063 ops/s
[info]                  ·gc.alloc.rate:                                  1373.651 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27528.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.697 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27313.759 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   78206.062 ±(99.9%) 2151.766 ops/s [Average]
[info]   (min, avg, max) = (77221.535, 78206.062, 78545.989), stdev = 558.807
[info]   CI (99.9%): [76054.295, 80357.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1367.848 ±(99.9%) 37.738 MB/sec [Average]
[info]   (min, avg, max) = (1350.558, 1367.848, 1373.666), stdev = 9.801
[info]   CI (99.9%): [1330.110, 1405.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27528.005, 27528.005, 27528.006), stdev = 0.001
[info]   CI (99.9%): [27528.004, 27528.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.085), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.608 ±(99.9%) 3.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.608, 1.697), stdev = 0.842
[info]   CI (99.9%): [≈ 0, 3.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.206 ±(99.9%) 11.505 MB/sec [Average]
[info]   (min, avg, max) = (1356.106, 1358.206, 1362.960), stdev = 2.988
[info]   CI (99.9%): [1346.701, 1369.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27335.139 ±(99.9%) 825.594 B/op [Average]
[info]   (min, avg, max) = (27176.109, 27335.139, 27707.711), stdev = 214.404
[info]   CI (99.9%): [26509.545, 28160.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   13.576 ±(99.9%) 116.890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.576, 67.878), stdev = 30.356
[info]   CI (99.9%): [≈ 0, 130.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.304
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.94% complete, ETA 00:17:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80474.558 ops/s
[info] # Warmup Iteration   2: 153674.413 ops/s
[info] # Warmup Iteration   3: 156451.316 ops/s
[info] # Warmup Iteration   4: 157071.308 ops/s
[info] # Warmup Iteration   5: 154048.166 ops/s
[info] Iteration   1: 157732.556 ops/s
[info]                  ·gc.alloc.rate:            670.980 MB/sec
[info]                  ·gc.alloc.rate.norm:       6696.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6759.518 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 157846.966 ops/s
[info]                  ·gc.alloc.rate:            671.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       6696.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6754.808 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 157954.705 ops/s
[info]                  ·gc.alloc.rate:            671.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       6696.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6749.891 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 157783.899 ops/s
[info]                  ·gc.alloc.rate:            671.225 MB/sec
[info]                  ·gc.alloc.rate.norm:       6696.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6750.389 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 154832.860 ops/s
[info]                  ·gc.alloc.rate:            658.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       6696.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6879.549 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   157230.197 ±(99.9%) 5170.302 ops/s [Average]
[info]   (min, avg, max) = (154832.860, 157230.197, 157954.705), stdev = 1342.711
[info]   CI (99.9%): [152059.895, 162400.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   668.849 ±(99.9%) 21.958 MB/sec [Average]
[info]   (min, avg, max) = (658.669, 668.849, 671.958), stdev = 5.702
[info]   CI (99.9%): [646.891, 690.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6696.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6696.003, 6696.003, 6696.003), stdev = 0.001
[info]   CI (99.9%): [6696.002, 6696.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   677.084 ±(99.9%) 1.353 MB/sec [Average]
[info]   (min, avg, max) = (676.677, 677.084, 677.366), stdev = 0.351
[info]   CI (99.9%): [675.732, 678.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   6778.831 ±(99.9%) 217.320 B/op [Average]
[info]   (min, avg, max) = (6749.891, 6778.831, 6879.549), stdev = 56.437
[info]   CI (99.9%): [6561.511, 6996.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.18% complete, ETA 00:16:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192071.864 ops/s
[info] # Warmup Iteration   2: 206789.832 ops/s
[info] # Warmup Iteration   3: 209082.666 ops/s
[info] # Warmup Iteration   4: 211865.050 ops/s
[info] # Warmup Iteration   5: 212026.455 ops/s
[info] Iteration   1: 212901.320 ops/s
[info]                  ·gc.alloc.rate:            758.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5013.010 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 213573.650 ops/s
[info]                  ·gc.alloc.rate:            760.868 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4997.169 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 205586.463 ops/s
[info]                  ·gc.alloc.rate:            732.404 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5191.349 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 212858.122 ops/s
[info]                  ·gc.alloc.rate:            758.374 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5013.811 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 211938.987 ops/s
[info]                  ·gc.alloc.rate:            755.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10071.094 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   211371.708 ±(99.9%) 12652.831 ops/s [Average]
[info]   (min, avg, max) = (205586.463, 211371.708, 213573.650), stdev = 3285.900
[info]   CI (99.9%): [198718.877, 224024.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   753.058 ±(99.9%) 45.162 MB/sec [Average]
[info]   (min, avg, max) = (732.404, 753.058, 760.868), stdev = 11.729
[info]   CI (99.9%): [707.896, 798.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.002, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   813.620 ±(99.9%) 1167.550 MB/sec [Average]
[info]   (min, avg, max) = (677.989, 813.620, 1356.017), stdev = 303.209
[info]   CI (99.9%): [≈ 0, 1981.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6057.287 ±(99.9%) 8645.468 B/op [Average]
[info]   (min, avg, max) = (4997.169, 6057.287, 10071.094), stdev = 2245.201
[info]   CI (99.9%): [≈ 0, 14702.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.41% complete, ETA 00:16:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24836.338 ops/s
[info] # Warmup Iteration   2: 41592.621 ops/s
[info] # Warmup Iteration   3: 41158.044 ops/s
[info] # Warmup Iteration   4: 41388.327 ops/s
[info] # Warmup Iteration   5: 41464.352 ops/s
[info] Iteration   1: 41506.593 ops/s
[info]                  ·gc.alloc.rate:            1720.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       65248.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2031.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77063.289 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 41860.807 ops/s
[info]                  ·gc.alloc.rate:                                  1735.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       51090.187 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                150.265 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 41954.497 ops/s
[info]                  ·gc.alloc.rate:                                  1739.092 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.307 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76688.505 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 42074.889 ops/s
[info]                  ·gc.alloc.rate:            1744.165 MB/sec
[info]                  ·gc.alloc.rate.norm:       65248.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50979.885 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 41938.020 ops/s
[info]                  ·gc.alloc.rate:                                  1738.533 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76721.415 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   41866.961 ±(99.9%) 830.011 ops/s [Average]
[info]   (min, avg, max) = (41506.593, 41866.961, 42074.889), stdev = 215.551
[info]   CI (99.9%): [41036.951, 42696.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1735.628 ±(99.9%) 34.682 MB/sec [Average]
[info]   (min, avg, max) = (1720.426, 1735.628, 1744.165), stdev = 9.007
[info]   CI (99.9%): [1700.946, 1770.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65248.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65248.010, 65248.010, 65248.011), stdev = 0.001
[info]   CI (99.9%): [65248.009, 65248.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.066 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.035), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.497 ±(99.9%) 2.462 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.497, 1.307), stdev = 0.639
[info]   CI (99.9%): [≈ 0, 2.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1768.449 ±(99.9%) 1432.352 MB/sec [Average]
[info]   (min, avg, max) = (1359.254, 1768.449, 2044.242), stdev = 371.977
[info]   CI (99.9%): [336.097, 3200.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66508.656 ±(99.9%) 54395.098 B/op [Average]
[info]   (min, avg, max) = (50979.885, 66508.656, 77063.289), stdev = 14126.234
[info]   CI (99.9%): [12113.558, 120903.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   30.053 ±(99.9%) 258.766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.053, 150.265), stdev = 67.201
[info]   CI (99.9%): [≈ 0, 288.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 13.000), stdev = 4.301
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85.65% complete, ETA 00:16:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138285.542 ops/s
[info] # Warmup Iteration   2: 178435.008 ops/s
[info] # Warmup Iteration   3: 181250.711 ops/s
[info] # Warmup Iteration   4: 180647.236 ops/s
[info] # Warmup Iteration   5: 181480.647 ops/s
[info] Iteration   1: 178054.423 ops/s
[info]                  ·gc.alloc.rate:            837.909 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5994.386 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 180814.775 ops/s
[info]                  ·gc.alloc.rate:            851.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5902.864 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 180185.030 ops/s
[info]                  ·gc.alloc.rate:            848.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.119 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5923.468 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 181925.617 ops/s
[info]                  ·gc.alloc.rate:            856.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11733.770 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 180210.276 ops/s
[info]                  ·gc.alloc.rate:            848.416 MB/sec
[info]                  ·gc.alloc.rate.norm:       7408.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5922.416 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   180238.024 ±(99.9%) 5429.374 ops/s [Average]
[info]   (min, avg, max) = (178054.423, 180238.024, 181925.617), stdev = 1409.991
[info]   CI (99.9%): [174808.650, 185667.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   848.335 ±(99.9%) 25.667 MB/sec [Average]
[info]   (min, avg, max) = (837.909, 848.335, 856.157), stdev = 6.666
[info]   CI (99.9%): [822.667, 874.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7408.002, 7408.002, 7408.002), stdev = 0.001
[info]   CI (99.9%): [7408.002, 7408.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   813.740 ±(99.9%) 1167.459 MB/sec [Average]
[info]   (min, avg, max) = (678.017, 813.740, 1356.094), stdev = 303.185
[info]   CI (99.9%): [≈ 0, 1981.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7095.381 ±(99.9%) 9985.382 B/op [Average]
[info]   (min, avg, max) = (5902.864, 7095.381, 11733.770), stdev = 2593.172
[info]   CI (99.9%): [≈ 0, 17080.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 8.000), stdev = 2.074
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.88% complete, ETA 00:15:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277980.449 ops/s
[info] # Warmup Iteration   2: 510747.596 ops/s
[info] # Warmup Iteration   3: 508020.810 ops/s
[info] # Warmup Iteration   4: 502803.804 ops/s
[info] # Warmup Iteration   5: 512541.695 ops/s
[info] Iteration   1: 509290.165 ops/s
[info]                  ·gc.alloc.rate:            408.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2093.562 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 511456.198 ops/s
[info]                  ·gc.alloc.rate:      410.704 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 509813.587 ops/s
[info]                  ·gc.alloc.rate:                   409.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2089.329 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 508880.437 ops/s
[info]                  ·gc.alloc.rate:            408.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2095.232 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 510307.366 ops/s
[info]                  ·gc.alloc.rate:      409.794 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   509949.550 ±(99.9%) 3847.898 ops/s [Average]
[info]   (min, avg, max) = (508880.437, 509949.550, 511456.198), stdev = 999.287
[info]   CI (99.9%): [506101.653, 513797.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   409.498 ±(99.9%) 3.095 MB/sec [Average]
[info]   (min, avg, max) = (408.637, 409.498, 410.704), stdev = 0.804
[info]   CI (99.9%): [406.402, 412.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.286 ±(99.9%) 1428.152 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.286, 677.364), stdev = 370.887
[info]   CI (99.9%): [≈ 0, 1834.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1255.625 ±(99.9%) 4413.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1255.625, 2095.232), stdev = 1146.225
[info]   CI (99.9%): [≈ 0, 5669.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.411 ±(99.9%) 3.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.411, 2.056), stdev = 0.920
[info]   CI (99.9%): [≈ 0, 3.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86.12% complete, ETA 00:15:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552999.556 ops/s
[info] # Warmup Iteration   2: 610201.209 ops/s
[info] # Warmup Iteration   3: 578238.960 ops/s
[info] # Warmup Iteration   4: 617355.964 ops/s
[info] # Warmup Iteration   5: 610003.921 ops/s
[info] Iteration   1: 609491.870 ops/s
[info]                  ·gc.alloc.rate:      322.220 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 608239.441 ops/s
[info]                  ·gc.alloc.rate:            321.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1754.665 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 607482.353 ops/s
[info]                  ·gc.alloc.rate:      321.071 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 602879.787 ops/s
[info]                  ·gc.alloc.rate:            318.649 MB/sec
[info]                  ·gc.alloc.rate.norm:       832.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.015 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1770.315 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 614650.722 ops/s
[info]                  ·gc.alloc.rate:      324.892 MB/sec
[info]                  ·gc.alloc.rate.norm: 832.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   608548.835 ±(99.9%) 16279.341 ops/s [Average]
[info]   (min, avg, max) = (602879.787, 608548.835, 614650.722), stdev = 4227.693
[info]   CI (99.9%): [592269.494, 624828.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   321.667 ±(99.9%) 8.653 MB/sec [Average]
[info]   (min, avg, max) = (318.649, 321.667, 324.892), stdev = 2.247
[info]   CI (99.9%): [313.014, 330.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.001, 832.001, 832.001), stdev = 0.001
[info]   CI (99.9%): [832.001, 832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.211 ±(99.9%) 1430.016 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.211, 678.039), stdev = 371.371
[info]   CI (99.9%): [≈ 0, 1701.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   704.996 ±(99.9%) 3717.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 704.996, 1770.315), stdev = 965.371
[info]   CI (99.9%): [≈ 0, 4422.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86.35% complete, ETA 00:15:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 575074.944 ops/s
[info] # Warmup Iteration   2: 632478.809 ops/s
[info] # Warmup Iteration   3: 643142.707 ops/s
[info] # Warmup Iteration   4: 642311.788 ops/s
[info] # Warmup Iteration   5: 638662.306 ops/s
[info] Iteration   1: 643879.783 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 642907.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 643689.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 642664.718 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 641496.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   642927.427 ±(99.9%) 3655.535 ops/s [Average]
[info]   (min, avg, max) = (641496.180, 642927.427, 643879.783), stdev = 949.331
[info]   CI (99.9%): [639271.893, 646582.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86.59% complete, ETA 00:15:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20648.955 ops/s
[info] # Warmup Iteration   2: 30642.658 ops/s
[info] # Warmup Iteration   3: 30405.739 ops/s
[info] # Warmup Iteration   4: 30583.670 ops/s
[info] # Warmup Iteration   5: 30677.298 ops/s
[info] Iteration   1: 30666.148 ops/s
[info]                  ·gc.alloc.rate:            1533.333 MB/sec
[info]                  ·gc.alloc.rate.norm:       78704.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69538.117 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 30067.389 ops/s
[info]                  ·gc.alloc.rate:            1503.509 MB/sec
[info]                  ·gc.alloc.rate.norm:       78704.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2032.305 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 106384.856 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 30510.015 ops/s
[info]                  ·gc.alloc.rate:                                  1525.602 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78704.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70099.788 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                206.176 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 30609.489 ops/s
[info]                  ·gc.alloc.rate:                                  1530.817 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78704.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.130 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.673 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.916 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70071.741 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 30052.820 ops/s
[info]                  ·gc.alloc.rate:                                  1502.729 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78704.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71372.517 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   30381.172 ±(99.9%) 1149.105 ops/s [Average]
[info]   (min, avg, max) = (30052.820, 30381.172, 30666.148), stdev = 298.419
[info]   CI (99.9%): [29232.067, 31530.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1519.198 ±(99.9%) 57.540 MB/sec [Average]
[info]   (min, avg, max) = (1502.729, 1519.198, 1533.333), stdev = 14.943
[info]   CI (99.9%): [1461.657, 1576.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78704.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (78704.013, 78704.014, 78704.014), stdev = 0.001
[info]   CI (99.9%): [78704.012, 78704.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.130), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.347 ±(99.9%) 12.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.347, 6.673), stdev = 3.254
[info]   CI (99.9%): [≈ 0, 14.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.309 ±(99.9%) 1158.148 MB/sec [Average]
[info]   (min, avg, max) = (1354.760, 1494.309, 2032.305), stdev = 300.767
[info]   CI (99.9%): [336.160, 2652.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   77493.404 ±(99.9%) 62245.229 B/op [Average]
[info]   (min, avg, max) = (69538.117, 77493.404, 106384.856), stdev = 16164.888
[info]   CI (99.9%): [15248.175, 139738.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.235 ±(99.9%) 355.047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.235, 206.176), stdev = 92.205
[info]   CI (99.9%): [≈ 0, 396.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 13.000), stdev = 4.637
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.82% complete, ETA 00:14:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 304214.325 ops/s
[info] # Warmup Iteration   2: 629311.261 ops/s
[info] # Warmup Iteration   3: 629351.849 ops/s
[info] # Warmup Iteration   4: 626498.069 ops/s
[info] # Warmup Iteration   5: 629862.998 ops/s
[info] Iteration   1: 629456.658 ops/s
[info]                  ·gc.alloc.rate:            1919.450 MB/sec
[info]                  ·gc.alloc.rate.norm:       4800.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5086.876 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 631560.653 ops/s
[info]                  ·gc.alloc.rate:                                  1926.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.162 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.404 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5086.379 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.300 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 633914.403 ops/s
[info]                  ·gc.alloc.rate:                                  1933.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4800.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5075.956 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 633089.457 ops/s
[info]                  ·gc.alloc.rate:            1931.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       4800.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.867 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5082.513 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 634939.865 ops/s
[info]                  ·gc.alloc.rate:            1936.230 MB/sec
[info]                  ·gc.alloc.rate.norm:       4800.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3378.428 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   632592.207 ±(99.9%) 8259.324 ops/s [Average]
[info]   (min, avg, max) = (629456.658, 632592.207, 634939.865), stdev = 2144.920
[info]   CI (99.9%): [624332.883, 640851.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1929.328 ±(99.9%) 25.756 MB/sec [Average]
[info]   (min, avg, max) = (1919.450, 1929.328, 1936.230), stdev = 6.689
[info]   CI (99.9%): [1903.572, 1955.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4800.001, 4800.001, 4800.001), stdev = 0.001
[info]   CI (99.9%): [4800.001, 4800.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.162), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.084 ±(99.9%) 0.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.084, 0.404), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1905.534 ±(99.9%) 1168.409 MB/sec [Average]
[info]   (min, avg, max) = (1362.794, 1905.534, 2044.899), stdev = 303.432
[info]   CI (99.9%): [737.125, 3073.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4742.030 ±(99.9%) 2935.304 B/op [Average]
[info]   (min, avg, max) = (3378.428, 4742.030, 5086.876), stdev = 762.289
[info]   CI (99.9%): [1806.726, 7677.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.660 ±(99.9%) 14.293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.660, 8.300), stdev = 3.712
[info]   CI (99.9%): [≈ 0, 15.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 11.000), stdev = 3.362
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87.06% complete, ETA 00:14:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351933.603 ops/s
[info] # Warmup Iteration   2: 1359133.526 ops/s
[info] # Warmup Iteration   3: 1345846.708 ops/s
[info] # Warmup Iteration   4: 1310209.259 ops/s
[info] # Warmup Iteration   5: 1349977.030 ops/s
[info] Iteration   1: 1356490.822 ops/s
[info]                  ·gc.alloc.rate:            1027.296 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 786.035 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1347608.220 ops/s
[info]                  ·gc.alloc.rate:            1020.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1582.442 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1358656.410 ops/s
[info]                  ·gc.alloc.rate:            1029.007 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 784.013 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1348683.513 ops/s
[info]                  ·gc.alloc.rate:                   1021.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1579.553 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 1354800.766 ops/s
[info]                  ·gc.alloc.rate:            1026.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 787.017 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1353247.946 ±(99.9%) 18747.885 ops/s [Average]
[info]   (min, avg, max) = (1347608.220, 1353247.946, 1358656.410), stdev = 4868.766
[info]   CI (99.9%): [1334500.061, 1371995.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1024.946 ±(99.9%) 13.969 MB/sec [Average]
[info]   (min, avg, max) = (1020.602, 1024.946, 1029.007), stdev = 3.628
[info]   CI (99.9%): [1010.977, 1038.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   948.106 ±(99.9%) 1428.200 MB/sec [Average]
[info]   (min, avg, max) = (676.807, 948.106, 1354.901), stdev = 370.899
[info]   CI (99.9%): [≈ 0, 2376.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1103.812 ±(99.9%) 1677.384 B/op [Average]
[info]   (min, avg, max) = (784.013, 1103.812, 1582.442), stdev = 435.611
[info]   CI (99.9%): [≈ 0, 2781.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.155 ±(99.9%) 1.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.777), stdev = 0.348
[info]   CI (99.9%): [≈ 0, 1.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87.29% complete, ETA 00:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6441700.006 ops/s
[info] # Warmup Iteration   2: 7011744.023 ops/s
[info] # Warmup Iteration   3: 6782562.618 ops/s
[info] # Warmup Iteration   4: 6949674.734 ops/s
[info] # Warmup Iteration   5: 7139048.333 ops/s
[info] Iteration   1: 7132637.515 ops/s
[info]                  ·gc.alloc.rate:      217.530 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6815275.230 ops/s
[info]                  ·gc.alloc.rate:            207.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 156.754 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7095029.667 ops/s
[info]                  ·gc.alloc.rate:      216.377 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7110740.593 ops/s
[info]                  ·gc.alloc.rate:      216.875 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7006962.845 ops/s
[info]                  ·gc.alloc.rate:            213.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 152.314 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7032129.170 ±(99.9%) 501682.645 ops/s [Average]
[info]   (min, avg, max) = (6815275.230, 7032129.170, 7132637.515), stdev = 130285.390
[info]   CI (99.9%): [6530446.525, 7533811.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   214.473 ±(99.9%) 15.226 MB/sec [Average]
[info]   (min, avg, max) = (207.902, 214.473, 217.530), stdev = 3.954
[info]   CI (99.9%): [199.247, 229.700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.401 ±(99.9%) 1431.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.401, 678.945), stdev = 371.631
[info]   CI (99.9%): [≈ 0, 1702.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   61.814 ±(99.9%) 325.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.814, 156.754), stdev = 84.656
[info]   CI (99.9%): [≈ 0, 387.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87.53% complete, ETA 00:14:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27097.542 ops/s
[info] # Warmup Iteration   2: 201045.756 ops/s
[info] # Warmup Iteration   3: 206757.242 ops/s
[info] # Warmup Iteration   4: 209054.327 ops/s
[info] # Warmup Iteration   5: 209597.438 ops/s
[info] Iteration   1: 208140.636 ops/s
[info]                  ·gc.alloc.rate:            1458.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       11024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2030.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15353.123 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 207360.933 ops/s
[info]                  ·gc.alloc.rate:                   1452.115 MB/sec
[info]                  ·gc.alloc.rate.norm:              11024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.898 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10278.372 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.056 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 209268.535 ops/s
[info]                  ·gc.alloc.rate:                   1465.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              11024.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1353.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10179.814 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 35.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 211509.933 ops/s
[info]                  ·gc.alloc.rate:                                  1481.379 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11024.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.595 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10141.753 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 211727.603 ops/s
[info]                  ·gc.alloc.rate:                                  1482.789 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11024.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.141 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10131.265 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   209601.528 ±(99.9%) 7562.265 ops/s [Average]
[info]   (min, avg, max) = (207360.933, 209601.528, 211727.603), stdev = 1963.896
[info]   CI (99.9%): [202039.263, 217163.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1467.992 ±(99.9%) 52.818 MB/sec [Average]
[info]   (min, avg, max) = (1452.115, 1467.992, 1482.789), stdev = 13.717
[info]   CI (99.9%): [1415.175, 1520.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11024.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11024.002, 11024.002, 11024.002), stdev = 0.001
[info]   CI (99.9%): [11024.002, 11024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.133 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.147 ±(99.9%) 0.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.147, 0.595), stdev = 0.258
[info]   CI (99.9%): [≈ 0, 1.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1492.704 ±(99.9%) 1158.474 MB/sec [Average]
[info]   (min, avg, max) = (1353.265, 1492.704, 2030.822), stdev = 300.852
[info]   CI (99.9%): [334.230, 2651.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11216.866 ±(99.9%) 8906.413 B/op [Average]
[info]   (min, avg, max) = (10131.265, 11216.866, 15353.123), stdev = 2312.967
[info]   CI (99.9%): [2310.453, 20123.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   8.025 ±(99.9%) 58.820 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.025, 35.068), stdev = 15.275
[info]   CI (99.9%): [≈ 0, 66.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 14.000), stdev = 4.899
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.76% complete, ETA 00:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333065.249 ops/s
[info] # Warmup Iteration   2: 805643.485 ops/s
[info] # Warmup Iteration   3: 835009.329 ops/s
[info] # Warmup Iteration   4: 846155.491 ops/s
[info] # Warmup Iteration   5: 845926.271 ops/s
[info] Iteration   1: 829063.959 ops/s
[info]                  ·gc.alloc.rate:            1272.499 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2574.719 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 842811.367 ops/s
[info]                  ·gc.alloc.rate:            1293.766 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2532.714 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 841539.630 ops/s
[info]                  ·gc.alloc.rate:            1291.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2536.406 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 847661.466 ops/s
[info]                  ·gc.alloc.rate:            1301.087 MB/sec
[info]                  ·gc.alloc.rate.norm:       2416.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1258.989 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 838916.914 ops/s
[info]                  ·gc.alloc.rate:                                  1287.930 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2416.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1359.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2550.556 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.248 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   839998.667 ±(99.9%) 26520.733 ops/s [Average]
[info]   (min, avg, max) = (829063.959, 839998.667, 847661.466), stdev = 6887.350
[info]   CI (99.9%): [813477.934, 866519.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1289.387 ±(99.9%) 40.775 MB/sec [Average]
[info]   (min, avg, max) = (1272.499, 1289.387, 1301.087), stdev = 10.589
[info]   CI (99.9%): [1248.611, 1330.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2416.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2416.000, 2416.000, 2416.001), stdev = 0.001
[info]   CI (99.9%): [2416.000, 2416.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   ≈ 10⁻³ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.003), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.209 ±(99.9%) 1169.309 MB/sec [Average]
[info]   (min, avg, max) = (678.002, 1221.209, 1359.660), stdev = 303.666
[info]   CI (99.9%): [51.901, 2390.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2290.677 ±(99.9%) 2221.693 B/op [Average]
[info]   (min, avg, max) = (1258.989, 2290.677, 2574.719), stdev = 576.967
[info]   CI (99.9%): [68.984, 4512.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.250 ±(99.9%) 10.760 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.250, 6.248), stdev = 2.794
[info]   CI (99.9%): [≈ 0, 12.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 8.000), stdev = 1.673
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88.00% complete, ETA 00:13:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ce803297/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 609547.418 ops/s
[info] # Warmup Iteration   2: 2074553.427 ops/s
[info] # Warmup Iteration   3: 2118651.115 ops/s
[info] # Warmup Iteration   4: 2100828.813 ops/s
[info] # Warmup Iteration   5: 2114202.956 ops/s
[info] Iteration   1: 2124019.956 ops/s
[info]                  ·gc.alloc.rate:            874.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 501.492 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2094611.017 ops/s
[info]                  ·gc.alloc.rate:            862.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.432 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1017.095 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2150480.237 ops/s
[info]                  ·gc.alloc.rate:            885.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 495.324 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2164909.558 ops/s
[info]                  ·gc.alloc.rate:            891.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 491.998 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2149151.087 ops/s
[info]                  ·gc.alloc.rate:            884.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 991.229 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2136634.371 ±(99.9%) 106728.641 ops/s [Average]
[info]   (min, avg, max) = (2094611.017, 2136634.371, 2164909.558), stdev = 27717.089
[info]   CI (99.9%): [2029905.729, 2243363.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   879.645 ±(99.9%) 43.986 MB/sec [Average]
[info]   (min, avg, max) = (862.284, 879.645, 891.236), stdev = 11.423
[info]   CI (99.9%): [835.659, 923.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.418 ±(99.9%) 1427.067 MB/sec [Average]
[info]   (min, avg, max) = (676.676, 947.418, 1353.432), stdev = 370.605
[info]   CI (99.9%): [≈ 0, 2374.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   699.427 ±(99.9%) 1071.844 B/op [Average]
[info]   (min, avg, max) = (491.998, 699.427, 1017.095), stdev = 278.354
[info]   CI (99.9%): [≈ 0, 1771.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88.24% complete, ETA 00:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3856028.684 ops/s
[info] # Warmup Iteration   2: 5377419.070 ops/s
[info] # Warmup Iteration   3: 5466276.909 ops/s
[info] # Warmup Iteration   4: 5591845.364 ops/s
[info] # Warmup Iteration   5: 5583726.565 ops/s
[info] Iteration   1: 5572936.789 ops/s
[info]                  ·gc.alloc.rate:            623.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 191.322 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 5596888.339 ops/s
[info]                  ·gc.alloc.rate:            625.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190.505 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5598368.517 ops/s
[info]                  ·gc.alloc.rate:            626.050 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190.455 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 5601913.583 ops/s
[info]                  ·gc.alloc.rate:            626.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 190.330 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5626630.655 ops/s
[info]                  ·gc.alloc.rate:      629.152 MB/sec
[info]                  ·gc.alloc.rate.norm: 176.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5599347.577 ±(99.9%) 73452.657 ops/s [Average]
[info]   (min, avg, max) = (5572936.789, 5599347.577, 5626630.655), stdev = 19075.422
[info]   CI (99.9%): [5525894.920, 5672800.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   626.175 ±(99.9%) 8.305 MB/sec [Average]
[info]   (min, avg, max) = (623.104, 626.175, 629.152), stdev = 2.157
[info]   CI (99.9%): [617.870, 634.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   541.998 ±(99.9%) 1166.693 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.998, 677.672), stdev = 302.986
[info]   CI (99.9%): [≈ 0, 1708.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   152.522 ±(99.9%) 328.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 152.522, 191.322), stdev = 85.264
[info]   CI (99.9%): [≈ 0, 480.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88.47% complete, ETA 00:13:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3706792.186 ops/s
[info] # Warmup Iteration   2: 5537992.140 ops/s
[info] # Warmup Iteration   3: 5405369.314 ops/s
[info] # Warmup Iteration   4: 5568924.904 ops/s
[info] # Warmup Iteration   5: 5633986.622 ops/s
[info] Iteration   1: 5663975.921 ops/s
[info]                  ·gc.alloc.rate:      345.431 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5652111.647 ops/s
[info]                  ·gc.alloc.rate:                   344.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        188.643 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5670212.144 ops/s
[info]                  ·gc.alloc.rate:      345.863 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 5631387.800 ops/s
[info]                  ·gc.alloc.rate:            343.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 189.523 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5654698.392 ops/s
[info]                  ·gc.alloc.rate:      345.039 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5654477.181 ±(99.9%) 57003.166 ops/s [Average]
[info]   (min, avg, max) = (5631387.800, 5654477.181, 5670212.144), stdev = 14803.541
[info]   CI (99.9%): [5597474.015, 5711480.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   344.910 ±(99.9%) 3.539 MB/sec [Average]
[info]   (min, avg, max) = (343.438, 344.910, 345.863), stdev = 0.919
[info]   CI (99.9%): [341.371, 348.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   271.103 ±(99.9%) 1429.446 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.103, 678.013), stdev = 371.223
[info]   CI (99.9%): [≈ 0, 1700.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   75.633 ±(99.9%) 398.793 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75.633, 189.523), stdev = 103.565
[info]   CI (99.9%): [≈ 0, 474.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 3.000), stdev = 1.643
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.71% complete, ETA 00:12:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44338.501 ops/s
[info] # Warmup Iteration   2: 294338.877 ops/s
[info] # Warmup Iteration   3: 300477.998 ops/s
[info] # Warmup Iteration   4: 304269.858 ops/s
[info] # Warmup Iteration   5: 304011.229 ops/s
[info] Iteration   1: 298879.683 ops/s
[info]                  ·gc.alloc.rate:                   1576.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              8304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             2031.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10698.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.508 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 304518.389 ops/s
[info]                  ·gc.alloc.rate:            1606.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       8304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6995.809 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 304475.369 ops/s
[info]                  ·gc.alloc.rate:                                  1606.254 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8304.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.273 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7020.900 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.103 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 306084.158 ops/s
[info]                  ·gc.alloc.rate:                                  1614.827 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8304.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.159 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.815 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.135 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10511.654 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 306653.716 ops/s
[info]                  ·gc.alloc.rate:            1617.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       8304.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6994.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   304122.263 ±(99.9%) 11872.157 ops/s [Average]
[info]   (min, avg, max) = (298879.683, 304122.263, 306653.716), stdev = 3083.161
[info]   CI (99.9%): [292250.106, 315994.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1604.418 ±(99.9%) 62.809 MB/sec [Average]
[info]   (min, avg, max) = (1576.714, 1604.418, 1617.870), stdev = 16.311
[info]   CI (99.9%): [1541.609, 1667.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8304.001, 8304.001, 8304.001), stdev = 0.001
[info]   CI (99.9%): [8304.001, 8304.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.042 ±(99.9%) 0.265 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.159), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.218 ±(99.9%) 1.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.218, 0.815), stdev = 0.354
[info]   CI (99.9%): [≈ 0, 1.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.949 ±(99.9%) 1433.753 MB/sec [Average]
[info]   (min, avg, max) = (1353.352, 1629.949, 2044.135), stdev = 372.341
[info]   CI (99.9%): [196.196, 3063.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8444.364 ±(99.9%) 7600.162 B/op [Average]
[info]   (min, avg, max) = (6994.632, 8444.364, 10698.824), stdev = 1973.738
[info]   CI (99.9%): [844.202, 16044.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.522 ±(99.9%) 40.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.522, 24.103), stdev = 10.498
[info]   CI (99.9%): [≈ 0, 45.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 15.000), stdev = 4.775
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.94% complete, ETA 00:12:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45312.500 ops/s
[info] # Warmup Iteration   2: 54511.520 ops/s
[info] # Warmup Iteration   3: 53780.752 ops/s
[info] # Warmup Iteration   4: 55427.617 ops/s
[info] # Warmup Iteration   5: 55347.956 ops/s
[info] Iteration   1: 55609.837 ops/s
[info]                  ·gc.alloc.rate:            1589.512 MB/sec
[info]                  ·gc.alloc.rate.norm:       44992.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38384.378 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 55584.860 ops/s
[info]                  ·gc.alloc.rate:            1588.840 MB/sec
[info]                  ·gc.alloc.rate.norm:       44992.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38400.258 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 55436.355 ops/s
[info]                  ·gc.alloc.rate:                                  1584.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.139 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.955 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.844 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57945.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                94.558 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 55881.231 ops/s
[info]                  ·gc.alloc.rate:                                  1597.273 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.482 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38385.187 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 55861.699 ops/s
[info]                  ·gc.alloc.rate:                                  1596.804 MB/sec
[info]                  ·gc.alloc.rate.norm:                             44992.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.087 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38397.553 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   55674.797 ±(99.9%) 737.452 ops/s [Average]
[info]   (min, avg, max) = (55436.355, 55674.797, 55881.231), stdev = 191.514
[info]   CI (99.9%): [54937.345, 56412.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1591.411 ±(99.9%) 21.065 MB/sec [Average]
[info]   (min, avg, max) = (1584.626, 1591.411, 1597.273), stdev = 5.471
[info]   CI (99.9%): [1570.346, 1612.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (44992.007, 44992.007, 44992.008), stdev = 0.001
[info]   CI (99.9%): [44992.006, 44992.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.233 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.139), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.905 ±(99.9%) 6.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.905, 3.955), stdev = 1.717
[info]   CI (99.9%): [≈ 0, 7.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.692 ±(99.9%) 1173.550 MB/sec [Average]
[info]   (min, avg, max) = (1356.060, 1495.692, 2040.844), stdev = 304.767
[info]   CI (99.9%): [322.142, 2669.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   42302.542 ±(99.9%) 33672.296 B/op [Average]
[info]   (min, avg, max) = (38384.378, 42302.542, 57945.332), stdev = 8744.588
[info]   CI (99.9%): [8630.245, 75974.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.912 ±(99.9%) 162.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.912, 94.558), stdev = 42.288
[info]   CI (99.9%): [≈ 0, 181.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.18% complete, ETA 00:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42492.524 ops/s
[info] # Warmup Iteration   2: 78171.272 ops/s
[info] # Warmup Iteration   3: 78388.055 ops/s
[info] # Warmup Iteration   4: 79394.142 ops/s
[info] # Warmup Iteration   5: 79590.935 ops/s
[info] Iteration   1: 80023.102 ops/s
[info]                  ·gc.alloc.rate:            1232.528 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13323.860 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 79635.037 ops/s
[info]                  ·gc.alloc.rate:            1226.591 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26777.531 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 79511.722 ops/s
[info]                  ·gc.alloc.rate:            1224.639 MB/sec
[info]                  ·gc.alloc.rate.norm:       24240.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26817.598 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 79330.379 ops/s
[info]                  ·gc.alloc.rate:                   1221.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              24240.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26866.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 92.505 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 79866.097 ops/s
[info]                  ·gc.alloc.rate:                                  1229.871 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24240.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26857.954 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   79673.268 ±(99.9%) 1062.768 ops/s [Average]
[info]   (min, avg, max) = (79330.379, 79673.268, 80023.102), stdev = 275.997
[info]   CI (99.9%): [78610.499, 80736.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1227.069 ±(99.9%) 16.383 MB/sec [Average]
[info]   (min, avg, max) = (1221.719, 1227.069, 1232.528), stdev = 4.255
[info]   CI (99.9%): [1210.687, 1243.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24240.005, 24240.005, 24240.006), stdev = 0.001
[info]   CI (99.9%): [24240.004, 24240.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.267 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.611 ±(99.9%) 5.261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.611, 3.055), stdev = 1.366
[info]   CI (99.9%): [≈ 0, 5.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.823 ±(99.9%) 1169.672 MB/sec [Average]
[info]   (min, avg, max) = (677.476, 1220.823, 1362.698), stdev = 303.760
[info]   CI (99.9%): [51.150, 2390.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24128.635 ±(99.9%) 23258.492 B/op [Average]
[info]   (min, avg, max) = (13323.860, 24128.635, 26866.233), stdev = 6040.156
[info]   CI (99.9%): [870.144, 47387.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.501 ±(99.9%) 159.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.501, 92.505), stdev = 41.370
[info]   CI (99.9%): [≈ 0, 177.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 10.000), stdev = 2.702
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.41% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97743.191 ops/s
[info] # Warmup Iteration   2: 107949.321 ops/s
[info] # Warmup Iteration   3: 109741.164 ops/s
[info] # Warmup Iteration   4: 109475.309 ops/s
[info] # Warmup Iteration   5: 110856.851 ops/s
[info] Iteration   1: 110790.016 ops/s
[info]                  ·gc.alloc.rate:            1627.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       23120.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.177 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28900.521 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 110021.972 ops/s
[info]                  ·gc.alloc.rate:                   1616.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19402.015 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 47.647 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 111210.828 ops/s
[info]                  ·gc.alloc.rate:                                  1633.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23120.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.859 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19288.187 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 109482.830 ops/s
[info]                  ·gc.alloc.rate:                                  1608.084 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23120.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.268 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29388.588 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 110213.037 ops/s
[info]                  ·gc.alloc.rate:                                  1619.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23120.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1363.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19460.877 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   110343.737 ±(99.9%) 2592.250 ops/s [Average]
[info]   (min, avg, max) = (109482.830, 110343.737, 111210.828), stdev = 673.199
[info]   CI (99.9%): [107751.487, 112935.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1620.912 ±(99.9%) 37.951 MB/sec [Average]
[info]   (min, avg, max) = (1608.084, 1620.912, 1633.490), stdev = 9.856
[info]   CI (99.9%): [1582.961, 1658.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23120.004, 23120.004, 23120.004), stdev = 0.001
[info]   CI (99.9%): [23120.003, 23120.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.061), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.226 ±(99.9%) 1.434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.226, 0.859), stdev = 0.372
[info]   CI (99.9%): [≈ 0, 1.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1632.098 ±(99.9%) 1430.887 MB/sec [Average]
[info]   (min, avg, max) = (1356.226, 1632.098, 2044.087), stdev = 371.597
[info]   CI (99.9%): [201.211, 3062.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23288.038 ±(99.9%) 20598.589 B/op [Average]
[info]   (min, avg, max) = (19288.187, 23288.038, 29388.588), stdev = 5349.388
[info]   CI (99.9%): [2689.449, 43886.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.529 ±(99.9%) 82.052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.529, 47.647), stdev = 21.309
[info]   CI (99.9%): [≈ 0, 91.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 10.000), stdev = 3.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.65% complete, ETA 00:11:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22675.219 ops/s
[info] # Warmup Iteration   2: 40427.772 ops/s
[info] # Warmup Iteration   3: 40381.742 ops/s
[info] # Warmup Iteration   4: 41754.546 ops/s
[info] # Warmup Iteration   5: 41302.889 ops/s
[info] Iteration   1: 42040.302 ops/s
[info]                  ·gc.alloc.rate:                                  2210.592 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.654 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.279 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76383.854 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                149.626 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 42065.287 ops/s
[info]                  ·gc.alloc.rate:                                  2211.685 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.206 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101981.580 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 42160.160 ops/s
[info]                  ·gc.alloc.rate:            2216.658 MB/sec
[info]                  ·gc.alloc.rate.norm:       82760.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.149 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76319.303 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 42150.825 ops/s
[info]                  ·gc.alloc.rate:                                  2216.202 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82760.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.213 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76335.597 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 41603.660 ops/s
[info]                  ·gc.alloc.rate:            2187.857 MB/sec
[info]                  ·gc.alloc.rate.norm:       82760.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77340.954 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   42004.047 ±(99.9%) 884.998 ops/s [Average]
[info]   (min, avg, max) = (41603.660, 42004.047, 42160.160), stdev = 229.831
[info]   CI (99.9%): [41119.049, 42889.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2208.599 ±(99.9%) 45.825 MB/sec [Average]
[info]   (min, avg, max) = (2187.857, 2208.599, 2216.658), stdev = 11.901
[info]   CI (99.9%): [2162.774, 2254.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82760.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (82760.010, 82760.010, 82760.010), stdev = 0.001
[info]   CI (99.9%): [82760.008, 82760.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.044), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.615 ±(99.9%) 2.950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.615, 1.654), stdev = 0.766
[info]   CI (99.9%): [≈ 0, 3.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2179.711 ±(99.9%) 1174.579 MB/sec [Average]
[info]   (min, avg, max) = (2040.279, 2179.711, 2725.364), stdev = 305.034
[info]   CI (99.9%): [1005.132, 3354.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   81672.257 ±(99.9%) 43748.893 B/op [Average]
[info]   (min, avg, max) = (76319.303, 81672.257, 101981.580), stdev = 11361.449
[info]   CI (99.9%): [37923.365, 125421.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   29.925 ±(99.9%) 257.664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29.925, 149.626), stdev = 66.915
[info]   CI (99.9%): [≈ 0, 287.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.88% complete, ETA 00:11:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178397.118 ops/s
[info] # Warmup Iteration   2: 238586.484 ops/s
[info] # Warmup Iteration   3: 240538.888 ops/s
[info] # Warmup Iteration   4: 238430.894 ops/s
[info] # Warmup Iteration   5: 238534.900 ops/s
[info] Iteration   1: 242250.085 ops/s
[info]                  ·gc.alloc.rate:            1152.703 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.179 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4405.472 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 239353.321 ops/s
[info]                  ·gc.alloc.rate:            1138.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.176 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8918.273 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 240344.104 ops/s
[info]                  ·gc.alloc.rate:            1143.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8880.914 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 239247.949 ops/s
[info]                  ·gc.alloc.rate:            1138.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4460.944 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 239896.554 ops/s
[info]                  ·gc.alloc.rate:                   1141.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8897.792 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   240218.403 ±(99.9%) 4691.337 ops/s [Average]
[info]   (min, avg, max) = (239247.949, 240218.403, 242250.085), stdev = 1218.325
[info]   CI (99.9%): [235527.066, 244909.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1142.867 ±(99.9%) 22.705 MB/sec [Average]
[info]   (min, avg, max) = (1138.122, 1142.867, 1152.703), stdev = 5.896
[info]   CI (99.9%): [1120.162, 1165.572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7488.002, 7488.002, 7488.002), stdev = 0.001
[info]   CI (99.9%): [7488.001, 7488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1084.963 ±(99.9%) 1430.163 MB/sec [Average]
[info]   (min, avg, max) = (678.031, 1084.963, 1356.361), stdev = 371.409
[info]   CI (99.9%): [≈ 0, 2515.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7112.679 ±(99.9%) 9419.159 B/op [Average]
[info]   (min, avg, max) = (4405.472, 7112.679, 8918.273), stdev = 2446.126
[info]   CI (99.9%): [≈ 0, 16531.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.370 ±(99.9%) 37.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.370, 21.851), stdev = 9.772
[info]   CI (99.9%): [≈ 0, 41.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 8.000), stdev = 2.049
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.12% complete, ETA 00:11:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251999.698 ops/s
[info] # Warmup Iteration   2: 480550.255 ops/s
[info] # Warmup Iteration   3: 477336.736 ops/s
[info] # Warmup Iteration   4: 469878.319 ops/s
[info] # Warmup Iteration   5: 482261.825 ops/s
[info] Iteration   1: 476858.232 ops/s
[info]                  ·gc.alloc.rate:            419.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2233.801 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 476718.551 ops/s
[info]                  ·gc.alloc.rate:            419.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2234.504 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 481545.413 ops/s
[info]                  ·gc.alloc.rate:      423.423 MB/sec
[info]                  ·gc.alloc.rate.norm: 1384.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 479824.977 ops/s
[info]                  ·gc.alloc.rate:            421.886 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2220.022 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 481900.811 ops/s
[info]                  ·gc.alloc.rate:      423.717 MB/sec
[info]                  ·gc.alloc.rate.norm: 1384.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   479369.597 ±(99.9%) 9565.497 ops/s [Average]
[info]   (min, avg, max) = (476718.551, 479369.597, 481900.811), stdev = 2484.129
[info]   CI (99.9%): [469804.100, 488935.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   421.497 ±(99.9%) 8.410 MB/sec [Average]
[info]   (min, avg, max) = (419.163, 421.497, 423.717), stdev = 2.184
[info]   CI (99.9%): [413.088, 429.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1384.001, 1384.001, 1384.001), stdev = 0.001
[info]   CI (99.9%): [1384.001, 1384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.047 ±(99.9%) 1427.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.047, 676.752), stdev = 370.668
[info]   CI (99.9%): [≈ 0, 1833.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1337.665 ±(99.9%) 4702.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1337.665, 2234.504), stdev = 1221.129
[info]   CI (99.9%): [≈ 0, 6039.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90.35% complete, ETA 00:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 507665.703 ops/s
[info] # Warmup Iteration   2: 538834.080 ops/s
[info] # Warmup Iteration   3: 530228.514 ops/s
[info] # Warmup Iteration   4: 544380.248 ops/s
[info] # Warmup Iteration   5: 543077.549 ops/s
[info] Iteration   1: 545700.712 ops/s
[info]                  ·gc.alloc.rate:      293.974 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 543694.155 ops/s
[info]                  ·gc.alloc.rate:            292.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1961.083 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 544062.182 ops/s
[info]                  ·gc.alloc.rate:      293.069 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 545291.055 ops/s
[info]                  ·gc.alloc.rate:      293.760 MB/sec
[info]                  ·gc.alloc.rate.norm: 848.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 543919.509 ops/s
[info]                  ·gc.alloc.rate:            293.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1960.225 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   544533.523 ±(99.9%) 3465.526 ops/s [Average]
[info]   (min, avg, max) = (543694.155, 544533.523, 545700.712), stdev = 899.986
[info]   CI (99.9%): [541067.997, 547999.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   293.351 ±(99.9%) 1.850 MB/sec [Average]
[info]   (min, avg, max) = (292.915, 293.351, 293.974), stdev = 0.480
[info]   CI (99.9%): [291.502, 295.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.001, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   270.956 ±(99.9%) 1428.671 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.956, 677.395), stdev = 371.021
[info]   CI (99.9%): [≈ 0, 1699.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   784.262 ±(99.9%) 4135.186 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 784.262, 1961.083), stdev = 1073.895
[info]   CI (99.9%): [≈ 0, 4919.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.59% complete, ETA 00:10:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 724791.795 ops/s
[info] # Warmup Iteration   2: 802849.063 ops/s
[info] # Warmup Iteration   3: 803181.824 ops/s
[info] # Warmup Iteration   4: 807295.255 ops/s
[info] # Warmup Iteration   5: 799267.469 ops/s
[info] Iteration   1: 808352.085 ops/s
[info]                  ·gc.alloc.rate:      8.218 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 803804.337 ops/s
[info]                  ·gc.alloc.rate:      8.170 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 809524.198 ops/s
[info]                  ·gc.alloc.rate:      8.229 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 809240.025 ops/s
[info]                  ·gc.alloc.rate:      8.228 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 808207.957 ops/s
[info]                  ·gc.alloc.rate:      8.215 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   807825.721 ±(99.9%) 8923.150 ops/s [Average]
[info]   (min, avg, max) = (803804.337, 807825.721, 809524.198), stdev = 2317.314
[info]   CI (99.9%): [798902.570, 816748.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   8.212 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (8.170, 8.212, 8.229), stdev = 0.024
[info]   CI (99.9%): [8.119, 8.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.82% complete, ETA 00:10:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20435.593 ops/s
[info] # Warmup Iteration   2: 30165.373 ops/s
[info] # Warmup Iteration   3: 30088.160 ops/s
[info] # Warmup Iteration   4: 30236.303 ops/s
[info] # Warmup Iteration   5: 30554.180 ops/s
[info] Iteration   1: 30557.077 ops/s
[info]                  ·gc.alloc.rate:            1522.337 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69783.843 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 30462.091 ops/s
[info]                  ·gc.alloc.rate:            1517.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70001.430 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 30454.734 ops/s
[info]                  ·gc.alloc.rate:                                  1517.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.702 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105232.817 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                206.541 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 30739.440 ops/s
[info]                  ·gc.alloc.rate:                                  1531.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.128 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.539 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69780.013 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 30800.324 ops/s
[info]                  ·gc.alloc.rate:                                  1534.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69644.100 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   30602.733 ±(99.9%) 613.388 ops/s [Average]
[info]   (min, avg, max) = (30454.734, 30602.733, 30800.324), stdev = 159.295
[info]   CI (99.9%): [29989.345, 31216.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1524.584 ±(99.9%) 30.453 MB/sec [Average]
[info]   (min, avg, max) = (1517.316, 1524.584, 1534.432), stdev = 7.909
[info]   CI (99.9%): [1494.131, 1555.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78416.014 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (78416.013, 78416.014, 78416.014), stdev = 0.001
[info]   CI (99.9%): [78416.012, 78416.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.128), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.065 ±(99.9%) 11.417 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.065, 6.539), stdev = 2.965
[info]   CI (99.9%): [≈ 0, 13.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1494.220 ±(99.9%) 1166.774 MB/sec [Average]
[info]   (min, avg, max) = (1354.677, 1494.220, 2036.209), stdev = 303.007
[info]   CI (99.9%): [327.446, 2660.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   76888.441 ±(99.9%) 61015.397 B/op [Average]
[info]   (min, avg, max) = (69644.100, 76888.441, 105232.817), stdev = 15845.505
[info]   CI (99.9%): [15873.043, 137903.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   41.308 ±(99.9%) 355.677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.308, 206.541), stdev = 92.368
[info]   CI (99.9%): [≈ 0, 396.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.362
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91.06% complete, ETA 00:10:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4160506.069 ops/s
[info] # Warmup Iteration   2: 4896818.163 ops/s
[info] # Warmup Iteration   3: 5005363.218 ops/s
[info] # Warmup Iteration   4: 5007407.377 ops/s
[info] # Warmup Iteration   5: 5011786.403 ops/s
[info] Iteration   1: 5006783.376 ops/s
[info]                  ·gc.alloc.rate:                                  3689.704 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.805 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1071.060 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4990910.301 ops/s
[info]                  ·gc.alloc.rate:                                  3678.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4088.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1289.399 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 5028968.020 ops/s
[info]                  ·gc.alloc.rate:                                  3706.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1066.387 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 5016807.912 ops/s
[info]                  ·gc.alloc.rate:                                  3697.192 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1068.961 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 4870839.245 ops/s
[info]                  ·gc.alloc.rate:                                  3589.712 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4088.585 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1321.209 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4982861.771 ±(99.9%) 247043.604 ops/s [Average]
[info]   (min, avg, max) = (4870839.245, 4982861.771, 5028968.020), stdev = 64156.440
[info]   CI (99.9%): [4735818.167, 5229905.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3672.189 ±(99.9%) 181.850 MB/sec [Average]
[info]   (min, avg, max) = (3589.712, 3672.189, 3706.104), stdev = 47.226
[info]   CI (99.9%): [3490.338, 3854.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3679.596 ±(99.9%) 1437.577 MB/sec [Average]
[info]   (min, avg, max) = (3406.805, 3679.596, 4088.585), stdev = 373.334
[info]   CI (99.9%): [2242.019, 5117.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1163.403 ±(99.9%) 500.718 B/op [Average]
[info]   (min, avg, max) = (1066.387, 1163.403, 1321.209), stdev = 130.035
[info]   CI (99.9%): [662.685, 1664.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 9.400, 17.000), stdev = 4.336
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91.29% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 733145.857 ops/s
[info] # Warmup Iteration   2: 7466561.940 ops/s
[info] # Warmup Iteration   3: 7848827.787 ops/s
[info] # Warmup Iteration   4: 7811870.113 ops/s
[info] # Warmup Iteration   5: 7805028.589 ops/s
[info] Iteration   1: 7867982.336 ops/s
[info]                  ·gc.alloc.rate:            839.773 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134.983 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 7841924.204 ops/s
[info]                  ·gc.alloc.rate:            837.338 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.431 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7838077.259 ops/s
[info]                  ·gc.alloc.rate:            836.594 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.493 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 7819985.977 ops/s
[info]                  ·gc.alloc.rate:            834.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1349.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 271.615 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   5: 7845972.831 ops/s
[info]                  ·gc.alloc.rate:            837.410 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 135.359 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7842788.521 ±(99.9%) 66354.293 ops/s [Average]
[info]   (min, avg, max) = (7819985.977, 7842788.521, 7867982.336), stdev = 17231.999
[info]   CI (99.9%): [7776434.229, 7909142.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   837.149 ±(99.9%) 7.113 MB/sec [Average]
[info]   (min, avg, max) = (834.629, 837.149, 839.773), stdev = 1.847
[info]   CI (99.9%): [830.036, 844.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   809.711 ±(99.9%) 1161.700 MB/sec [Average]
[info]   (min, avg, max) = (674.706, 809.711, 1349.390), stdev = 301.690
[info]   CI (99.9%): [≈ 0, 1971.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   162.576 ±(99.9%) 234.715 B/op [Average]
[info]   (min, avg, max) = (134.983, 162.576, 271.615), stdev = 60.955
[info]   CI (99.9%): [≈ 0, 397.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 11.000), stdev = 2.387
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.53% complete, ETA 00:09:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2369952.283 ops/s
[info] # Warmup Iteration   2: 3723365.027 ops/s
[info] # Warmup Iteration   3: 3767380.297 ops/s
[info] # Warmup Iteration   4: 3758452.779 ops/s
[info] # Warmup Iteration   5: 3752808.727 ops/s
[info] Iteration   1: 3732997.052 ops/s
[info]                  ·gc.alloc.rate:                                  2105.877 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2039.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       859.957 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.966 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 3739896.887 ops/s
[info]                  ·gc.alloc.rate:                                  2109.950 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.158 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       860.311 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 3744608.675 ops/s
[info]                  ·gc.alloc.rate:                                  2112.470 MB/sec
[info]                  ·gc.alloc.rate.norm:                             888.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       859.216 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3747360.242 ops/s
[info]                  ·gc.alloc.rate:            2114.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       888.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 858.610 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3716585.537 ops/s
[info]                  ·gc.alloc.rate:            2096.719 MB/sec
[info]                  ·gc.alloc.rate.norm:       888.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1154.322 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3736289.679 ±(99.9%) 47312.398 ops/s [Average]
[info]   (min, avg, max) = (3716585.537, 3736289.679, 3747360.242), stdev = 12286.880
[info]   CI (99.9%): [3688977.281, 3783602.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2107.983 ±(99.9%) 27.442 MB/sec [Average]
[info]   (min, avg, max) = (2096.719, 2107.983, 2114.900), stdev = 7.127
[info]   CI (99.9%): [2080.542, 2135.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   888.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (888.000, 888.000, 888.000), stdev = 0.001
[info]   CI (99.9%): [888.000, 888.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.127), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.054), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2179.596 ±(99.9%) 1175.238 MB/sec [Average]
[info]   (min, avg, max) = (2039.373, 2179.596, 2725.551), stdev = 305.206
[info]   CI (99.9%): [1004.359, 3354.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   918.483 ±(99.9%) 507.667 B/op [Average]
[info]   (min, avg, max) = (858.610, 918.483, 1154.322), stdev = 131.839
[info]   CI (99.9%): [410.816, 1426.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.393 ±(99.9%) 3.385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.393, 1.966), stdev = 0.879
[info]   CI (99.9%): [≈ 0, 3.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91.76% complete, ETA 00:09:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7067908.849 ops/s
[info] # Warmup Iteration   2: 7465907.385 ops/s
[info] # Warmup Iteration   3: 7543705.658 ops/s
[info] # Warmup Iteration   4: 7587178.772 ops/s
[info] # Warmup Iteration   5: 7655520.019 ops/s
[info] Iteration   1: 7648966.508 ops/s
[info]                  ·gc.alloc.rate:            816.384 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.774 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 278.793 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 7666490.704 ops/s
[info]                  ·gc.alloc.rate:            818.202 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 139.077 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7660738.332 ops/s
[info]                  ·gc.alloc.rate:                   817.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        139.179 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7601041.790 ops/s
[info]                  ·gc.alloc.rate:            811.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 140.410 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7628725.398 ops/s
[info]                  ·gc.alloc.rate:                   814.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        139.763 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.137 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   7641192.546 ±(99.9%) 102783.741 ops/s [Average]
[info]   (min, avg, max) = (7601041.790, 7641192.546, 7666490.704), stdev = 26692.611
[info]   CI (99.9%): [7538408.805, 7743976.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   815.512 ±(99.9%) 10.953 MB/sec [Average]
[info]   (min, avg, max) = (811.208, 815.512, 818.202), stdev = 2.845
[info]   CI (99.9%): [804.558, 826.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   812.952 ±(99.9%) 1166.313 MB/sec [Average]
[info]   (min, avg, max) = (677.295, 812.952, 1354.774), stdev = 302.888
[info]   CI (99.9%): [≈ 0, 1979.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   167.444 ±(99.9%) 239.695 B/op [Average]
[info]   (min, avg, max) = (139.077, 167.444, 278.793), stdev = 62.248
[info]   CI (99.9%): [≈ 0, 407.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.055 ±(99.9%) 0.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.055, 0.137), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92.00% complete, ETA 00:09:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3264891.219 ops/s
[info] # Warmup Iteration   2: 4623325.271 ops/s
[info] # Warmup Iteration   3: 4617376.615 ops/s
[info] # Warmup Iteration   4: 4533238.986 ops/s
[info] # Warmup Iteration   5: 4692756.162 ops/s
[info] Iteration   1: 4751080.227 ops/s
[info]                  ·gc.alloc.rate:                                  2559.892 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.838 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       902.972 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 4755452.089 ops/s
[info]                  ·gc.alloc.rate:            2562.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 676.599 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 4734472.142 ops/s
[info]                  ·gc.alloc.rate:            2551.324 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2726.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 906.110 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 4669653.843 ops/s
[info]                  ·gc.alloc.rate:            2515.613 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2725.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 918.701 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 4736957.340 ops/s
[info]                  ·gc.alloc.rate:                                  2551.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2725.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       905.682 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4729523.128 ±(99.9%) 133405.656 ops/s [Average]
[info]   (min, avg, max) = (4669653.843, 4729523.128, 4755452.089), stdev = 34645.025
[info]   CI (99.9%): [4596117.472, 4862928.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2548.176 ±(99.9%) 72.444 MB/sec [Average]
[info]   (min, avg, max) = (2515.613, 2548.176, 2562.104), stdev = 18.813
[info]   CI (99.9%): [2475.733, 2620.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2589.424 ±(99.9%) 1173.550 MB/sec [Average]
[info]   (min, avg, max) = (2044.240, 2589.424, 2726.157), stdev = 304.767
[info]   CI (99.9%): [1415.874, 3762.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   862.013 ±(99.9%) 399.806 B/op [Average]
[info]   (min, avg, max) = (676.599, 862.013, 918.701), stdev = 103.828
[info]   CI (99.9%): [462.207, 1261.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92.24% complete, ETA 00:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2523299.715 ops/s
[info] # Warmup Iteration   2: 3100160.341 ops/s
[info] # Warmup Iteration   3: 3338512.658 ops/s
[info] # Warmup Iteration   4: 3371065.603 ops/s
[info] # Warmup Iteration   5: 3374701.584 ops/s
[info] Iteration   1: 3374638.074 ops/s
[info]                  ·gc.alloc.rate:            806.146 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 315.952 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 3376644.602 ops/s
[info]                  ·gc.alloc.rate:            806.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 315.765 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 3361124.095 ops/s
[info]                  ·gc.alloc.rate:            802.912 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 634.450 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 3373016.215 ops/s
[info]                  ·gc.alloc.rate:            805.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 316.105 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 3341290.980 ops/s
[info]                  ·gc.alloc.rate:            798.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       376.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 319.102 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3365342.793 ±(99.9%) 56766.043 ops/s [Average]
[info]   (min, avg, max) = (3341290.980, 3365342.793, 3376644.602), stdev = 14741.961
[info]   CI (99.9%): [3308576.750, 3422108.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   803.911 ±(99.9%) 13.503 MB/sec [Average]
[info]   (min, avg, max) = (798.198, 803.911, 806.660), stdev = 3.507
[info]   CI (99.9%): [790.408, 817.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (376.000, 376.000, 376.000), stdev = 0.001
[info]   CI (99.9%): [376.000, 376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   812.872 ±(99.9%) 1166.556 MB/sec [Average]
[info]   (min, avg, max) = (677.306, 812.872, 1354.807), stdev = 302.951
[info]   CI (99.9%): [≈ 0, 1979.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   380.275 ±(99.9%) 547.158 B/op [Average]
[info]   (min, avg, max) = (315.765, 380.275, 634.450), stdev = 142.095
[info]   CI (99.9%): [≈ 0, 927.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92.47% complete, ETA 00:08:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 622668.791 ops/s
[info] # Warmup Iteration   2: 7132665.525 ops/s
[info] # Warmup Iteration   3: 7278731.119 ops/s
[info] # Warmup Iteration   4: 7297466.895 ops/s
[info] # Warmup Iteration   5: 7323239.281 ops/s
[info] Iteration   1: 7323995.299 ops/s
[info]                  ·gc.alloc.rate:            707.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.850 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145.015 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 7333625.318 ops/s
[info]                  ·gc.alloc.rate:            708.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.817 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 7317855.315 ops/s
[info]                  ·gc.alloc.rate:            706.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145.137 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 7331950.713 ops/s
[info]                  ·gc.alloc.rate:            708.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 144.858 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 7321866.082 ops/s
[info]                  ·gc.alloc.rate:            707.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 145.056 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   7325858.545 ±(99.9%) 25895.432 ops/s [Average]
[info]   (min, avg, max) = (7317855.315, 7325858.545, 7333625.318), stdev = 6724.961
[info]   CI (99.9%): [7299963.114, 7351753.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   707.470 ±(99.9%) 2.443 MB/sec [Average]
[info]   (min, avg, max) = (706.711, 707.470, 708.172), stdev = 0.635
[info]   CI (99.9%): [705.027, 709.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.780 ±(99.9%) 0.208 MB/sec [Average]
[info]   (min, avg, max) = (674.708, 674.780, 674.850), stdev = 0.054
[info]   CI (99.9%): [674.572, 674.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   144.977 ±(99.9%) 0.519 B/op [Average]
[info]   (min, avg, max) = (144.817, 144.977, 145.137), stdev = 0.135
[info]   CI (99.9%): [144.458, 145.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.71% complete, ETA 00:08:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2219994.191 ops/s
[info] # Warmup Iteration   2: 3298255.831 ops/s
[info] # Warmup Iteration   3: 3267202.879 ops/s
[info] # Warmup Iteration   4: 3309169.713 ops/s
[info] # Warmup Iteration   5: 3298763.317 ops/s
[info] Iteration   1: 3314408.151 ops/s
[info]                  ·gc.alloc.rate:            1027.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 321.694 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 3283665.844 ops/s
[info]                  ·gc.alloc.rate:            1017.901 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 648.797 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 3322969.099 ops/s
[info]                  ·gc.alloc.rate:            1030.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 320.550 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 3299511.979 ops/s
[info]                  ·gc.alloc.rate:            1023.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 645.627 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 3322524.763 ops/s
[info]                  ·gc.alloc.rate:            1030.061 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.709 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 320.597 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   3308615.967 ±(99.9%) 64960.935 ops/s [Average]
[info]   (min, avg, max) = (3283665.844, 3308615.967, 3322969.099), stdev = 16870.149
[info]   CI (99.9%): [3243655.032, 3373576.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1025.758 ±(99.9%) 20.232 MB/sec [Average]
[info]   (min, avg, max) = (1017.901, 1025.758, 1030.250), stdev = 5.254
[info]   CI (99.9%): [1005.527, 1045.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   947.528 ±(99.9%) 1426.827 MB/sec [Average]
[info]   (min, avg, max) = (676.709, 947.528, 1353.573), stdev = 370.543
[info]   CI (99.9%): [≈ 0, 2374.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   451.453 ±(99.9%) 688.136 B/op [Average]
[info]   (min, avg, max) = (320.550, 451.453, 648.797), stdev = 178.707
[info]   CI (99.9%): [≈ 0, 1139.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92.94% complete, ETA 00:07:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9220796.064 ops/s
[info] # Warmup Iteration   2: 9877986.584 ops/s
[info] # Warmup Iteration   3: 9579921.372 ops/s
[info] # Warmup Iteration   4: 9946842.467 ops/s
[info] # Warmup Iteration   5: 9966263.329 ops/s
[info] Iteration   1: 9917129.893 ops/s
[info]                  ·gc.alloc.rate:            957.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 215.144 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 9967655.497 ops/s
[info]                  ·gc.alloc.rate:            962.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 106.974 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 9857875.939 ops/s
[info]                  ·gc.alloc.rate:                   951.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        216.438 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.106 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 9982177.945 ops/s
[info]                  ·gc.alloc.rate:                   963.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106.818 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.105 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 9790715.058 ops/s
[info]                  ·gc.alloc.rate:            945.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.961 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 217.920 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9903110.866 ±(99.9%) 306199.816 ops/s [Average]
[info]   (min, avg, max) = (9790715.058, 9903110.866, 9982177.945), stdev = 79519.120
[info]   CI (99.9%): [9596911.050, 10209310.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   956.381 ±(99.9%) 29.179 MB/sec [Average]
[info]   (min, avg, max) = (945.790, 956.381, 963.983), stdev = 7.578
[info]   CI (99.9%): [927.202, 985.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1084.352 ±(99.9%) 1430.345 MB/sec [Average]
[info]   (min, avg, max) = (677.440, 1084.352, 1355.961), stdev = 371.456
[info]   CI (99.9%): [≈ 0, 2514.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   172.659 ±(99.9%) 231.196 B/op [Average]
[info]   (min, avg, max) = (106.818, 172.659, 217.920), stdev = 60.041
[info]   CI (99.9%): [≈ 0, 403.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.042 ±(99.9%) 0.223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.106), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 9.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93.18% complete, ETA 00:07:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7385499.102 ops/s
[info] # Warmup Iteration   2: 7691311.132 ops/s
[info] # Warmup Iteration   3: 7850688.239 ops/s
[info] # Warmup Iteration   4: 7810534.694 ops/s
[info] # Warmup Iteration   5: 7855032.435 ops/s
[info] Iteration   1: 7852670.728 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7854131.909 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7813186.691 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7854027.725 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7851251.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7845053.740 ±(99.9%) 68744.697 ops/s [Average]
[info]   (min, avg, max) = (7813186.691, 7845053.740, 7854131.909), stdev = 17852.779
[info]   CI (99.9%): [7776309.043, 7913798.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93.41% complete, ETA 00:07:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2465404.684 ops/s
[info] # Warmup Iteration   2: 3161266.251 ops/s
[info] # Warmup Iteration   3: 3136635.461 ops/s
[info] # Warmup Iteration   4: 3187418.824 ops/s
[info] # Warmup Iteration   5: 3170559.640 ops/s
[info] Iteration   1: 3179836.240 ops/s
[info]                  ·gc.alloc.rate:            1018.100 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 334.985 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 3115527.781 ops/s
[info]                  ·gc.alloc.rate:            997.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 683.807 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 3142090.290 ops/s
[info]                  ·gc.alloc.rate:            1006.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 338.994 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 3106825.493 ops/s
[info]                  ·gc.alloc.rate:            995.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 685.709 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 3126048.728 ops/s
[info]                  ·gc.alloc.rate:            1000.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 340.732 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3134065.706 ±(99.9%) 110756.923 ops/s [Average]
[info]   (min, avg, max) = (3106825.493, 3134065.706, 3179836.240), stdev = 28763.221
[info]   CI (99.9%): [3023308.783, 3244822.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1003.531 ±(99.9%) 35.174 MB/sec [Average]
[info]   (min, avg, max) = (995.022, 1003.531, 1018.100), stdev = 9.135
[info]   CI (99.9%): [968.357, 1038.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   947.444 ±(99.9%) 1427.613 MB/sec [Average]
[info]   (min, avg, max) = (676.678, 947.444, 1353.760), stdev = 370.747
[info]   CI (99.9%): [≈ 0, 2375.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   476.845 ±(99.9%) 730.890 B/op [Average]
[info]   (min, avg, max) = (334.985, 476.845, 685.709), stdev = 189.810
[info]   CI (99.9%): [≈ 0, 1207.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93.65% complete, ETA 00:07:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591034.916 ops/s
[info] # Warmup Iteration   2: 790726.358 ops/s
[info] # Warmup Iteration   3: 818970.307 ops/s
[info] # Warmup Iteration   4: 825444.678 ops/s
[info] # Warmup Iteration   5: 824836.709 ops/s
[info] Iteration   1: 822450.476 ops/s
[info]                  ·gc.alloc.rate:            1442.286 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2595.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 817081.095 ops/s
[info]                  ·gc.alloc.rate:            1432.819 MB/sec
[info]                  ·gc.alloc.rate.norm:       2760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.261 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2612.528 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 825857.973 ops/s
[info]                  ·gc.alloc.rate:                   1448.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              2760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2584.766 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.348 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 827471.272 ops/s
[info]                  ·gc.alloc.rate:                                  1450.891 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2760.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.137 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.261 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2592.258 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 832239.432 ops/s
[info]                  ·gc.alloc.rate:                                  1459.520 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.915 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2577.316 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   825020.050 ±(99.9%) 21821.620 ops/s [Average]
[info]   (min, avg, max) = (817081.095, 825020.050, 832239.432), stdev = 5667.005
[info]   CI (99.9%): [803198.430, 846841.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1446.721 ±(99.9%) 38.314 MB/sec [Average]
[info]   (min, avg, max) = (1432.819, 1446.721, 1459.520), stdev = 9.950
[info]   CI (99.9%): [1408.407, 1485.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2760.000, 2760.001, 2760.001), stdev = 0.001
[info]   CI (99.9%): [2760.000, 2760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.054 ±(99.9%) 0.444 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.261), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1358.861 ±(99.9%) 13.895 MB/sec [Average]
[info]   (min, avg, max) = (1356.150, 1358.861, 1362.915), stdev = 3.609
[info]   CI (99.9%): [1344.966, 1372.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2592.453 ±(99.9%) 50.937 B/op [Average]
[info]   (min, avg, max) = (2577.316, 2592.453, 2612.528), stdev = 13.228
[info]   CI (99.9%): [2541.517, 2643.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.270 ±(99.9%) 10.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.270, 6.348), stdev = 2.839
[info]   CI (99.9%): [≈ 0, 12.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 7.000), stdev = 2.490
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 93.88% complete, ETA 00:06:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.928 ops/s
[info] # Warmup Iteration   2: 2137448.153 ops/s
[info] # Warmup Iteration   3: 2155633.896 ops/s
[info] # Warmup Iteration   4: 2137824.261 ops/s
[info] # Warmup Iteration   5: 2196558.551 ops/s
[info] Iteration   1: 2196920.064 ops/s
[info]                  ·gc.alloc.rate:            614.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.421 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2197455.743 ops/s
[info]                  ·gc.alloc.rate:            614.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.303 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2128879.707 ops/s
[info]                  ·gc.alloc.rate:            595.232 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.873 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 498.872 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 2194634.055 ops/s
[info]                  ·gc.alloc.rate:            613.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 483.910 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2199032.423 ops/s
[info]                  ·gc.alloc.rate:                   614.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        482.481 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.477 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2183384.398 ±(99.9%) 117482.411 ops/s [Average]
[info]   (min, avg, max) = (2128879.707, 2183384.398, 2199032.423), stdev = 30509.809
[info]   CI (99.9%): [2065901.987, 2300866.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   610.410 ±(99.9%) 32.718 MB/sec [Average]
[info]   (min, avg, max) = (595.232, 610.410, 614.706), stdev = 8.497
[info]   CI (99.9%): [577.691, 643.128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.668 ±(99.9%) 1.375 MB/sec [Average]
[info]   (min, avg, max) = (674.054, 674.668, 674.957), stdev = 0.357
[info]   CI (99.9%): [673.294, 676.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   486.397 ±(99.9%) 26.925 B/op [Average]
[info]   (min, avg, max) = (482.481, 486.397, 498.872), stdev = 6.992
[info]   CI (99.9%): [459.473, 513.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.095 ±(99.9%) 0.821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.477), stdev = 0.213
[info]   CI (99.9%): [≈ 0, 0.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.12% complete, ETA 00:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512361.547 ops/s
[info] # Warmup Iteration   2: 1032881.677 ops/s
[info] # Warmup Iteration   3: 1080101.337 ops/s
[info] # Warmup Iteration   4: 1081688.823 ops/s
[info] # Warmup Iteration   5: 1060996.097 ops/s
[info] Iteration   1: 1050035.814 ops/s
[info]                  ·gc.alloc.rate:            725.738 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2030.911 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1059502.127 ops/s
[info]                  ·gc.alloc.rate:                   732.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1005.388 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.990 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1059585.824 ops/s
[info]                  ·gc.alloc.rate:            732.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1006.319 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1032405.312 ops/s
[info]                  ·gc.alloc.rate:            713.602 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1032.756 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1057968.257 ops/s
[info]                  ·gc.alloc.rate:            731.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1007.771 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1051899.467 ±(99.9%) 44624.545 ops/s [Average]
[info]   (min, avg, max) = (1032405.312, 1051899.467, 1059585.824), stdev = 11588.853
[info]   CI (99.9%): [1007274.922, 1096524.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   727.117 ±(99.9%) 31.016 MB/sec [Average]
[info]   (min, avg, max) = (713.602, 727.117, 732.685), stdev = 8.055
[info]   CI (99.9%): [696.101, 758.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   812.755 ±(99.9%) 1166.568 MB/sec [Average]
[info]   (min, avg, max) = (676.662, 812.755, 1354.696), stdev = 302.954
[info]   CI (99.9%): [≈ 0, 1979.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1216.629 ±(99.9%) 1753.353 B/op [Average]
[info]   (min, avg, max) = (1005.388, 1216.629, 2030.911), stdev = 455.340
[info]   CI (99.9%): [≈ 0, 2969.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.198 ±(99.9%) 1.704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.198, 0.990), stdev = 0.443
[info]   CI (99.9%): [≈ 0, 1.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94.35% complete, ETA 00:06:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2351692.287 ops/s
[info] # Warmup Iteration   2: 2486693.578 ops/s
[info] # Warmup Iteration   3: 2538386.576 ops/s
[info] # Warmup Iteration   4: 2560028.064 ops/s
[info] # Warmup Iteration   5: 2560062.337 ops/s
[info] Iteration   1: 2556124.102 ops/s
[info]                  ·gc.alloc.rate:            714.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 417.520 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2546900.690 ops/s
[info]                  ·gc.alloc.rate:            711.928 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 419.059 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2547099.419 ops/s
[info]                  ·gc.alloc.rate:            712.016 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 419.016 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 2547358.481 ops/s
[info]                  ·gc.alloc.rate:            712.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.165 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 418.974 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2544823.215 ops/s
[info]                  ·gc.alloc.rate:            711.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 419.396 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2548461.182 ±(99.9%) 16945.090 ops/s [Average]
[info]   (min, avg, max) = (2544823.215, 2548461.182, 2556124.102), stdev = 4400.586
[info]   CI (99.9%): [2531516.092, 2565406.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   712.416 ±(99.9%) 4.782 MB/sec [Average]
[info]   (min, avg, max) = (711.370, 712.416, 714.568), stdev = 1.242
[info]   CI (99.9%): [707.634, 717.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   678.078 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (678.045, 678.078, 678.165), stdev = 0.049
[info]   CI (99.9%): [677.888, 678.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   418.793 ±(99.9%) 2.815 B/op [Average]
[info]   (min, avg, max) = (417.520, 418.793, 419.396), stdev = 0.731
[info]   CI (99.9%): [415.978, 421.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94.59% complete, ETA 00:06:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 659399.538 ops/s
[info] # Warmup Iteration   2: 1107714.066 ops/s
[info] # Warmup Iteration   3: 1136017.747 ops/s
[info] # Warmup Iteration   4: 1142522.644 ops/s
[info] # Warmup Iteration   5: 1140495.312 ops/s
[info] Iteration   1: 1140724.646 ops/s
[info]                  ·gc.alloc.rate:            811.640 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 934.696 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1140100.698 ops/s
[info]                  ·gc.alloc.rate:            811.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 935.207 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1137213.670 ops/s
[info]                  ·gc.alloc.rate:            809.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1875.170 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1143763.971 ops/s
[info]                  ·gc.alloc.rate:            813.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 932.182 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1142982.555 ops/s
[info]                  ·gc.alloc.rate:            813.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 932.824 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1140957.108 ±(99.9%) 9963.745 ops/s [Average]
[info]   (min, avg, max) = (1137213.670, 1140957.108, 1143763.971), stdev = 2587.553
[info]   CI (99.9%): [1130993.363, 1150920.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   811.807 ±(99.9%) 7.153 MB/sec [Average]
[info]   (min, avg, max) = (809.153, 811.807, 813.847), stdev = 1.858
[info]   CI (99.9%): [804.654, 818.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   812.821 ±(99.9%) 1166.504 MB/sec [Average]
[info]   (min, avg, max) = (677.302, 812.821, 1354.731), stdev = 302.937
[info]   CI (99.9%): [≈ 0, 1979.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1122.016 ±(99.9%) 1621.229 B/op [Average]
[info]   (min, avg, max) = (932.182, 1122.016, 1875.170), stdev = 421.028
[info]   CI (99.9%): [≈ 0, 2743.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 9.000), stdev = 2.236
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 94.82% complete, ETA 00:05:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 983196.666 ops/s
[info] # Warmup Iteration   2: 1688720.903 ops/s
[info] # Warmup Iteration   3: 1720823.532 ops/s
[info] # Warmup Iteration   4: 1749650.578 ops/s
[info] # Warmup Iteration   5: 1748826.154 ops/s
[info] Iteration   1: 1746623.001 ops/s
[info]                  ·gc.alloc.rate:            1465.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1356.453 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1222.100 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1739111.481 ops/s
[info]                  ·gc.alloc.rate:            1458.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1841.073 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 1748308.358 ops/s
[info]                  ·gc.alloc.rate:                   1466.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1220.927 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.998 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1749913.384 ops/s
[info]                  ·gc.alloc.rate:                                  1467.707 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.154 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1225.761 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1754975.151 ops/s
[info]                  ·gc.alloc.rate:                                  1471.736 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1320.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.780 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1222.277 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1747786.275 ±(99.9%) 22210.769 ops/s [Average]
[info]   (min, avg, max) = (1739111.481, 1747786.275, 1754975.151), stdev = 5768.066
[info]   CI (99.9%): [1725575.506, 1769997.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1465.818 ±(99.9%) 18.650 MB/sec [Average]
[info]   (min, avg, max) = (1458.424, 1465.818, 1471.736), stdev = 4.843
[info]   CI (99.9%): [1447.168, 1484.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1320.000, 1320.000, 1320.000), stdev = 0.001
[info]   CI (99.9%): [1320.000, 1320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.154), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.029 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.138), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1494.472 ±(99.9%) 1161.746 MB/sec [Average]
[info]   (min, avg, max) = (1356.066, 1494.472, 2034.140), stdev = 301.702
[info]   CI (99.9%): [332.727, 2656.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1346.428 ±(99.9%) 1064.784 B/op [Average]
[info]   (min, avg, max) = (1220.927, 1346.428, 1841.073), stdev = 276.521
[info]   CI (99.9%): [281.644, 2411.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.600 ±(99.9%) 5.163 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.600, 2.998), stdev = 1.341
[info]   CI (99.9%): [≈ 0, 5.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 11.000), stdev = 3.507
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95.06% complete, ETA 00:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.918 ops/s
[info] # Warmup Iteration   2: 2514213.531 ops/s
[info] # Warmup Iteration   3: 2572160.006 ops/s
[info] # Warmup Iteration   4: 2607550.372 ops/s
[info] # Warmup Iteration   5: 2603161.558 ops/s
[info] Iteration   1: 2607083.856 ops/s
[info]                  ·gc.alloc.rate:            675.796 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 407.355 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 2610046.993 ops/s
[info]                  ·gc.alloc.rate:            676.552 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 406.896 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 2619994.170 ops/s
[info]                  ·gc.alloc.rate:            679.375 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 405.346 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2617002.288 ops/s
[info]                  ·gc.alloc.rate:            678.650 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 405.805 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 2609619.847 ops/s
[info]                  ·gc.alloc.rate:            676.465 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.761 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 406.973 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2612749.431 ±(99.9%) 21070.557 ops/s [Average]
[info]   (min, avg, max) = (2607083.856, 2612749.431, 2619994.170), stdev = 5471.957
[info]   CI (99.9%): [2591678.874, 2633819.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   677.368 ±(99.9%) 5.973 MB/sec [Average]
[info]   (min, avg, max) = (675.796, 677.368, 679.375), stdev = 1.551
[info]   CI (99.9%): [671.394, 683.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   674.833 ±(99.9%) 0.513 MB/sec [Average]
[info]   (min, avg, max) = (674.720, 674.833, 674.998), stdev = 0.133
[info]   CI (99.9%): [674.319, 675.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   406.475 ±(99.9%) 3.292 B/op [Average]
[info]   (min, avg, max) = (405.346, 406.475, 407.355), stdev = 0.855
[info]   CI (99.9%): [403.182, 409.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.29% complete, ETA 00:05:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1148090.014 ops/s
[info] # Warmup Iteration   2: 2358997.308 ops/s
[info] # Warmup Iteration   3: 2418247.302 ops/s
[info] # Warmup Iteration   4: 2438567.764 ops/s
[info] # Warmup Iteration   5: 2426512.594 ops/s
[info] Iteration   1: 2425643.928 ops/s
[info]                  ·gc.alloc.rate:            1146.425 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 879.129 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2449880.710 ops/s
[info]                  ·gc.alloc.rate:            1158.095 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 435.215 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 2367175.069 ops/s
[info]                  ·gc.alloc.rate:            1118.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 900.842 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2422561.864 ops/s
[info]                  ·gc.alloc.rate:            1145.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 880.237 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 2433031.673 ops/s
[info]                  ·gc.alloc.rate:                                  1150.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             744.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       879.019 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.585 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2419658.649 ±(99.9%) 120097.336 ops/s [Average]
[info]   (min, avg, max) = (2367175.069, 2419658.649, 2449880.710), stdev = 31188.897
[info]   CI (99.9%): [2299561.313, 2539755.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1143.684 ±(99.9%) 56.992 MB/sec [Average]
[info]   (min, avg, max) = (1118.807, 1143.684, 1158.095), stdev = 14.801
[info]   CI (99.9%): [1086.693, 1200.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.024), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.016), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.045 ±(99.9%) 1168.006 MB/sec [Average]
[info]   (min, avg, max) = (677.446, 1220.045, 1358.732), stdev = 303.327
[info]   CI (99.9%): [52.039, 2388.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   794.888 ±(99.9%) 775.047 B/op [Average]
[info]   (min, avg, max) = (435.215, 794.888, 900.842), stdev = 201.277
[info]   CI (99.9%): [19.841, 1569.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.517 ±(99.9%) 4.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.517, 2.585), stdev = 1.156
[info]   CI (99.9%): [≈ 0, 4.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 9.000), stdev = 2.191
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95.53% complete, ETA 00:05:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2133999.755 ops/s
[info] # Warmup Iteration   2: 2746827.422 ops/s
[info] # Warmup Iteration   3: 2795788.868 ops/s
[info] # Warmup Iteration   4: 2906178.282 ops/s
[info] # Warmup Iteration   5: 2919767.024 ops/s
[info] Iteration   1: 2917474.868 ops/s
[info]                  ·gc.alloc.rate:            756.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 365.454 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 2923433.793 ops/s
[info]                  ·gc.alloc.rate:            757.798 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 364.710 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 2928511.277 ops/s
[info]                  ·gc.alloc.rate:                   759.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        364.069 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.358 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2924555.083 ops/s
[info]                  ·gc.alloc.rate:            758.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 364.943 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2918980.624 ops/s
[info]                  ·gc.alloc.rate:                   756.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              408.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             677.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        365.276 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.359 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2922591.129 ±(99.9%) 17093.913 ops/s [Average]
[info]   (min, avg, max) = (2917474.868, 2922591.129, 2928511.277), stdev = 4439.235
[info]   CI (99.9%): [2905497.216, 2939685.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   757.585 ±(99.9%) 4.518 MB/sec [Average]
[info]   (min, avg, max) = (756.189, 757.585, 759.194), stdev = 1.173
[info]   CI (99.9%): [753.067, 762.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (408.000, 408.000, 408.000), stdev = 0.001
[info]   CI (99.9%): [408.000, 408.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   677.536 ±(99.9%) 1.069 MB/sec [Average]
[info]   (min, avg, max) = (677.333, 677.536, 678.022), stdev = 0.278
[info]   CI (99.9%): [676.468, 678.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   364.890 ±(99.9%) 2.087 B/op [Average]
[info]   (min, avg, max) = (364.069, 364.890, 365.454), stdev = 0.542
[info]   CI (99.9%): [362.803, 366.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.143 ±(99.9%) 0.756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.143, 0.359), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 0.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95.76% complete, ETA 00:04:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2120852.231 ops/s
[info] # Warmup Iteration   2: 2981720.559 ops/s
[info] # Warmup Iteration   3: 3000009.016 ops/s
[info] # Warmup Iteration   4: 2997314.845 ops/s
[info] # Warmup Iteration   5: 3000239.302 ops/s
[info] Iteration   1: 2983771.271 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2995816.670 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2997965.593 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2998966.257 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3000503.577 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2995404.674 ±(99.9%) 25884.505 ops/s [Average]
[info]   (min, avg, max) = (2983771.271, 2995404.674, 3000503.577), stdev = 6722.124
[info]   CI (99.9%): [2969520.169, 3021289.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96.00% complete, ETA 00:04:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1693086.254 ops/s
[info] # Warmup Iteration   2: 2375757.929 ops/s
[info] # Warmup Iteration   3: 2381579.756 ops/s
[info] # Warmup Iteration   4: 2382790.039 ops/s
[info] # Warmup Iteration   5: 2375211.783 ops/s
[info] Iteration   1: 2394280.171 ops/s
[info]                  ·gc.alloc.rate:            1155.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 445.323 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 2382795.847 ops/s
[info]                  ·gc.alloc.rate:            1150.349 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 894.939 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 2369551.391 ops/s
[info]                  ·gc.alloc.rate:            1144.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 899.925 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 2394701.280 ops/s
[info]                  ·gc.alloc.rate:            1156.712 MB/sec
[info]                  ·gc.alloc.rate.norm:       760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 445.227 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2384367.598 ops/s
[info]                  ·gc.alloc.rate:                   1151.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1354.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        894.316 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2385139.257 ±(99.9%) 39647.480 ops/s [Average]
[info]   (min, avg, max) = (2369551.391, 2385139.257, 2394701.280), stdev = 10296.325
[info]   CI (99.9%): [2345491.778, 2424786.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1151.654 ±(99.9%) 19.608 MB/sec [Average]
[info]   (min, avg, max) = (1144.008, 1151.654, 1156.712), stdev = 5.092
[info]   CI (99.9%): [1132.046, 1171.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1083.789 ±(99.9%) 1428.303 MB/sec [Average]
[info]   (min, avg, max) = (677.289, 1083.789, 1354.796), stdev = 370.926
[info]   CI (99.9%): [≈ 0, 2512.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   715.946 ±(99.9%) 951.484 B/op [Average]
[info]   (min, avg, max) = (445.227, 715.946, 899.925), stdev = 247.097
[info]   CI (99.9%): [≈ 0, 1667.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.528 ±(99.9%) 4.543 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.528, 2.638), stdev = 1.180
[info]   CI (99.9%): [≈ 0, 5.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5333.686 ops/s
[info] # Warmup Iteration   2: 8803.228 ops/s
[info] # Warmup Iteration   3: 9896.362 ops/s
[info] # Warmup Iteration   4: 9890.303 ops/s
[info] # Warmup Iteration   5: 10937.296 ops/s
[info] Iteration   1: 10799.645 ops/s
[info]                  ·gc.alloc.rate:            1571.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       229040.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.138 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 296459.091 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 10882.587 ops/s
[info]                  ·gc.alloc.rate:                   1584.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              229058.870 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1355.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        196036.028 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 96.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 10959.571 ops/s
[info]                  ·gc.alloc.rate:                   1595.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              229080.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1356.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        194754.674 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 478.278 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 10968.816 ops/s
[info]                  ·gc.alloc.rate:                                  1596.590 MB/sec
[info]                  ·gc.alloc.rate.norm:                             229080.037 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       293326.018 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10984.051 ops/s
[info]                  ·gc.alloc.rate:                                  1598.706 MB/sec
[info]                  ·gc.alloc.rate.norm:                             229080.037 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.916 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       195283.679 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   10918.934 ±(99.9%) 297.840 ops/s [Average]
[info]   (min, avg, max) = (10799.645, 10918.934, 10984.051), stdev = 77.348
[info]   CI (99.9%): [10621.094, 11216.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1589.185 ±(99.9%) 43.805 MB/sec [Average]
[info]   (min, avg, max) = (1571.546, 1589.185, 1598.706), stdev = 11.376
[info]   CI (99.9%): [1545.381, 1632.990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   229067.804 ±(99.9%) 69.411 B/op [Average]
[info]   (min, avg, max) = (229040.038, 229067.804, 229080.037), stdev = 18.026
[info]   CI (99.9%): [228998.393, 229137.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.112), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.601 ±(99.9%) 27.070 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.601, 16.089), stdev = 7.030
[info]   CI (99.9%): [≈ 0, 30.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1630.612 ±(99.9%) 1436.520 MB/sec [Average]
[info]   (min, avg, max) = (1355.665, 1630.612, 2044.357), stdev = 373.060
[info]   CI (99.9%): [194.092, 3067.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   235171.898 ±(99.9%) 209977.172 B/op [Average]
[info]   (min, avg, max) = (194754.674, 235171.898, 296459.091), stdev = 54530.405
[info]   CI (99.9%): [25194.726, 445149.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   114.922 ±(99.9%) 798.473 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 114.922, 478.278), stdev = 207.361
[info]   CI (99.9%): [≈ 0, 913.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 13.000), stdev = 3.962
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.47% complete, ETA 00:03:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4358.629 ops/s
[info] # Warmup Iteration   2: 13608.752 ops/s
[info] # Warmup Iteration   3: 14221.688 ops/s
[info] # Warmup Iteration   4: 14219.552 ops/s
[info] # Warmup Iteration   5: 14296.401 ops/s
[info] Iteration   1: 14381.843 ops/s
[info]                  ·gc.alloc.rate:      198.218 MB/sec
[info]                  ·gc.alloc.rate.norm: 21695.225 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 14396.157 ops/s
[info]                  ·gc.alloc.rate:      198.435 MB/sec
[info]                  ·gc.alloc.rate.norm: 21696.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14186.914 ops/s
[info]                  ·gc.alloc.rate:            195.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       21696.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75077.746 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14651.423 ops/s
[info]                  ·gc.alloc.rate:      201.851 MB/sec
[info]                  ·gc.alloc.rate.norm: 21686.450 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 14443.138 ops/s
[info]                  ·gc.alloc.rate:      199.012 MB/sec
[info]                  ·gc.alloc.rate.norm: 21680.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14411.895 ±(99.9%) 638.896 ops/s [Average]
[info]   (min, avg, max) = (14186.914, 14411.895, 14651.423), stdev = 165.919
[info]   CI (99.9%): [13772.999, 15050.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   198.608 ±(99.9%) 8.686 MB/sec [Average]
[info]   (min, avg, max) = (195.527, 198.608, 201.851), stdev = 2.256
[info]   CI (99.9%): [189.923, 207.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21690.754 ±(99.9%) 27.854 B/op [Average]
[info]   (min, avg, max) = (21680.028, 21690.754, 21696.038), stdev = 7.234
[info]   CI (99.9%): [21662.900, 21718.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   135.322 ±(99.9%) 1165.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 135.322, 676.609), stdev = 302.589
[info]   CI (99.9%): [≈ 0, 1300.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   15015.549 ±(99.9%) 129288.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15015.549, 75077.746), stdev = 33575.789
[info]   CI (99.9%): [≈ 0, 144303.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.71% complete, ETA 00:03:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18240.001 ops/s
[info] # Warmup Iteration   2: 23294.339 ops/s
[info] # Warmup Iteration   3: 35889.418 ops/s
[info] # Warmup Iteration   4: 36180.692 ops/s
[info] # Warmup Iteration   5: 36794.067 ops/s
[info] Iteration   1: 37192.682 ops/s
[info]                  ·gc.alloc.rate:      344.417 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 36967.417 ops/s
[info]                  ·gc.alloc.rate:            342.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28871.078 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 37177.357 ops/s
[info]                  ·gc.alloc.rate:      344.251 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 37081.075 ops/s
[info]                  ·gc.alloc.rate:            343.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28782.333 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 37267.474 ops/s
[info]                  ·gc.alloc.rate:      345.117 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576.011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37137.201 ±(99.9%) 445.903 ops/s [Average]
[info]   (min, avg, max) = (36967.417, 37137.201, 37267.474), stdev = 115.800
[info]   CI (99.9%): [36691.298, 37583.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   343.901 ±(99.9%) 4.116 MB/sec [Average]
[info]   (min, avg, max) = (342.343, 343.901, 345.117), stdev = 1.069
[info]   CI (99.9%): [339.785, 348.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.011, 14576.012), stdev = 0.001
[info]   CI (99.9%): [14576.010, 14576.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   271.227 ±(99.9%) 1430.099 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.227, 678.088), stdev = 371.392
[info]   CI (99.9%): [≈ 0, 1701.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11530.682 ±(99.9%) 60798.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11530.682, 28871.078), stdev = 15789.068
[info]   CI (99.9%): [≈ 0, 72328.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 4.000), stdev = 1.949
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.94% complete, ETA 00:03:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 705.562 ops/s
[info] # Warmup Iteration   2: 2636.613 ops/s
[info] # Warmup Iteration   3: 2479.014 ops/s
[info] # Warmup Iteration   4: 2409.288 ops/s
[info] # Warmup Iteration   5: 2738.729 ops/s
[info] Iteration   1: 2937.681 ops/s
[info]                  ·gc.alloc.rate:            959.240 MB/sec
[info]                  ·gc.alloc.rate.norm:       513688.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 362488.335 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 2914.451 ops/s
[info]                  ·gc.alloc.rate:            951.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       513688.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 730945.603 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 2947.809 ops/s
[info]                  ·gc.alloc.rate:            962.479 MB/sec
[info]                  ·gc.alloc.rate.norm:       513688.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 361259.144 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2918.541 ops/s
[info]                  ·gc.alloc.rate:            953.205 MB/sec
[info]                  ·gc.alloc.rate.norm:       513688.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1353.101 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 729194.535 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   5: 2949.082 ops/s
[info]                  ·gc.alloc.rate:            962.946 MB/sec
[info]                  ·gc.alloc.rate.norm:       513688.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 361136.683 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2933.513 ±(99.9%) 62.437 ops/s [Average]
[info]   (min, avg, max) = (2914.451, 2933.513, 2949.082), stdev = 16.215
[info]   CI (99.9%): [2871.076, 2995.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   957.872 ±(99.9%) 20.318 MB/sec [Average]
[info]   (min, avg, max) = (951.489, 957.872, 962.946), stdev = 5.277
[info]   CI (99.9%): [937.554, 978.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   513688.141 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (513688.138, 513688.141, 513688.149), stdev = 0.005
[info]   CI (99.9%): [513688.124, 513688.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   947.552 ±(99.9%) 1426.981 MB/sec [Average]
[info]   (min, avg, max) = (676.878, 947.552, 1353.909), stdev = 370.582
[info]   CI (99.9%): [≈ 0, 2374.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   509004.860 ±(99.9%) 777081.680 B/op [Average]
[info]   (min, avg, max) = (361136.683, 509004.860, 730945.603), stdev = 201805.645
[info]   CI (99.9%): [≈ 0, 1286086.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.800, 15.000), stdev = 4.382
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.18% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_ce803297/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 21194.260 ops/s
[info] # Warmup Iteration   2: 56018.042 ops/s
[info] # Warmup Iteration   3: 55182.460 ops/s
[info] # Warmup Iteration   4: 55146.478 ops/s
[info] # Warmup Iteration   5: 55654.128 ops/s
[info] Iteration   1: 55453.455 ops/s
[info]                  ·gc.alloc.rate:            708.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.963 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19189.453 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 55784.452 ops/s
[info]                  ·gc.alloc.rate:            712.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19075.611 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 55938.062 ops/s
[info]                  ·gc.alloc.rate:            714.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19023.104 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 56144.272 ops/s
[info]                  ·gc.alloc.rate:            716.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.982 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18952.643 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 54951.800 ops/s
[info]                  ·gc.alloc.rate:            701.950 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.991 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19364.725 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   55654.408 ±(99.9%) 1797.242 ops/s [Average]
[info]   (min, avg, max) = (54951.800, 55654.408, 56144.272), stdev = 466.738
[info]   CI (99.9%): [53857.167, 57451.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   710.803 ±(99.9%) 22.473 MB/sec [Average]
[info]   (min, avg, max) = (701.950, 710.803, 716.907), stdev = 5.836
[info]   CI (99.9%): [688.331, 733.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.001 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (20099.963, 20100.001, 20100.064), stdev = 0.038
[info]   CI (99.9%): [20099.853, 20100.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   676.149 ±(99.9%) 0.586 MB/sec [Average]
[info]   (min, avg, max) = (675.985, 676.149, 676.345), stdev = 0.152
[info]   CI (99.9%): [675.563, 676.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19121.107 ±(99.9%) 621.122 B/op [Average]
[info]   (min, avg, max) = (18952.643, 19121.107, 19364.725), stdev = 161.303
[info]   CI (99.9%): [18499.985, 19742.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.41% complete, ETA 00:02:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66070.010 ops/s
[info] # Warmup Iteration   2: 81128.998 ops/s
[info] # Warmup Iteration   3: 81571.302 ops/s
[info] # Warmup Iteration   4: 82346.490 ops/s
[info] # Warmup Iteration   5: 82901.014 ops/s
[info] Iteration   1: 82839.014 ops/s
[info]                  ·gc.alloc.rate:            535.107 MB/sec
[info]                  ·gc.alloc.rate.norm:       10168.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12870.855 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 82455.339 ops/s
[info]                  ·gc.alloc.rate:            532.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       10168.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.503 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12930.784 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 81757.984 ops/s
[info]                  ·gc.alloc.rate:            528.244 MB/sec
[info]                  ·gc.alloc.rate.norm:       10168.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.534 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13041.639 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 81762.533 ops/s
[info]                  ·gc.alloc.rate:            528.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       10168.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13030.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 82139.934 ops/s
[info]                  ·gc.alloc.rate:      530.711 MB/sec
[info]                  ·gc.alloc.rate.norm: 10168.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   82190.961 ±(99.9%) 1789.091 ops/s [Average]
[info]   (min, avg, max) = (81757.984, 82190.961, 82839.014), stdev = 464.621
[info]   CI (99.9%): [80401.870, 83980.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   531.045 ±(99.9%) 11.271 MB/sec [Average]
[info]   (min, avg, max) = (528.244, 531.045, 535.107), stdev = 2.927
[info]   CI (99.9%): [519.774, 542.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10168.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10168.005, 10168.005, 10168.005), stdev = 0.001
[info]   CI (99.9%): [10168.004, 10168.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   541.909 ±(99.9%) 1166.499 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.909, 677.534), stdev = 302.936
[info]   CI (99.9%): [≈ 0, 1708.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10374.689 ±(99.9%) 22333.969 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10374.689, 13041.639), stdev = 5800.061
[info]   CI (99.9%): [≈ 0, 32708.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.65% complete, ETA 00:02:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69499.535 ops/s
[info] # Warmup Iteration   2: 88733.688 ops/s
[info] # Warmup Iteration   3: 88388.284 ops/s
[info] # Warmup Iteration   4: 88823.354 ops/s
[info] # Warmup Iteration   5: 88787.616 ops/s
[info] Iteration   1: 88852.949 ops/s
[info]                  ·gc.alloc.rate:      12.645 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 91129.915 ops/s
[info]                  ·gc.alloc.rate:      12.968 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 91224.105 ops/s
[info]                  ·gc.alloc.rate:      12.982 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 90805.198 ops/s
[info]                  ·gc.alloc.rate:      12.924 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 90956.663 ops/s
[info]                  ·gc.alloc.rate:      12.950 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   90593.766 ±(99.9%) 3798.121 ops/s [Average]
[info]   (min, avg, max) = (88852.949, 90593.766, 91224.105), stdev = 986.360
[info]   CI (99.9%): [86795.645, 94391.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12.894 ±(99.9%) 0.542 MB/sec [Average]
[info]   (min, avg, max) = (12.645, 12.894, 12.982), stdev = 0.141
[info]   CI (99.9%): [12.351, 13.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.004, 224.005, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.004, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.88% complete, ETA 00:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 276560.467 ops/s
[info] # Warmup Iteration   2: 330739.763 ops/s
[info] # Warmup Iteration   3: 335577.526 ops/s
[info] # Warmup Iteration   4: 334989.351 ops/s
[info] # Warmup Iteration   5: 336968.247 ops/s
[info] Iteration   1: 338597.222 ops/s
[info]                  ·gc.alloc.rate:            1814.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2034.573 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9456.310 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 339759.700 ops/s
[info]                  ·gc.alloc.rate:                                  1820.142 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.317 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2040.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9454.943 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.429 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 341667.943 ops/s
[info]                  ·gc.alloc.rate:                                  1830.377 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.821 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6278.108 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   4: 340916.886 ops/s
[info]                  ·gc.alloc.rate:                                  1826.257 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2044.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9437.904 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 341340.801 ops/s
[info]                  ·gc.alloc.rate:            1828.415 MB/sec
[info]                  ·gc.alloc.rate.norm:       8432.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2044.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9426.348 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   340456.511 ±(99.9%) 4872.237 ops/s [Average]
[info]   (min, avg, max) = (338597.222, 340456.511, 341667.943), stdev = 1265.304
[info]   CI (99.9%): [335584.274, 345328.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1823.876 ±(99.9%) 25.568 MB/sec [Average]
[info]   (min, avg, max) = (1814.187, 1823.876, 1830.377), stdev = 6.640
[info]   CI (99.9%): [1798.308, 1849.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.068), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.081 ±(99.9%) 0.524 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.317), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1905.300 ±(99.9%) 1167.824 MB/sec [Average]
[info]   (min, avg, max) = (1362.821, 1905.300, 2044.122), stdev = 303.280
[info]   CI (99.9%): [737.477, 3073.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8810.723 ±(99.9%) 5451.854 B/op [Average]
[info]   (min, avg, max) = (6278.108, 8810.723, 9456.310), stdev = 1415.829
[info]   CI (99.9%): [3358.868, 14262.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.086 ±(99.9%) 26.570 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.086, 15.429), stdev = 6.900
[info]   CI (99.9%): [≈ 0, 29.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.400, 10.000), stdev = 3.130
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.12% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 189427.832 ops/s
[info] # Warmup Iteration   2: 394168.038 ops/s
[info] # Warmup Iteration   3: 403380.662 ops/s
[info] # Warmup Iteration   4: 401421.288 ops/s
[info] # Warmup Iteration   5: 401060.796 ops/s
[info] Iteration   1: 403218.000 ops/s
[info]                  ·gc.alloc.rate:      491.820 MB/sec
[info]                  ·gc.alloc.rate.norm: 1920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 400489.158 ops/s
[info]                  ·gc.alloc.rate:            488.517 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2662.317 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 402417.904 ops/s
[info]                  ·gc.alloc.rate:                   490.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2646.880 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.605 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 403535.262 ops/s
[info]                  ·gc.alloc.rate:            492.268 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2642.146 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 405361.044 ops/s
[info]                  ·gc.alloc.rate:      494.450 MB/sec
[info]                  ·gc.alloc.rate.norm: 1920.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   403004.274 ±(99.9%) 6821.084 ops/s [Average]
[info]   (min, avg, max) = (400489.158, 403004.274, 405361.044), stdev = 1771.414
[info]   CI (99.9%): [396183.190, 409825.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   491.582 ±(99.9%) 8.319 MB/sec [Average]
[info]   (min, avg, max) = (488.517, 491.582, 494.450), stdev = 2.160
[info]   CI (99.9%): [483.263, 499.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.299 ±(99.9%) 1428.197 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.299, 677.418), stdev = 370.898
[info]   CI (99.9%): [≈ 0, 1834.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1590.269 ±(99.9%) 5590.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1590.269, 2662.317), stdev = 1451.729
[info]   CI (99.9%): [≈ 0, 7180.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.521 ±(99.9%) 4.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.521, 2.605), stdev = 1.165
[info]   CI (99.9%): [≈ 0, 5.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 10.000), stdev = 4.183
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.35% complete, ETA 00:01:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1002497.847 ops/s
[info] # Warmup Iteration   2: 1048413.323 ops/s
[info] # Warmup Iteration   3: 1072511.234 ops/s
[info] # Warmup Iteration   4: 1073254.295 ops/s
[info] # Warmup Iteration   5: 1068064.817 ops/s
[info] Iteration   1: 1074067.994 ops/s
[info]                  ·gc.alloc.rate:      562.240 MB/sec
[info]                  ·gc.alloc.rate.norm: 824.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1067923.985 ops/s
[info]                  ·gc.alloc.rate:            559.056 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 999.393 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1068573.782 ops/s
[info]                  ·gc.alloc.rate:            559.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 998.785 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1070530.269 ops/s
[info]                  ·gc.alloc.rate:            560.433 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 996.937 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1069925.248 ops/s
[info]                  ·gc.alloc.rate:            560.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 997.527 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1070204.256 ±(99.9%) 9227.633 ops/s [Average]
[info]   (min, avg, max) = (1067923.985, 1070204.256, 1074067.994), stdev = 2396.387
[info]   CI (99.9%): [1060976.622, 1079431.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   560.253 ±(99.9%) 4.759 MB/sec [Average]
[info]   (min, avg, max) = (559.056, 560.253, 562.240), stdev = 1.236
[info]   CI (99.9%): [555.494, 565.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   542.452 ±(99.9%) 1167.669 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.452, 678.099), stdev = 303.240
[info]   CI (99.9%): [≈ 0, 1710.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   798.528 ±(99.9%) 1718.896 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 798.528, 999.393), stdev = 446.392
[info]   CI (99.9%): [≈ 0, 2517.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.59% complete, ETA 00:01:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58673.681 ops/s
[info] # Warmup Iteration   2: 94044.968 ops/s
[info] # Warmup Iteration   3: 95063.222 ops/s
[info] # Warmup Iteration   4: 97253.851 ops/s
[info] # Warmup Iteration   5: 98498.185 ops/s
[info] Iteration   1: 98373.681 ops/s
[info]                  ·gc.alloc.rate:            3418.844 MB/sec
[info]                  ·gc.alloc.rate.norm:       54704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.829 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54511.757 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 98218.299 ops/s
[info]                  ·gc.alloc.rate:            3413.246 MB/sec
[info]                  ·gc.alloc.rate.norm:       54704.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3406.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54594.433 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 98469.019 ops/s
[info]                  ·gc.alloc.rate:                                  3422.194 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3406.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54458.621 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 97185.384 ops/s
[info]                  ·gc.alloc.rate:                                  3377.648 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55179.694 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   5: 98423.094 ops/s
[info]                  ·gc.alloc.rate:                                  3420.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3407.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54485.729 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   98133.895 ±(99.9%) 2073.848 ops/s [Average]
[info]   (min, avg, max) = (97185.384, 98133.895, 98469.019), stdev = 538.572
[info]   CI (99.9%): [96060.047, 100207.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3410.530 ±(99.9%) 71.976 MB/sec [Average]
[info]   (min, avg, max) = (3377.648, 3410.530, 3422.194), stdev = 18.692
[info]   CI (99.9%): [3338.553, 3482.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54704.004, 54704.004, 54704.004), stdev = 0.001
[info]   CI (99.9%): [54704.004, 54704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.021), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3406.834 ±(99.9%) 0.999 MB/sec [Average]
[info]   (min, avg, max) = (3406.410, 3406.834, 3407.069), stdev = 0.260
[info]   CI (99.9%): [3405.834, 3407.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   54646.047 ±(99.9%) 1165.268 B/op [Average]
[info]   (min, avg, max) = (54458.621, 54646.047, 55179.694), stdev = 302.617
[info]   CI (99.9%): [53480.778, 55811.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.600, 18.000), stdev = 5.273
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.82% complete, ETA 00:01:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249930.988 ops/s
[info] # Warmup Iteration   2: 309564.461 ops/s
[info] # Warmup Iteration   3: 320297.662 ops/s
[info] # Warmup Iteration   4: 324880.561 ops/s
[info] # Warmup Iteration   5: 312102.700 ops/s
[info] Iteration   1: 324700.201 ops/s
[info]                  ·gc.alloc.rate:            510.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3286.971 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 324525.440 ops/s
[info]                  ·gc.alloc.rate:            509.660 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3288.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 326566.081 ops/s
[info]                  ·gc.alloc.rate:      513.034 MB/sec
[info]                  ·gc.alloc.rate.norm: 2472.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 324846.386 ops/s
[info]                  ·gc.alloc.rate:            510.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.148 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3285.484 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 323985.260 ops/s
[info]                  ·gc.alloc.rate:            508.933 MB/sec
[info]                  ·gc.alloc.rate.norm:       2472.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3294.163 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   324924.674 ±(99.9%) 3749.498 ops/s [Average]
[info]   (min, avg, max) = (323985.260, 324924.674, 326566.081), stdev = 973.733
[info]   CI (99.9%): [321175.176, 328674.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   510.389 ±(99.9%) 6.017 MB/sec [Average]
[info]   (min, avg, max) = (508.933, 510.389, 513.034), stdev = 1.562
[info]   CI (99.9%): [504.372, 516.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.001, 2472.001, 2472.001), stdev = 0.001
[info]   CI (99.9%): [2472.001, 2472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   542.528 ±(99.9%) 1167.832 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 542.528, 678.241), stdev = 303.282
[info]   CI (99.9%): [≈ 0, 1710.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2631.072 ±(99.9%) 5663.595 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2631.072, 3294.163), stdev = 1470.818
[info]   CI (99.9%): [≈ 0, 8294.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 4.000), stdev = 1.732
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.06% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356273.895 ops/s
[info] # Warmup Iteration   2: 629322.015 ops/s
[info] # Warmup Iteration   3: 617796.301 ops/s
[info] # Warmup Iteration   4: 632607.943 ops/s
[info] # Warmup Iteration   5: 634506.009 ops/s
[info] Iteration   1: 634420.472 ops/s
[info]                  ·gc.alloc.rate:      483.642 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 630933.244 ops/s
[info]                  ·gc.alloc.rate:                   481.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             676.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1688.258 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.662 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 631532.788 ops/s
[info]                  ·gc.alloc.rate:            481.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1688.266 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 630447.276 ops/s
[info]                  ·gc.alloc.rate:            480.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      676.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1689.599 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 627502.475 ops/s
[info]                  ·gc.alloc.rate:      478.376 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   630967.251 ±(99.9%) 9533.896 ops/s [Average]
[info]   (min, avg, max) = (627502.475, 630967.251, 634420.472), stdev = 2475.922
[info]   CI (99.9%): [621433.355, 640501.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   481.052 ±(99.9%) 7.237 MB/sec [Average]
[info]   (min, avg, max) = (478.376, 481.052, 483.642), stdev = 1.880
[info]   CI (99.9%): [473.815, 488.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.001, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   406.203 ±(99.9%) 1427.860 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 406.203, 677.370), stdev = 370.811
[info]   CI (99.9%): [≈ 0, 1834.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1013.225 ±(99.9%) 3561.628 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1013.225, 1689.599), stdev = 924.944
[info]   CI (99.9%): [≈ 0, 4574.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.332 ±(99.9%) 2.861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.332, 1.662), stdev = 0.743
[info]   CI (99.9%): [≈ 0, 3.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.800, 5.000), stdev = 2.588
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.29% complete, ETA 00:00:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1715553.287 ops/s
[info] # Warmup Iteration   2: 1913223.055 ops/s
[info] # Warmup Iteration   3: 1947257.121 ops/s
[info] # Warmup Iteration   4: 1929715.966 ops/s
[info] # Warmup Iteration   5: 1953461.786 ops/s
[info] Iteration   1: 1946511.915 ops/s
[info]                  ·gc.alloc.rate:            900.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      678.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 548.303 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1936390.106 ops/s
[info]                  ·gc.alloc.rate:            895.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1355.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1101.261 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 1907178.433 ops/s
[info]                  ·gc.alloc.rate:            882.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 559.065 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1953362.392 ops/s
[info]                  ·gc.alloc.rate:            903.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 545.832 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1937881.865 ops/s
[info]                  ·gc.alloc.rate:            896.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1354.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1100.391 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1936264.942 ±(99.9%) 67960.821 ops/s [Average]
[info]   (min, avg, max) = (1907178.433, 1936264.942, 1953362.392), stdev = 17649.209
[info]   CI (99.9%): [1868304.121, 2004225.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   895.562 ±(99.9%) 31.483 MB/sec [Average]
[info]   (min, avg, max) = (882.054, 895.562, 903.470), stdev = 8.176
[info]   CI (99.9%): [864.079, 927.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.518 ±(99.9%) 1428.496 MB/sec [Average]
[info]   (min, avg, max) = (677.370, 948.518, 1355.041), stdev = 370.976
[info]   CI (99.9%): [≈ 0, 2377.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   770.970 ±(99.9%) 1159.647 B/op [Average]
[info]   (min, avg, max) = (545.832, 770.970, 1101.261), stdev = 301.157
[info]   CI (99.9%): [≈ 0, 1930.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.53% complete, ETA 00:00:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1892714.480 ops/s
[info] # Warmup Iteration   2: 2100794.591 ops/s
[info] # Warmup Iteration   3: 2037038.959 ops/s
[info] # Warmup Iteration   4: 2104131.598 ops/s
[info] # Warmup Iteration   5: 2104572.294 ops/s
[info] Iteration   1: 2102297.576 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2088504.812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2110831.105 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2110403.904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2109463.561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2104300.192 ±(99.9%) 36534.120 ops/s [Average]
[info]   (min, avg, max) = (2088504.812, 2104300.192, 2110831.105), stdev = 9487.795
[info]   CI (99.9%): [2067766.072, 2140834.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 10, Java HotSpot(TM) 64-Bit Server VM, 10+46
[info] # VM invoker: /usr/lib/jvm/jdk-10/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.76% complete, ETA 00:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 258289.105 ops/s
[info] # Warmup Iteration   2: 328236.371 ops/s
[info] # Warmup Iteration   3: 337118.379 ops/s
[info] # Warmup Iteration   4: 338784.699 ops/s
[info] # Warmup Iteration   5: 339414.030 ops/s
[info] Iteration   1: 339105.702 ops/s
[info]                  ·gc.alloc.rate:            501.525 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3144.235 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 338710.942 ops/s
[info]                  ·gc.alloc.rate:            501.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3147.901 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 340814.314 ops/s
[info]                  ·gc.alloc.rate:      504.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 336454.931 ops/s
[info]                  ·gc.alloc.rate:            497.576 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3168.939 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 342238.047 ops/s
[info]                  ·gc.alloc.rate:            506.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       2328.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      677.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3115.365 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   339464.787 ±(99.9%) 8451.407 ops/s [Average]
[info]   (min, avg, max) = (336454.931, 339464.787, 342238.047), stdev = 2194.804
[info]   CI (99.9%): [331013.380, 347916.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   502.126 ±(99.9%) 12.674 MB/sec [Average]
[info]   (min, avg, max) = (497.576, 502.126, 506.277), stdev = 3.291
[info]   CI (99.9%): [489.452, 514.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2328.001, 2328.001, 2328.001), stdev = 0.001
[info]   CI (99.9%): [2328.001, 2328.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   541.959 ±(99.9%) 1166.608 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 541.959, 677.607), stdev = 302.964
[info]   CI (99.9%): [≈ 0, 1708.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2515.288 ±(99.9%) 5414.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2515.288, 3168.939), stdev = 1406.218
[info]   CI (99.9%): [≈ 0, 7930.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:53:11
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                                     (size)   Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                                           N/A  thrpt    5    649401.652 ±   22739.392   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      1726.286 ±      60.283  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5      4184.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.035 ±       0.304  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5         0.085 ±       0.735    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      1768.411 ±    1437.383  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5      4285.363 ±    3466.197    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                               N/A  thrpt    5         0.666 ±       5.736  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                          N/A  thrpt    5         1.635 ±      14.080    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        13.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        38.000                    ms
[info] AdtBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   1426391.541 ±   35963.177   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      1014.932 ±      25.877  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5       947.634 ±    1427.177  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      1047.731 ±    1602.597    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.147 ±       1.269    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5         7.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        34.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5   3271299.479 ±  291336.082   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5       216.174 ±      19.244  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       271.598 ±    1432.059  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       130.816 ±     689.792    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5         2.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                          N/A  thrpt    5         6.000                    ms
[info] AdtBenchmark.readPlayJson                                                                                        N/A  thrpt    5    157346.213 ±    8593.835   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      1261.254 ±      68.219  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5     12616.003 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.019 ±       0.161  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5         0.186 ±       1.604    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      1355.712 ±      15.367  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5     13562.981 ±     747.899    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                            N/A  thrpt    5         1.066 ±       7.822  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                       N/A  thrpt    5        10.624 ±      77.601    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        10.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        43.000                    ms
[info] AdtBenchmark.writeCirce                                                                                          N/A  thrpt    5    504090.215 ±   12042.072   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      1457.908 ±      34.549  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5      4552.001 ±       0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.036 ±       0.313  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.113 ±       0.974    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      1494.484 ±    1176.625  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5      4665.213 ±    3641.572    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.666 ±       5.736  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         2.075 ±      17.863    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        11.000                counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        32.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5   1726047.831 ±   43932.156   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5       666.712 ±      16.917  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       608.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       676.744 ±       0.149  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       617.170 ±      15.686    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5         5.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        24.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5   6002017.515 ±   94142.753   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       305.028 ±       4.721  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       271.068 ±    1429.262  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        71.196 ±     375.399    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5         2.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5         7.000                    ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5   7483165.096 ±  616498.675   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                counts
[info] AdtBenchmark.writePlayJson                                                                                       N/A  thrpt    5    299671.229 ±   19252.931   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5      1029.543 ±      65.972  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      5408.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1083.096 ±    1428.455  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      5700.577 ±    7638.371    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.400 ±       1.405  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         2.109 ±       7.417    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5         8.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        39.000                    ms
[info] AnyRefsBenchmark.readCirce                                                                                       N/A  thrpt    5   1417797.466 ±   57070.021   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      2190.512 ±      88.160  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      2432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.022 ±       0.120  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.025 ±       0.134    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      2178.981 ±    1175.839  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      2420.713 ±    1361.350    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.666 ±       5.734  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         0.745 ±       6.419    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        16.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                                 N/A  thrpt    5   9556258.370 ±  491597.573   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                                  N/A  thrpt    5      1165.815 ±      59.697  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                             N/A  thrpt    5       192.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1214.692 ±    1162.338  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5       199.697 ±     186.709    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.800 ±       6.885  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         0.133 ±       1.146    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                                       N/A  thrpt    5         9.000                counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                                        N/A  thrpt    5        46.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                                                N/A  thrpt    5   2161990.496 ±  103218.645   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1516.507 ±      72.249  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.036 ±       0.290  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.026 ±       0.211    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1493.947 ±    1155.815  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      1089.504 ±     896.314    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.066 ±       6.437  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.770 ±       4.630    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        42.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                               N/A  thrpt    5  10158542.183 ± 1258458.924   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5      1290.942 ±     159.806  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.030 ±       0.167  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.005 ±       0.027    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1358.262 ±      11.679  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       210.618 ±      28.209    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.106 ±       0.914    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5        10.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                                                    N/A  thrpt    5    599551.098 ±   18495.010   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                                     N/A  thrpt    5      1541.981 ±      47.651  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4048.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.029 ±       0.248  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.075 ±       0.642    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1493.901 ±    1155.349  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      3925.670 ±    3146.527    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.066 ±       6.688  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         2.800 ±      17.526    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                          N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                           N/A  thrpt    5        42.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                                                      N/A  thrpt    5   1779245.196 ±   49365.705   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5      1546.475 ±      42.576  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5      1368.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.034 ±       0.297  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         0.030 ±       0.261    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5      1495.158 ±    1181.347  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5      1322.086 ±    1028.519    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.666 ±       5.736  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5         0.590 ±       5.080    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5        11.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                                N/A  thrpt    5  16950674.510 ± 1297354.863   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                 N/A  thrpt    5       517.027 ±      39.465  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                            N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       404.944 ±    1423.434  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5        38.114 ±     133.976    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                                      N/A  thrpt    5         3.000                counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                                       N/A  thrpt    5        18.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                               N/A  thrpt    5   4220277.529 ±   57606.536   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5      1158.387 ±      15.152  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1082.883 ±    1427.903  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       404.165 ±     536.442    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.799 ±       6.881  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.296 ±       2.553    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5         8.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        37.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5  21651930.706 ±  597966.705   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       660.298 ±      18.294  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       677.687 ±       1.396  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5        49.266 ±       1.404    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.266 ±       1.405  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         0.019 ±       0.102    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         5.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5        18.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5  20519521.780 ± 1137025.184   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                                                   N/A  thrpt    5   1251249.282 ±   56031.159   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                                    N/A  thrpt    5      1851.086 ±      81.054  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2328.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.041 ±       0.307  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.051 ±       0.383    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1767.595 ±    1431.344  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2224.401 ±    1827.504    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.932 ±       8.028  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.175 ±      10.118    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                         N/A  thrpt    5        13.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                          N/A  thrpt    5        32.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                         128  thrpt    5    360311.672 ±    3966.049   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1983.430 ±      20.788  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      8664.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.023 ±       0.185  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.100 ±       0.808    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2042.366 ±      15.984  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      8921.463 ±      40.786    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         2.924 ±      25.173    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                               128  thrpt    5        15.000                counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                                128  thrpt    5        27.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                                  128  thrpt    5    424155.259 ±    1953.137   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       577.726 ±       2.650  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      2144.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       676.944 ±       1.446  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2512.210 ±      12.155    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.988 ±       5.210    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        24.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                                 128  thrpt    5   1063517.146 ±   10485.465   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       708.119 ±       6.935  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      1048.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       678.067 ±       0.173  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1003.530 ±       9.874    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        17.000                    ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                                      128  thrpt    5    100615.849 ±    1222.993   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3484.045 ±      43.616  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     54496.004 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.001 ±       0.006  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.016 ±       0.093    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      3407.327 ±       3.413  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     53296.437 ±     642.635    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        25.000                counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        31.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                                        128  thrpt    5    335650.737 ±    2572.037   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       513.507 ±       3.880  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      2408.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       542.463 ±    1167.692  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2545.688 ±    5479.801    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        15.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                                 128  thrpt    5    624708.998 ±   46729.040   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       460.381 ±      34.464  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1160.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       406.034 ±    1427.265  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1030.580 ±    3624.354    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         3.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        14.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                                128  thrpt    5   2788366.765 ±   25006.513   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1289.708 ±      11.094  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.033 ±       0.285  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.019 ±       0.161    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1221.226 ±    1170.663  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       689.547 ±     663.422    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.066 ±       6.438  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.602 ±       3.640    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         9.000                counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        29.000                    ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2991040.319 ±   69672.747   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                                     128  thrpt    5    412001.269 ±   37837.287   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       592.670 ±      54.168  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5      2264.001 ±       0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       541.954 ±    1166.597  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2079.793 ±    4482.706    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         4.000                counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        16.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                            128  thrpt    5     19822.363 ±     465.579   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1240.322 ±      29.307  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     98480.027 ±       0.055    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.019 ±       0.167  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         1.532 ±      13.193    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1221.189 ±    1161.671  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     97036.336 ±   93204.697    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        52.924 ±     455.688    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        31.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                                     128  thrpt    5     34650.984 ±     493.303   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       868.650 ±      12.652  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     39456.012 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.305 ±    1429.676  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     43085.364 ±   65092.850    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         6.037 ±      51.982    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        32.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                                    128  thrpt    5     42571.559 ±     358.542   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       571.876 ±       4.903  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5     21144.010 ±       0.001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       542.453 ±    1167.672  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     20068.449 ±   43199.148    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         4.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        14.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                         128  thrpt    5     24716.089 ±     555.842   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1309.641 ±      29.175  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     83400.017 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.028 ±       0.169  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.785 ±      10.655    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.197 ±      14.033  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     86430.129 ±    1613.334    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        50.509 ±     434.902    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        37.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                           128  thrpt    5     27983.248 ±     243.081   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1589.721 ±      14.021  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     89408.015 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.029 ±       0.181  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.653 ±      10.141    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1631.413 ±    1433.638  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     91742.691 ±   80393.975    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       5.561  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        45.014 ±     313.163    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        31.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                                    128  thrpt    5     28565.583 ±    1398.125   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1537.481 ±      75.228  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     84720.015 ±       0.003    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.022 ±       0.122  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         1.205 ±       6.773    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1494.734 ±    1182.726  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     82283.798 ±   62540.712    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.066 ±       7.821  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        59.001 ±     433.086    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        32.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                                   128  thrpt    5     30363.813 ±     350.328   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1566.975 ±      18.218  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     81224.014 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.030 ±       0.160  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         1.581 ±       8.286    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1630.744 ±    1433.822  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     84576.284 ±   75377.479    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        41.368 ±     356.191    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        34.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5     31011.872 ±     310.045   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5      1540.093 ±      15.566  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5     78168.013 ±       0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                128  thrpt    5         0.029 ±       0.174  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           128  thrpt    5         1.445 ±       8.806    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1630.658 ±    1432.601  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     82802.078 ±   73558.099    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        47.260 ±     338.679    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                  128  thrpt    5        29.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                                        128  thrpt    5      8168.008 ±     148.345   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1062.645 ±      19.302  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    204776.051 ±       0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       948.229 ±    1428.450  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    182877.242 ±  277340.487    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        36.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                                128  thrpt    5     19776.436 ±     581.855   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1510.750 ±      44.518  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5    120240.022 ±       0.009    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.031 ±       0.163  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         2.431 ±      12.846    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.012 ±    1167.403  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5    118984.272 ±   92726.409    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±       5.734  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        52.974 ±     456.126    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                         128  thrpt    5     39466.073 ±     417.722   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       973.454 ±      10.090  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     38824.010 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.076 ±    1428.715  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     37843.485 ±   57422.616    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         5.330 ±      45.890    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        32.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                                        128  thrpt    5     54959.974 ±    1588.729   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       710.115 ±      20.593  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     20336.008 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       678.078 ±       0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     19419.457 ±     568.056    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         5.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        16.000                    ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                             128  thrpt    5     30304.950 ±     632.999   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2024.331 ±      42.886  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5    105128.014 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.010 ±       0.045  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.498 ±       2.323    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      2042.466 ±      17.887  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    106071.448 ±    1504.091    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±       8.029  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        48.846 ±     420.576    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        15.000                counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        36.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                                        128  thrpt    5     32194.993 ±     401.218   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1823.553 ±      22.609  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     89144.013 ±       0.002    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.025 ±       0.160  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.240 ±       7.832    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1768.960 ±    1443.972  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     86461.241 ±   70288.118    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.933 ±       8.029  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        45.719 ±     393.658    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        28.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                                       128  thrpt    5     45970.448 ±     600.314   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1766.373 ±      23.280  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     60480.009 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.034 ±       0.229  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         1.169 ±       7.847    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1768.634 ±    1432.509  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     60564.616 ±   49193.259    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±       5.561  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        27.399 ±     190.423    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     45253.923 ±    1872.863   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5      1660.122 ±      68.215  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     57736.009 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.027 ±       0.231  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.940 ±       8.012    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1767.894 ±    1437.315  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     61493.686 ±   50133.251    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.933 ±       6.691  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        32.781 ±     235.082    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5        13.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5        30.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                               128  thrpt    5    384320.353 ±    5137.587   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1943.550 ±      26.432  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      7960.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.023 ±       0.183  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.095 ±       0.749    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2042.128 ±      17.388  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      8363.777 ±      65.979    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         2.742 ±      23.610    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        15.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        26.000                    ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                         128  thrpt    5   1482117.029 ±   45141.736   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                          128  thrpt    5       467.083 ±      14.028  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     128  thrpt    5       496.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       539.838 ±    1162.042  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       574.540 ±    1236.860    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                                128  thrpt    5        21.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                                        128  thrpt    5    582980.436 ±    5847.259   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       494.799 ±       4.920  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1336.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       541.887 ±    1166.454  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1464.701 ±    3152.889    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        18.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                                       128  thrpt    5   1724903.159 ±  130422.893   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       333.157 ±      24.901  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       271.287 ±    1430.417  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       251.881 ±    1328.418    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         2.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5         7.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                            128  thrpt    5     93432.268 ±    1726.091   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      3393.782 ±      63.163  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.001 ±       0.002  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.019 ±       0.041    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3406.705 ±       0.441  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     57394.782 ±    1060.547    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        25.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        40.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                              128  thrpt    5    324207.630 ±   16245.646   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5       504.273 ±      25.508  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      2448.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       542.466 ±    1167.699  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      2642.698 ±    5690.263    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                                        128  thrpt    5   1220958.960 ±   28159.534   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                         128  thrpt    5       564.724 ±      13.008  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                    128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       539.782 ±    1161.922  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       696.099 ±    1498.539    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                              128  thrpt    5         4.000                counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                               128  thrpt    5        22.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                                       128  thrpt    5    966744.407 ±   11893.763   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       683.084 ±       8.472  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       677.358 ±       1.224  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1102.689 ±      14.571    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.216 ±       1.863    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                                      128  thrpt    5   2512804.167 ±   88520.002   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      1162.421 ±      40.741  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1084.570 ±    1428.482  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       679.883 ±     902.423    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±       5.318  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.582 ±       3.306    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        29.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5   2534549.498 ±    2844.178   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                           128  thrpt    5    415715.276 ±    6244.358   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5       485.944 ±       7.294  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5      1840.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       406.419 ±    1428.621  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1539.521 ±    5411.641    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        13.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                                                  128  thrpt    5    142749.626 ±    2010.502   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1715.872 ±      24.179  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     18920.003 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.014 ±       0.076  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.152 ±       0.846    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1632.659 ±    1435.210  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     18010.446 ±   16004.906    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         7.387 ±      63.600    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        12.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        24.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                           128  thrpt    5    369179.918 ±    7059.473   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       313.339 ±       5.997  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1336.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       270.941 ±    1428.593  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1160.891 ±    6121.088    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         2.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5         9.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                          128  thrpt    5    822973.804 ±   58761.030   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       158.947 ±      11.412  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       135.594 ±    1167.503  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       264.338 ±    2276.028    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         1.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         3.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                               128  thrpt    5     78829.285 ±    1553.942   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3356.315 ±      66.509  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     67016.005 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.002 ±       0.013  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.048 ±       0.258    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3270.649 ±    1172.815  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     65309.135 ±   23558.685    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        24.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        39.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                                 128  thrpt    5    262713.822 ±    3100.855   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1157.659 ±      13.772  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      6936.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1084.876 ±    1430.004  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      6505.210 ±    8632.188    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.004 ±      34.472    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        34.000                    ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                          128  thrpt    5   1881886.092 ±   29663.835   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       966.008 ±      15.196  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       808.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       948.299 ±    1428.697  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       794.005 ±    1206.400    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         7.000                counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        31.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2230335.079 ±   59699.183   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       600.893 ±      16.401  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       542.062 ±    1166.832  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       383.094 ±     824.719    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.404  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.189 ±       0.995    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        14.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2521330.751 ±    5881.854   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                              128  thrpt    5     40111.716 ±     764.227   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1697.598 ±      31.966  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     66608.010 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.039 ±       0.326  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.507 ±      12.759    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1767.761 ±    1437.155  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     69370.701 ±   56578.897    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.800 ±       6.884  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        31.493 ±     271.162    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        13.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        33.000                    ms
[info] ArrayOfCharsBenchmark.readCirce                                                                                  128  thrpt    5    219579.965 ±    1735.681   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2260.207 ±      17.324  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     16200.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.018 ±       0.118  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.126 ±       0.847    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2180.611 ±    1172.640  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     15629.964 ±    8422.459    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        16.000                counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                           128  thrpt    5    298061.168 ±   11705.192   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1442.337 ±      56.286  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      7616.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.026 ±       0.149  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.137 ±       0.787    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1494.439 ±    1158.484  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      7902.793 ±    6454.990    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         4.216 ±      36.298    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        11.000                counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        35.000                    ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                          128  thrpt    5   1241740.192 ±    8476.766   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       429.211 ±       3.219  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.860 ±    1430.170  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       515.859 ±    1813.322    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                               128  thrpt    5     75259.549 ±     593.365   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3162.542 ±      25.095  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     66144.005 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.002 ±       0.010  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.043 ±       0.205    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3134.290 ±    1437.453  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     65556.244 ±   30181.904    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        23.000                counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        32.000                    ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                                 128  thrpt    5    216758.447 ±    3418.326   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1840.025 ±      29.406  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     13360.002 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.017 ±       0.105  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.121 ±       0.760    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1905.402 ±    1167.763  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     13840.502 ±    8613.581    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.837 ±      41.645    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        14.000                counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        32.000                    ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                          128  thrpt    5   1178455.478 ±   14200.638   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       688.849 ±       8.089  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       677.311 ±       1.355  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       904.598 ±      11.513    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.178 ±       1.530    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         5.000                counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        23.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   3045539.238 ±   76251.939   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1037.120 ±      25.961  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1084.425 ±    1429.797  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       560.479 ±     739.319    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.068 ±       0.587    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        34.000                    ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   3180502.043 ±  270820.985   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                              128  thrpt    5    282704.868 ±   11661.071   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      2306.220 ±      94.707  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     12840.001 ±       0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.013 ±       0.086  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.071 ±       0.490    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2316.726 ±    1436.845  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     12888.573 ±    7658.144    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        17.000                counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        27.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                                128  thrpt    5     26393.269 ±     671.836   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1511.546 ±      38.391  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     90144.016 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.039 ±       0.203  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         2.331 ±      12.080    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.008 ±    1167.460  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     89146.388 ±   69230.535    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        39.654 ±     341.435    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        28.000                    ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                          128  thrpt    5     95310.932 ±     657.296   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       858.415 ±       5.635  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5     14176.004 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       809.535 ±    1160.542  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     13370.283 ±   19193.938    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         2.201 ±      18.953    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                                 128  thrpt    5        32.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                         128  thrpt    5     59250.483 ±    3162.123   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       979.009 ±      52.005  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     26008.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.055 ±    1428.244  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     25171.830 ±   37717.385    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         7.043 ±      37.137    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        33.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                                        128  thrpt    5    128793.373 ±    1330.849   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       830.105 ±       8.603  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     10144.003 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       813.780 ±    1168.655  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      9945.677 ±   14302.931    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        20.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                             128  thrpt    5     33160.783 ±     596.484   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1732.302 ±      31.415  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     82216.012 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.024 ±       0.138  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.144 ±       6.608    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1632.288 ±    1434.891  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     77502.375 ±   68837.029    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        38.162 ±     328.590    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                               128  thrpt    5     39603.701 ±    2213.397   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       443.663 ±      24.723  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     17632.011 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       406.835 ±    1430.083  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     16267.911 ±   57198.378    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                                        128  thrpt    5     41278.442 ±    1056.254   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       372.827 ±       9.421  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     14216.010 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       406.474 ±    1428.813  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     15551.568 ±   54667.852    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        14.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                                       128  thrpt    5     44485.816 ±     553.420   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       390.970 ±       5.076  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     13832.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       406.448 ±    1428.721  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     14406.870 ±   50642.340    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     44904.144 ±     444.313   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5       343.274 ±       3.238  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     12032.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5       271.008 ±    1428.945  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      9523.363 ±   50213.970    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5         2.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                              128  thrpt    5     19960.578 ±     284.246   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5       748.749 ±      10.476  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     59040.022 ±       0.008    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       678.081 ±       0.408  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     53468.277 ±     761.867    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5         5.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                                       128  thrpt    5     18450.237 ±     162.705   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       523.735 ±       4.663  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     44679.669 ±       3.054    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       541.935 ±    1166.555  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     46274.807 ±   99610.273    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        18.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                                      128  thrpt    5     74591.461 ±     621.605   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       194.141 ±       1.569  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       135.941 ±    1170.490  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      2873.853 ±   24744.741    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         1.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5         3.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                           128  thrpt    5     16051.968 ±     169.413   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1040.854 ±      11.536  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    102064.027 ±       0.011    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1083.776 ±    1428.685  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5    106297.158 ±  140391.896    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        37.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                             128  thrpt    5     59252.009 ±    1782.206   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       897.834 ±      27.100  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     23848.007 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       813.739 ±    1167.556  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     21615.751 ±   31026.528    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         6.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        24.000                    ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                                      128  thrpt    5     88186.734 ±    3121.168   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1045.823 ±      36.866  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     18664.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       948.357 ±    1428.682  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     16946.892 ±   25800.626    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         2.403 ±      20.689    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        31.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    208872.962 ±    5210.521   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       331.196 ±       8.274  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       271.212 ±    1430.025  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2049.753 ±   10807.775    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         2.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5         7.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    240376.803 ±    3146.024   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                          128  thrpt    5     69724.785 ±     781.968   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1087.192 ±      12.147  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     24544.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.756 ±    1428.560  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     24482.905 ±   32452.056    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        35.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                                  128  thrpt    5     27525.299 ±     140.507   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       572.483 ±       2.952  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     32736.015 ±       0.002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       678.061 ±       0.154  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     38773.288 ±     198.547    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        19.000                    ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                           128  thrpt    5     28260.266 ±     378.041   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       371.454 ±       4.885  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     20688.015 ±       0.003    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       406.344 ±    1428.356  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     22677.484 ±   79714.826    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         7.456 ±      64.196    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                          128  thrpt    5    119406.698 ±     904.282   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       466.121 ±       3.364  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      6144.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.845 ±    1430.119  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      5357.492 ±   18832.345    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                               128  thrpt    5     21484.157 ±     588.784   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1186.163 ±      32.551  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     86904.020 ±       0.009    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1219.364 ±    1168.055  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     89417.761 ±   86604.416    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         1.332 ±       7.254  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        97.423 ±     528.797    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        47.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                                 128  thrpt    5    177515.572 ±    3576.477   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       619.890 ±      12.364  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      5496.002 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       542.508 ±    1167.790  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      4818.276 ±   10372.018    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         4.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        15.000                    ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                          128  thrpt    5    279751.455 ±    5490.847   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       282.947 ±       5.581  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.454 ±    1428.743  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      2291.586 ±    8055.395    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    469242.183 ±   30422.901   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       360.122 ±      23.237  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       406.553 ±    1429.092  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1363.290 ±    4792.335    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         3.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    499626.793 ±    2798.541   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                              128  thrpt    5    279470.807 ±    3976.767   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5       769.934 ±      10.985  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       677.450 ±       0.269  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      3815.204 ±      54.570    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5         5.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        24.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                                 128  thrpt    5     36727.271 ±    1295.080   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1638.121 ±      58.198  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     70200.011 ±       0.002    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.037 ±       0.299  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         1.575 ±      12.772    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1632.076 ±    1431.488  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     69910.449 ±   60580.957    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        28.542 ±     245.755    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        12.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        32.000                    ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                           128  thrpt    5    303923.587 ±   12227.886   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       315.143 ±      12.589  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       405.000 ±    1423.633  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      2107.709 ±    7409.667    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        16.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                          128  thrpt    5     98235.542 ±    2887.209   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1085.541 ±      32.214  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     17392.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.924 ±    1429.005  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     17393.207 ±   23223.533    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.800 ±       6.884  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        12.788 ±     110.110    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        36.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                         128  thrpt    5    419745.345 ±    4613.998   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       273.060 ±       3.024  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       271.207 ±    1429.998  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1020.169 ±    5379.059    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                              128  thrpt    5     37745.502 ±     909.074   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      2015.533 ±      48.545  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     84048.011 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.023 ±       0.112  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.972 ±       4.677    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2042.550 ±      13.874  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     85177.150 ±    2032.861    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        33.397 ±     287.557    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        15.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        26.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                                128  thrpt    5     90413.272 ±    1750.246   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5       436.596 ±       8.333  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      7600.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       406.896 ±    1430.296  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      7096.862 ±   24946.486    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                          128  thrpt    5    113212.479 ±    2896.378   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       346.431 ±       8.918  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       269.907 ±    1423.141  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      3774.444 ±   19901.721    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        11.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                         128  thrpt    5     99765.772 ±    1603.104   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       329.590 ±       5.389  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5200.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       270.955 ±    1428.670  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      4289.543 ±   22617.710    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5         9.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                                        128  thrpt    5    116895.441 ±    1963.090   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       357.692 ±       6.052  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       406.598 ±    1429.251  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      5490.443 ±   19299.822    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         1.799 ±      15.490    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    117071.164 ±    1136.419   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5       265.987 ±       2.651  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5      3576.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           128  thrpt    5       271.097 ±    1429.416  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      3652.830 ±   19260.332    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.798 ±      15.478    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       128  thrpt    5         8.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                               128  thrpt    5      8583.563 ±     221.824   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1422.810 ±      36.655  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5    260904.057 ±       0.063    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.022 ±       0.191  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         4.044 ±      34.816    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1494.418 ±    1162.114  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    274337.436 ±  221978.080    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5       123.595 ±    1064.186    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        32.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                                        128  thrpt    5      8625.984 ±     100.927   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1345.862 ±      16.276  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5    245560.048 ±       0.006    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.023 ±       0.141  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         4.292 ±      25.826    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1357.059 ±      13.852  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    247606.015 ±    5060.847    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.932 ±       6.687  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       170.727 ±    1225.540    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        35.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                                       128  thrpt    5    172537.372 ±    1491.511   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       448.985 ±       3.774  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       407.242 ±    1431.515  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      3720.482 ±   13078.031    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                            128  thrpt    5      4740.455 ±     116.712   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1259.004 ±      30.955  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5    418040.089 ±       0.016    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.022 ±       0.191  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         7.308 ±      62.925    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1220.564 ±    1170.907  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    405165.081 ±  387305.678    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.932 ±       6.687  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5       312.068 ±    2240.419    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        37.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                              128  thrpt    5     25540.784 ±     216.962   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5      1323.613 ±      11.393  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     81568.016 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.036 ±       0.311  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         2.221 ±      19.127    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1357.467 ±      11.496  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     83654.427 ±     750.869    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        41.146 ±     354.283    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        35.000                    ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                                       128  thrpt    5     26338.185 ±     345.754   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1338.991 ±      17.712  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     80016.016 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.027 ±       0.156  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         1.615 ±       9.320    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1221.575 ±    1171.201  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     73017.842 ±   70219.830    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.932 ±       6.688  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        55.827 ±     400.319    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5         9.000                counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        32.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                                      128  thrpt    5    370136.488 ±    3346.161   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       818.405 ±       7.520  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      3480.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       813.251 ±    1167.825  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3459.926 ±    5001.196    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         1.135 ±       5.986    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5         6.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        20.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5    407293.717 ±    1083.619   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                           128  thrpt    5     26397.259 ±     822.478   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1388.936 ±      43.340  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     82824.016 ±       0.002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.047 ±       0.249  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         2.799 ±      14.816    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1357.067 ±      13.848  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     80927.745 ±    2568.507    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        47.374 ±     407.901    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        10.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        35.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                                                   128  thrpt    5     97117.110 ±    1256.087   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                    128  thrpt    5      1582.228 ±      20.160  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     25640.004 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        128  thrpt    5         0.023 ±       0.168  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   128  thrpt    5         0.375 ±       2.737    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                              128  thrpt    5      1495.895 ±    1173.030  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                         128  thrpt    5     24248.658 ±   19236.335    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                       128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                  128  thrpt    5        10.831 ±      93.255    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                         128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                          128  thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                             128  thrpt    5    457846.942 ±    9066.447   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                              128  thrpt    5       474.706 ±       9.377  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         128  thrpt    5      1632.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       539.642 ±    1161.621  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1858.274 ±    4000.226    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         0.457 ±       3.939    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                                    128  thrpt    5        21.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                            128  thrpt    5    270456.228 ±    2988.345   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       387.629 ±       4.343  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      2256.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       406.402 ±    1428.562  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2370.195 ±    8331.574    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                                  128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                                   128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                           128  thrpt    5    608168.173 ±   11284.329   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       395.657 ±       7.450  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       406.817 ±    1430.020  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1056.300 ±    3713.046    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                                 128  thrpt    5         3.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                                128  thrpt    5     65878.939 ±     932.185   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                 128  thrpt    5      2884.558 ±      40.587  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     68920.006 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.002 ±       0.015  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.055 ±       0.364    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2861.754 ±    1173.197  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     68365.687 ±   27516.047    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                                      128  thrpt    5        21.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                                  128  thrpt    5    247639.835 ±    5126.134   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                   128  thrpt    5      1471.345 ±      30.447  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                              128  thrpt    5      9352.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.021 ±       0.181  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.133 ±       1.145    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1494.955 ±    1182.416  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5      9497.838 ±    7384.528    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         5.092 ±      43.846    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                                        128  thrpt    5        11.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                         128  thrpt    5        36.000                    ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                            128  thrpt    5    973682.383 ±   22124.327   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       529.545 ±      12.018  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       539.807 ±    1161.975  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       873.919 ±    1881.291    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                                  128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                                   128  thrpt    5        21.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                           128  thrpt    5    808523.663 ±   52936.722   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       636.913 ±      41.624  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1240.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       677.351 ±       0.132  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1319.040 ±      88.266    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                                 128  thrpt    5         5.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                                  128  thrpt    5        22.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                          128  thrpt    5   1035486.592 ±   27202.532   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       563.152 ±      14.720  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       542.057 ±    1166.819  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       825.243 ±    1776.545    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.205 ±       1.764    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                128  thrpt    5         4.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                 128  thrpt    5        13.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                  128  thrpt    5   1029695.301 ±   12392.847   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        128  thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                               128  thrpt    5     29687.537 ±     633.980   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                128  thrpt    5      1555.793 ±      33.297  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     82488.014 ±       0.002    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.044 ±       0.232  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         2.342 ±      12.213    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1630.478 ±    1432.935  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     86511.305 ±   77390.272    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        42.095 ±     362.447    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                                     128  thrpt    5        12.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                                      128  thrpt    5        41.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                              128  thrpt    5    116349.915 ±    5485.651   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1436.000 ±      66.884  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     19424.004 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.035 ±       0.294  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.473 ±       3.956    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1358.963 ±      13.565  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     18384.006 ±     830.168    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.738  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         9.212 ±      79.315    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        32.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                                       128  thrpt    5    176209.027 ±    4599.362   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       940.344 ±      24.404  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      8400.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       948.355 ±    1428.761  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      8488.364 ±   12995.938    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        34.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                                      128  thrpt    5    257849.817 ±    9439.094   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       671.028 ±      24.459  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       678.084 ±       0.251  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      4139.373 ±     153.579    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         5.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        21.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                           128  thrpt    5     63623.911 ±     311.706   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      2685.500 ±      13.058  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     66432.007 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.007 ±       0.060  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.181 ±       1.491    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      2725.860 ±       2.245  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     67430.506 ±     326.344    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        20.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        25.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                             128  thrpt    5    181431.585 ±    2948.266   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       633.551 ±      10.383  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      5496.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       542.490 ±    1167.752  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      4713.698 ±   10146.705    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        15.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                                      128  thrpt    5    539985.003 ±   29332.866   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       546.231 ±      29.839  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       541.822 ±    1166.313  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1580.909 ±    3404.639    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.398 ±       3.429    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         4.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        20.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    479883.572 ±    8225.557   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       368.306 ±       6.432  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       406.534 ±    1429.025  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1336.875 ±    4699.380    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.438 ±       3.768    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         3.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    492832.462 ±     635.946   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                          128  thrpt    5    306659.057 ±    6800.243   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       844.837 ±      18.915  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       812.253 ±    1164.993  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4169.455 ±    5990.813    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.681 ±       5.867    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        29.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                         128  thrpt    5      9103.410 ±     299.599   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1164.273 ±      38.150  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    201280.046 ±       0.008    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1220.757 ±    1168.273  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    211226.217 ±  204281.729    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       138.400 ±     960.077    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        34.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      9174.800 ±     241.564   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1027.746 ±      26.911  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    176322.953 ±      66.493    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1083.550 ±    1428.120  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    186105.801 ±  247558.134    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        23.130 ±     199.152    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         8.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        38.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5    197045.158 ±    1928.833   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5      1281.936 ±      12.344  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     10240.002 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.020 ±       0.171  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.158 ±       1.364    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1222.797 ±    1171.272  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      9771.175 ±    9401.645    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.533 ±       4.588  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         4.254 ±      36.631    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         9.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      7078.158 ±      88.320   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1318.054 ±      16.393  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    293112.791 ±       6.304    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.020 ±       0.131  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         4.356 ±      28.902    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1356.975 ±      13.824  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    301771.097 ±    5387.591    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       176.850 ±    1522.736    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        10.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        37.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     22373.832 ±     377.065   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       939.438 ±      16.243  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     66080.964 ±       8.133    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       949.397 ±    1430.517  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     66745.534 ±  100110.154    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     25024.180 ±     555.846   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       962.638 ±      21.410  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     60552.017 ±       0.002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       948.139 ±    1429.035  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     59731.766 ±   91164.804    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         8.343 ±      71.838    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    894872.801 ±   24595.470   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1614.679 ±      44.011  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      2840.000 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.010 ±       0.059  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.018 ±       0.104    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1631.670 ±    1430.782  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      2869.154 ±    2498.876    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.933 ±       6.688  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.631 ±      11.703    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        12.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        27.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    615809.193 ±     772.862   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     22501.742 ±     582.922   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       949.574 ±      24.530  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66416.490 ±       4.056    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.424 ±    1428.867  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     66474.104 ±  101851.996    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                             128  thrpt    5     25585.293 ±     900.748   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1305.780 ±      45.575  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     80320.016 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.027 ±       0.232  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.653 ±      14.233    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1222.267 ±    1170.253  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     75238.836 ±   72689.623    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       5.562  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        49.828 ±     347.718    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                                      128  thrpt    5     26519.634 ±     322.791   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1211.305 ±      14.552  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     71888.016 ±       0.002    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.037 ±       0.319  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         2.195 ±      18.903    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1220.870 ±    1170.036  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     72485.326 ±   69814.801    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        55.470 ±     397.730    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        35.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                                     128  thrpt    5    342749.478 ±   18769.544   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       891.886 ±      48.770  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       950.169 ±    1431.507  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4361.620 ±    6539.562    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                          128  thrpt    5     15930.744 ±     304.831   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1588.169 ±      31.049  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    156904.027 ±       0.015    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.027 ±       0.188  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         2.614 ±      18.566    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1631.392 ±    1429.996  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    161233.930 ±  142603.717    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        79.624 ±     685.583    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        31.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                            128  thrpt    5     52978.395 ±    2459.591   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1285.186 ±      59.976  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     38176.008 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.035 ±       0.298  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         1.009 ±       8.689    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1222.024 ±    1170.406  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     36281.608 ±   34520.802    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        20.035 ±     172.508    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                                     128  thrpt    5     97996.416 ±    1550.859   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1021.489 ±      16.189  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     16408.004 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.313 ±    1428.742  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     15242.243 ±   23083.349    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        32.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1497798.787 ±   40938.459   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1606.435 ±      43.551  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.025 ±       0.192  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.027 ±       0.202    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1631.647 ±    1430.293  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1715.878 ±    1533.580    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±       6.690  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.989 ±       7.115    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        12.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5    821927.013 ±   56590.065   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                         128  thrpt    5     55929.970 ±     909.542   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1300.922 ±      21.279  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     36608.007 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.045 ±       0.385  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.255 ±      10.807    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1220.995 ±    1170.181  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     34377.872 ±   33169.976    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        22.481 ±     193.569    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5         9.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        44.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                             128  thrpt    5     13651.084 ±     430.445   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1218.488 ±      39.008  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5    140480.033 ±       0.015    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.001 ±       0.005  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.062 ±       0.536    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1221.450 ±    1169.146  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    140986.818 ±  136874.912    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±       5.318  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5       107.115 ±     609.946    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        33.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                                      128  thrpt    5     13938.819 ±     162.379   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1126.322 ±      12.803  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5    127184.032 ±       0.012    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1083.802 ±    1428.759  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    122481.011 ±  162535.379    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        90.019 ±     775.094    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        35.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                                     128  thrpt    5    409213.781 ±    5352.851   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1064.897 ±      14.360  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1085.962 ±    1431.258  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4180.646 ±    5549.350    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        26.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                          128  thrpt    5      9894.053 ±     309.704   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1385.567 ±      43.589  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    220408.212 ±       1.466    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.018 ±       0.120  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         2.909 ±      18.979    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1358.046 ±      16.833  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    216037.821 ±    4587.746    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       128.018 ±    1102.276    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        34.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                            128  thrpt    5     37945.738 ±     661.797   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1179.624 ±      20.938  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     48928.011 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1084.937 ±    1429.996  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     45018.382 ±   59525.915    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        27.742 ±     238.870    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        38.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                                     128  thrpt    5     44146.859 ±     389.199   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1171.145 ±      10.124  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     41752.009 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.013 ±       0.112  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.464 ±       3.995    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1220.117 ±    1168.293  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     43514.735 ±   41865.566    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.932 ±       6.688  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        33.232 ±     238.253    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        37.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1687786.533 ±   40585.910   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1535.571 ±      36.476  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.023 ±       0.164  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.022 ±       0.154    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1495.405 ±    1175.241  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1395.387 ±    1120.242    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±       5.320  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.873 ±       4.994    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1804642.628 ±   69626.061   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                         128  thrpt    5     35714.888 ±     952.388   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1079.958 ±      28.260  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     47592.012 ±       0.002    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1083.890 ±    1428.695  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     47770.291 ±   63019.787    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        36.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                                                  128  thrpt    5     76999.373 ±    1704.397   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      1320.880 ±      29.458  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     27000.005 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.028 ±       0.156  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.565 ±       3.169    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1358.158 ±      11.994  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     27762.587 ±     523.733    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        13.607 ±     117.158    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        29.000                    ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                            128  thrpt    5    338831.487 ±    1888.650   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       678.516 ±       3.718  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5      3152.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       674.719 ±       0.046  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      3134.365 ±      17.327    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                           128  thrpt    5    242740.235 ±    1679.760   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       537.976 ±       3.692  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      3488.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       541.978 ±    1166.649  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      3516.614 ±    7569.782    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        18.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                          128  thrpt    5    452461.847 ±   10068.849   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       570.402 ±      12.557  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       542.507 ±    1167.788  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1882.754 ±    4052.846    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                               128  thrpt    5     66449.450 ±     900.399   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2965.133 ±      40.509  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     70232.006 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.005 ±       0.012  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.112 ±       0.292    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2998.210 ±    1436.304  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     71007.472 ±   33683.702    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        22.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        40.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                                 128  thrpt    5    219224.189 ±    2801.421   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1550.022 ±      19.949  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     11128.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.031 ±       0.181  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.222 ±       1.293    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1631.474 ±    1433.447  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     11718.407 ±   10418.135    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         4.773 ±      41.100    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        12.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        37.000                    ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                           128  thrpt    5    680792.338 ±   34231.651   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       532.871 ±      26.787  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       539.798 ±    1161.956  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1251.091 ±    2694.067    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                                  128  thrpt    5        21.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                          128  thrpt    5    458805.937 ±    7460.132   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       471.028 ±       7.852  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.412 ±    1428.595  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1397.857 ±    4913.687    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        13.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    632632.082 ±   14546.717   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       495.143 ±      11.349  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       542.015 ±    1166.729  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1348.436 ±    2902.841    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        14.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    668017.013 ±   60076.036   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                              128  thrpt    5     26966.325 ±     715.332   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1382.336 ±      36.647  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     80688.015 ±       0.002    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.044 ±       0.241  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         2.588 ±      14.166    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1357.135 ±      13.902  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     79221.232 ±    2925.148    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        46.801 ±     402.971    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        39.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                                        128  thrpt    5      6766.050 ±      61.467   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1041.578 ±       9.024  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5    242296.063 ±       0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       949.269 ±    1430.495  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    220977.220 ±  334926.305    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                              128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                               128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                                 128  thrpt    5      6655.861 ±     295.611   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       959.311 ±      42.818  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5    226864.064 ±       0.015    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       948.134 ±    1428.829  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5    224367.617 ±  339743.871    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        31.203 ±     268.667    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        33.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                                128  thrpt    5    151666.935 ±    5333.915   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1469.241 ±      51.341  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     15248.003 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.025 ±       0.213  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.255 ±       2.189    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1495.832 ±    1180.329  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     15513.569 ±   11916.574    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.533 ±       4.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         5.515 ±      47.488    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        11.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        26.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                                     128  thrpt    5      6267.353 ±     262.761   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1140.070 ±      47.341  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5    286296.066 ±       0.011    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.758 ±    1428.607  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    272540.987 ±  363344.852    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       201.811 ±    1737.653    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        37.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                                       128  thrpt    5     18221.414 ±     191.669   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       826.918 ±       8.348  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     71414.220 ±      40.065    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       813.846 ±    1168.183  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     70331.614 ±  101776.109    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                             128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        23.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                                128  thrpt    5     20390.327 ±     836.498   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       864.052 ±      35.607  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     66696.021 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       948.232 ±    1428.057  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     73208.476 ±  110384.423    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        10.226 ±      88.045    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                               128  thrpt    5    593613.575 ±   27162.417   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1345.934 ±      61.675  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.030 ±       0.188  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.080 ±       0.505    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1357.751 ±      14.031  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      3599.788 ±     188.677    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.933 ±       5.319  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         2.460 ±      14.047    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5        10.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        35.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    485027.816 ±   45126.239   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                                    128  thrpt    5     18950.849 ±     230.931   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       873.679 ±      10.902  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     72563.550 ±      26.995    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       812.848 ±    1166.240  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     67531.663 ±   97251.121    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        25.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                            128  thrpt    5     10449.985 ±     108.616   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1049.799 ±      10.929  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5    158112.041 ±       0.007    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       949.360 ±    1430.330  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    143086.772 ±  216851.429    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                                  128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                                     128  thrpt    5     11697.842 ±     360.647   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1032.873 ±      32.157  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5    138963.404 ±      34.223    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.742 ±    1428.284  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    146022.435 ±  194773.397    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        17.897 ±     154.097    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        37.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                                    128  thrpt    5    252942.112 ±    9470.249   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1463.125 ±      54.413  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      9104.002 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.016 ±       0.086  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.097 ±       0.541    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1495.167 ±    1167.711  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      9310.994 ±    7482.057    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         4.180 ±      35.988    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        28.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                         128  thrpt    5     10450.840 ±     201.585   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1328.427 ±      25.676  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5    200072.043 ±       0.033    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.008 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.168 ±      10.053    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1356.303 ±      15.687  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    204272.786 ±    2855.424    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±       7.821  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       160.455 ±    1177.758    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        40.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                           128  thrpt    5     27611.630 ±     459.409   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       952.873 ±      16.105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     54312.015 ±       0.002    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       949.118 ±    1430.112  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     54160.827 ±   82388.000    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        15.193 ±      80.111    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         7.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                                    128  thrpt    5     77997.634 ±    1017.593   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1241.695 ±      16.143  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     25056.005 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.028 ±       0.237  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.557 ±       4.800    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1220.904 ±    1169.958  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     24649.808 ±   23779.189    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        18.875 ±     135.486    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         9.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        37.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                                   128  thrpt    5    948411.281 ±   13751.763   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1301.659 ±      18.644  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      2160.000 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.022 ±       0.184  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.036 ±       0.305    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1357.619 ±      13.407  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      2252.894 ±      46.155    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.933 ±       6.690  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.556 ±      11.171    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        31.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1095871.558 ±    5318.330   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                                        128  thrpt    5     63987.019 ±    1229.418   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1379.314 ±      26.506  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     33928.007 ±       0.002    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.012 ±       0.066  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.286 ±       1.616    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1357.492 ±      19.016  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     33391.686 ±     614.401    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.932 ±       8.029  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        23.057 ±     198.526    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        10.000                counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        36.000                    ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                                128  thrpt    5     19523.317 ±    1189.560   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5       706.084 ±      42.722  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     56920.023 ±       0.011    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       678.144 ±       0.407  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     54678.734 ±    3387.648    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        11.035 ±      95.012    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5         5.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        18.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                         128  thrpt    5     16311.488 ±     398.445   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       456.890 ±      10.932  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     44088.362 ±       2.878    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       541.904 ±    1166.490  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     52313.531 ±  112620.007    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        18.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                                        128  thrpt    5     93575.138 ±    3742.490   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       234.950 ±       9.418  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3952.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       271.613 ±    1432.136  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4619.350 ±   24356.761    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         2.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5         7.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                             128  thrpt    5     14771.006 ±     316.075   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5       932.867 ±      19.621  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     99392.029 ±       0.012    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       948.454 ±    1429.078  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    101211.569 ±  154467.092    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        32.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                               128  thrpt    5     58828.386 ±     424.352   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5      1049.220 ±       7.550  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     28072.007 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       949.323 ±    1430.310  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     25411.972 ±   38446.143    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        28.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                                        128  thrpt    5     80831.548 ±    2173.068   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1156.502 ±      30.076  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     22512.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.015 ±       0.126  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.281 ±       2.419    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1219.187 ±    1166.316  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     23737.601 ±   22769.816    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.933 ±       6.689  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        17.992 ±     128.739    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         9.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        39.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    250547.549 ±    3715.134   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       480.091 ±       7.146  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      3016.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       542.186 ±    1167.097  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      3410.294 ±    7341.049    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.841 ±       7.244    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         4.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    292745.492 ±    2912.747   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                            128  thrpt    5     67885.539 ±    1377.362   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5      1218.358 ±      25.127  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     28248.006 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.009 ±       0.075  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.202 ±       1.742    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1220.136 ±    1168.197  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     28312.637 ±   27381.502    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        18.469 ±     159.023    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         9.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        39.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                                                 128  thrpt    5    125615.430 ±    2438.459   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1819.746 ±      34.406  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     22800.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.026 ±       0.195  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.322 ±       2.444    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1769.727 ±    1441.410  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     22173.117 ±   18052.301    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         8.335 ±      71.769    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        13.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                           128  thrpt    5    630482.179 ±   35397.267   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       349.320 ±      19.552  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5       872.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       269.923 ±    1423.228  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       684.645 ±    3609.953    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                          128  thrpt    5    340247.256 ±    4298.531   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       354.521 ±       4.526  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1640.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       406.431 ±    1428.661  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1884.477 ±    6624.205    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        15.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                         128  thrpt    5    773712.964 ±    6104.523   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       267.406 ±       2.085  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       544.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       271.216 ±    1430.044  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       551.586 ±    2908.355    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         2.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         7.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                              128  thrpt    5     74163.757 ±    1674.444   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      3179.331 ±      72.396  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     67472.006 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.007 ±       0.011  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.158 ±       0.242    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      3134.521 ±    1436.774  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     66536.698 ±   31055.888    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        23.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        30.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                                128  thrpt    5    286734.192 ±   10535.884   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5      1494.018 ±      55.131  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      8200.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.034 ±       0.190  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.185 ±       1.032    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.307 ±    1167.897  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      8208.013 ±    6427.908    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±       5.736  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5         3.659 ±      31.504    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        30.000                    ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                          128  thrpt    5   1494187.350 ±   86008.150   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       508.837 ±      29.391  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       404.835 ±    1423.053  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       426.101 ±    1498.102    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         3.000                counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        16.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                         128  thrpt    5   1506824.080 ±   44722.417   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       880.794 ±      26.146  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.411 ±    1428.640  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       992.631 ±    1520.009    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        31.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                                        128  thrpt    5   1605763.288 ±   20287.827   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       546.831 ±       7.105  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       536.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       677.682 ±       1.196  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       664.267 ±       9.372    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.261 ±       1.375    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         5.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        17.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5   1782492.227 ±  245613.480   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                             128  thrpt    5     34151.781 ±    1008.135   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1589.615 ±      47.047  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     73264.012 ±       0.002    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.047 ±       0.247  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         2.151 ±      11.342    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1630.546 ±    1433.258  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     75178.749 ±   66669.960    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        36.787 ±     316.745    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        41.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                                  128  thrpt    5     45958.557 ±     546.069   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       916.375 ±      10.860  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     31384.009 ±       0.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       949.309 ±    1430.178  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     32514.557 ±   49015.188    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                           128  thrpt    5     79613.516 ±    2236.299   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       839.305 ±      23.482  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     16592.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       812.686 ±    1164.331  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     16084.509 ±   23370.769    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         2.650 ±      22.820    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        27.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                          128  thrpt    5    260741.823 ±    4684.918   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       848.169 ±      15.264  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       813.696 ±    1167.544  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4914.909 ±    7104.849    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        20.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                               128  thrpt    5     23686.124 ±     668.190   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1113.060 ±      31.846  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     73960.018 ±       0.003    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1083.613 ±    1427.671  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     72053.693 ±   95469.326    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         1.066 ±       6.437  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        71.139 ±     429.547    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        35.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                                 128  thrpt    5     59679.166 ±     441.720   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       885.388 ±       6.576  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     23352.007 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       813.658 ±    1167.613  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     21470.391 ±   30993.379    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5         6.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                          128  thrpt    5     87943.568 ±    1072.416   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1204.659 ±      14.361  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     21560.009 ±       0.040    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.017 ±       0.150  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.312 ±       2.688    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1220.966 ±    1170.289  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     21862.687 ±   21082.248    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        14.342 ±     123.490    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         9.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        36.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    290993.771 ±    8515.520   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       927.369 ±      27.305  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5016.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       948.533 ±    1429.561  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5134.560 ±    7787.933    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         7.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        25.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    322917.833 ±     386.151   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                              128  thrpt    5     78588.215 ±    1381.583   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1164.917 ±      20.788  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     23328.000 ±       0.082    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1083.969 ±    1428.742  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     21730.628 ±   28898.955    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.800 ±       6.885  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        16.011 ±     137.863    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5         8.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        36.000                    ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                                             128  thrpt    5     23182.624 ±     365.842   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1207.450 ±      19.100  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     81984.020 ±       0.012    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.007 ±       0.064  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.505 ±       4.346    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1221.080 ±    1168.990  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     82942.659 ±   79800.043    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        45.489 ±     391.677    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                                   128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        31.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                                      128  thrpt    5     26464.457 ±     897.980   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1036.513 ±      35.516  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     61648.016 ±       0.004    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1083.778 ±    1428.290  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     64560.521 ±   86179.424    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        36.000                    ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                                     128  thrpt    5    479455.238 ±   10383.013   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1247.861 ±      26.476  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.023 ±       0.196  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.075 ±       0.642    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1222.048 ±    1171.049  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4013.347 ±    3870.221    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.666 ±       5.737  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         2.207 ±      19.006    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5         9.000                counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                                          128  thrpt    5     20342.789 ±    1074.793   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1546.928 ±      81.424  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    119680.022 ±       0.009    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.023 ±       0.200  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.778 ±      15.311    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1494.750 ±    1182.765  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    115531.264 ±   87813.453    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±       7.821  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        82.215 ±     601.391    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        37.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                                            128  thrpt    5     69427.273 ±    1205.394   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1469.417 ±      26.040  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     33312.006 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.022 ±       0.185  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.490 ±       4.185    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1358.692 ±      15.153  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     30802.126 ±     399.989    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        18.225 ±     126.973    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        29.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                                     128  thrpt    5    155482.736 ±    2546.020   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1178.328 ±      19.362  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     11928.003 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.012 ±       0.103  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.122 ±       1.048    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1084.661 ±    1424.320  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     10983.875 ±   14466.521    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.882  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         8.110 ±      69.829    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        33.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1752819.787 ±   49673.275   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1452.135 ±      41.363  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1304.000 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.033 ±       0.283  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.030 ±       0.253    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1494.508 ±    1183.136  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1341.430 ±    1042.807    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.719 ±       4.993    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        11.000                counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        27.000                    ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1966292.523 ±    3347.687   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                                         128  thrpt    5    114771.658 ±    3687.510   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1292.723 ±      41.602  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     17728.004 ±       0.001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.009 ±       0.078  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.123 ±       1.058    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1356.541 ±      15.616  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     18604.045 ±     531.734    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.199 ±       7.566  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        16.577 ±     104.924    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        38.000                    ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                                           128  thrpt    5     33721.588 ±     485.130   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1211.094 ±      17.524  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     56528.012 ±       0.002    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.013 ±       0.109  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.593 ±       5.109    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1220.808 ±    1169.646  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     57019.544 ±   55079.732    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.933 ±       8.029  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        43.560 ±     375.062    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         9.000                counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        34.000                    ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                                          128  thrpt    5    677608.433 ±   18652.978   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5      1322.536 ±      36.509  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      3072.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.019 ±       0.164  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.044 ±       0.381    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1358.210 ±      11.381  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      3154.983 ±      84.253    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.666 ±       5.735  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.546 ±      13.308    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        29.000                    ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                               128  thrpt    5     24276.682 ±    1069.041   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1767.030 ±      77.558  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5    114560.017 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.010 ±       0.087  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.653 ±       5.621    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1768.054 ±    1432.477  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    114723.993 ±   94815.879    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.932 ±       8.029  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        60.236 ±     518.648    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        13.000                counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        33.000                    ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                                          128  thrpt    5    358223.458 ±    2658.552   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       995.849 ±       7.420  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      4376.001 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.750 ±    1428.561  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4764.720 ±    6307.550    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         8.000                counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        36.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2226938.992 ±   97105.359   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5      1301.596 ±      56.650  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.031 ±       0.186  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.022 ±       0.133    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.529 ±      13.303  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       959.653 ±      50.462    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±       5.000  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.757 ±       3.584    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        10.000                counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        30.000                    ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2263888.584 ±   24445.833   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                                              128  thrpt    5    224201.464 ±    9700.380   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1449.444 ±      62.919  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     10176.002 ±       0.001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.021 ±       0.112  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.150 ±       0.782    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1493.846 ±    1166.330  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     10484.230 ±    8064.026    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         1.066 ±       7.822  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         7.463 ±      54.659    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        11.000                counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        36.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                                128  thrpt    5     79472.642 ±    1758.490   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1493.584 ±      33.084  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     29576.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.040 ±       0.344  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.787 ±       6.776    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1494.509 ±    1184.857  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     29582.954 ±   23109.056    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.799 ±       6.883  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        15.958 ±     137.404    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        33.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                         128  thrpt    5     78802.382 ±    1280.385   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       908.343 ±      14.780  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     18144.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       811.891 ±    1163.971  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     16224.382 ±   23382.687    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         2.667 ±      22.966    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         6.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        28.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                                        128  thrpt    5    102271.818 ±    1130.142   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5      1077.086 ±      12.435  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     16576.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1083.871 ±    1428.579  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     16685.294 ±   22044.422    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         8.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        29.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                             128  thrpt    5     43401.816 ±     482.186   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2082.076 ±      22.985  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     75512.010 ±       0.002    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.028 ±       0.136  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.034 ±       4.957    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      2178.461 ±    1177.683  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     79014.686 ±   42986.975    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±       8.029  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        33.966 ±     292.457    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        16.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        30.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                               128  thrpt    5    130451.418 ±    4151.683   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       578.888 ±      18.335  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      6984.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       541.627 ±    1165.894  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      6553.635 ±   14108.055    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        18.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                                        128  thrpt    5    160054.203 ±   10741.812   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       237.546 ±      15.968  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      2336.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       270.682 ±    1427.227  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2669.977 ±   14078.726    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         2.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        10.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    740975.989 ±   38728.394   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       919.063 ±      48.540  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       948.510 ±    1428.721  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2017.497 ±    3074.524    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         7.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        25.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    794148.629 ±   17553.735   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                            128  thrpt    5    201829.739 ±    4068.306   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       657.621 ±      13.284  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      5128.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       676.816 ±       0.507  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      5277.800 ±     106.783    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         5.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        24.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                            128  thrpt    5    126249.345 ±    7252.537   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1554.903 ±      89.384  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     19384.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.030 ±       0.176  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.375 ±       2.197    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1631.353 ±    1433.273  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     20385.730 ±   18916.801    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±       5.560  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         9.928 ±      68.632    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        12.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        34.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                                     128  thrpt    5    164326.625 ±    2144.437   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       877.023 ±      11.270  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      8400.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.344 ±    1428.387  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      9091.773 ±   13802.018    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         1.278 ±      11.002    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        31.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                                    128  thrpt    5    435529.361 ±    2368.017   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       845.579 ±       4.616  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       813.665 ±    1167.580  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      2941.219 ±    4230.478    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        20.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                         128  thrpt    5     64052.770 ±    1323.281   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2704.133 ±      55.988  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     66448.006 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.009 ±       0.064  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.215 ±       1.562    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2725.643 ±       1.036  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     66978.113 ±    1392.248    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        20.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        32.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                           128  thrpt    5    139724.066 ±    1052.090   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       478.615 ±       3.629  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      5392.003 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       542.412 ±    1167.582  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      6115.925 ±   13164.998    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         4.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        17.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                                    128  thrpt    5    288383.042 ±   10489.585   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       284.362 ±      10.393  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       406.406 ±    1428.573  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      2229.179 ±    7836.446    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         3.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        13.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   1537742.526 ±   14475.802   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1141.038 ±      10.930  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1084.183 ±    1428.980  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1109.531 ±    1459.394    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±       5.318  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.955 ±       5.441    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1615969.123 ±    8551.844   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                                        128  thrpt    5    291329.955 ±    5837.885   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       792.243 ±      15.678  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5      4280.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       812.412 ±    1165.156  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4394.116 ±    6393.018    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        29.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                         128  thrpt    5      4558.395 ±      69.688   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5       897.428 ±      13.610  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    309840.091 ±       0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       810.488 ±    1163.469  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    280064.195 ±  406292.259    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        27.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      4769.935 ±      83.904   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       839.515 ±      14.816  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    277032.087 ±       0.012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       809.558 ±    1161.920  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    267272.677 ±  385803.159    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        34.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5     43045.304 ±    1068.302   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       705.588 ±      17.670  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     25800.010 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       810.606 ±    1164.058  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     29678.334 ±   43291.061    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        26.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      3893.012 ±      22.465   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5       991.893 ±       5.561  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    400992.110 ±       0.017    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       944.628 ±    1423.409  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    382047.674 ±  577732.682    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        39.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     14213.904 ±     794.070   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       791.531 ±      43.609  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     87638.266 ±      50.062    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       753.639 ±     672.977  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     83393.585 ±   72916.902    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     16940.602 ±     692.904   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       877.676 ±      36.289  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     81536.049 ±       0.174    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       944.687 ±    1422.965  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     87928.218 ±  134460.754    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±       2.294  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        24.811 ±     213.630    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        39.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    276531.681 ±   10905.110   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       975.400 ±      38.576  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      5552.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       945.847 ±    1423.717  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      5391.034 ±    8202.661    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       1.405  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.523 ±       8.033    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        32.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    311817.296 ±    2560.202   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     14951.705 ±     401.801   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       849.824 ±      22.255  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     89432.470 ±      31.040    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       943.886 ±    1419.060  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     99318.580 ±  149125.854    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.147  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        13.952 ±     120.132    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         7.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        39.000                    ms
[info] BitSetBenchmark.readJsoniterScala                                                                                128  thrpt    5    881104.495 ±    2261.195   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                                 128  thrpt    5        35.828 ±       0.104  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                            128  thrpt    5        64.000 ±       0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                                      128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.readPlayJson                                                                                     128  thrpt    5     68893.162 ±    1573.403   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                      128  thrpt    5      3108.064 ±      71.110  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                 128  thrpt    5     71008.006 ±       0.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.002 ±       0.007  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.036 ±       0.150    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      2998.192 ±    1437.986  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     68486.755 ±   32358.364    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                                           128  thrpt    5        22.000                counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                                            128  thrpt    5        29.000                    ms
[info] BitSetBenchmark.writeJacksonScala                                                                                128  thrpt    5   1071372.533 ±   19665.091   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                                 128  thrpt    5       615.280 ±      11.352  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                            128  thrpt    5       904.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       541.728 ±    1166.112  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5       797.627 ±    1716.958    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.133 ±       1.147  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5         0.196 ±       1.687    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                                      128  thrpt    5         4.000                counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                                       128  thrpt    5        19.000                    ms
[info] BitSetBenchmark.writeJsoniterScala                                                                               128  thrpt    5    689692.480 ±   17064.074   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                128  thrpt    5       185.801 ±       4.640  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                           128  thrpt    5       424.001 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       135.609 ±    1167.635  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5       313.089 ±    2695.795    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                                     128  thrpt    5         1.000                counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                                      128  thrpt    5         4.000                    ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                                       128  thrpt    5   1515617.150 ±   17092.320   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                        128  thrpt    5        15.407 ±       0.178  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                   128  thrpt    5        16.000 ±       0.001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                             128  thrpt    5           ≈ 0                counts
[info] BitSetBenchmark.writePlayJson                                                                                    128  thrpt    5     39550.308 ±     775.428   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                                     128  thrpt    5      1660.147 ±      33.363  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                128  thrpt    5     66064.010 ±       0.002    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         128  thrpt    5         0.013 ±       0.106  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    128  thrpt    5         0.505 ±       4.199    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1767.326 ±    1438.656  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5     70316.746 ±   56974.723    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                        128  thrpt    5         1.066 ±       7.821  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                   128  thrpt    5        42.547 ±     312.053    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                                          128  thrpt    5        13.000                counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                                           128  thrpt    5        42.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                                                 N/A  thrpt    5    656985.891 ±   15659.438   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      2097.255 ±      50.398  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5      5024.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.034 ±       0.198  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.081 ±       0.471    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2043.051 ±      10.616  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      4894.297 ±     112.891    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±       5.737  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         1.600 ±      13.776    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        15.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        24.000                    ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                           N/A  thrpt    5   5152937.508 ±   62008.254   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       314.319 ±       3.585  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5        96.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       405.067 ±    1423.867  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       123.981 ±     435.812    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        16.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                          N/A  thrpt    5    786695.981 ±   22647.260   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       975.634 ±      28.384  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1952.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       947.794 ±    1426.763  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5      1898.615 ±    2886.629    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         0.269 ±       2.320    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         7.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        34.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                         N/A  thrpt    5   7879971.573 ±  149016.327   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       360.489 ±       6.745  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       406.856 ±    1430.158  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5        81.460 ±     286.350    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         0.027 ±       0.229    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         3.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5         9.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                              N/A  thrpt    5    269233.205 ±    6371.190   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1479.181 ±      34.998  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5      8648.002 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.027 ±       0.213  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.159 ±       1.247    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1492.902 ±    1158.213  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      8734.767 ±    6963.833    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         1.066 ±       7.821  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         6.234 ±      45.785    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        11.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        47.000                    ms
[info] GeoJSONBenchmark.readCirce                                                                                       N/A  thrpt    5      3704.328 ±      55.290   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      1687.949 ±      25.113  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5    717152.112 ±       0.015    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.024 ±       0.112  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5        10.238 ±      47.587    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1632.285 ±    1433.240  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5    693653.285 ±  612277.602    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.799 ±       6.882  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5       341.370 ±    2939.302    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        12.000                counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        28.000                    ms
[info] GeoJSONBenchmark.readJacksonScala                                                                                N/A  thrpt    5      4802.411 ±     123.154   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1984.790 ±      51.110  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5    650472.088 ±       0.022    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.020 ±       0.097  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         6.671 ±      31.679    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      2040.979 ±      24.315  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    668900.125 ±    9769.951    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.932 ±       6.687  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       308.613 ±    2217.479    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        15.000                counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        34.000                    ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                               N/A  thrpt    5     42699.116 ±     230.456   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5       710.299 ±       4.071  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5     26184.010 ±       0.002    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       678.713 ±       0.321  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5     25019.683 ±     133.896    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        17.000                    ms
[info] GeoJSONBenchmark.writeCirce                                                                                      N/A  thrpt    5      4078.561 ±      11.216   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5       750.386 ±       1.900  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5    289544.102 ±       0.013    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5       678.010 ±       0.282  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5    261617.271 ±     707.109    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5         5.000                counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        21.000                    ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                               N/A  thrpt    5      4151.709 ±      23.877   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5       508.364 ±       2.906  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5    192741.503 ±       0.806    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       541.007 ±    1164.560  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5    205231.361 ±  441777.880    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5        50.473 ±     434.588    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5         4.000                counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        22.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5      6466.125 ±     140.211   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       172.941 ±       3.726  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5     42096.066 ±       0.010    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       135.464 ±    1166.388  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5     33000.210 ±  284141.762    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5         4.000                    ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5      6551.924 ±     257.501   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5       127.372 ±       5.005  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5     30592.069 ±       0.050    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       136.433 ±    1174.730  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     33377.116 ±  287387.035    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5         1.000                counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                             N/A  thrpt    5         4.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                                 N/A  thrpt    5      7377.342 ±     288.330   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      1718.020 ±      67.330  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5    366550.359 ±      40.098    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.046 ±       0.161  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         9.699 ±      34.181    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1768.170 ±    1436.754  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    377632.895 ±  314246.387    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       141.508 ±    1218.429    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        13.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        32.000                    ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                           N/A  thrpt    5     11147.803 ±     223.102   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       256.977 ±       5.116  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5     36280.037 ±       0.005    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       269.910 ±    1423.157  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     38295.378 ±  201922.151    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         2.000                counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                          N/A  thrpt    5     12997.879 ±     111.684   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       453.522 ±       3.672  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5     54920.033 ±       0.013    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       406.017 ±    1427.206  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     49232.098 ±  173058.173    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        16.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                         N/A  thrpt    5     24126.685 ±     214.054   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       452.145 ±       3.875  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     29496.017 ±       0.003    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       406.870 ±    1430.204  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     26585.456 ±   93451.625    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                              N/A  thrpt    5      2158.635 ±      22.032   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1345.358 ±      13.803  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5    980912.192 ±       0.026    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.022 ±       0.191  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5        16.111 ±     138.724    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1355.977 ±      15.760  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5    988654.125 ±    3234.538    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.932 ±       8.029  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5       679.633 ±    5851.842    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        10.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        43.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                                N/A  thrpt    5      7337.889 ±     468.542   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5      1447.944 ±      92.018  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5    310582.035 ±      40.013    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.046 ±       0.365  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         9.699 ±      77.609    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1489.560 ±    1122.666  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    320365.040 ±  265362.447    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.799 ±       5.560  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       170.013 ±    1179.869    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5        11.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        43.000                    ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                          N/A  thrpt    5     52483.639 ±     873.137   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           N/A  thrpt    5       490.547 ±       8.153  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      N/A  thrpt    5     14712.008 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       404.819 ±    1422.996  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     12151.366 ±   42713.970    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                                N/A  thrpt    5         3.000                counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                                 N/A  thrpt    5        15.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                         N/A  thrpt    5     37473.066 ±     383.095   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5       557.829 ±       5.743  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     23431.840 ±       0.160    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       541.352 ±    1165.301  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     22766.097 ±   49005.799    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        21.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5     73060.296 ±    7123.135   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       549.245 ±      53.397  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5     11832.006 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       541.969 ±    1166.630  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5     11740.652 ±   25306.102    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         4.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        14.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5     96624.166 ±     457.863   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.004 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                             N/A  thrpt    5      4915.981 ±      74.199   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                              N/A  thrpt    5      1488.137 ±      22.605  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         N/A  thrpt    5    476471.920 ±       1.532    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.044 ±       0.368  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5        13.917 ±     117.262    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1493.228 ±    1164.552  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5    478351.226 ±  380281.253    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.932 ±       8.029  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5       300.267 ±    2585.391    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                                   N/A  thrpt    5        11.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                                    N/A  thrpt    5        39.000                    ms
[info] IntBenchmark.readCirce                                                                                           N/A  thrpt    5   4871465.779 ±   93382.400   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      3020.778 ±      58.818  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5       976.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.001 ±       0.004  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5        ≈ 10⁻³                  B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      3134.419 ±    1436.028  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5      1012.839 ±     468.299    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        23.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        35.000                    ms
[info] IntBenchmark.readDslJsonJava                                                                                     N/A  thrpt    5  38058625.070 ±  409348.541   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                                      N/A  thrpt    5       386.910 ±       4.251  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        16.000 ±       0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5       404.853 ±    1423.116  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        16.776 ±      58.971    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                           N/A  thrpt    5         3.000                counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                            N/A  thrpt    5        16.000                    ms
[info] IntBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   7383790.757 ±  272010.454   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      2777.540 ±     103.649  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.010 ±       0.076  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.002 ±       0.017    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      2861.468 ±    1169.037  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5       609.823 ±     244.354    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5        21.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5  35648772.518 ±  363791.067   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.readNaiveScala                                                                                      N/A  thrpt    5  27856071.562 ± 1541547.106   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                                       N/A  thrpt    5       991.009 ±      54.974  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                                  N/A  thrpt    5        56.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5       949.224 ±    1429.861  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5        53.774 ±      82.625    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                            N/A  thrpt    5         7.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                             N/A  thrpt    5        29.000                    ms
[info] IntBenchmark.readPlayJson                                                                                        N/A  thrpt    5   6065423.030 ±   40217.286   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      2928.841 ±      19.592  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.001 ±       0.004  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5        ≈ 10⁻⁴                  B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      2861.978 ±    1174.750  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5       742.647 ±     304.597    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        21.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        25.000                    ms
[info] IntBenchmark.writeCirce                                                                                          N/A  thrpt    5  21910910.192 ±  499168.881   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      2004.646 ±      45.886  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5       144.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.021 ±       0.182  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.002 ±       0.013    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      1906.084 ±    1169.305  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5       136.941 ±      84.465    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         0.048 ±       0.416    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        14.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        26.000                    ms
[info] IntBenchmark.writeDslJsonJava                                                                                    N/A  thrpt    5  54229157.229 ± 3428695.781   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                     N/A  thrpt    5      1654.115 ±     105.142  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                                N/A  thrpt    5        48.000 ±       0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.105 ±       0.782  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.003 ±       0.023    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1627.193 ±    1416.519  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5        47.311 ±      43.075    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.333 ±      11.475  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.039 ±       0.335    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                          N/A  thrpt    5        12.000                counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                           N/A  thrpt    5        42.000                    ms
[info] IntBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5  11536444.405 ±  416151.649   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5      2286.707 ±      82.577  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       312.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.024 ±       0.143  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.003 ±       0.020    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      2315.916 ±    1440.047  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       315.985 ±     196.151    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.799 ±       6.882  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         0.110 ±       0.949    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5        17.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        32.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5  44825026.656 ± 1150340.000   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       911.290 ±      23.135  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       812.855 ±    1166.397  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        28.541 ±      40.892    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5         6.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        20.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5  50844022.146 ±   84219.238   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                                                     N/A  thrpt    5  40680498.055 ±  402869.317   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                                      N/A  thrpt    5      2067.525 ±      20.900  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        80.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.023 ±       0.192  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5         0.001 ±       0.007    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      2043.423 ±       6.003  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        79.068 ±       0.572    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space                                                         N/A  thrpt    5         0.666 ±       5.734  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Survivor_Space.norm                                                    N/A  thrpt    5         0.026 ±       0.223    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                           N/A  thrpt    5        15.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                            N/A  thrpt    5        20.000                    ms
[info] IntBenchmark.writePlayJson                                                                                       N/A  thrpt    5   2200141.963 ±   54136.516   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5      1767.092 ±      44.085  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      1264.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.039 ±       0.233  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.028 ±       0.166    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1767.871 ±    1423.129  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      1265.498 ±    1037.350    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.799 ±       6.882  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         0.574 ±       4.938    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5        13.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        30.000                    ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5    145073.147 ±    2133.377   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5      2661.012 ±      38.902  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5     28872.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.003 ±       0.015  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.030 ±       0.166    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      2725.464 ±       0.362  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     29571.653 ±     435.595    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        20.000                counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        29.000                    ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     21056.911 ±    1157.219   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1664.819 ±      92.256  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    124424.021 ±       0.010    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.016 ±       0.085  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.209 ±       6.359    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1630.908 ±    1429.280  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5    122137.085 ±  112169.549    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.933 ±       8.030  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        69.419 ±     597.720    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        12.000                counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        35.000                    ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    129776.525 ±    8066.258   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1441.862 ±      90.051  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     17488.003 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.017 ±       0.144  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.200 ±       1.721    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1493.860 ±    1185.290  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     18094.260 ±   13567.480    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.066 ±       7.821  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        12.938 ±      94.753    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5        11.000                counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        36.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5    496244.618 ±    8950.370   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5      1026.717 ±      19.075  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      3256.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.638 ±    1426.775  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      3435.807 ±    4515.663    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±       1.145  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.420 ±       3.617    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         8.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    535987.887 ±   17143.156   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5       523.056 ±      16.703  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5      1536.001 ±       0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        128  thrpt    5       542.065 ±    1166.836  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      1596.480 ±    3436.788    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.133 ±       1.147  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         0.395 ±       3.401    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5         4.000                counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    128  thrpt    5        14.000                    ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5     44803.486 ±    1569.087   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       765.399 ±      26.932  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     26888.009 ±       0.002    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       676.883 ±       1.277  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     23780.081 ±     828.576    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±       1.147  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         4.660 ±      40.128    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         5.000                counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        24.000                    ms
[info] ListOfBooleansBenchmark.readCirce                                                                                128  thrpt    5    364917.047 ±    4614.283   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      2476.403 ±      32.642  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     10680.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.013 ±       0.115  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.058 ±       0.492    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2453.325 ±    1437.905  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     10581.129 ±    6219.761    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        18.000                counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        35.000                    ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                         128  thrpt    5    398902.585 ±    5296.811   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5      1056.286 ±      14.215  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      4168.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1083.239 ±    1426.510  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      4277.773 ±    5670.629    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.400 ±       1.405  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.580 ±       5.555    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         8.000                counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        36.000                    ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                                        128  thrpt    5    427449.946 ±    4405.331   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       842.998 ±       8.781  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3104.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       813.711 ±    1167.669  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2998.371 ±    4341.949    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        20.000                    ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                             128  thrpt    5     99004.472 ±    4465.614   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      3454.253 ±     155.761  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     54920.004 ±       0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.001 ±       0.004  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.017 ±       0.068    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      3406.763 ±       0.720  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     54170.918 ±    2455.397    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        25.000                counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        38.000                    ms
[info] ListOfBooleansBenchmark.writeCirce                                                                               128  thrpt    5    331047.739 ±    2798.889   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       506.450 ±       4.352  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      2408.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       542.431 ±    1167.624  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      2581.446 ±    5556.766    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        15.000                    ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                                        128  thrpt    5    629116.443 ±    8271.885   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       460.454 ±       6.046  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1152.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       406.047 ±    1427.311  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1016.916 ±    3574.619    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         3.000                counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        14.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                                       128  thrpt    5   2436876.942 ±   19268.625   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1127.193 ±       8.919  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       728.000 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1084.217 ±    1429.917  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       700.293 ±     924.105    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.066 ±       6.438  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.690 ±       4.171    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         8.000                counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        28.000                    ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5   2462634.834 ±   31058.224   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                            128  thrpt    5    406168.140 ±    1951.500   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       584.190 ±       2.754  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      2264.001 ±       0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       541.874 ±    1166.425  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2100.873 ±    4522.295    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         4.000                counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        17.000                    ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                                           128  thrpt    5     39697.398 ±     475.871   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1337.728 ±      16.313  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     53040.010 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.027 ±       0.143  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.069 ±       5.642    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1358.169 ±      11.664  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     53850.647 ±     387.824    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±       5.735  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        26.450 ±     227.741    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        29.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                                    128  thrpt    5     65417.350 ±    2023.412   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1178.341 ±      36.796  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     28352.006 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1219.701 ±    1168.854  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     29355.375 ±   28229.518    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.199 ±       6.123  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        28.869 ±     147.800    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5         9.000                counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        44.000                    ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                                   128  thrpt    5     76073.646 ±     654.789   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1166.640 ±       9.906  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     24136.005 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1085.012 ±    1430.307  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     22460.594 ±   29754.122    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.666 ±       5.736  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        13.747 ±     118.367    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        28.000                    ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                                        128  thrpt    5     19623.152 ±     339.228   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      1415.651 ±      24.895  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    113536.022 ±       0.009    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.016 ±       0.114  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.242 ±       9.105    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1357.631 ±      19.174  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    108883.136 ±     605.579    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.066 ±       7.822  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        85.675 ±     628.628    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        37.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                                   128  thrpt    5    149317.599 ±    1574.855   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1375.316 ±      14.699  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     14496.003 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.008 ±       0.045  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.085 ±       0.470    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1357.343 ±      17.936  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     14306.610 ±     181.247    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.066 ±       6.440  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        11.232 ±      67.802    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5        10.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        36.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                                  128  thrpt    5    530331.403 ±    8128.994   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       584.925 ±       8.926  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      1736.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       542.057 ±    1166.819  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1609.466 ±    3464.624    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.266 ±       1.405  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.791 ±       4.171    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         4.000                counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        15.000                    ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5    503222.654 ±    1768.617   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         5.116 ±       0.017  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.001 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                                       128  thrpt    5     57472.835 ±     740.391   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5      1032.058 ±      13.332  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     28264.007 ±       0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1083.164 ±    1427.599  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     29688.492 ±   39399.976    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±       1.405  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         7.296 ±      38.469    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5         8.000                counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        39.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                                               N/A  thrpt    5   2012083.046 ±  120363.019   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                                N/A  thrpt    5      2843.191 ±     170.117  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                           N/A  thrpt    5      2224.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.001 ±       0.004  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.001 ±       0.003    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      2862.076 ±    1173.662  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5      2241.820 ±    1055.003    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                                     N/A  thrpt    5        21.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                                      N/A  thrpt    5        33.000                    ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                         N/A  thrpt    5    865438.478 ±   30958.900   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                          N/A  thrpt    5       549.883 ±      19.747  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     N/A  thrpt    5      1000.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       539.831 ±    1162.027  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       984.577 ±    2119.624    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                               N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                                N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                                        N/A  thrpt    5    291457.830 ±    8757.882   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                         N/A  thrpt    5       560.052 ±      16.669  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5      3024.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       541.621 ±    1165.881  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      2934.303 ±    6316.350    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         0.723 ±       6.229    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                              N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                               N/A  thrpt    5        19.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                                       N/A  thrpt    5    759509.716 ±   23307.201   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                                        N/A  thrpt    5       571.384 ±      17.522  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1184.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       542.478 ±    1167.725  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5      1122.097 ±    2415.674    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                             N/A  thrpt    5         4.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                              N/A  thrpt    5        13.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                                   N/A  thrpt    5   4288855.428 ±  344311.841   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                                    N/A  thrpt    5      1373.319 ±     110.222  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                               N/A  thrpt    5       504.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'                        N/A  thrpt    5         0.029 ±       0.230  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   N/A  thrpt    5         0.011 ±       0.086    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5      1358.935 ±      13.748  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       498.918 ±      45.331    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.799 ±       5.560  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.290 ±       2.016    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                         N/A  thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                          N/A  thrpt    5        24.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                             N/A  thrpt    5   7732069.267 ±  299165.135   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                              N/A  thrpt    5       628.837 ±      24.131  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                         N/A  thrpt    5       128.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       678.119 ±       0.261  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5       138.042 ±       5.334    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                                   N/A  thrpt    5         5.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                                    N/A  thrpt    5        16.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                            N/A  thrpt    5    190440.646 ±    5325.315   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                             N/A  thrpt    5      1297.038 ±      36.805  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        N/A  thrpt    5     10720.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 N/A  thrpt    5         0.005 ±       0.042  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            N/A  thrpt    5         0.040 ±       0.348    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5      1355.599 ±      16.528  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     11204.411 ±     289.937    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         1.199 ±       7.565  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         9.909 ±      62.548    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                                  N/A  thrpt    5        10.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                                   N/A  thrpt    5        42.000                    ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                                         128  thrpt    5    911188.140 ±    3640.953   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5        50.943 ±       0.210  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5        88.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.readPlayJson                                                                              128  thrpt    5     60547.940 ±     403.857   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      2812.648 ±      18.717  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     73120.007 ±       0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.004 ±       0.009  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.102 ±       0.229    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2725.472 ±       0.183  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     70853.875 ±     469.427    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        20.000                counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        29.000                    ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                                         128  thrpt    5   1053305.310 ±   10353.054   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       588.965 ±       5.813  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       880.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       541.840 ±    1166.353  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       810.373 ±    1744.396    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.200 ±       1.718    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         4.000                counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        18.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                                        128  thrpt    5    719892.591 ±   10538.236   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       201.260 ±       2.989  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       440.001 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       135.623 ±    1167.757  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       298.263 ±    2568.138    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         1.000                counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5         3.000                    ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    907322.629 ±   37012.773   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5         9.223 ±       0.377  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        16.000 ±       0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                counts
[info] MutableBitSetBenchmark.writePlayJson                                                                             128  thrpt    5     40662.599 ±     597.707   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1713.697 ±      25.313  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     66336.011 ±       0.002    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.014 ±       0.081  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.536 ±       3.133    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1631.674 ±    1433.316  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     63175.836 ±   55814.362    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         1.066 ±       7.821  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        41.402 ±     303.834    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        30.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                              128  thrpt    5    239559.958 ±    2493.074   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       937.508 ±       9.967  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      6160.002 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       949.264 ±    1429.903  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      6241.353 ±    9452.710    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5         7.000                counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        24.000                    ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                                   128  thrpt    5     17626.975 ±     647.937   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5       976.572 ±      35.654  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     87200.025 ±       0.013    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5       947.550 ±    1427.673  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     84769.551 ±  129689.053    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.266 ±       1.405  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        23.764 ±     125.304    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5         7.000                counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        35.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                              128  thrpt    5     98929.751 ±    4963.324   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1388.229 ±      69.411  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     22088.004 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.016 ±       0.093  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.252 ±       1.463    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1357.359 ±      18.420  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     21599.321 ±     951.706    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         1.199 ±       7.565  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        19.039 ±     119.558    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        35.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                             128  thrpt    5    345183.844 ±    8375.930   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1644.035 ±      40.720  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      7496.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  128  thrpt    5         0.017 ±       0.149  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             128  thrpt    5         0.079 ±       0.677    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1631.701 ±    1430.458  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      7438.499 ±    6489.169    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.933 ±       6.691  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         4.230 ±      30.314    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5        12.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        27.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    395541.682 ±   48133.482   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5      1354.971 ±     164.830  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5      5392.001 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.033 ±       0.195  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.127 ±       0.763    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                128  thrpt    5      1357.407 ±      13.091  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5      5406.063 ±     667.244    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                         128  thrpt    5         1.066 ±       6.437  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5         4.222 ±      25.213    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5        10.000                counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                            128  thrpt    5        29.000                    ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                                  128  thrpt    5     52403.468 ±     590.850   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1181.483 ±      13.270  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     35488.008 ±       0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1219.250 ±    1167.942  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     36629.814 ±   35176.062    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.199 ±       7.565  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        35.999 ±     227.276    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5         9.000                counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        41.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                                    128  thrpt    5     59371.508 ±    1520.263   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1335.395 ±      33.747  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     35400.007 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.028 ±       0.182  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.747 ±       4.863    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1358.207 ±      11.846  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     36006.255 ±    1139.360    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±       5.736  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        17.849 ±     153.685    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                          128  thrpt    5        10.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                           128  thrpt    5        38.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                             128  thrpt    5     95452.729 ±     307.778   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       648.132 ±       2.111  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     10688.004 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       676.968 ±       1.354  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     11163.527 ±      26.599    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.266 ±       1.405  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         4.394 ±      23.166    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         5.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        24.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                                            128  thrpt    5    196521.717 ±    1315.408   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       809.011 ±       5.519  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      6480.002 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       813.615 ±    1167.507  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      6520.151 ±    9414.606    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         6.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        21.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                                 128  thrpt    5     21558.804 ±     585.911   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      1210.107 ±      32.858  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     88352.020 ±       0.011    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1219.216 ±    1157.723  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     89110.789 ±   85729.412    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.066 ±       7.822  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        77.762 ±     570.751    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        42.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                                            128  thrpt    5    124546.792 ±    1240.387   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1253.480 ±      12.940  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     15840.003 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 128  thrpt    5         0.025 ±       0.218  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            128  thrpt    5         0.319 ±       2.749    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5      1220.084 ±    1169.334  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5     15425.351 ±   14870.350    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.932 ±       8.029  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5        11.817 ±     101.751    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        38.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                                           128  thrpt    5    531779.435 ±    6966.489   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       591.916 ±       7.890  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1752.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       542.055 ±    1166.816  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      1603.188 ±    3451.056    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5         0.395 ±       3.402    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         4.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        14.000                    ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5    565273.147 ±    3189.486   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        11.492 ±       0.062  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        32.001 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                                128  thrpt    5     61587.395 ±    1525.085   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1217.515 ±      29.284  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     31112.007 ±       0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.030 ±       0.260  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.778 ±       6.698    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1220.105 ±    1168.358  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     31213.192 ±   30299.838    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.066 ±       7.822  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        27.302 ±     200.358    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5         9.000                counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        37.000                    ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                              128  thrpt    5     78206.062 ±    2151.766   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1367.848 ±      37.738  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     27528.005 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.030 ±       0.161  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.608 ±       3.241    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1358.206 ±      11.505  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     27335.139 ±     825.594    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.735  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        13.576 ±     116.890    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        10.000                counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        31.000                    ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                                       128  thrpt    5    157230.197 ±    5170.302   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       668.849 ±      21.958  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      6696.003 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       677.084 ±       1.353  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      6778.831 ±     217.320    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         5.000                counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        23.000                    ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                                      128  thrpt    5    211371.708 ±   12652.831   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       753.058 ±      45.162  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      5608.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       813.620 ±    1167.550  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      6057.287 ±    8645.468    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        20.000                    ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                                           128  thrpt    5     41866.961 ±     830.011   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1735.628 ±      34.682  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     65248.010 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.013 ±       0.066  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.497 ±       2.462    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1768.449 ±    1432.352  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     66508.656 ±   54395.098    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.800 ±       6.884  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        30.053 ±     258.766    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        13.000                counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        30.000                    ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                             128  thrpt    5    180238.024 ±    5429.374   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       848.335 ±      25.667  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      7408.002 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       813.740 ±    1167.459  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      7095.381 ±    9985.382    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         6.000                counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        22.000                    ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                                      128  thrpt    5    509949.550 ±    3847.898   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       409.498 ±       3.095  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1264.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       406.286 ±    1428.152  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1255.625 ±    4413.705    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.411 ±       3.541    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        15.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    608548.835 ±   16279.341   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       321.667 ±       8.653  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       832.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       271.211 ±    1430.016  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       704.996 ±    3717.301    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         2.000                counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5         6.000                    ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    642927.427 ±    3655.535   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±       0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                                          128  thrpt    5     30381.172 ±    1149.105   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1519.198 ±      57.540  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     78704.014 ±       0.002    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.046 ±       0.243  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         2.347 ±      12.531    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1494.309 ±    1158.148  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     77493.404 ±   62245.229    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±       6.882  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        41.235 ±     355.047    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        11.000                counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        35.000                    ms
[info] PrimitivesBenchmark.readCirce                                                                                    N/A  thrpt    5    632592.207 ±    8259.324   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1929.328 ±      25.756  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4800.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.034 ±       0.277  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.084 ±       0.689    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1905.534 ±    1168.409  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4742.030 ±    2935.304    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±       5.735  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.660 ±      14.293    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        14.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        27.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                                             N/A  thrpt    5   1353247.946 ±   18747.885   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5      1024.946 ±      13.969  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       948.106 ±    1428.200  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      1103.812 ±    1677.384    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         0.155 ±       1.339    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5         7.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5        35.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                            N/A  thrpt    5   7032129.170 ±  501682.645   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       214.473 ±      15.226  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       271.401 ±    1431.019  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        61.814 ±     325.981    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                                                 N/A  thrpt    5    209601.528 ±    7562.265   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1467.992 ±      52.818  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5     11024.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.020 ±       0.133  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.147 ±       0.992    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1492.704 ±    1158.474  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5     11216.866 ±    8906.413    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.066 ±       7.820  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         8.025 ±      58.820    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5        11.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        40.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                                                   N/A  thrpt    5    839998.667 ±   26520.733   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                                    N/A  thrpt    5      1289.387 ±      40.775  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2416.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5        ≈ 10⁻³                MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.001 ±       0.006    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1221.209 ±    1169.309  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2290.677 ±    2221.693    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.666 ±       5.736  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.250 ±      10.760    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                         N/A  thrpt    5         9.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                          N/A  thrpt    5        33.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                            N/A  thrpt    5   2136634.371 ±  106728.641   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       879.645 ±      43.986  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       947.418 ±    1427.067  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5       699.427 ±    1071.844    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5         7.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        33.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5   5599347.577 ±   73452.657   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       626.175 ±       8.305  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       541.998 ±    1166.693  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       152.522 ±     328.319    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         4.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        14.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5   5654477.181 ±   57003.166   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5       344.910 ±       3.539  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       271.103 ±    1429.446  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5        75.633 ±     398.793    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.133 ±       1.147  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.037 ±       0.319    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5         2.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                          N/A  thrpt    5         6.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                                                N/A  thrpt    5    304122.263 ±   11872.157   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                                 N/A  thrpt    5      1604.418 ±      62.809  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            N/A  thrpt    5      8304.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.042 ±       0.265  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.218 ±       1.365    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1629.949 ±    1433.753  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      8444.364 ±    7600.162    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.066 ±       7.821  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         5.522 ±      40.422    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                                      N/A  thrpt    5        12.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                                       N/A  thrpt    5        38.000                    ms
[info] SetOfIntsBenchmark.readCirce                                                                                     128  thrpt    5     55674.797 ±     737.452   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                      128  thrpt    5      1591.411 ±      21.065  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                                 128  thrpt    5     44992.007 ±       0.001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.032 ±       0.233  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.905 ±       6.610    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      1495.692 ±    1173.550  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     42302.542 ±   33672.296    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                         128  thrpt    5         0.666 ±       5.735  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                    128  thrpt    5        18.912 ±     162.835    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                                           128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                                            128  thrpt    5        26.000                    ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                              128  thrpt    5     79673.268 ±    1062.768   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                               128  thrpt    5      1227.069 ±      16.383  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          128  thrpt    5     24240.005 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.031 ±       0.267  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.611 ±       5.261    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1220.823 ±    1169.672  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     24128.635 ±   23258.492    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.932 ±       8.029  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        18.501 ±     159.300    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                                    128  thrpt    5         9.000                counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                                     128  thrpt    5        37.000                    ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                             128  thrpt    5    110343.737 ±    2592.250   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                              128  thrpt    5      1620.912 ±      37.951  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         128  thrpt    5     23120.004 ±       0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.016 ±       0.101  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.226 ±       1.434    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1632.098 ±    1430.887  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     23288.038 ±   20598.589    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±       5.736  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         9.529 ±      82.052    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                                   128  thrpt    5        12.000                counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                                    128  thrpt    5        30.000                    ms
[info] SetOfIntsBenchmark.readPlayJson                                                                                  128  thrpt    5     42004.047 ±     884.998   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                   128  thrpt    5      2208.599 ±      45.825  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              128  thrpt    5     82760.010 ±       0.002    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.016 ±       0.079  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.615 ±       2.950    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2179.711 ±    1174.579  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     81672.257 ±   43748.893    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.799 ±       6.882  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        29.925 ±     257.664    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                                        128  thrpt    5        16.000                counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                                         128  thrpt    5        24.000                    ms
[info] SetOfIntsBenchmark.writeCirce                                                                                    128  thrpt    5    240218.403 ±    4691.337   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                     128  thrpt    5      1142.867 ±      22.705  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                128  thrpt    5      7488.002 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1084.963 ±    1430.163  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5      7112.679 ±    9419.159    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                        128  thrpt    5         0.666 ±       5.736  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                   128  thrpt    5         4.370 ±      37.629    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                                          128  thrpt    5         8.000                counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                                           128  thrpt    5        31.000                    ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                             128  thrpt    5    479369.597 ±    9565.497   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       421.497 ±       8.410  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      1384.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       406.047 ±    1427.311  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1337.665 ±    4702.135    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                                   128  thrpt    5         3.000                counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                                    128  thrpt    5        14.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                                            128  thrpt    5    544533.523 ±    3465.526   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       293.351 ±       1.850  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5       848.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       270.956 ±    1428.671  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       784.262 ±    4135.186    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                  128  thrpt    5         2.000                counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                   128  thrpt    5         7.000                    ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                    128  thrpt    5    807825.721 ±    8923.150   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     128  thrpt    5         8.212 ±       0.093  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                128  thrpt    5        16.001 ±       0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          128  thrpt    5           ≈ 0                counts
[info] SetOfIntsBenchmark.writePlayJson                                                                                 128  thrpt    5     30602.733 ±     613.388   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                  128  thrpt    5      1524.584 ±      30.453  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     78416.014 ±       0.002    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.040 ±       0.223  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         2.065 ±      11.417    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1494.220 ±    1166.774  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     76888.441 ±   61015.397    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.799 ±       6.882  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        41.308 ±     355.677    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                                       128  thrpt    5        11.000                counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                                        128  thrpt    5        33.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                            128  thrpt    5   4982861.771 ±  247043.604   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      3672.189 ±     181.850  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.002 ±       0.002  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.001 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3679.596 ±    1437.577  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      1163.403 ±     500.718    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        27.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        47.000                    ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                                      128  thrpt    5   7842788.521 ±   66354.293   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                       128  thrpt    5       837.149 ±       7.113  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       809.711 ±    1161.700  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       162.576 ±     234.715    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                            128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                             128  thrpt    5        34.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                                     128  thrpt    5   3736289.679 ±   47312.398   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      2107.983 ±      27.442  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5       888.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.033 ±       0.211  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.014 ±       0.089    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      2179.596 ±    1175.238  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       918.483 ±     507.667    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.932 ±       8.029  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.393 ±       3.385    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        16.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        30.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                                    128  thrpt    5   7641192.546 ±  102783.741   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       815.512 ±      10.953  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       812.952 ±    1166.313  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       167.444 ±     239.695    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.266 ±       1.405  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.055 ±       0.289    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        21.000                    ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                         128  thrpt    5   4729523.128 ±  133405.656   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2548.176 ±      72.444  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5       848.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.002 ±       0.009  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.001 ±       0.003    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2589.424 ±    1173.550  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       862.013 ±     399.806    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        19.000                counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        23.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                           128  thrpt    5   3365342.793 ±   56766.043   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       803.911 ±      13.503  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5       376.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       812.872 ±    1166.556  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       380.275 ±     547.158    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5         6.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        24.000                    ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                                     128  thrpt    5   7325858.545 ±   25895.432   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      128  thrpt    5       707.470 ±       2.443  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                128  thrpt    5       674.780 ±       0.208  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       144.977 ±       0.519    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                           128  thrpt    5         5.000                counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                            128  thrpt    5        28.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                                    128  thrpt    5   3308615.967 ±   64960.935   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1025.758 ±      20.232  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5       488.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       947.528 ±    1426.827  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5       451.453 ±     688.136    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        32.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   9903110.866 ±  306199.816   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       956.381 ±      29.179  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1084.352 ±    1430.345  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       172.659 ±     231.196    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.266 ±       1.405  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.042 ±       0.223    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5         8.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        29.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   7845053.740 ±   68744.697   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                                        128  thrpt    5   3134065.706 ±  110756.923   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1003.531 ±      35.174  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       947.444 ±    1427.613  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       476.845 ±     730.890    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5         7.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        31.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                         128  thrpt    5    825020.050 ±   21821.620   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1446.721 ±      38.314  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      2760.001 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.029 ±       0.234  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.054 ±       0.444    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1358.861 ±      13.895  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      2592.453 ±      50.937    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±       5.735  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.270 ±      10.931    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                               128  thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                                128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                                   128  thrpt    5   2183384.398 ±  117482.411   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    128  thrpt    5       610.410 ±      32.718  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              128  thrpt    5       674.668 ±       1.375  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5       486.397 ±      26.925    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         0.095 ±       0.821    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                         128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                          128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                                  128  thrpt    5   1051899.467 ±   44624.545   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       727.117 ±      31.016  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      1088.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       812.755 ±    1166.568  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1216.629 ±    1753.353    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±       1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.198 ±       1.704    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                                 128  thrpt    5   2548461.182 ±   16945.090   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       712.416 ±       4.782  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       678.078 ±       0.189  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       418.793 ±       2.815    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        16.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                                      128  thrpt    5   1140957.108 ±    9963.745   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5       811.807 ±       7.153  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5      1120.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       812.821 ±    1166.504  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1122.016 ±    1621.229    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5         6.000                counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        25.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                                        128  thrpt    5   1747786.275 ±   22210.769   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5      1465.818 ±      18.650  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      1320.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.032 ±       0.262  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.029 ±       0.235    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1494.472 ±    1161.746  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1346.428 ±    1064.784    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±       5.735  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.600 ±       5.163    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        11.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        33.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                                  128  thrpt    5   2612749.431 ±   21070.557   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   128  thrpt    5       677.368 ±       5.973  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             128  thrpt    5       674.833 ±       0.513  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5       406.475 ±       3.292    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                        128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                         128  thrpt    5        26.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                                 128  thrpt    5   2419658.649 ±  120097.336   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5      1143.684 ±      56.992  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       744.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.005 ±       0.042  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.003 ±       0.027    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1220.045 ±    1168.006  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5       794.888 ±     775.047    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.799 ±       6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.517 ±       4.452    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         9.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        38.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                                128  thrpt    5   2922591.129 ±   17093.913   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       757.585 ±       4.518  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       408.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       677.536 ±       1.069  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       364.890 ±       2.087    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.266 ±       1.405  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.143 ±       0.756    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         5.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        17.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2995404.674 ±   25884.505   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                                     128  thrpt    5   2385139.257 ±   39647.480   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1151.654 ±      19.608  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5       760.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.789 ±    1428.303  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       715.946 ±     951.484    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±       6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.528 ±       4.543    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         8.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        33.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                                                    N/A  thrpt    5     10918.934 ±     297.840   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1589.185 ±      43.805  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5    229067.804 ±      69.411    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.025 ±       0.189  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         3.601 ±      27.070    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1630.612 ±    1436.520  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5    235171.898 ±  209977.172    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.799 ±       5.560  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5       114.922 ±     798.473    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        12.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        36.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                             N/A  thrpt    5     14411.895 ±     638.896   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5       198.608 ±       8.686  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5     21690.754 ±      27.854    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       135.322 ±    1165.161  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5     15015.549 ±  129288.407    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5         1.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5         5.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                            N/A  thrpt    5     37137.201 ±     445.903   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       343.901 ±       4.116  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     14576.011 ±       0.002    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       271.227 ±    1430.099  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     11530.682 ±   60798.079    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         2.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                                                 N/A  thrpt    5      2933.513 ±      62.437   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5       957.872 ±      20.318  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5    513688.141 ±       0.017    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5       947.552 ±    1426.981  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    509004.860 ±  777081.680    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5         7.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        49.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                            N/A  thrpt    5     55654.408 ±    1797.242   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       710.803 ±      22.473  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     20100.001 ±       0.147    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       676.149 ±       0.586  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     19121.107 ±     621.122    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5         5.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        26.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5     82190.961 ±    1789.091   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       531.045 ±      11.271  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5     10168.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       541.909 ±    1166.499  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     10374.689 ±   22333.969    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        15.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5     90593.766 ±    3798.121   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5        12.894 ±       0.542  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5       224.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.readCirce                                                                              128  thrpt    5    340456.511 ±    4872.237   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1823.876 ±      25.568  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      8432.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.018 ±       0.113  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.081 ±       0.524    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1905.300 ±    1167.824  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      8810.723 ±    5451.854    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±       5.735  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         3.086 ±      26.570    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        14.000                counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        27.000                    ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                                       128  thrpt    5    403004.274 ±    6821.084   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       491.582 ±       8.319  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1920.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       406.299 ±    1428.197  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1590.269 ±    5590.092    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.521 ±       4.486    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        20.000                    ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5   1070204.256 ±    9227.633   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       560.253 ±       4.759  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       824.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       542.452 ±    1167.669  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       798.528 ±    1718.896    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        13.000                    ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     98133.895 ±    2073.848   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      3410.530 ±      71.976  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     54704.004 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.001 ±       0.003  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.013 ±       0.044    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      3406.834 ±       0.999  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     54646.047 ±    1165.268    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        25.000                counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        43.000                    ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                             128  thrpt    5    324924.674 ±    3749.498   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       510.389 ±       6.017  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      2472.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       542.528 ±    1167.832  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      2631.072 ±    5663.595    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        15.000                    ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    630967.251 ±    9533.896   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       481.052 ±       7.237  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1200.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       406.203 ±    1427.860  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1013.225 ±    3561.628    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±       1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.332 ±       2.861    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         3.000                counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        14.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5   1936264.942 ±   67960.821   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       895.562 ±      31.483  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       728.000 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       948.518 ±    1428.496  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       770.970 ±    1159.647    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         7.000                counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        24.000                    ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5   2104300.192 ±   36534.120   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5        ≈ 10⁻⁴                  B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5    339464.787 ±    8451.407   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       502.126 ±      12.674  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      2328.001 ±       0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       541.959 ±    1166.608  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      2515.288 ±    5414.845    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         4.000                counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        18.000                    ms
[info] Benchmark result is saved to jdk10.json
[success] Total time: 6954 s, completed May 7, 2018 4:29:52 AM
